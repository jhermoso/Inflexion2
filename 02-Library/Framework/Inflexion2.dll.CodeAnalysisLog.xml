<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files\microsoft visual studio 10.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="10.0">
 <Namespaces>
  <Namespace Name="GNU.Gettext">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'GNU.Gettext' with another namespace.</Issue>
    </Message>
    <Message Id="GNU" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="85" Level="Error">Correct the casing of 'GNU' in namespace name 'GNU.Gettext' by changing it to 'Gnu'.</Issue>
    </Message>
    <Message Id="Gettext" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Gettext' in namespace name 'GNU.Gettext'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Hexa.Core">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Hexa.Core' with another namespace.</Issue>
    </Message>
    <Message Id="Hexa" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Hexa' in namespace name 'Hexa.Core'.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.Domain.Extensions">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.Domain.Extensions' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.DynamicExtensions">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.DynamicExtensions' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.Extensions">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.Extensions' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.Infrastructure">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.Infrastructure' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.Logging">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.Logging' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
  <Namespace Name="Inflexion2.Security">
   <Messages>
    <Message TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
     <Issue Certainty="50" Level="Warning">Consider merging the types defined in 'Inflexion2.Security' with another namespace.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="E:\IDev\Pre\Inflexion2\00-Assemblies\Release\Inflexion2.dll">
   <Modules>
    <Module Name="inflexion2.dll">
     <Namespaces>
      <Namespace Name="GNU.Gettext">
       <Types>
        <Type Name="GettextResourceSet" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Certainty="60" Level="Error">'GettextResourceSet' appears to be a non-generic, strongly typed collection. Add an implementation to the instance of IEnumerable&lt;T&gt; where T is the underlying element type of 'GettextResourceSet'.</Issue>
          </Message>
          <Message Id="Gettext" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Gettext' in type name 'GettextResourceSet'.</Issue>
          </Message>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'GettextResourceSet' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#GetPluralString(System.String,System.String,System.Int64)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="513">'value', a variable, is cast to type 'string' multiple times in method 'GettextResourceSet.GetPluralString(string, string, long)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="517">'value', a variable, is cast to type 'string[]' multiple times in method 'GettextResourceSet.GetPluralString(string, string, long)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="msgid" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="510">In method 'GettextResourceSet.GetPluralString(string, string, long)', correct the spelling of 'msgid' in parameter name 'msgid' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="510">In method 'GettextResourceSet.GetPluralString(string, string, long)', correct the spelling of 'msgid' in parameter name 'msgidPlural' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="510">In method 'GettextResourceSet.GetPluralString(string, string, long)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetString(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="540">'value', a variable, is cast to type 'string' multiple times in method 'GettextResourceSet.GetString(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="546">'value', a variable, is cast to type 'string[]' multiple times in method 'GettextResourceSet.GetString(string)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="537">In member 'GettextResourceSet.GetString(string)', change parameter name 'msgid' to 'name' in order to match the identifier as it has been declared in 'ResourceSet.GetString(string)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetString(System.String,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="568">'value', a variable, is cast to type 'string' multiple times in method 'GettextResourceSet.GetString(string, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
             <Issue Name="Local" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="574">'value', a variable, is cast to type 'string[]' multiple times in method 'GettextResourceSet.GetString(string, bool)'. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant castclass instruction.</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="565">In member 'GettextResourceSet.GetString(string, bool)', change parameter name 'msgid' to 'name' in order to match the identifier as it has been declared in 'ResourceSet.GetString(string, bool)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PluralEval(System.Int64)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Eval" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="588">Correct the spelling of 'Eval' in member name 'GettextResourceSet.PluralEval(long)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="n" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Globalization" File="Gettext.cs" Line="588">In method 'GettextResourceSet.PluralEval(long)', consider providing a more meaningful name than parameter name 'n'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2">
       <Types>
        <Type Name="CantDeleteTransientException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Cant" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Replace the term 'Cant' in type name 'CantDeleteTransientException' with the preferred alternate 'Cannot'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ConcurrencyException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_UniqueId" Kind="Field" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning">It appears that field 'ConcurrencyException._UniqueId' is never used or is only ever assigned to. Use this field or remove it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Guard" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Against`1(System.Func`1&lt;System.Boolean&gt;,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="Guard.cs" Line="136">In externally visible method 'Guard.Against&lt;TException&gt;(Func&lt;bool&gt;, string)', validate parameter 'assertion' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Implements`1(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="Guard.cs" Line="153">In externally visible method 'Guard.Implements&lt;TInterface&gt;(object, string)', validate parameter 'instance' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InheritsFrom`1(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="Guard.cs" Line="185">In externally visible method 'Guard.InheritsFrom&lt;TBase&gt;(object, string)', validate parameter 'instance' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InheritsFrom`1(System.Type,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="Guard.cs" Line="199">In externally visible method 'Guard.InheritsFrom&lt;TBase&gt;(Type, string)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="HashHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CalculateSHA1Hash(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SHA" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="StringExtensions.cs" Line="30">Correct the casing of 'SHA' in member name 'HashHelper.CalculateSHA1Hash(this string)' by changing it to 'Sha'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="JSONExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="JSON" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'JSON' in type name 'JSONExtensions' by changing it to 'Json'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ToJSON(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="JSON" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="JSONExtensions.cs" Line="22">Correct the casing of 'JSON' in member name 'JSONExtensions.ToJSON(this object)' by changing it to 'Json'.</Issue>
            </Message>
            <Message Id="obj" TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="LanguageIndependentMemberParameter" Certainty="75" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="JSONExtensions.cs" Line="22">In member 'JSONExtensions.ToJSON(this object)', consider replacing the data type identifier 'obj' in parameter name 'obj' with a more generic term, such as 'value'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ServiceLocator" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Initialize(System.Action`2&lt;System.Type,System.Type&gt;,System.Action`2&lt;System.Type,System.Object&gt;,System.Func`2&lt;System.Type,System.Object&gt;,System.Func`2&lt;System.Type,System.Collections.Generic.IEnumerable`1&lt;System.Object&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="66">Consider a design where 'ServiceLocator.Initialize(Action&lt;Type, Type&gt;, Action&lt;Type, object&gt;, Func&lt;Type, object&gt;, Func&lt;Type, IEnumerable&lt;object&gt;&gt;)' doesn't nest generic type 'Func&lt;Type, IEnumerable&lt;object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterInstance`1(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="79">Consider a design where 'ServiceLocator.RegisterInstance&lt;I&gt;(object)' doesn't require explicit type parameter 'I' in any call to it.</Issue>
            </Message>
            <Message Id="I" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="79">On method 'ServiceLocator.RegisterInstance&lt;I&gt;(object)', consider providing a more meaningful name than generic type parameter name 'I'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="79">On method 'ServiceLocator.RegisterInstance&lt;I&gt;(object)', prefix generic type parameter name 'I' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#RegisterType`2()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="106">Consider a design where 'ServiceLocator.RegisterType&lt;I, T&gt;()' doesn't require explicit type parameter 'I' in any call to it.</Issue>
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="106">Consider a design where 'ServiceLocator.RegisterType&lt;I, T&gt;()' doesn't require explicit type parameter 'T' in any call to it.</Issue>
            </Message>
            <Message Id="I" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="106">On method 'ServiceLocator.RegisterType&lt;I, T&gt;()', consider providing a more meaningful name than generic type parameter name 'I'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="106">On method 'ServiceLocator.RegisterType&lt;I, T&gt;()', prefix generic type parameter name 'I' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryGetInstance`1()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="ServiceLocator" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\IoC" File="ServiceLocator.cs" Line="138">Correct the spelling of the unrecognized token 'ServiceLocator' in the literal '"ServiceLocator has not been initialized; I was trying to retrieve "'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="StringSlugExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.cctor()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="90" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="StringExtensions.cs" Line="83">Initialize all static fields in 'StringSlugExtension' when those fields are declared and remove the explicit static constructor.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Slugify(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Slugify" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="StringExtensions.cs" Line="102">Correct the spelling of 'Slugify' in member name 'StringSlugExtension.Slugify(this string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="StringExtensions.cs" Line="102">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'StringSlugExtension.Slugify(this string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="StringExtensions.cs" Line="102">In externally visible method 'StringSlugExtension.Slugify(this string)', validate parameter 'phrase' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Data">
       <Types>
        <Type Name="DatabaseManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#_CreateDatabase(System.Data.Common.DbProviderFactory,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="136">Because the behavior of 'string.Format(string, object)' could vary based on the current user's locale settings, replace this call in 'DatabaseManager._CreateDatabase(DbProviderFactory, string, string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_DatabaseExists(System.Data.Common.DbProviderFactory,System.String,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="265">Modify 'DatabaseManager._DatabaseExists(DbProviderFactory, string, string)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#_DropDatabase(System.Data.Common.DbProviderFactory,System.String,System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="provider" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="375">Parameter 'provider' of 'DatabaseManager._DropDatabase(DbProviderFactory, string, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="connectionString" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="375">'connectionString', a parameter declared in 'DatabaseManager._DropDatabase(DbProviderFactory, string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
            <Message Id="providerName" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="375">'providerName', a parameter declared in 'DatabaseManager._DropDatabase(DbProviderFactory, string, string)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#DbProviderFactory" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DatabaseManager.cs" Line="60">Correct the casing of 'Db' in member name 'DatabaseManager.DbProviderFactory' by changing it to 'DB'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#MsSqlProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Ms' in member name 'DatabaseManager.MsSqlProvider' by changing it to 'MS'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostgreSQLProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SQL' in member name 'DatabaseManager.PostgreSQLProvider' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Postgre" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Postgre' in member name 'DatabaseManager.PostgreSQLProvider' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SqlCe" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ce" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Ce' in member name 'DatabaseManager.SqlCe' by changing it to 'CE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SQLiteProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lite" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lite' in member name 'DatabaseManager.SQLiteProvider' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbProvider" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Db' in type name 'DbProvider' by changing it to 'DB'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#MsSqlProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ms" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Ms' in member name 'DbProvider.MsSqlProvider' by changing it to 'MS'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#PostgreSQLProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="SQL" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'SQL' in member name 'DbProvider.PostgreSQLProvider' by changing it to 'Sql'.</Issue>
            </Message>
            <Message Id="Postgre" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Postgre' in member name 'DbProvider.PostgreSQLProvider' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SqlCe" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ce" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'Ce' in member name 'DbProvider.SqlCe' by changing it to 'CE'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SQLiteProvider" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Lite" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Lite' in member name 'DbProvider.SQLiteProvider' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DbProviderExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Db" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="85" Level="Error">Correct the casing of 'Db' in type name 'DbProviderExtensions' by changing it to 'DB'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#ExecuteNonQuery(System.Data.Common.DbProviderFactory,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DbProviderExtensions.cs" Line="16">In externally visible method 'DbProviderExtensions.ExecuteNonQuery(this DbProviderFactory, string, string)', validate parameter 'provider' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ExecuteScalar(System.Data.Common.DbProviderFactory,System.String,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Data" File="DbProviderExtensions.cs" Line="32">In externally visible method 'DbProviderExtensions.ExecuteScalar(this DbProviderFactory, string, string)', validate parameter 'provider' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Domain">
       <Types>
        <Type Name="AggregateRoot`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanBeSaved()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\RootAgregate" File="AggregateRoot.cs" Line="51">Because the behavior of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[])' could vary based on the current user's locale settings, replace this call in 'AggregateRoot&lt;TEntity, TIdentifier&gt;.CanBeSaved()' with a call to 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'. If the result of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuditableAggregateRoot`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanBeSaved()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\RootAgregate\Validetable\Auditable" File="AuditableAggregateRoot.cs" Line="51">Because the behavior of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[])' could vary based on the current user's locale settings, replace this call in 'AuditableAggregateRoot&lt;TEntity, TIdentifier&gt;.CanBeSaved()' with a call to 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'. If the result of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuditableEntity`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AuditUpdate(System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable\Auditable" File="AuditableEntity.cs" Line="228">Because the behavior of 'Convert.ToString(string)' could vary based on the current user's locale settings, replace this call in 'AuditableEntity&lt;TEntity, TIdentifier&gt;.AuditUpdate(string)' with a call to 'Convert.ToString(string, IFormatProvider)'. If the result of 'Convert.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="AuditInfo" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.String,System.DateTime,System.Nullable`1&lt;System.DateTime&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\AuditInfo" File="AuditInfo.cs" Line="54">'AuditInfo.AuditInfo(string, string, DateTime, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AuditInfo..ctor(String, String, DateTime, Nullable&lt;DateTime&gt;)&#xD;&#xA;AuditInfo.set_CreatedBy(String):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\AuditInfo" File="AuditInfo.cs" Line="54">'AuditInfo.AuditInfo(string, string, DateTime, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AuditInfo..ctor(String, String, DateTime, Nullable&lt;DateTime&gt;)&#xD;&#xA;AuditInfo.set_CreatedTimestamp(DateTime):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\AuditInfo" File="AuditInfo.cs" Line="54">'AuditInfo.AuditInfo(string, string, DateTime, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AuditInfo..ctor(String, String, DateTime, Nullable&lt;DateTime&gt;)&#xD;&#xA;AuditInfo.set_UpdatedBy(String):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\AuditInfo" File="AuditInfo.cs" Line="54">'AuditInfo.AuditInfo(string, string, DateTime, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;AuditInfo..ctor(String, String, DateTime, Nullable&lt;DateTime&gt;)&#xD;&#xA;AuditInfo.set_UpdatedTimestamp(Nullable&lt;DateTime&gt;):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseEventStore" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetEventsForAggregate(System.Guid)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="BaseEventStore.cs" Line="19">Change 'List&lt;Event&gt;' in 'BaseEventStore.GetEventsForAggregate(Guid)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#SaveEvents(System.Guid,System.Collections.Generic.IEnumerable`1&lt;Inflexion2.Domain.Event&gt;,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="BaseEventStore.cs" Line="32">In externally visible method 'BaseEventStore.SaveEvents(Guid, IEnumerable&lt;Event&gt;, int)', validate parameter 'events' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BaseRepository`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Add(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="61">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.Add(TEntity)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "entity".</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="61">In member 'BaseRepository&lt;TEntity, TIdentifier&gt;.Add(TEntity)', change parameter name 'entity' to 'item' in order to match the identifier as it has been declared in 'IRepository&lt;TEntity, TIdentifier&gt;.Add(TEntity)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Attach(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="74">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.Attach(TEntity)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "entity".</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="74">In member 'BaseRepository&lt;TEntity, TIdentifier&gt;.Attach(TEntity)', change parameter name 'entity' to 'item' in order to match the identifier as it has been declared in 'IRepository&lt;TEntity, TIdentifier&gt;.Attach(TEntity)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetBySpec(Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="97">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetBySpec(ISpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "specification".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="101">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetBySpec(ISpecification&lt;TEntity&gt;)', validate parameter 'specification' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilteredElements(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="114">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements(Expression&lt;Func&lt;TEntity, bool&gt;&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "filter".</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="116">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements(Expression&lt;Func&lt;TEntity, bool&gt;&gt;)', validate parameter 'filter' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilteredElements`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">Replace method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "filter".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="138">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "orderByExpression".</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">Consider a design where 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, S&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">Consider a design where 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">On method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', consider providing a more meaningful name than generic type parameter name 'S'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="137">On method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', prefix generic type parameter name 'S' with 'T'.</Issue>
            </Message>
            <Message Id="orderByExpression" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="138">Correct the spelling of the unrecognized token 'orderByExpression' in the literal '"orderByExpression"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="140">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', validate parameter 'filter' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPagedElements(System.Int32,System.Int32,Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;,Inflexion2.Domain.Specification.IOrderBySpecification`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="206">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageIndex".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="207">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageSize".</Issue>
            </Message>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="208">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "orderBySpecification".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="209">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "specification".</Issue>
            </Message>
            <Message Id="orderBySpecification" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="208">Correct the spelling of the unrecognized token 'orderBySpecification' in the literal '"orderBySpecification"'.</Issue>
            </Message>
            <Message Id="pageIndex" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="206">Correct the spelling of the unrecognized token 'pageIndex' in the literal '"pageIndex"'.</Issue>
            </Message>
            <Message Id="pageSize" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="207">Correct the spelling of the unrecognized token 'pageSize' in the literal '"pageSize"'.</Issue>
            </Message>
            <Message Id="1#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="206">In member 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)', change parameter name 'pageSize' to 'pageCount' in order to match the identifier as it has been declared in 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)'.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="223">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)', validate parameter 'specification' before using it.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="211">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements(int, int, ISpecification&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)', validate parameter 'orderBySpecification' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPagedElements`1(System.Int32,System.Int32,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">Replace method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageIndex".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="165">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageSize".</Issue>
            </Message>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="167">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "filter".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="166">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "orderByExpression".</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">Consider a design where 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, S&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">Consider a design where 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">On method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', consider providing a more meaningful name than generic type parameter name 'S'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">On method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', prefix generic type parameter name 'S' with 'T'.</Issue>
            </Message>
            <Message Id="orderByExpression" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="166">Correct the spelling of the unrecognized token 'orderByExpression' in the literal '"orderByExpression"'.</Issue>
            </Message>
            <Message Id="pageIndex" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="164">Correct the spelling of the unrecognized token 'pageIndex' in the literal '"pageIndex"'.</Issue>
            </Message>
            <Message Id="pageSize" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="165">Correct the spelling of the unrecognized token 'pageSize' in the literal '"pageSize"'.</Issue>
            </Message>
            <Message Id="3" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="169">In externally visible method 'BaseRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', validate parameter 'orderByExpression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Modify(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="237">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.Modify(TEntity)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "entity".</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="237">In member 'BaseRepository&lt;TEntity, TIdentifier&gt;.Modify(TEntity)', change parameter name 'entity' to 'item' in order to match the identifier as it has been declared in 'IRepository&lt;TEntity, TIdentifier&gt;.Modify(TEntity)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Remove(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.IsNotNull(System.Object,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="251">Method 'BaseRepository&lt;TEntity, TIdentifier&gt;.Remove(TEntity)' passes a literal string as parameter 'message' of a call to 'Guard.IsNotNull(object, string)'. Retrieve the following string(s) from a resource table instead: "entity".</Issue>
            </Message>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories" File="BaseRepository.cs" Line="251">In member 'BaseRepository&lt;TEntity, TIdentifier&gt;.Remove(TEntity)', change parameter name 'entity' to 'item' in order to match the identifier as it has been declared in 'IRepository&lt;TEntity, TIdentifier&gt;.Remove(TEntity)'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BusinessAggregateRoot`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CanBeSaved()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\RootAgregate\Validetable\Auditable\Business" File="BusinessAggregateRoot.cs" Line="51">Because the behavior of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[])' could vary based on the current user's locale settings, replace this call in 'BusinessAggregateRoot&lt;TEntity, TIdentifier&gt;.CanBeSaved()' with a call to 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'. If the result of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="BusinessEntity`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(!1)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable\Auditable\Business" File="BusinessEntity.cs" Line="51">'BusinessEntity&lt;TEntity, TIdentifier&gt;.BusinessEntity(TIdentifier)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;BusinessEntity&lt;TEntity, TIdentifier&gt;..ctor(TIdentifier)&#xD;&#xA;Entity&lt;TEntity, TIdentifier&gt;.set_Id(TIdentifier):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable\Auditable\Business" File="BusinessEntity.cs" Line="51">'BusinessEntity&lt;TEntity, TIdentifier&gt;.BusinessEntity(TIdentifier)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;BusinessEntity&lt;TEntity, TIdentifier&gt;..ctor(TIdentifier)&#xD;&#xA;Entity&lt;TEntity, TIdentifier&gt;.set_Id(TIdentifier):Void&#xD;&#xA;BusinessEntity&lt;TEntity, TIdentifier&gt;.set_IsActive(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable\Auditable\Business" File="BusinessEntity.cs" Line="60">'BusinessEntity&lt;TEntity, TIdentifier&gt;.BusinessEntity()' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;BusinessEntity&lt;TEntity, TIdentifier&gt;..ctor()&#xD;&#xA;BusinessEntity&lt;TEntity, TIdentifier&gt;.set_IsActive(Boolean):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ChildrenRelationshipDeleteBehaviorAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'ChildrenRelationshipDeleteBehaviorAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'attributeValue' of Attribute 'ChildrenRelationshipDeleteBehaviorAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Behavior" Kind="Field" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ChildrenRelationshipDeleteBehaviorAttribute.Behavior' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateGreaterThanAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'basePropertyName' of Attribute 'DateGreaterThanAttribute'.</Issue>
          </Message>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'DateGreaterThanAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="False">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Atributtes" File="DateGreaterThanAttribute.cs" Line="79">In externally visible method 'DateGreaterThanAttribute.IsValid(object, ValidationContext)', validate parameter 'validationContext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DateTimeExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Compose(System.DateTime,System.Nullable`1&lt;System.DateTime&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="DateTimeExtension.cs" Line="59">In method 'DateTimeExtension.Compose(this DateTime, DateTime?)', correct the spelling of 'dia' in parameter name 'dia' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="hora" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="DateTimeExtension.cs" Line="59">In method 'DateTimeExtension.Compose(this DateTime, DateTime?)', correct the spelling of 'hora' in parameter name 'hora' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ComposeForSchedule(System.DateTime,System.Nullable`1&lt;System.DateTime&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="dia" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="DateTimeExtension.cs" Line="110">In method 'DateTimeExtension.ComposeForSchedule(this DateTime, DateTime?)', correct the spelling of 'dia' in parameter name 'dia' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="hora" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="DateTimeExtension.cs" Line="110">In method 'DateTimeExtension.ComposeForSchedule(this DateTime, DateTime?)', correct the spelling of 'hora' in parameter name 'hora' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="DateTimeExtension.cs" Line="210">In externally visible method 'DateTimeExtension.WeekNumber(this DateTime, DateTimeFormatInfo)', validate parameter 'dateTimeFormatInfo' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Delete" Kind="Enum" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Name="NotFlagsNoZeroValue" Certainty="95" Level="CriticalError">Add a member to 'Delete' that has a value of zero with a suggested name of 'None'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="DomainEvents" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Raise(System.Object[])" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Events" File="DomainEvents.cs" Line="90">Consider making 'DomainEvents.Raise(object[])' an event.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Events" File="DomainEvents.cs" Line="91">In externally visible method 'DomainEvents.Raise(object[])', validate parameter 'events' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Raise`1(!!0)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Events" File="DomainEvents.cs" Line="69">Consider making 'DomainEvents.Raise&lt;T&gt;(T)' an event.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DomainSignatureAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'DomainSignatureAttribute', if possible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EmptyEventPublisher" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Publish`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Logging.ILogger.DebugFormat(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Events\Publisher" File="EmptyEventPublisher.cs" Line="35">Because the behavior of 'ILogger.DebugFormat(string, params object[])' could vary based on the current user's locale settings, replace this call in 'EmptyEventPublisher.Publish&lt;T&gt;(T)' with a call to 'ILogger.DebugFormat(IFormatProvider, string, params object[])'. If the result of 'ILogger.DebugFormat(IFormatProvider, string, params object[])' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Entity`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Name="Operator" Certainty="75" Level="Error">'Entity&lt;TEntity, TIdentifier&gt;' should define operator '!=' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Entity&lt;TEntity, TIdentifier&gt;' should define operator '&lt;' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Entity&lt;TEntity, TIdentifier&gt;' should define operator '==' since it implements IComparable.</Issue>
           <Issue Name="Operator" Certainty="75" Level="Error">'Entity&lt;TEntity, TIdentifier&gt;' should define operator '&gt;' since it implements IComparable.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(!1)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="142">'Entity&lt;TEntity, TIdentifier&gt;.Entity(TIdentifier)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Entity&lt;TEntity, TIdentifier&gt;..ctor(TIdentifier)&#xD;&#xA;Entity&lt;TEntity, TIdentifier&gt;.set_Id(TIdentifier):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(Inflexion2.Domain.IEntity`1&lt;!1&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="222">In member 'Entity&lt;TEntity, TIdentifier&gt;.CompareTo(IEntity&lt;TIdentifier&gt;)', change parameter name 'entityIdentifier' to 'other' in order to match the identifier as it has been declared in 'IComparable&lt;IEntity&lt;TIdentifier&gt;&gt;.CompareTo(IEntity&lt;TIdentifier&gt;)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CompareTo(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="185">In member 'Entity&lt;TEntity, TIdentifier&gt;.CompareTo(object)', change parameter name 'element' to 'obj' in order to match the identifier as it has been declared in 'IComparable.CompareTo(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetSignatureProperties()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="403">Change 'Entity&lt;TEntity, TIdentifier&gt;.GetSignatureProperties()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeSpecificSignatureProperties()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="459">Change 'Entity&lt;TEntity, TIdentifier&gt;.GetTypeSpecificSignatureProperties()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetTypeUnproxied()" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="Unproxied" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="429">Correct the spelling of 'Unproxied' in member name 'Entity&lt;TEntity, TIdentifier&gt;.GetTypeUnproxied()' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="Entity.cs" Line="429">Change 'Entity&lt;TEntity, TIdentifier&gt;.GetTypeUnproxied()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EntityForbiddenDeleteAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'EntityForbiddenDeleteAttribute', if possible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Event" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Event" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="95" Level="Error">Rename type 'Event' so that it no longer conflicts with the reserved language keyword 'Event'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="EventDescriptor" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Guid,Inflexion2.Domain.Event,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="EventDescriptor.cs" Line="14">'EventDescriptor.EventDescriptor(Guid, Event, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;EventDescriptor..ctor(Guid, Event, Int32)&#xD;&#xA;EventDescriptor.set_EventData(Event):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="EventDescriptor.cs" Line="14">'EventDescriptor.EventDescriptor(Guid, Event, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;EventDescriptor..ctor(Guid, Event, Int32)&#xD;&#xA;EventDescriptor.set_Id(Guid):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="EventDescriptor.cs" Line="14">'EventDescriptor.EventDescriptor(Guid, Event, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;EventDescriptor..ctor(Guid, Event, Int32)&#xD;&#xA;EventDescriptor.set_Version(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventSourcedEntity" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetUncommittedChanges()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="EventSourcedEntity.cs" Line="40">Change 'EventSourcedEntity.GetUncommittedChanges()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#LoadsFromHistory(System.Collections.Generic.IEnumerable`1&lt;Inflexion2.Domain.Event&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities" File="EventSourcedEntity.cs" Line="45">In externally visible method 'EventSourcedEntity.LoadsFromHistory(IEnumerable&lt;Event&gt;)', validate parameter 'history' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="EventSourcedRepository`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetById(System.Guid)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="EventSourcedRepository.cs" Line="17">In member 'EventSourcedRepository&lt;T&gt;.GetById(Guid)', change parameter name 'Id' to 'id' in order to match the identifier as it has been declared in 'IEventSourcedRepository&lt;T&gt;.GetById(Guid)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Save(Inflexion2.Domain.EventSourcedEntity,System.Int32)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Repositories\EventSourcing" File="EventSourcedRepository.cs" Line="25">In externally visible method 'EventSourcedRepository&lt;T&gt;.Save(EventSourcedEntity, int)', validate parameter 'aggregate' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GreaterOrEqualThanCurrentDateAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'GreaterOrEqualThanCurrentDateAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'GreaterOrEqualThanCurrentDateAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Atributtes" File="GreaterOrEqualThanCurrentDateAttribute.cs" Line="69">In externally visible method 'GreaterOrEqualThanCurrentDateAttribute.IsValid(object, ValidationContext)', validate parameter 'validationContext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="GreaterThanAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'GreaterThanAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'basePropertyName' of Attribute 'GreaterThanAttribute'.</Issue>
          </Message>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'GreaterThanAttribute'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)" Kind="Method" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Atributtes" File="GreaterThanAttribute.cs" Line="81">In externally visible method 'GreaterThanAttribute.IsValid(object, ValidationContext)', validate parameter 'validationContext' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IConsumeEvent`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Consume(!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="event" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'IConsumeEvent&lt;T&gt;.Consume(T)', rename parameter 'event' so that it no longer conflicts with the reserved language keyword 'event'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IEventPublisher" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Publish`1(!!0)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="event" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameter" Certainty="95" Level="Error">In virtual/interface member 'IEventPublisher.Publish&lt;T&gt;(T)', rename parameter 'event' so that it no longer conflicts with the reserved language keyword 'event'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IEventStore" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetEventsForAggregate(System.Guid)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;Event&gt;' in 'IEventStore.GetEventsForAggregate(Guid)' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Inflector" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AddUncountable(System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="258">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Inflector.AddUncountable(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ApplyRules(System.Collections.Generic.List`1&lt;Inflexion2.Domain.Inflector+Rule&gt;,System.String)" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="265">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Inflector.ApplyRules(List&lt;Inflector.Rule&gt;, string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Camelize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Camelize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="105">Correct the spelling of 'Camelize' in member name 'Inflector.Camelize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Capitalize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="115">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Inflector.Capitalize(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="115">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Inflector.Capitalize(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="115">In externally visible method 'Inflector.Capitalize(string)', validate parameter 'word' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Dasherize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Dasherize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="125">Correct the spelling of 'Dasherize' in member name 'Inflector.Dasherize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="125">In externally visible method 'Inflector.Dasherize(string)', validate parameter 'underscoredWord' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Ordinalize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Ordinalize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="147">Correct the spelling of 'Ordinalize' in member name 'Inflector.Ordinalize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.Int32.Parse(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="147">Because the behavior of 'int.Parse(string)' could vary based on the current user's locale settings, replace this call in 'Inflector.Ordinalize(string)' with a call to 'int.Parse(string, IFormatProvider)'. If the result of 'int.Parse(string, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Pascalize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Pascalize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="175">Correct the spelling of 'Pascalize' in member name 'Inflector.Pascalize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="180">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Inflector.Pascalize(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Titleize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Titleize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="211">Correct the spelling of 'Titleize' in member name 'Inflector.Titleize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToUpper" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="216">Because the behavior of 'string.ToUpper()' could vary based on the current user's locale settings, replace this call in 'Inflector.Titleize(string)' with a call to 'string.ToUpper(CultureInfo)'. If the result of 'string.ToUpper(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Uncapitalize(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Uncapitalize" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="227">Correct the spelling of 'Uncapitalize' in member name 'Inflector.Uncapitalize(string)' or remove it entirely if it represents any sort of Hungarian notation.</Issue>
            </Message>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="227">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Inflector.Uncapitalize(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="227">In externally visible method 'Inflector.Uncapitalize(string)', validate parameter 'word' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Underscore(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Inflector" File="Inflector.cs" Line="237">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'Inflector.Underscore(string)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Interval" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Nullable`1&lt;System.DateTime&gt;,System.Nullable`1&lt;System.DateTime&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\Interval" File="Interval.cs" Line="66">'Interval.Interval(DateTime?, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Interval..ctor(Nullable&lt;DateTime&gt;, Nullable&lt;DateTime&gt;)&#xD;&#xA;Interval.set_FromTime(Nullable&lt;DateTime&gt;):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\Interval" File="Interval.cs" Line="66">'Interval.Interval(DateTime?, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Interval..ctor(Nullable&lt;DateTime&gt;, Nullable&lt;DateTime&gt;)&#xD;&#xA;Interval.set_ToTime(Nullable&lt;DateTime&gt;):Void</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Nullable`1&lt;System.DateTime&gt;,System.TimeSpan)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\Interval" File="Interval.cs" Line="87">'Interval.Interval(DateTime?, TimeSpan)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Interval..ctor(Nullable&lt;DateTime&gt;, TimeSpan)&#xD;&#xA;Interval.set_FromTime(Nullable&lt;DateTime&gt;):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IRepository`2" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetAll()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'IRepository&lt;TEntity, TIdentifier&gt;.GetAll()' to a property if appropriate.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilteredElements(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements(Expression&lt;Func&lt;TEntity, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetFilteredElements`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, S&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', consider providing a more meaningful name than generic type parameter name 'S'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepository&lt;TEntity, TIdentifier&gt;.GetFilteredElements&lt;S&gt;(Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', prefix generic type parameter name 'S' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPagedElements`1(System.Int32,System.Int32,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,!!0&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error">Replace method 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, S&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
            <Message Id="S" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning">On method 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', consider providing a more meaningful name than generic type parameter name 'S'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error">On method 'IRepository&lt;TEntity, TIdentifier&gt;.GetPagedElements&lt;S&gt;(int, int, Expression&lt;Func&lt;TEntity, bool&gt;&gt;, Expression&lt;Func&lt;TEntity, S&gt;&gt;, bool)', prefix generic type parameter name 'S' with 'T'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="IValueObject`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="90" Level="Warning">Define a custom attribute to replace 'IValueObject&lt;TValueObject&gt;'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="LogicalDeleteAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'LogicalDeleteAttribute', if possible.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="PagedElements`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'PagedElements&lt;TEntity&gt;' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Elements" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning">Change 'PagedElements&lt;TEntity&gt;.Elements' to be read-only by removing the property setter.</Issue>
            </Message>
            <Message TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error">Change 'List&lt;TEntity&gt;' in 'PagedElements&lt;TEntity&gt;.Elements' to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PagingExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Page`1(System.Collections.Generic.IEnumerable`1&lt;!!0&gt;,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PagingExtensions.cs" Line="29">Method 'PagingExtensions.Page&lt;T&gt;(this IEnumerable&lt;T&gt;, int, int)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageNumber".</Issue>
            </Message>
            <Message Id="pageNumber" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PagingExtensions.cs" Line="29">Correct the spelling of the unrecognized token 'pageNumber' in the literal '"pageNumber"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Page`1(System.Linq.IQueryable`1&lt;!!0&gt;,System.Int32,System.Int32)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PagingExtensions.cs" Line="22">Method 'PagingExtensions.Page&lt;T&gt;(this IQueryable&lt;T&gt;, int, int)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "pageNumber".</Issue>
            </Message>
            <Message Id="pageNumber" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PagingExtensions.cs" Line="22">Correct the spelling of the unrecognized token 'pageNumber' in the literal '"pageNumber"'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PropertyExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetPropertyDescription(System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="60">In externally visible method 'PropertyExtension.GetPropertyDescription(this object, string)', validate parameter 'structure' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetPropertyName`2(!!0,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,!!1&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">Consider changing the type of parameter 'expression' in 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)' from 'Expression&lt;Func&lt;T, R&gt;&gt;' to its base type 'LambdaExpression'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">Consider a design where 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, R&gt;&gt;'.</Issue>
            </Message>
            <Message Id="R" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">On method 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)', consider providing a more meaningful name than generic type parameter name 'R'.</Issue>
            </Message>
            <Message Id="T" TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="MethodTypeParameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">On method 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)', prefix generic type parameter name 'R' with 'T'.</Issue>
            </Message>
            <Message Id="objectParameter" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">Parameter 'objectParameter' of 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PropertyExtension.cs" Line="100">In externally visible method 'PropertyExtension.GetPropertyName&lt;T, R&gt;(this T, Expression&lt;Func&lt;T, R&gt;&gt;)', validate parameter 'expression' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Range" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Int32,System.Int32)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\Range" File="Range.cs" Line="44">'Range.Range(int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Range..ctor(Int32, Int32)&#xD;&#xA;Range.set_FinalValue(Int32):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\Range" File="Range.cs" Line="44">'Range.Range(int, int)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;Range..ctor(Int32, Int32)&#xD;&#xA;Range.set_InitialValue(Int32):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="UnitOfWorkScope" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="CSharp2_0" Certainty="90" Level="Error">Because type 'UnitOfWorkScope' contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Start`1()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\IUnitOfWork" File="UnitOfWorkScope.cs" Line="21">Consider a design where 'UnitOfWorkScope.Start&lt;TUnitOfWork&gt;()' doesn't require explicit type parameter 'TUnitOfWork' in any call to it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidatableAggregateRoot`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Validatable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Validatable' in type name 'ValidatableAggregateRoot&lt;TEntity, TIdentifier&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#CanBeSaved()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\RootAgregate\Validetable" File="ValidatableAggregateRoot.cs" Line="51">Because the behavior of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[])' could vary based on the current user's locale settings, replace this call in 'ValidatableAggregateRoot&lt;TEntity, TIdentifier&gt;.CanBeSaved()' with a call to 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'. If the result of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidatableEntity`2" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Validatable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Validatable' in type name 'ValidatableEntity&lt;TEntity, TIdentifier&gt;'.</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#Validate(Inflexion2.Domain.Validation.IValidator`1&lt;Inflexion2.Domain.Entity`2&lt;!0,!1&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable" File="ValidatableEntity.cs" Line="89">Consider a design where 'ValidatableEntity&lt;TEntity, TIdentifier&gt;.Validate(IValidator&lt;Entity&lt;TEntity, TIdentifier&gt;&gt;)' doesn't nest generic type 'IValidator&lt;Entity&lt;TEntity, TIdentifier&gt;&gt;'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable" File="ValidatableEntity.cs" Line="89">In externally visible method 'ValidatableEntity&lt;TEntity, TIdentifier&gt;.Validate(IValidator&lt;Entity&lt;TEntity, TIdentifier&gt;&gt;)', validate parameter 'validator' before using it.</Issue>
            </Message>
            <Message Id="validator" TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Parameter" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable" File="ValidatableEntity.cs" Line="89">'validator', a parameter declared in 'ValidatableEntity&lt;TEntity, TIdentifier&gt;.Validate(IValidator&lt;Entity&lt;TEntity, TIdentifier&gt;&gt;)', has the same name as an instance field on the type. Change the name of one of these items.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Validator" Kind="Property" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\EntityDefinitions\Entities\Validetable" File="ValidatableEntity.cs" Line="39">Consider a design where 'ValidatableEntity&lt;TEntity, TIdentifier&gt;.Validator' doesn't nest generic type 'IValidator&lt;Entity&lt;TEntity, TIdentifier&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidPeriod" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Nullable`1&lt;System.DateTime&gt;,System.Nullable`1&lt;System.DateTime&gt;)" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\ValidPeriod" File="ValidPeriod.cs" Line="44">'ValidPeriod.ValidPeriod(DateTime?, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ValidPeriod..ctor(Nullable&lt;DateTime&gt;, Nullable&lt;DateTime&gt;)&#xD;&#xA;ValidPeriod.set_FromDate(Nullable&lt;DateTime&gt;):Void</Issue>
             <Issue Certainty="95" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\InternalObjectsValues\ValidPeriod" File="ValidPeriod.cs" Line="44">'ValidPeriod.ValidPeriod(DateTime?, DateTime?)' contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: &#xD;&#xA;&#xD;&#xA;ValidPeriod..ctor(Nullable&lt;DateTime&gt;, Nullable&lt;DateTime&gt;)&#xD;&#xA;ValidPeriod.set_ToDate(Nullable&lt;DateTime&gt;):Void</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueObject" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0#" TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="69">In member 'ValueObject.Equals(object)', change parameter name 'other' to 'obj' in order to match the identifier as it has been declared in 'object.Equals(object)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Equality(Inflexion2.Domain.ValueObject,Inflexion2.Domain.ValueObject)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="57">In method 'ValueObject.operator ==(ValueObject, ValueObject)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="57">In method 'ValueObject.operator ==(ValueObject, ValueObject)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Inequality(Inflexion2.Domain.ValueObject,Inflexion2.Domain.ValueObject)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="46">In method 'ValueObject.operator !=(ValueObject, ValueObject)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="46">In method 'ValueObject.operator !=(ValueObject, ValueObject)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#reflectingFlags" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ValueObject.reflectingFlags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'ValueObject.reflectingFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValueObject`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#op_Equality(Inflexion2.Domain.ValueObject`1&lt;!0&gt;,Inflexion2.Domain.ValueObject`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="171">In method 'ValueObject&lt;T&gt;.operator ==(ValueObject&lt;T&gt;, ValueObject&lt;T&gt;)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="171">In method 'ValueObject&lt;T&gt;.operator ==(ValueObject&lt;T&gt;, ValueObject&lt;T&gt;)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Inequality(Inflexion2.Domain.ValueObject`1&lt;!0&gt;,Inflexion2.Domain.ValueObject`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="x" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="159">In method 'ValueObject&lt;T&gt;.operator !=(ValueObject&lt;T&gt;, ValueObject&lt;T&gt;)', consider providing a more meaningful name than parameter name 'x'.</Issue>
            </Message>
            <Message Id="y" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\ValueObjectDefinition" File="ValueObject.cs" Line="159">In method 'ValueObject&lt;T&gt;.operator !=(ValueObject&lt;T&gt;, ValueObject&lt;T&gt;)', consider providing a more meaningful name than parameter name 'y'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#reflectingFlags" Kind="Field" Static="False" Accessibility="Family" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Error">Because field 'ValueObject&lt;T&gt;.reflectingFlags' is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Issue>
            </Message>
            <Message Id="Flags" TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberNoAlternate" Certainty="95" Level="Error">Replace the term 'Flags' in member name 'ValueObject&lt;T&gt;.reflectingFlags' with an appropriate alternate or remove it entirely.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Domain.Extensions">
       <Types>
        <Type Name="EnumExtension" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetDescription`1(!!0,System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="structure" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="51">Parameter 'structure' of 'EnumExtension.GetDescription&lt;TEnum&gt;(this TEnum, Enum)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="51">In externally visible method 'EnumExtension.GetDescription&lt;TEnum&gt;(this TEnum, Enum)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEnumMemberValue(System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="121">In externally visible method 'EnumExtension.GetEnumMemberValue(this Enum)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetEnumMemberValue`1(!!0,System.Enum)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="structure" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="97">Parameter 'structure' of 'EnumExtension.GetEnumMemberValue&lt;TEnum&gt;(this TEnum, Enum)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="105">In externally visible method 'EnumExtension.GetEnumMemberValue&lt;TEnum&gt;(this TEnum, Enum)', validate parameter 'value' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetNameFromEnumMemberValue`1(!!0,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="structure" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="197">Parameter 'structure' of 'EnumExtension.GetNameFromEnumMemberValue&lt;TEnum&gt;(this TEnum, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#GetValueFromDescription`1(!!0,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="structure" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="EnumExtension.cs" Line="247">Parameter 'structure' of 'EnumExtension.GetValueFromDescription&lt;TEnum&gt;(this TEnum, string)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Domain.Specification">
       <Types>
        <Type Name="AndSpecification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;,Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="AndSpecification.cs" Line="66">Method 'AndSpecification&lt;TEntity&gt;.AndSpecification(ISpecification&lt;TEntity&gt;, ISpecification&lt;TEntity&gt;)' passes 'Left Specification is null.' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="AndSpecification.cs" Line="71">Method 'AndSpecification&lt;TEntity&gt;.AndSpecification(ISpecification&lt;TEntity&gt;, ISpecification&lt;TEntity&gt;)' passes 'Right Specification is null.' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="DirectSpecification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="DirectSpecification.cs" Line="49">Consider a design where 'DirectSpecification&lt;TEntity&gt;.DirectSpecification(Expression&lt;Func&lt;TEntity, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ExpressionBuilder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#And`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="45">Consider a design where 'ExpressionBuilder.And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="45">Consider a design where 'ExpressionBuilder.And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="45">Consider a design where 'ExpressionBuilder.And&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Compose`1(System.Linq.Expressions.Expression`1&lt;!!0&gt;,System.Linq.Expressions.Expression`1&lt;!!0&gt;,System.Func`3&lt;System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="74">Consider changing the type of parameter 'first' in 'ExpressionBuilder.Compose&lt;T&gt;(this Expression&lt;T&gt;, Expression&lt;T&gt;, Func&lt;Expression, Expression, Expression&gt;)' from 'Expression&lt;T&gt;' to its base type 'LambdaExpression'. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="74">In externally visible method 'ExpressionBuilder.Compose&lt;T&gt;(this Expression&lt;T&gt;, Expression&lt;T&gt;, Func&lt;Expression, Expression, Expression&gt;)', validate parameter 'first' before using it.</Issue>
            </Message>
            <Message Id="2" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="79">In externally visible method 'ExpressionBuilder.Compose&lt;T&gt;(this Expression&lt;T&gt;, Expression&lt;T&gt;, Func&lt;Expression, Expression, Expression&gt;)', validate parameter 'merge' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Or`1(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!!0,System.Boolean&gt;&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="104">Consider a design where 'ExpressionBuilder.Or&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="104">Consider a design where 'ExpressionBuilder.Or&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="ExpressionBuilder.cs" Line="104">Consider a design where 'ExpressionBuilder.Or&lt;T&gt;(this Expression&lt;Func&lt;T, bool&gt;&gt;, Expression&lt;Func&lt;T, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;T, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Filter" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Create(System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="SpecificationModel.cs" Line="45">Modify 'Filter.Create(string)' to catch a more specific exception than 'object' or rethrow the exception.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#groupOp" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="group" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'group' in member name 'Filter.groupOp' by changing it to 'Group'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#rules" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="rules" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'rules' in member name 'Filter.rules' by changing it to 'Rules'.</Issue>
            </Message>
            <Message TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="50" Level="Warning">Change 'Filter.rules' to return a collection or make it a method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ISpecification`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#IsSatisfiedBy()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError">Consider a design where 'ISpecification&lt;TEntity&gt;.IsSatisfiedBy()' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LinqExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateSpecification`1(System.String,System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="SpecificationModel.cs" Line="80">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'LinqExtensions.CreateSpecification&lt;T&gt;(string, object, string)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToSpecification`1(Inflexion2.Domain.Specification.SpecificationModel,Inflexion2.Domain.Specification.ISpecification`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.ToLower" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="SpecificationModel.cs" Line="209">Because the behavior of 'string.ToLower()' could vary based on the current user's locale settings, replace this call in 'LinqExtensions.ToSpecification&lt;T&gt;(this SpecificationModel, ISpecification&lt;T&gt;)' with a call to 'string.ToLower(CultureInfo)'. If the result of 'string.ToLower(CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IsNullOrEmpty" Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="SpecificationModel.cs" Line="201">Replace the call to 'string.operator !=(string, string)' in 'LinqExtensions.ToSpecification&lt;T&gt;(this SpecificationModel, ISpecification&lt;T&gt;)' with a call to 'String.IsNullOrEmpty'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="SpecificationModel.cs" Line="199">In externally visible method 'LinqExtensions.ToSpecification&lt;T&gt;(this SpecificationModel, ISpecification&lt;T&gt;)', validate parameter 'specificationModel' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="NotSpecification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Boolean&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="NotSpecification.cs" Line="72">Consider a design where 'NotSpecification&lt;TEntity&gt;.NotSpecification(Expression&lt;Func&lt;TEntity, bool&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, bool&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OrderBySpecification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="87">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="76">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;,System.Boolean,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="50">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool, Expression&lt;Func&lt;TEntity, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="50">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool, Expression&lt;Func&lt;TEntity, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;,System.Boolean,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;,System.Boolean)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentNullException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="34">Method 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool, Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Expected a non null expression as a predicate for the specification.".</Issue>
            </Message>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="32">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool, Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="32">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool, Expression&lt;Func&lt;TEntity, object&gt;&gt;, bool)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;,System.Linq.Expressions.Expression`1&lt;System.Func`2&lt;!0,System.Object&gt;&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="63">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, Expression&lt;Func&lt;TEntity, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
             <Issue Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrderBySpecification.cs" Line="63">Consider a design where 'OrderBySpecification&lt;TEntity&gt;.OrderBySpecification(Expression&lt;Func&lt;TEntity, object&gt;&gt;, Expression&lt;Func&lt;TEntity, object&gt;&gt;)' doesn't nest generic type 'Expression&lt;Func&lt;TEntity, object&gt;&gt;'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OrderBySpecificationExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#OrderBySpecification`1(System.Linq.IQueryable`1&lt;!!0&gt;,Inflexion2.Domain.Specification.IOrderBySpecification`1&lt;!!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentNullException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="IOrderBySpecification.cs" Line="33">Method 'OrderBySpecificationExtensions.OrderBySpecification&lt;TEntity&gt;(this IQueryable&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "orderBy".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="IOrderBySpecification.cs" Line="32">Method 'OrderBySpecificationExtensions.OrderBySpecification&lt;TEntity&gt;(this IQueryable&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "query".</Issue>
            </Message>
            <Message Id="orderBy" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="IOrderBySpecification.cs" Line="33">Correct the spelling of the unrecognized token 'orderBy' in the literal '"orderBy"'.</Issue>
            </Message>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="IOrderBySpecification.cs" Line="35">In externally visible method 'OrderBySpecificationExtensions.OrderBySpecification&lt;TEntity&gt;(this IQueryable&lt;TEntity&gt;, IOrderBySpecification&lt;TEntity&gt;)', validate parameter 'orderBy' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="OrSpecification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;,Inflexion2.Domain.Specification.ISpecification`1&lt;!0&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrSpecification.cs" Line="64">Method 'OrSpecification&lt;TEntity&gt;.OrSpecification(ISpecification&lt;TEntity&gt;, ISpecification&lt;TEntity&gt;)' passes 'Left Specification is null.' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
             <Issue Name="IncorrectParameterName" Certainty="95" Level="CriticalError" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="OrSpecification.cs" Line="69">Method 'OrSpecification&lt;TEntity&gt;.OrSpecification(ISpecification&lt;TEntity&gt;, ISpecification&lt;TEntity&gt;)' passes 'Right Specification is null.' as the 'paramName' argument to a 'ArgumentNullException' constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ParameterRebinder" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Rebinder" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Rebinder' in type name 'ParameterRebinder'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="Rule" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#data" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="data" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'data' in member name 'Rule.data' by changing it to 'Data'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#field" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="field" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'field' in member name 'Rule.field' by changing it to 'Field'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op" Kind="Property" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="op" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="85" Level="Error">Correct the casing of 'op' in member name 'Rule.op' by changing it to 'OP'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="Specification`1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#op_BitwiseAnd(Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;,Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="69">Provide a method named 'BitwiseAnd' as a friendly alternate for operator 'Specification&lt;TEntity&gt;.operator &amp;(Specification&lt;TEntity&gt;, Specification&lt;TEntity&gt;)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_BitwiseOr(Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;,Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="130">Provide a method named 'BitwiseOr' as a friendly alternate for operator 'Specification&lt;TEntity&gt;.operator |(Specification&lt;TEntity&gt;, Specification&lt;TEntity&gt;)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_False(Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Property" Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="87">Provide a property named 'IsTrue' as a friendly alternate for operator 'Specification&lt;TEntity&gt;.operator false(Specification&lt;TEntity&gt;)'.</Issue>
            </Message>
            <Message Id="specification" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="87">Parameter 'specification' of 'Specification&lt;TEntity&gt;.operator false(Specification&lt;TEntity&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_LogicalNot(Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="44">Provide a method named 'LogicalNot' as a friendly alternate for operator 'Specification&lt;TEntity&gt;.operator !(Specification&lt;TEntity&gt;)'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_True(Inflexion2.Domain.Specification.Specification`1&lt;!0&gt;)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="Property" Certainty="50" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="105">Provide a property named 'IsTrue' as a friendly alternate for operator 'Specification&lt;TEntity&gt;.operator true(Specification&lt;TEntity&gt;)'.</Issue>
            </Message>
            <Message Id="specification" TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Especification" File="Specification.cs" Line="105">Parameter 'specification' of 'Specification&lt;TEntity&gt;.operator true(Specification&lt;TEntity&gt;)' is never used. Remove the parameter or use it in the method body.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Domain.Validation">
       <Types>
        <Type Name="IValidatable" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Validatable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Validatable' in type name 'IValidatable'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="IValidatable`1" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message Id="Validatable" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Name="Type" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Validatable' in type name 'IValidatable&lt;T&gt;'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="MinimumCollectionSizeAttribute" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="75" Level="Warning">Seal 'MinimumCollectionSizeAttribute', if possible.</Issue>
          </Message>
          <Message TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Certainty="95" Level="Error">Add a public read-only property accessor for positional argument 'minSize' of Attribute 'MinimumCollectionSizeAttribute'.</Issue>
          </Message>
          <Message TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Specify AttributeUsage on 'MinimumCollectionSizeAttribute'.</Issue>
          </Message>
         </Messages>
        </Type>
        <Type Name="ValidationError" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.String,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="1" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="63">In externally visible method 'ValidationError.ValidationError(string, Exception)', validate parameter 'ex' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentNullException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="23">Method 'ValidationError.ValidationError(string, string)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Please provide a valid non null string as the validation error message".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="26">Method 'ValidationError.ValidationError(string, string)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Please provide a valid non null string as the validation property name".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#.ctor(System.Type,System.String,System.String)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Inflexion2.Guard.Against&lt;System.ArgumentNullException&gt;(System.Boolean,System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="43">Method 'ValidationError.ValidationError(Type, string, string)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Please provide a valid non null Type as the validated Entity".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="47">Method 'ValidationError.ValidationError(Type, string, string)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Please provide a valid non null string as the validation error message".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="51">Method 'ValidationError.ValidationError(Type, string, string)' passes a literal string as parameter 'message' of a call to 'Guard.Against&lt;ArgumentNullException&gt;(bool, string)'. Retrieve the following string(s) from a resource table instead: "Please provide a valid non null string as the validation property name".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(Inflexion2.Domain.Validation.ValidationError)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="143">In externally visible method 'ValidationError.Equals(ValidationError)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Equals(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="127">In externally visible method 'ValidationError.Equals(object)', validate parameter 'obj' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Equality(Inflexion2.Domain.Validation.ValidationError,Inflexion2.Domain.Validation.ValidationError)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="117">In externally visible method 'ValidationError.operator ==(ValidationError, ValidationError)', validate parameter 'left' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#op_Inequality(Inflexion2.Domain.Validation.ValidationError,Inflexion2.Domain.Validation.ValidationError)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="106">In externally visible method 'ValidationError.operator !=(ValidationError, ValidationError)', validate parameter 'left' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#ToString()" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationError.cs" Line="169">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'ValidationError.ToString()' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidationException" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': protected ValidationException(SerializationInfo, StreamingContext).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException().</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException(String).</Issue>
           <Issue Name="MissingConstructor" Certainty="95" Level="Error">Add the following constructor to 'ValidationException': public ValidationException(String, Exception).</Issue>
          </Message>
         </Messages>
         <Members>
          <Member Name="#.ctor(System.Type,System.Collections.Generic.IEnumerable`1&lt;Inflexion2.Domain.Validation.ValidationError&gt;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Validation" File="ValidationException.cs" Line="46">In externally visible method 'ValidationException.ValidationException(Type, IEnumerable&lt;ValidationError&gt;)', validate parameter 'entityType' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ValidationResult" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Messages>
          <Message TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
           <Issue Certainty="95" Level="Error">Rename 'ValidationResult' to end in 'Collection'.</Issue>
          </Message>
         </Messages>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.DynamicExtensions">
       <Types>
        <Type Name="PrivateReflectionDynamicObject" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#GetProperty(System.String)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.String.Format(System.String,System.Object,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="224">Because the behavior of 'string.Format(string, object, object, object)' could vary based on the current user's locale settings, replace this call in 'PrivateReflectionDynamicObject.GetProperty(string)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InvokeMemberOnType(System.Type,System.Object,System.String,System.Object[])" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="182">Because the behavior of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[])' could vary based on the current user's locale settings, replace this call in 'PrivateReflectionDynamicObject.InvokeMemberOnType(Type, object, string, object[])' with a call to 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)'. If the result of 'Type.InvokeMember(string, BindingFlags, Binder, object, object[], CultureInfo)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryConvert(System.Dynamic.ConvertBinder,System.Object&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="59">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'PrivateReflectionDynamicObject.TryConvert(ConvertBinder, out object)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="59">In externally visible method 'PrivateReflectionDynamicObject.TryConvert(ConvertBinder, out object)', validate parameter 'binder' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryGetMember(System.Dynamic.GetMemberBinder,System.Object&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="77">In externally visible method 'PrivateReflectionDynamicObject.TryGetMember(GetMemberBinder, out object)', validate parameter 'binder' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object&amp;)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="91">In externally visible method 'PrivateReflectionDynamicObject.TryInvokeMember(InvokeMemberBinder, object[], out object)', validate parameter 'binder' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TrySetMember(System.Dynamic.SetMemberBinder,System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="False">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObject.cs" Line="109">In externally visible method 'PrivateReflectionDynamicObject.TrySetMember(SetMemberBinder, object)', validate parameter 'binder' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="PrivateReflectionDynamicObjectExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#AsDynamic(System.Object)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="o" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="MemberParameterMoreMeaningfulName" Certainty="75" Level="CriticalWarning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="PrivateReflectionDynamicObjectExtensions.cs" Line="18">In method 'PrivateReflectionDynamicObjectExtensions.AsDynamic(this object)', consider providing a more meaningful name than parameter name 'o'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Extensions">
       <Types>
        <Type Name="SpecificationsLinqExtensions" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#CreateSpecification`1(System.String,System.Object,System.String)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Convert.ChangeType(System.Object,System.Type)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternate" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Extensions" File="SpecificationsLinqExtensions.cs" Line="52">Because the behavior of 'Convert.ChangeType(object, Type)' could vary based on the current user's locale settings, replace this call in 'SpecificationsLinqExtensions.CreateSpecification&lt;T&gt;(string, object, string)' with a call to 'Convert.ChangeType(object, Type, IFormatProvider)'. If the result of 'Convert.ChangeType(object, Type, IFormatProvider)' will be based on input from the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Infrastructure">
       <Types>
        <Type Name="Manager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#RetrieveAllConfiguredFactories(System.Boolean)" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="75" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Infrastructure\DataAccess\AdoNet" File="Manager.cs" Line="196">Replace method 'Manager.RetrieveAllConfiguredFactories(bool)' with an overload that supplies all default arguments.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Logging">
       <Types>
        <Type Name="ConsoleLogger" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#.ctor(System.Type)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="18">In externally visible method 'ConsoleLogger.ConsoleLogger(Type)', validate parameter 'type' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#CurrentDateTime()" Kind="Method" Static="True" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.DateTime.ToString(System.String)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="123">Because the behavior of 'DateTime.ToString(string)' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.CurrentDateTime()' with a call to 'DateTime.ToString(string, IFormatProvider)'. If the result of 'DateTime.ToString(string, IFormatProvider)' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToConsole(System.String,System.IFormatProvider,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="143">Method 'ConsoleLogger.WriteToConsole(string, IFormatProvider, string, params object[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: " - ".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="143">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, IFormatProvider, string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToConsole(System.String,System.Object)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="128">Method 'ConsoleLogger.WriteToConsole(string, object)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: " - ".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="128">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, object)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToConsole(System.String,System.Object,System.Exception)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="133">Method 'ConsoleLogger.WriteToConsole(string, object, Exception)' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: " - ,  Exception: ".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object,System.Object)" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="133">Because the behavior of 'string.Format(string, object, object)' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, object, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="133">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, object, Exception)' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#WriteToConsole(System.String,System.String,System.Object[])" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Console.WriteLine(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="138">Method 'ConsoleLogger.WriteToConsole(string, string, params object[])' passes a literal string as parameter 'value' of a call to 'Console.WriteLine(string)'. Retrieve the following string(s) from a resource table instead: " - ".</Issue>
            </Message>
            <Message Id="System.String.Format(System.String,System.Object[])" TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="NonBreaking">
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="138">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
             <Issue Name="IFormatProviderAlternateString" Certainty="95" Level="Error" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Model\Loggin\Impl" File="ConsoleLogger.cs" Line="138">Because the behavior of 'string.Format(string, params object[])' could vary based on the current user's locale settings, replace this call in 'ConsoleLogger.WriteToConsole(string, string, params object[])' with a call to 'string.Format(IFormatProvider, string, params object[])'. If the result of 'string.Format(IFormatProvider, string, params object[])' will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="ILogger" Kind="Interface" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#Error(System.Object)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'ILogger.Error(object)' so that it no longer conflicts with the reserved language keyword 'Error'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Error(System.Object,System.Exception)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="Error" TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error">Rename virtual/interface member 'ILogger.Error(object, Exception)' so that it no longer conflicts with the reserved language keyword 'Error'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
        <Type Name="LoggerManager" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetLogger" Kind="Field" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="Breaking">
             <Issue Certainty="90" Level="Warning">Consider making 'LoggerManager.GetLogger' non-public or a constant.</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Inflexion2.Security">
       <Types>
        <Type Name="CertificateHelper" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#GetCertificate()" Kind="Method" Static="True" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.Security.Cryptography.X509Certificates.X509SelectionFlag)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2014-09-10 21:48:36Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="E:\IDev\Pre\Inflexion2\01-Projects\Inflexion2\Domain\Security" File="CertificateHelper.cs" Line="23">Method 'CertificateHelper.GetCertificate()' passes a literal string as parameter 'message' of a call to 'X509Certificate2UI.SelectFromCollection(X509Certificate2Collection, string, string, X509SelectionFlag)'. Retrieve the following string(s) from a resource table instead: "Select one to sign".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AvoidEmptyInterfaces" Category="Microsoft.Design" CheckId="CA1040">
   <Name>Avoid empty interfaces</Name>
   <Description>Interfaces are meant to contain members that specify a set of behaviors. To mark or label a class, use an attribute instead of an empty interface.</Description>
   <Resolution Name="Default">Define a custom attribute to replace {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182128(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidNamespacesWithFewTypes" Category="Microsoft.Design" CheckId="CA1020">
   <Name>Avoid namespaces with few types</Name>
   <Description>A namespace should generally have more than five types.</Description>
   <Resolution Name="Default">Consider merging the types defined in '{0}' with another namespace.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182130(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnsealedAttributes" Category="Microsoft.Performance" CheckId="CA1813">
   <Name>Avoid unsealed attributes</Name>
   <Description>Seal attribute types for improved performance. Sealing attribute types speeds up performance during reflection on custom attributes.</Description>
   <Resolution Name="Default">Seal {0}, if possible.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182267(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUnusedPrivateFields" Category="Microsoft.Performance" CheckId="CA1823">
   <Name>Avoid unused private fields</Name>
   <Description>Private fields were detected that do not appear to be accessed within the assembly. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Resolution Name="Default">It appears that field {0} is never used or is only ever assigned to. Use this field or remove it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms245042(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionPropertiesShouldBeReadOnly" Category="Microsoft.Usage" CheckId="CA2227">
   <Name>Collection properties should be read only</Name>
   <Description>Properties that return collections should be read-only so that users cannot entirely replace the backing store. Users can still modify the contents of the collection by calling relevant methods on the collection. Note that the XmlSerializer class has special support for deserializing read-only collections. See the XmlSerializer overview for more information.</Description>
   <Resolution Name="Default">Change {0} to be read-only by removing the property setter.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182327(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="CollectionsShouldImplementGenericInterface" Category="Microsoft.Design" CheckId="CA1010">
   <Name>Collections should implement generic interface</Name>
   <Description>Non-generic strongly typed collections should implement one of the generic collection interfaces. This will allow better integration of the collection with generic API.</Description>
   <Resolution Name="Default">{0} appears to be a non-generic, strongly typed collection. Add an implementation to the instance of {1}&lt;T&gt; where T is the underlying element type of {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182132(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ConsiderPassingBaseTypesAsParameters" Category="Microsoft.Design" CheckId="CA1011">
   <Name>Consider passing base types as parameters</Name>
   <Description>Using base types as parameters to methods improves re-use of these methods if you only use methods &amp; properties from the parameter's base class. E.g. use Stream instead of FileStream as a parameter when only calling Stream.Read(), this makes the method work on all kind of streams instead of just File streams.</Description>
   <Resolution Name="Default">Consider changing the type of parameter {0} in {1} from {2} to its base type {3}. This method appears to only require base class members in its implementation. Suppress this violation if there is a compelling reason to require the more derived type in the method signature.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/3hk32yyz(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DefaultParametersShouldNotBeUsed" Category="Microsoft.Design" CheckId="CA1026">
   <Name>Default parameters should not be used</Name>
   <Description>Some programming languages do not support default parameters. Replace default parameters with method overloads that supply the default argument.</Description>
   <Resolution Name="Default">Replace method {0} with an overload that supplies all default arguments.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182135(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DefineAccessorsForAttributeArguments" Category="Microsoft.Design" CheckId="CA1019">
   <Name>Define accessors for attribute arguments</Name>
   <Description>Provide accessors for both named and positional arguments. Each positional argument on an attribute should declare a read-only property with the same name (but different casing). Each named argument should provide a read/write property with the same name (but different casing).</Description>
   <Resolution Name="Default">Add a public read-only property accessor for positional argument {0} of Attribute {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182136(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCallOverridableMethodsInConstructors" Category="Microsoft.Usage" CheckId="CA2214">
   <Name>Do not call overridable methods in constructors</Name>
   <Description>Virtual methods defined on the class should not be called from constructors. If a derived class has overridden the method, the derived class version will be called (before the derived class constructor is called).</Description>
   <Resolution Name="Default">{0} contains a call chain that results in a call to a virtual method defined by the class. Review the following call stack for unintended consequences: {1}</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182331(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalWarning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCastUnnecessarily" Category="Microsoft.Performance" CheckId="CA1800">
   <Name>Do not cast unnecessarily</Name>
   <Description>Avoid duplicate casts where possible, since there is a cost associated with them.</Description>
   <Resolution Name="Local">{0}, a variable, is cast to type {1} multiple times in method {2}. Cache the result of the 'as' operator or direct cast in order to eliminate the redundant {3} instruction.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182271(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotDeclareVisibleInstanceFields" Category="Microsoft.Design" CheckId="CA1051">
   <Name>Do not declare visible instance fields</Name>
   <Description>Instance fields that are visible outside of the type that declares them, limit your ability to change the implementation details for those data items. Use properties instead. They do not compromise usability or performance and they do provide flexibility in that they conceal the implementation details of the underlying data.</Description>
   <Resolution Name="Default">Because field {0} is visible outside of its declaring type, change its accessibility to private and add a property, with the same accessibility as the field has currently, to provide access to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182141(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotExposeGenericLists" Category="Microsoft.Design" CheckId="CA1002">
   <Name>Do not expose generic lists</Name>
   <Description>Do not expose List&lt;T&gt; in object models. Use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt; instead. List&lt;T&gt; is meant to be used from implementation, not in object model API. List&lt;T&gt; is optimized for performance at the cost of long term versioning. For example, if you return List&lt;T&gt; to the client code, you will not ever be able to receive notifications when client code modifies the collection.</Description>
   <Resolution Name="Default">Change {0} in {1} to use Collection&lt;T&gt;, ReadOnlyCollection&lt;T&gt; or KeyedCollection&lt;K,V&gt;</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182142(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotNestGenericTypesInMemberSignatures" Category="Microsoft.Design" CheckId="CA1006">
   <Name>Do not nest generic types in member signatures</Name>
   <Description>Avoid API that require users to instantiate a generic type with another generic type as type argument. The syntax gets too complex.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't nest generic type {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182144(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="EnumsShouldHaveZeroValue" Category="Microsoft.Design" CheckId="CA1008">
   <Name>Enums should have zero value</Name>
   <Description>An enum should generally have a zero value. If the enum is not decorated with the Flags attribute, it should have a member with a value of zero that represents the empty state. Optionally, this value is named 'None'. For a Flags-attributed enum, a zero-valued member is optional and, if it exists, should always be named 'None'. This value should indicate that no values have been set in the enum. Using a zero-valued member for other purposes is contrary to the use of the Flags attribute in that the bitwise AND and OR operators are useless with the member.</Description>
   <Resolution Name="NotFlagsNoZeroValue">Add a member to {0} that has a value of zero with a suggested name of 'None'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182149(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="GenericMethodsShouldProvideTypeParameter" Category="Microsoft.Design" CheckId="CA1004">
   <Name>Generic methods should provide type parameter</Name>
   <Description>Methods where the type parameter cannot be inferred from the parameters and therefore has to be defined in the method call are too difficult to understand. Methods with a formal parameter typed as the generic method type parameter support inference. Methods with no formal parameter typed as the generic method type parameter don't support inference.</Description>
   <Resolution Name="Default">Consider a design where {0} doesn't require explicit type parameter {1} in any call to it.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182150(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Member">Correct the casing of '{0}' in member name {1} by changing it to '{2}'.</Resolution>
   <Resolution Name="Namespace">Correct the casing of '{0}' in namespace name '{1}' by changing it to '{2}'.</Resolution>
   <Resolution Name="Type">Correct the casing of '{0}' in type name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Member">Correct the spelling of '{0}' in member name {1} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberMoreMeaningfulName">Consider providing a more meaningful name than member name {0}.</Resolution>
   <Resolution Name="MemberParameter">In method {0}, correct the spelling of '{1}' in parameter name {2} or remove it entirely if it represents any sort of Hungarian notation.</Resolution>
   <Resolution Name="MemberParameterMoreMeaningfulName">In method {0}, consider providing a more meaningful name than parameter name {1}.</Resolution>
   <Resolution Name="MethodTypeParameterMoreMeaningfulName">On method {0}, consider providing a more meaningful name than generic type parameter name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Resolution Name="Type">Correct the spelling of '{0}' in type name {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectPrefix" Category="Microsoft.Naming" CheckId="CA1715">
   <Name>Identifiers should have correct prefix</Name>
   <Description>Prefix interface names with the letter 'I' to indicate that the type is an interface, as in IFormattable. Prefix generic type parameter names with the letter 'T' and provide them with descriptive names, as in Dictionary&lt;TKey, TValue&gt;, unless a single 'T' is completely self-explanatory, as in Collection&lt;T&gt;. Use Pascal casing for both interface and type parameter names. Use abbreviations sparingly. Do not use the underscore character. Do use similar names when defining a class/interface pair where the class is a standard implementation of the interface. The names should differ only by the letter I prefixed on the interface name, as with Component and IComponent.</Description>
   <Resolution Name="MethodTypeParameter">On method {0}, prefix generic type parameter name {1} with 'T'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182243(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldHaveCorrectSuffix" Category="Microsoft.Naming" CheckId="CA1710">
   <Name>Identifiers should have correct suffix</Name>
   <Description>Types that extend certain base types have specified name suffixes. Types that extend Attribute, for example, should be suffixed in 'Attribute', as in ObsoleteAttribute. This rules checks types that extend several base types, including Attribute, Exception, EventArgs, IMembershipPermission, Stream, and others.</Description>
   <Resolution Name="Default">Rename {0} to end in '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182244(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainTypeNames" Category="Microsoft.Naming" CheckId="CA1720">
   <Name>Identifiers should not contain type names</Name>
   <Description>Avoid using language-specific types name in parameters and members and data type identifiers in parameters. Types names might not be intuitive for all developers. It is recommended that you select a generic name, such as 'value', instead. If this is not sufficient, be sure to use the type name as it is defined in the .NET Framework Library and avoid language-specific type names completely. Some examples of C#-specific type names are 'float' (use 'Single' if a generic name is not sufficient), and 'ulong' (use 'UInt64' if a generic name is not sufficient).</Description>
   <Resolution Name="LanguageIndependentMemberParameter">In member {0}, consider replacing the data type identifier '{1}' in parameter name {2} with a more generic term, such as 'value'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb531486(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotMatchKeywords" Category="Microsoft.Naming" CheckId="CA1716">
   <Name>Identifiers should not match keywords</Name>
   <Description>Identifiers which conflict with reserved language keywords should be avoided. Using a reserved keyword as an identifier makes it harder for consumers in other languages to use your API.</Description>
   <Resolution Name="Member">Rename virtual/interface member {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="MemberParameter">In virtual/interface member {0}, rename parameter {1} so that it no longer conflicts with the reserved language keyword '{2}'. Using a reserved keyword as the name of a parameter on a virtual/interface member makes it harder for consumers in other languages to override/implement the member.</Resolution>
   <Resolution Name="Type">Rename type {0} so that it no longer conflicts with the reserved language keyword '{1}'. Using a reserved keyword as the name of a type makes it harder for consumers in other languages to use the type.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182248(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ImplementStandardExceptionConstructors" Category="Microsoft.Design" CheckId="CA1032">
   <Name>Implement standard exception constructors</Name>
   <Description>Multiple constructors are required to correctly implement a custom exception. Missing constructors can make your exception unusable in certain scenarios. For example, the serialization constructor is required for handling exceptions in XML Web services.</Description>
   <Resolution Name="MissingConstructor">Add the following constructor to {0}: {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182151(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InitializeReferenceTypeStaticFieldsInline" Category="Microsoft.Performance" CheckId="CA1810">
   <Name>Initialize reference type static fields inline</Name>
   <Description>Static fields should be initialized when declared. Initializing static data in explicit static constructors results in less performant code.</Description>
   <Resolution Name="Default">Initialize all static fields in {0} when those fields are declared and remove the explicit static constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182275(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">CriticalWarning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="InstantiateArgumentExceptionsCorrectly" Category="Microsoft.Usage" CheckId="CA2208">
   <Name>Instantiate argument exceptions correctly</Name>
   <Description>String arguments passed to constructors of ArgumentException and its derived types should be correct. Types derived from ArgumentException have inconsistent constructor overloads with respect to the message and paramName parameters as compared to ArgumentException.</Description>
   <Resolution Name="IncorrectParameterName">Method {0} passes '{1}' as the {2} argument to a {3} constructor. Replace this argument with one of the method's parameter names. Note that the provided parameter name should have the exact casing as declared on the method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182347(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAttributesWithAttributeUsage" Category="Microsoft.Design" CheckId="CA1018">
   <Name>Mark attributes with AttributeUsageAttribute</Name>
   <Description>The AttributeUsage attribute specifies the targets that are valid for the attribute (see System.AttributeTargets), whether an attribute can appear on a target more than once, and whether the attribute is inheritable.</Description>
   <Resolution Name="Default">Specify AttributeUsage on {0}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182158(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error, Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="NonConstantFieldsShouldNotBeVisible" Category="Microsoft.Usage" CheckId="CA2211">
   <Name>Non-constant fields should not be visible</Name>
   <Description>Static fields should be constant unless you carefully manage access to the field using locks. Using static variables without making them thread safe can compromise execution state. This rule applies to managed code libraries. If the analyzed assembly is an application, it is usually safe to exclude violations of this rule.</Description>
   <Resolution Name="Default">Consider making {0} non-public or a constant.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182353(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OperatorOverloadsHaveNamedAlternates" Category="Microsoft.Usage" CheckId="CA2225">
   <Name>Operator overloads have named alternates</Name>
   <Description>When redefining operators, implement named methods to provide access to the operator functionality from languages that do not support operator overloading. For example, the functionality of the '+' operator should also be accessible using an 'Add' method.</Description>
   <Resolution Name="Default">Provide a method named '{0}' as a friendly alternate for operator {1}.</Resolution>
   <Resolution Name="Property">Provide a property named '{0}' as a friendly alternate for operator {1}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182355(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Error</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="OverrideMethodsOnComparableTypes" Category="Microsoft.Design" CheckId="CA1036">
   <Name>Override methods on comparable types</Name>
   <Description>Types that implement IComparable should redefine Equals and comparison operators to keep the meanings of less than, greater than, and equals consistent throughout the type.</Description>
   <Resolution Name="Operator">{0} should define operator '{1}' since it implements IComparable.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182163(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ParameterNamesShouldMatchBaseDeclaration" Category="Microsoft.Naming" CheckId="CA1725">
   <Name>Parameter names should match base declaration</Name>
   <Description>For usability reasons, parameter names in overridden methods should match those of the base declaration.</Description>
   <Resolution Name="Default">In member {0}, change parameter name {1} to {2} in order to match the identifier as it has been declared in {3}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182251(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="PropertiesShouldNotReturnArrays" Category="Microsoft.Performance" CheckId="CA1819">
   <Name>Properties should not return arrays</Name>
   <Description>Properties that return arrays are prone to code inefficiencies. Consider using a collection or making this a method. See the design guidelines for more information.</Description>
   <Resolution Name="Default">Change {0} to return a collection or make it a method.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/0fss9skc(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="50">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="ReviewUnusedParameters" Category="Microsoft.Usage" CheckId="CA1801">
   <Name>Review unused parameters</Name>
   <Description>Review parameters in non-virtual methods that are not used in the method body to ensure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs. Sometimes a violation of this rule can point to an implementation bug in the method (i.e. the parameter should actually have been used in the method body). Exclude warnings of this rule if the parameter has to exist because of backward compatibility.</Description>
   <Resolution Name="Default">Parameter {0} of {1} is never used. Remove the parameter or use it in the method body.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182268(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="usagerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyCultureInfo" Category="Microsoft.Globalization" CheckId="CA1304">
   <Name>Specify CultureInfo</Name>
   <Description>If an overload exists that takes a CultureInfo argument, it should always be called in favor of an overload that does not. The CultureInfo type contains culture-specific information required for performing numeric and string operations, such as casing, formatting, and string comparisons. In scenarios where conversion and parsing behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="Default">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify 'CultureInfo.CurrentCulture' as the 'CultureInfo' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify 'CultureInfo.InvariantCulture'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182189(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="SpecifyIFormatProvider" Category="Microsoft.Globalization" CheckId="CA1305">
   <Name>Specify IFormatProvider</Name>
   <Description>If an overload exists that takes an IFormatProvider argument, it should always be called in favor of an overload that does not. Some methods in the runtime convert a value to or from a string representation and take a string parameter that contains one or more characters, called format specifiers, which indicate how the value is to be converted. If the meaning of the format specifier varies by culture, a formatting object supplies the actual characters used in the string representation. In scenarios where sorting and comparison behavior should never change between cultures, specify CultureInfo.InvariantCulture, otherwise, specify CultureInfo.CurrentCulture.</Description>
   <Resolution Name="IFormatProviderAlternate">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be based on input from the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will based on input stored and accessed by software, such as when it is loaded from disk or from a database, specify {4}.</Resolution>
   <Resolution Name="IFormatProviderAlternateString">Because the behavior of {0} could vary based on the current user's locale settings, replace this call in {1} with a call to {2}. If the result of {2} will be displayed to the user, specify {3} as the 'IFormatProvider' parameter. Otherwise, if the result will be stored and accessed by software, such as when it is persisted to disk or to a database, specify {4}.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182190(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="globalizationrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="StaticHolderTypesShouldNotHaveConstructors" Category="Microsoft.Design" CheckId="CA1053">
   <Name>Static holder types should not have constructors</Name>
   <Description>Instances of types that define only static members do not need to be created. Many compilers will automatically add a public default constructor if no constructor is specified. To prevent this, adding an empty private constructor may be required.</Description>
   <Resolution Name="CSharp2_0">Because type {0} contains only 'static' members, mark it as 'static' to prevent the compiler from adding a default public constructor.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182169(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="90">Error</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="TestForEmptyStringsUsingStringLength" Category="Microsoft.Performance" CheckId="CA1820">
   <Name>Test for empty strings using string length</Name>
   <Description>To test for empty strings, check if String.Length is equal to zero. Constructs such as "".Equals(someString) and String.Empty.Equals(someString) are less efficient than testing the string length. Replace these with checks for someString.Length == 0.</Description>
   <Resolution Name="IsNullOrEmpty">Replace the call to {0} in {1} with a call to 'String.IsNullOrEmpty'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182279(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UseEventsWhereAppropriate" Category="Microsoft.Design" CheckId="CA1030">
   <Name>Use events where appropriate</Name>
   <Description>A method name suggestive of event functionality was encountered.</Description>
   <Resolution Name="Default">Consider making {0} an event.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182177(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePreferredTerms" Category="Microsoft.Naming" CheckId="CA1726">
   <Name>Use preferred terms</Name>
   <Description>Use preferred terms over deprecated alternates.</Description>
   <Resolution Name="MemberNoAlternate">Replace the term '{0}' in member name {1} with an appropriate alternate or remove it entirely.</Resolution>
   <Resolution Name="Type">Replace the term '{0}' in type name {1} with the preferred alternate '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182258(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="UsePropertiesWhereAppropriate" Category="Microsoft.Design" CheckId="CA1024">
   <Name>Use properties where appropriate</Name>
   <Description>Properties should be used instead of Get/Set methods in most situations. Methods are preferable to properties in the following situations: the operation is a conversion, is expensive or has an observable side-effect; the order of execution is important; calling the member twice in succession creates different results; a member is static but returns a mutable value; or the member returns an array.</Description>
   <Resolution Name="Default">Change {0} to a property if appropriate.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182181(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="designrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182(VS.100).aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="10.0.0.0" />
  </Rule>
  <Rule TypeName="VariableNamesShouldNotMatchFieldNames" Category="Microsoft.Maintainability" CheckId="CA1500">
   <Name>Variable names should not match field names</Name>
   <Description>Instance field and variable names should not be identical within the same scope.</Description>
   <Resolution Name="Parameter">{0}, a parameter declared in {1}, has the same name as an instance field on the type. Change the name of one of these items.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182216(VS.100).aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="maintainabilityrules.dll" Version="10.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
