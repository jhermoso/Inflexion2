<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion2.UX.WPF</name>
    </assembly>
    <members>
        <member name="T:Inflexion2.UX.WPF.ApplicationContext">
            <summary>
            Clase estática que representa el contexto de la aplicación para la parte cliente.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.Fault.FaultObject">
            <summary>
            Clase pública para la captura de excepciones desde los servicios.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.FaultObject.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.FaultObject.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.FaultObject.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.Fault.FaultObject.FaultCode">
             <summary>
            
             </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Fault.FaultObject.FaultCode.Sever">
             <summary>
            
             </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Fault.FaultObject.Code">
            <summary>
            Propiedad que obtiene o establece el código de la excepción.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el código de la excepción.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Fault.FaultObject.Reason">
            <summary>
            Propiedad pública que obtiene o establece el texto del mensaje de excepción.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el texto del mensaje de excepción.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.FaultObject.Create``1(``0)">
            <summary>
            Creates a WCF SOAP FaultException based on a CAS Exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.FaultObject.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Fault.InternalException">
            <summary>
            Clase de excepción interna para el Fault.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.InternalException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.InternalException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            la excepción especificada.
            </summary>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que indica la excepción producida.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado y la excepción interna.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
            <param name="innerException">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica la excepción interna.
            </param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Fault.ValidationException">
            <summary>
            Validation exception
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ValidationException.#ctor(Inflexion2.Domain.Validation.ValidationException)">
            <summary>
            constructs and gets the message for a validation exception
            </summary>
            <param name="validationException"></param>
        </member>
        <member name="P:Inflexion2.UX.WPF.Fault.ValidationException.ValidationErrors">
            <summary>
            .en collection of errors messages
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.Fault.ServiceFaultContracts">
            <summary>
            Services for contract exceptions
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.#ctor">
            <summary>
            gets the info from the exception
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.#ctor(System.Type[])">
            <summary>
            add the info from the exception contracts
            </summary>
            <param name="knownFaultTypes"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            add info from the parameters in the contracts
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="clientRuntime"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="dispatchRuntime"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Fault.ServiceFaultContracts.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.AvalonDockRegion">
            <summary>
            Avalon dock Adapter 
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.AvalonDockRegion.NameProperty">
            <summary>
            Name Attached Dependency Property
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.AvalonDockRegion.GetName(System.Windows.DependencyObject)">
            <summary>
            Gets the Name property.  This dependency property 
            indicates the region name of the layout item.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.AvalonDockRegion.SetName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the Name property.  This dependency property 
            indicates the region name of the layout item.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.AvalonDockRegion.OnNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes to the Name property.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.AvalonPanesStyleSelector">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.AvalonPanesStyleSelector.DocumentStyle">
            <summary>
            work space style
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.AvalonPanesStyleSelector.ToolStyle">
            <summary>
            toolbar style
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.AvalonPanesStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            select the style depending on type of container use.
            </summary>
            <param name="item"></param>
            <param name="container"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.DockingManagerDocumentsSourceSyncBehavior">
            <summary>
            Sync docked documents
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.DockingManagerDocumentsSourceSyncBehavior.OnAttach">
            <summary>
            Starts to monitor the <see cref="T:Microsoft.Practices.Prism.Regions.IRegion"/> to keep it in synch with the items of the <see cref="P:Inflexion2.UX.WPF.MVVM.DockingManagerDocumentsSourceSyncBehavior.HostControl"/>.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.DockingManagerRegionAdapter">
            <summary>
            part of avalon dock adapter for prism
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.BaseModule">
            <summary>
            Clase base de módulo Prism.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.BaseModule.regionManager">
            <summary>
            Referencia al gestor de regiones Prism.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.BaseModule.unityContainer">
            <summary>
            Referencia al contenedor de inyección de dependencias Unity.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseModule.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseModule"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:BaseModule"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseModule.RegionManager">
            <summary>
            Obtiene la referencia al gestor de regiones Prism.
            </summary>
            <value>
            Referencia al gestor de regiones Prism.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseModule.UnityContainer">
            <summary>
            Obtiene la referencia al contenedor de inyección de dependencias Unity.
            </summary>
            <value>
            Referencia al contenedor de inyección de dependencias Unity.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseModule.Initialize">
            <summary>
            Inicializa el módulo.
            </summary>
            <remarks>
            Se registrará en las clases derivadas los controles que han de estar siempre disponibles
            con el gestor de regiones Prism (IRegionManager), y los controles que han de solicitarse
            (bajo demanda) con el contenedor de inyección de dependencias Unity.  Los controles bajo
            demanda seran cargados cuando se invoque el metodo "IregionManager.RequestNavigate()".
            <para>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Modularity.IModule"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseModule.RegisterQueryServices(Inflexion2.UX.WPF.Services.IQueryServiceFactory)">
            <summary>
            
            </summary>
            <param name="comboBoxServiceFactory"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.BindingListener">
            <summary>
            https://msdn.microsoft.com/de-de/library/4y5y10s7(v=vs.110).aspx
            DefaultTraceListener 
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BindingListener.SetTrace">
            <summary>
            set trace level to none
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BindingListener.SetTrace(System.Diagnostics.SourceLevels,System.Diagnostics.TraceOptions)">
            <summary>
            set trace level option
            </summary>
            <param name="level"></param>
            <param name="options"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BindingListener.CloseTrace">
            <summary>
            close trace
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BindingListener.Write(System.String)">
            <summary>
            add message to trace
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BindingListener.WriteLine(System.String)">
            <summary>
            trace to console, command window
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1">
            <summary>
            .en navigation command
            .es Representa el comando de navegación.
            </summary>
            <typeparam name="T">
            Tipo de ViewModel que contiene la referencia a este comando.
            </typeparam>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.navigationCallback">
            <summary>
            Referencia a la devolución de llamada cuando se ha completado la navegación.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.navigationViewModel">
            <summary>
            Referencia al modelo de vista que contiene la referencia a este comando.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.regionNames">
            <summary>
            Indica el nombre de la región donde se va a mostrar la vista.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.viewNames">
            <summary>
            Indica el nombre de la vista que se va a mostrar.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.numViews">
            <summary>
            numero de vistas que tenemos que cargar, se deduce del array de vistas.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.#ctor(`0,System.String[],System.String[])">
            <summary>
            not implemented
            Inicializa una nueva instancia de la clase <see cref="T:NavigationCommand"/>.
            </summary>
            <param name="navigationViewModel">
            Referencia al modelo de vista que contiene la referencia a este comando.
            </param>
            <param name="regionNames">
            Indica el nombre de la región donde se va a mostrar la vista.
            </param>
            <param name="viewNames">
            Indica el nombre de la vista que se va a mostrar.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:NavigationCommand"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.#ctor(`0,System.String[],System.String[],System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:NavigationCommand"/>.
            </summary>
            <param name="navigationViewModel">
            Referencia al modelo de vista que contiene la referencia a este comando.
            </param>
            <param name="regionNames">
            Indica el nombre de la región donde se va a mostrar la vista.
            </param>
            <param name="viewNames">
            Indica el nombre de la vista que se va a mostrar.
            </param>
            <param name="navigationCallback">
            Referencia a la devolución de llamada cuando se ha completado la navegación.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:NavigationCommand"/>.
            </remarks>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.CanExecuteChanged">
            <summary>
            Se produce cuando se produzcan cambios que afecten o no
            al comando que debe ejecutarse.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.CanExecute(System.Object)">
            <summary>
            Determina si el comando se puede ejecutar.
            </summary>
            <param name="parameter">
            Datos utilizados por el comando.
            </param>
            <returns>
            Es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.MultipleViewsNavigationCommand`1.Execute(System.Object)">
            <summary>
            Ejecuta el comando.
            </summary>
            <param name="parameter">
            Datos utilizados por el comando.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1">
            <summary>
            Representa el comando de navegación.
            </summary>
            <typeparam name="T">
            Tipo de ViewModel que contiene la referencia a este comando.
            </typeparam>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.navigationCallback">
            <summary>
            Referencia a la devolución de llamada cuando se ha completado la navegación.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.navigationViewModel">
            <summary>
            Referencia al modelo de vista que contiene la referencia a este comando.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.regionName">
            <summary>
            Indica el nombre de la región donde se va a mostrar la vista.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.viewName">
            <summary>
            Indica el nombre de la vista que se va a mostrar.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.#ctor(`0,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:NavigationCommand"/>.
            </summary>
            <param name="navigationViewModel">
            Referencia al modelo de vista que contiene la referencia a este comando.
            </param>
            <param name="regionName">
            Indica el nombre de la región donde se va a mostrar la vista.
            </param>
            <param name="viewName">
            Indica el nombre de la vista que se va a mostrar.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:NavigationCommand"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.#ctor(`0,System.String,System.String,System.Action{Microsoft.Practices.Prism.Regions.NavigationResult})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:NavigationCommand"/>.
            </summary>
            <param name="navigationViewModel">
            Referencia al modelo de vista que contiene la referencia a este comando.
            </param>
            <param name="regionName">
            Indica el nombre de la región donde se va a mostrar la vista.
            </param>
            <param name="viewName">
            Indica el nombre de la vista que se va a mostrar.
            </param>
            <param name="navigationCallback">
            Referencia a la devolución de llamada cuando se ha completado la navegación.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:NavigationCommand"/>.
            </remarks>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.CanExecuteChanged">
            <summary>
            Se produce cuando se produzcan cambios que afecten o no
            al comando que debe ejecutarse.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.CanExecute(System.Object)">
            <summary>
            Determina si el comando se puede ejecutar.
            </summary>
            <param name="parameter">
            Datos utilizados por el comando.
            </param>
            <returns>
            Es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.NavigationCommand`1.Execute(System.Object)">
            <summary>
            Ejecuta el comando.
            </summary>
            <param name="parameter">
            Datos utilizados por el comando.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands">
            <summary>
            .es Clase estática que define los comandos globales de edición.
            .en Static Class to define the edition global commands.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.activateRecordCommand">
            <summary>
            .es Comando global activar registro.
            .en Global command activate new record.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.deleteRecordCommand">
            <summary>
            .es Comando global eliminar registro.
            .en Global command delete Record.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.editRecordCommand">
            <summary>
            .es Comando global editar registro.
            .en Global command edit record.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.getRecordsCommand">
            <summary>
            .es Comando global obtener registros.
            .en Global command get records.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.newRecordCommand">
            <summary>
            .es Comando global nuevo registro.
            .en Global command add new record.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.saveRecordCommand">
            <summary>
            .es Comando global guardar registro.
            .en Global command save record.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.getFirstPageRecordsCommand">
            <summary>
            .es Comando global obtener 1 página de registros .
            .en global command to get 1º page of records
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.getNextPageRecordsCommand">
            <summary>
            .es Comando global obtener la siguiente página de registros.
            .en global command to get the next page of records
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.getPreviousPageRecordsCommand">
            <summary>
            .es Comando global obtener la anterior página de registros.
            .en global command to get the previous page of records
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.getLastPageRecordsCommand">
            <summary>
            .es Comando global obtener la ultima página de registros.
            .en global command to get the last page of records
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.#cctor">
            <summary>
            Constructor estático.
            Static constructor.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.ActivateRecordCommand">
            <summary>
            .es Obtiene el comando global activar registro.
            .en Get the activate global command
            </summary>
            <value>
            Comando global activar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.EditRecordCommand">
            <summary>
            .es Obtiene el comando global editar registro.
            </summary>
            <value>
            .es Comando global editar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.DeleteRecordCommand">
            <summary>
            .es Obtiene el comando global eliminar registro.
            </summary>
            <value>
            .es Comando global eliminar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.GetRecordsCommand">
            <summary>
            .es Obtiene el comando global obtener registros.
            </summary>
            <value>
            .es Comando global obtener registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.NewRecordCommand">
            <summary>
            .es Obtiene el comando global nuevo registro.
            </summary>
            <value>
            .es Comando global nuevo registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.SaveRecordCommand">
            <summary>
            .es Obtiene el comando global para guardar el registro.
            .en It gets the global command to save the record.
            </summary>
            <value>
            .es Comando global guardar registro.
            .en Save record global command
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.GetFirstPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la primera página de registros.
            .en It gets the global command to get the first page of records
            </summary>
            <value>
            .es Comando global guardar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.GetNextPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la siguiente página de registros.
            .en It gets the global command to get the next page of records
            </summary>
            <value>
            .es Comando global guardar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.GetPreviousPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la anterior página de registros.
            .en It gets the global command to get the previous page of records
            </summary>
            <value>
            .es Comando global para obtener la siguiente página de registros
            .en property to get the command
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommands.GetLastPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la ultima página de registros.
            .en It gets the global command to get the last page of records
            </summary>
            <value>
            .es comando global para obtener la ultima página de registros.
            .en property to get the command
            </value>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy">
            <summary>
            .es Clase proxy para los comandos globales de edición.
            .en Proxy for edition global commands
            </summary>
            <remarks>
            .es Utilizar esta clase proxy para acceder a los comandos globales de edición
            disponibles y poder realizar las pruebas correspondientes de test (mocks).
            .en Use this proxy to acces to edition global commands. This proxy enable testing and mocking.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.ActivateRecordCommand">
            <summary>
            .es Obtiene el comando global activa registro.
            </summary>
            <value>
            .es Comando global activa registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.EditRecordCommand">
            <summary>
            .es Obtiene el comando global editar registro.
            </summary>
            <value>
            .es Comando global editar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.DeleteRecordCommand">
            <summary>
            .es Obtiene el comando global eliminar registro.
            </summary>
            <value>
            .es Comando global eliminar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.GetRecordsCommand">
            <summary>
            .es Obtiene el comando global obtener registros.
            </summary>
            <value>
            .es Comando global obtener registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.NewRecordCommand">
            <summary>
            .es Obtiene el comando global nuevo registro.
            </summary>
            <value>
            .es Comando global nuevo registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.SaveRecordCommand">
            <summary>
            .es Obtiene el comando global guardar registro.
            </summary>
            <value>
            .es Comando global guardar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.GetFirstPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la primera página de registros.
            .en it gets global command to get the first page of records
            </summary>
            <value>
            .es Comando global para obtener la primera página de registros.
            .en Global Command to get the first page of records
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.GetNextPageRecordsCommand">
            <summary>
            .es Obtiene el comando global para obtener la siguiente página de registros.
            .en it gets global command to get the next page of records
            </summary>
            <value>
            .es Comando global para obtener la siguiente pagina de registros.
            .en Global Command to get the first page of records
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.GetPreviousPageRecordsCommand">
            <summary>
            .es Obtiene el comando global 
            .en it gets global command to get the previous page records
            </summary>
            <value>
            .es Comando global para obtener la anterior pagina de registros.
            .en Global Command to get the previous page of records
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Commands.EditionCommandsProxy.GetLastPageRecordsCommand">
            <summary>
            .es Obtiene el comando global 
            .en it gets global command to get the last page of records
            </summary>
            <value>
            .es Comando global para obtener la ultima pagina de registros.
            .en Global Command to get the last page of records
            </value>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Views.ShellWindow">
            <summary>
            Representa la ventana principal de aplicación.
            todo: check if new versions of metrowindow are cls compliant
            </summary>
            <remarks>
            Ventana de alto nivel Prism.
            </remarks>
            <summary>
            ShellWindow
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.ShellWindow.#ctor">
            <summary>
            Permite crear una nueva ventana principal de aplicación.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ShellWindow"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.ShellWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Views.Dialogs.IBaseDialogView`1">
            <summary>
            Contrato para las vistas de interacción.
            </summary>
            <typeparam name="T">Tipo de la entidad de interacción.</typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.Dialogs.IBaseDialogView`1.SetEntity(`0)">
            <summary>
            Establece la entidad.
            </summary>
            <param name="entity">La entidad.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.Dialogs.IBaseDialogView`1.GetEntity">
            <summary>
            Obtiene la entidad.
            </summary>
            <returns>La entidad</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.Dialogs.IBaseDialogView`1.Initialize">
            <summary>
            Se usa para inicializar el diálogo.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Views.Presentation.PresentationView">
            <summary>
            Interaction logic for PresentationView.xaml
            </summary>
            <summary>
            PresentationView
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.Presentation.PresentationView.#ctor">
            <summary>
            view constructor and datacontext association
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Views.Presentation.PresentationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.NavigationCompletedEvent">
            <summary>
            Evento CompositePresentationevent 
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1">
            <summary>
            Acción genérica para mostrar un diálogo de interacción para el tipo involucrado.
            </summary>
            <typeparam name="T">Tipo o entidad involucrado en la interacción.</typeparam>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.DialogProperty">
            <summary>
            Propiedad de dependencia Dialog
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.parentElement">
            <summary>
            Grid que va a contener el diálogo
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.currentState">
            <summary>
            Diccionario que mantiene el estado de la aplicación.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.Dialog">
            <summary>
            Obtiene o establece el diálogo.
            </summary>
            <value>
            El diálogo.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.Invoke(System.Object)">
            <summary>
            Invoca la acción.
            </summary>
            <param name="parameter">El parámetro de la acción. Si la acción no requiere parámetro, puede ser establecido a null.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.SetDialog(`0,System.Action{`0},System.Action,System.Windows.UIElement)">
            <summary>
            Establece el diálogo.
            </summary>
            <param name="entity">La entidad.</param>
            <param name="callback">El callback para la acción Ok.</param>
            <param name="cancelCallback">El callback para la acción Cancel.</param>
            <param name="element">El elemento de UI.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.Initialize">
            <summary>
            Se emplea para inicializar el diálogo.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.SaveCurrentState">
            <summary>
            Guarda el estado actual de la aplicación
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogAction`1.RestorePreviousState">
            <summary>
            Restaura el estado anterior al diálogo modal.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1">
            <summary>
            Clase base para los diálogos de interacción
            </summary>
            <typeparam name="T">Tipo de la entidad del diálogo de interacción</typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.#ctor">
            <summary>
            Inicia una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1"/>.
            </summary>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.ConfirmEventHandler">
            <summary>
            Occurs when Dialog is closed via OK
            </summary>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.CancelEventHandler">
            <summary>
            Occurs when Dialog is closed via Cancel
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.Initialize">
            <summary>
            Inicializa el diálogo.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.Ok">
            <summary>
            Method to close the dialog with OK result
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.Cancel">
            <summary>
            Method to close the dialog with Cancel result
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.OnClose(Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs)">
            <summary>
            Raises the <see cref="E:ConfirmEventHandler"/> or the <see cref="E:CancelEventHandler"/> event.
            </summary>
            <param name="e">The <see cref="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialog`1.IsDesignTime">
            <summary>
            Obtiene un valor que indica si la vista es una vista en tiempo de diseño.
            </summary>
            <value>
            Es true si la vista es una vista en tiempo de diseño; en caso contrario, false.
            </value>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs">
            <summary>
            Event args to signal a interaction request
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs.#ctor(Inflexion2.UX.WPF.MVVM.Dialogs.DialogResultType)">
            <summary>
            Inicia una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs"/>.
            </summary>
            <param name="_type">The _type.</param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs.Type">
            <summary>
            Gets type of interaction requested
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogEventArgs.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.DialogResultType">
            <summary>
            Tipos de resultados que pueden devolverse en un diálogo.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Dialogs.DialogResultType.OK">
            <summary>
            El resultado OK.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.Dialogs.DialogResultType.Cancel">
            <summary>
            El resultado Cancelar.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequest`1">
            <summary>
            Clase que representa una solicitud de interacción que afecta a una entidad o tipo de datos.
            </summary>
            <typeparam name="T">El tipo de la entidad a trabajar.</typeparam>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequest`1.Raised">
            <summary>
            Ocurre cuando la solicitud de interacción es levantada.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequest`1.Raise(`0,System.Action{`0},System.Action)">
            <summary>
            Eleva la solicitud de interacción.
            </summary>
            <param name="entity">La entidad a trabajar.</param>
            <param name="callback">El callback para la acción Ok.</param>
            <param name="cancelCallback">El callback para la acción Cancel.</param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1">
            <summary>
            EventArgs para una solicitud de interacción.
            </summary>
            <typeparam name="T">Tipo de la entidad de la solicitud de interacción.</typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1.#ctor(`0,System.Action{`0},System.Action)">
            <summary>
            Inicia una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1"/>.
            </summary>
            <param name="entity">La entidad a trabajar.</param>
            <param name="callback">El callback a llamar si se pulsa Ok.</param>
            <param name="cancelCallback">El callback a llamar si se pulsa Cancel.</param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1.CancelCallback">
            <summary>
            Obtiene el callback para la acción de cancelar.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1.Callback">
            <summary>
            Obtiene el callback para la acción de Ok.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.Dialogs.BaseDialogRequestEventArgs`1.Entity">
            <summary>
            Obtiene la entidad.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Dialogs.IBaseDialogRequest`1">
            <summary>
            Contrato de una solicitud de interacción genérica,
            </summary>
            <typeparam name="T">Tipo de la entidad de la solicitud de interacción.</typeparam>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.Dialogs.IBaseDialogRequest`1.Raised">
            <summary>
            Ocurre cuando la solicitud de interacción es solicitada.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.BaseViewModel">
            <summary>
            Clase base para cualquier tipo que deba proporcionar notificaciones de cambio de propiedad.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.#ctor">
            <summary>
            .en abstract base view model class common to all viewmodels with basic functions.
            </summary>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.BaseViewModel.PropertyChanged">
            <summary>
            .es Se produce después de que una propiedad cambia de valor.
            </summary>
            <remarks>
            Miembro de la interfaz <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </remarks>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.BaseViewModel.PropertyChanging">
            <summary>
            .es Se produce antes de que una propiedad cambia de valor.
            </summary>
            <remarks>
            Miembro de la interfaz <see cref="T:System.ComponentModel.INotifyPropertyChanging"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.IsDesignTime">
            <summary>
            .es Obtiene un valor que indica si la vista es una vista en tiempo de diseño.
            </summary>
            <value>
            .es Es true si la vista es una vista en tiempo de diseño; en caso contrario, false.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.Item(System.String)">
            <summary>
            .en Gets the error message for the property with the given name.
            </summary>
            <returns>The error message for the property. The default is an empty string ("").</returns>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.Error">
            <summary>
            .en Gets an error message indicating what is wrong with this object.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.Validation">
            <summary>
            .en Gets or sets the validation helper.
            </summary>
            <value>
            .en The validation helper.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.DataErrorInfoValidationAdapter">
            <summary>
            .en Gets or sets the data error info validation adapter.
            </summary>
            <value>
            .en The data error info validation adapter.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.PropertyChangedHandler">
            <summary>
            .es Proporciona acceso al controlador de eventos <see cref="M:PropertyChanged"/> para las clases derivadas.
            </summary>
            <value>
            .es La referencia al controlador de eventos <see cref="M:PropertyChanged"/>.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.PropertyChangingHandler">
            <summary>
            .es Proporciona acceso al controlador de eventos <see cref="M:PropertyChanging"/> para las clases derivadas.
            </summary>
            <value>
            .es La referencia al controlador de eventos <see cref="M:PropertyChanging"/>.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseViewModel.MessageBoxService">
            <summary>
            .en Inyect the MessageBox Service to be able to tell something to the user.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.Rebind">
            <summary>
            .en Raise the property change event with out a property to update the dependency properties.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            .en raise a property change event with a function which returns the property name.
            in this way it is possible to write the event strong typed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpresssion"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.RaisePropertyChanging``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            .en raise a property change event with a function which returns the property name.
            in this way it is possible to write the event strong typed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpresssion"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.SetupValidation(MvvmValidation.ValidationHelper)">
            <summary>
            .en Setups the validation.
            </summary>
            <param name="validation">The validation.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.RaisePropertyChanged(System.String)">
            <summary>
            .es Provoca el evento <see cref="M:PropertyChanged"/> si es necesario.
            </summary>
            <param name="propertyName">
            .es El nombre de la propiedad modificada.
            </param>
            <remarks>
            .es Si el parámetro <paramref name="propertyName"/> no se corresponde
            con una propiedad existente en la clase actual, se produce una excepción
            en la configuración de depuración.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.RaisePropertyChanging(System.String)">
            <summary>
            .es Lanza el evento <see cref="M:PropertyChanging"/> si es necesario.
            </summary>
            <param name="propertyName">
            .es El nombre de la propiedad que se va a modificar.
            </param>
            <remarks>
            .es Si el parámetro <paramref name="propertyName"/> no se corresponde
            con una propiedad existente en la clase actual, se produce una excepción
            en la configuración de depuración.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseViewModel.VerifyPropertyName(System.String)">
            <summary>
            .es Comprueba que un nombre determinado de propiedad existe en esta instancia.
            </summary>
            <param name="propertyName">
            .es El nombre de la propiedad que se va a comprobar.
            </param>
            <remarks>
            .es Este método solamente se aplica a la configuración de depuración.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.PropertySupport">
            <summary>
            class with method to get property info from expresion through reflection
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.PropertySupport.ExtractPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            gets the type of property of one expresion
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpresssion"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.CRUD.IEntityViewModel`1">
            <summary>
            Interface base para los viewmodels de entidades
            </summary>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.IEntityViewModel`1.Id">
            <summary>
            Identificador de la entidad
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3">
            <summary>
            .en Generic abstract Base class for the Query View Models.
            this kind of ViewModel are prepared to manage collection of entities whose are Root Aggreagates.
            .es Clase generica y abstracta de la que derivan los query view models. 
            Este tipo de view models se utiza para manejar conjuntos de entidades que son root aggregates
            es decir que puedne tener operaciones CRUD sobre el repositorio.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.totalRecordCount">
            <summary>
            .es Variable privada utilizada para obtener y establecer el número de 
            registros cargados.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.#ctor">
            <summary>
            .es Inicializacion de base para una nueva instancia de un nuevo query view model.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.SelectedItem">
            <summary>
            .es todos los viewmodels de query manejan siempre una colleción de entidades 
            que son root aggregate y que se guardan en un repositorio.
            Para cualquier collección es importante saber sobre que registro se desea aplicar una operación.
            Esta propiedad mantiene una sicronización con el control de usuario (datagrid o cualquier otro tipo)
            indicandonos cual es el registro o entidad seleccionado.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.Items">
            <summary>
            .es Mantiene la coleccion de viewmodels de las entidades que deseamos manejar.
            En este caso cada linea de el datagrid o del control seleccionado tiene su propio view model.
            Este tiene asu vez la información del registro correspondiente o de la entidad que vamos a mostrar en una linea concreta.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.Title">
            <summary>
            Esta es la propiedad que proporciona el nombre a la ventana o al control de usuario donde 
            se va a visualizar este view model.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.TotalPagesCount">
            <summary>
            .en Variable to calculate the total pages.
            .es Variable calculada para obtener el numero de paginas en función del numero de registros y el numero de registros paginados.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.TotalRecordCount">
            <summary>
            Propiedad pública encargada de obtener e indicar el número de registros 
            cargados en el control de datos.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.PageIndex">
            <summary>
            .es Indice actual correspondiente a la página en la que nos encontramos.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.PageSize">
            <summary>
            .es Tamaño en registros que se desean visualizar en una página.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.Specification">
            <summary>
            propiedad de specification Dto este es un dto con el que se informa a la capa de aplicación que se 
            ha solicitado la ejecución de una operación, generalmente aplicandose a uno o varias entidades y que puede afectar a
            a la información almacenada sobre cada uno de ellos en el correspondiente repositorio.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanActivateRecord(System.Object)">
            <summary>
            method to decide if the record can be activated
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanGetRecords(System.Object)">
            <summary>
            method to decide if is possible to read the records
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanNewRecord(System.Object)">
            <summary>
            method to decide if is possible to add a new record
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanDeleteRecord(System.Object)">
            <summary>
            method to decide if is possible to delete one record
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanEditRecord(System.Object)">
            <summary>
            method to decide if is possible to edit the record
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanGetFirstPageRecords(System.Object)">
            <summary>
            method to decide if is possible to go to the first page
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanGetNextPageRecords(System.Object)">
            <summary>
            .en method to decide if is possible to go to the next page
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanGetPreviousPageRecords(System.Object)">
            <summary>
            method to decide if is possible to go to the Previous page
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.CanGetLastPageRecords(System.Object)">
            <summary>
            method to decide if is possible to go to the last page
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.NavigateToRecord(`2)">
            <summary>
            go to the record with id
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.OnNewRecord(System.Object)">
            <summary>
            go to the new record
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.OnEditRecord(System.Object)">
            <summary>
            edit the record
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.NavigateToSelectedItem">
            <summary>
            open the selected record
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.RefreshCommands">
            <summary>
            refrescamos los susbcriptores de los comandos CRUD recalculando para cada uno de ellos si se habilita o no.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel`3.RefreshPagingCommands">
            <summary>
            refrescamos los subscriptores de los comandos de navegación recalculando para cada uno de ellos 
            si se habilitan sus suscriptores o no.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType">
            <summary>
            Lista pública enumerada del tipo de acción CRUD a acometer.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType.Add">
            <summary>
            Tipo de acción para agregar un nuevo registro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType.Update">
            <summary>
            Tipo de acción para actualizar un nuevo registro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType.Delete">
            <summary>
            Tipo de acción para eliminar un nuevo registro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType.Fetch">
            <summary>
            Tipo de acción para recoger registros.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.CRUD.CrudModeType.AllDisabled">
            <summary>
            Tipo de acción para deshabilitar todos los posibles comandos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2">
            <summary>
            Clase pública que representa la Vista Modelo Base de la cuál tiran el
            resto de ViewModels.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.#ctor">
            <summary>
            .en parameter less constructor 
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.#ctor(`0)">
            <summary>
            .en Typed parameter constructor. 
            </summary>
            <param name="element"> domain entity to manage with this constructor</param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.Id">
            <summary>
            Propiedad pública encargada de obtener y establecer el nombre 
            de la entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Indica el campo Id de la entidad.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            TODO: update summary
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyExpresssion"></param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.ObjectElement">
            <summary>
            .en self reference to the own entity to manage with the viemodel derived from this class.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.Title">
            <summary>
            .en strore for the title of the derived vm. this property is binded in the view.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.CanSaveRecord(System.Object)">
            <summary>
            .en overridible can method for common command on ribbon to ask is is it possible to save the current record
            </summary>
            <param name="parameter">.en addtional info to pass to the method</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.CanDeleteRecord(System.Object)">
            <summary>
            method to calculate if is possible to delete the current entity.
            </summary>
            <param name="parameter">.en addtional info to pass to the method</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.CanGetRecords(System.Object)">
            <summary>
            .en addtional info to pass to the method
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.CanNewRecord(System.Object)">
            <summary>
            .en method to calculate if is possible to add a new record ata thi time.
            ususally this method has to be overrided in the derived viemodel.
            </summary>
            <param name="parameter">.en Addtional info to pass to the method.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.CanActivateRecord(System.Object)">
            <summary>
            
            </summary>
            <param name="parameter"></param>
            <returns>.en Addtional info to pass to the method.</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.GetById(`1)">
            <summary>
            .en General method to get a record by is id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.OnNewRecord(System.Object)">
            <summary>
            General method.
            </summary>
            <param name="parameter">.en Addtional info to pass to the method.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel`2.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            .en Navigate method to go to view a record with his id.
            </summary>
            <param name="navigationContext">.en Id of the record to go to.</param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1">
            <summary>
            Adaptador genérico para la interacción involucrando una entidad o tipo de datos.
            </summary>
            <typeparam name="T">Tipo de la entidad.</typeparam>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.viewModel">
            <summary>
            Campo que contiene el ViewModel 
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.#ctor">
            <summary>
            Inicia una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1"/>.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.#ctor(Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogViewModel{`0})">
            <summary>
            Inicia una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1"/>.
            </summary>
            <param name="viewModel">El ViewModel.</param>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.ViewModel">
            <summary>
            Obtiene el ViewModel.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.SetEntity(`0)">
            <summary>
            Establece la entidad.
            </summary>
            <param name="entity">La entidad.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogAdapter`1.GetEntity">
            <summary>
            Obtiene la entidad.
            </summary>
            <returns>La entidad.</returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogViewModel`1">
            <summary>
            Clase que representa un ViewModel genérico para una solicitud de interacción.
            </summary>
            <typeparam name="T">
            Tipo de la entidad para la solicitud de itneracción.
            </typeparam>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogViewModel`1.Entity">
            <summary>
            Obtiene o establece la entidad.
            </summary>
            <value>
            La entidad.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogViewModel`1.SetEntity(`0)">
            <summary>
            Establece la entidad.
            </summary>
            <param name="entity">La entidad.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogViewModel`1.GetEntity">
            <summary>
            Obtiene la entidad.
            </summary>
            <returns>La entidad.</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.BaseDialogViewModel`1.Initialize">
            <summary>
            Se usa para inicializar el diálogo.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogAdapter`1">
            <summary>
            Contrato para los adaptadores para interacción.
            </summary>
            <typeparam name="T">Tipo de la entidad para la interacción.</typeparam>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogAdapter`1.ViewModel">
            <summary>
            Obtiene el ViewModel.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogViewModel`1">
            <summary>
            Contrato del ViewModel genérico para diálogos de interacción.
            </summary>
            <typeparam name="T">Tipo de la entidad.</typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogViewModel`1.SetEntity(`0)">
            <summary>
            Establece la entidad.
            </summary>
            <param name="entity">La entidad.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogViewModel`1.GetEntity">
            <summary>
            Obtiene la entidad.
            </summary>
            <returns>La entidad</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.Dialogs.IBaseDialogViewModel`1.Initialize">
            <summary>
            Se usa para inicializar el diálogo.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.PresentationViewModel">
            <summary>
            presentation view model
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.PresentationViewModel.Title">
            <summary>
            Obtiene el título de la ventana.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.Regions.IWorkspaceViewModel">
            <summary>
            base class for work space view model
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.Regions.IWorkspaceViewModel.Title">
            <summary>
            title of the work space
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.Regions.IWorkspaceViewModel.IsBusy">
            <summary>
            has focus
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.NavigationViewModel">
            <summary>
            Clase base para las clases modelo de vista (MVVM) que utilizan la región NavigationRegion.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel">
            <summary>
            Clase base para las clases modelo de vista (MVVM) que utilizan la región TaskbarRegion.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.moduleType">
            <summary>
            Indica el tipo de módulo al que pertenece este ViewModel.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.isChecked">
            <summary>
            Indica si el botón está chequeado.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.showModuleNavigationView">
            <summary>
            Indica el comando de carga de la vista de navegación de este módulo.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.showModuleRibbonView">
            <summary>
            Indica el comando de carga de la pestaña de ribbon de este módulo.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.taskButtonImage">
            <summary>
            Indica la imagen del botón.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.taskButtonText">
            <summary>
            Indica el texto del botón.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:TaskbarViewModel"/>.
            </summary>
            <param name="moduleType">
            Tipo de módulo al que pertenece este ViewModel.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:TaskbarViewModel"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.IsChecked">
            <summary>
            Obtiene o establece un valor que indica si el botón está checkeado.
            </summary>
            <value>
            Indica si el botón está chequeado.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.ShowModuleNavigationView">
            <summary>
            Obtiene o establece el comando de carga de la vista de navegación de este módulo.
            </summary>
            <value>
            Indica el comando de carga de la vista de navegación de este módulo.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.ShowModuleRibbonView">
            <summary>
            Obtiene o establece el comando de carga de la vista de navegación de este módulo.
            </summary>
            <value>
            Indica el comando de carga de la vista de navegación de este módulo.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.ModuleRibbonViewModel">
            <summary>
            view model for the ribbon region
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.TaskButtonImage">
            <summary>
            Obtiene o establece la imagen del botón.
            </summary>
            <value>
            Imagen del botón.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.TaskButtonText">
            <summary>
            Obtiene o establece el texto del botón.
            </summary>
            <value>
            Texto del botón.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.ModuleType">
            <summary>
            Obtiene el tipo de módulo al que pertenece este ViewModel.
            </summary>
            <value>
            Tipo de módulo al que pertenece este ViewModel.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.OnNavigationCompleted(System.String)">
            <summary>
            Se ejecuta cuando se ha completado la navegación.
            </summary>
            <param name="publisher">
            Indica el nombre del módulo que ha publicado del evento
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.TaskbarViewModel.NavigationCompleted(Microsoft.Practices.Prism.Regions.NavigationResult)">
            <summary>
            Se ejecuta cuando se ha completado la navegación.
            </summary>
            <param name="result">
            Indica información sobre el resultado de la navegación.
            </param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel">
            <summary>
            Clase base para las clases modelo de vista (MVVM) que utilizan la región ToolbarRegion.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.innerRibbon">
            <summary>
            Referencia al ribbon gestionado.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ToolbarViewModel"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ToolbarViewModel"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.#ctor(Microsoft.Windows.Controls.Ribbon.Ribbon)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ToolbarViewModel"/>.
            </summary>
            <param name="ribbon">
            Ribbon que se va a gestionar.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:ToolbarViewModel"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.InnerRibbon">
            <summary>
            Obtiene la referencia al ribbon gestionado.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.GetCurrentToolbarViewModel">
            <summary>
            Obtiene la referencia al ViewModel asociado a la barra de herramientas actual.
            </summary>
            <returns>
            La referencia al ViewModel asociado a la barra de herramientas actual.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.PruebaTonta">
            <summary>
            test :todo comment or use like example
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.ToolbarViewModel.KeepAlive">
            <summary>
            Obtiene un valor que indica si esta instancia debe ser mantenida cuando se desactiva.
            </summary>
            <value>
            Es true para indicar que la instancia debe ser mantenida; en caso contrario, false.
            </value>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel">
            <summary>
            .es Clase base para las clases modelo de vista (MVVM) que utilizan la región WorkspaceRegion.
            
            .en Base Class for model classes in MVVM wich works in the WorkspaceRegion region.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.editionCommandsProxy">
            <summary>
            .es Referencia al proxy para los comandos globales de edición.
            .en references to the proxy for edition global commands
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.activateRecordCommand">
            <summary>
            Referencia al comando global activar registro.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.deleteRecordCommand">
            <summary>
            Referencia al comando global eliminar registro.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.editRecordCommand">
            <summary>
            Referencia al comando global editar registro.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.getRecordsCommand">
            <summary>
            Referencia al comando global obtener registros.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.newRecordCommand">
            <summary>
            Referencia al comando global nuevo registro.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.saveRecordCommand">
            <summary>
            Referencia al comando global guardar registro.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.getFirstPageRecordsCommand">
            <summary>
            .es Referencia al comando global para obtener la primera página de registros.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.getNextPageRecordsCommand">
            <summary>
            .es Referencia al comando global para obtener la siguiente página de registros.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.getPreviousPageRecordsCommand">
            <summary>
            .es Referencia al comando global para obtener la anterior página de registros.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.getLastPageRecordsCommand">
            <summary>
            .es Referencia al comando global para obtener la anterior página de registros.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.isBusy">
            <summary>
            Indica si el view model esta o no ejecutando un proceso.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:WorkspaceViewModel"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:WorkspaceViewModel"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.ActivateRecordCommand">
            <summary>
            Obtiene el comando eliminar registro.
            </summary>
            <value>
            Comando eliminar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.EditionCommandsProxy">
            <summary>
            Obtiene el proxy para los comandos de edición.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.EditRecordCommand">
            <summary>
            Obtiene el comando editar registro.
            </summary>
            <value>
            Comando editar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.DeleteRecordCommand">
            <summary>
            Obtiene el comando eliminar registro.
            </summary>
            <value>
            Comando eliminar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.GetRecordsCommand">
            <summary>
            Obtiene el comando obtener registros.
            </summary>
            <value>
            Comando obtener registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.NewRecordCommand">
            <summary>
            Obtiene el comando nuevo registro.
            </summary>
            <value>
            Comando nuevo registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.SaveRecordCommand">
            <summary>
            .es Obtiene el comando guardar registro.
            </summary>
            <value>
            Comando guardar registro.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.GetFirstPageRecordsCommand">
            <summary>
            .es Obtiene el comando cargar la primera página de registros.
            </summary>
            <value>
            Comando cargar la primera página de registros.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.GetNextPageRecordsCommand">
            <summary>
            .es Obtiene el comando cargar la siguiente página de registros.
            </summary>
            <value>
            Comando cargar la siguiente página de registros.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.GetPreviousPageRecordsCommand">
            <summary>
            .es Obtiene el comando cargar la anterior página de registros.
            </summary>
            <value>
            Comando cargar la siguiente página de registros.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.GetLastPageRecordsCommand">
            <summary>
            .es Obtiene el comando cargar la anterior página de registros.
            </summary>
            <value>
            Comando cargar la siguiente página de registros.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.Title">
            <summary>
            .es Obtiene el titulo a mostrar en la vista.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.IsBusy">
            <summary>
            Propiedad que indica si el view model esta o no ejecutando un proceso.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanActivateRecord(System.Object)">
            <summary>
            Determina si el comando activa registro se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanDeleteRecord(System.Object)">
            <summary>
            Determina si el comando eliminar registro se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanEditRecord(System.Object)">
            <summary>
            Determina si el comando editar registro se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanGetRecords(System.Object)">
            <summary>
            Determina si el comando obtener registros se puede ejecutar.
            Este metodo (y todos lo "can") aun siendo virtual se ejecuta cuando se carga el viewmodel de la region workspace
            al inicializar el shell el cual no tiene todavia ningun módulo cargado que lo inicialize. 
            el cual lo inicializaria con sus metodos sobreescritos.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanNewRecord(System.Object)">
            <summary>
            Determina si el comando nuevo registro se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanSaveRecord(System.Object)">
            <summary>
            Determina si el comando guardar registro se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanGetFirstPageRecords(System.Object)">
            <summary>
            .es Determina si el comando obtener la primera pagina de registros se puede ejecutar.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
            <returns>
            .es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanGetNextPageRecords(System.Object)">
            <summary>
            .es Determina si el comando "obtener la siguiente página de registros" se puede ejecutar.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
            <returns>
            .es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanGetPreviousPageRecords(System.Object)">
            <summary>
            .es Determina si el comando "obtener la anterior pagina de registros" se puede ejecutar.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
            <returns>
            .es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.CanGetLastPageRecords(System.Object)">
            <summary>
            .es Determina si el comando "obtener la ultima página de registros" se puede ejecutar.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
            <returns>
            .es true si el comando se puede ejecutar; en caso contrario, false.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnActivateRecord(System.Object)">
            <summary>
            Se ejecuta cuando se va a eliminar el registro actual.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnDeleteRecord(System.Object)">
            <summary>
            Se ejecuta cuando se va a eliminar el registro actual.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnEditRecord(System.Object)">
            <summary>
            Se ejecuta cuando se va a editar el registro actual.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnGetRecords(System.Object)">
            <summary>
            Se ejecuta cuando se van a obtener registros.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnNewRecord(System.Object)">
            <summary>
            Se ejecuta cuando se va a editar un nuevo registro.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnSaveRecord(System.Object)">
            <summary>
            Se ejecuta cuando se va a guardar el registro actual.
            </summary>
            <param name="parameter">
            Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnGetFirstPageRecords(System.Object)">
            <summary>
            .es Se ejecuta cuando se van a obtener la primera pagina de registros.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnGetNextPageRecords(System.Object)">
            <summary>
            .es Se ejecuta cuando se van a obtener la siguiente pagina de registros.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnGetPreviousPageRecords(System.Object)">
            <summary>
            .es Se ejecuta cuando se van a obtener la anterior página de registros.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.OnGetLastPageRecords(System.Object)">
            <summary>
            .es Se ejecuta cuando se van a obtener la ultima página de registros.
            </summary>
            <param name="parameter">
            .es Parámetro con información adicional.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.RaiseIsActiveChanged">
            <summary>
            Provoca el evento <see cref="M:IsActiveChanged"/> si es necesario.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.RegisterCommands">
            <summary>
            Registra los comandos globales.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.WorkspaceViewModel.UnregisterCommands">
            <summary>
            Cancela el registro de los comandos globales.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.ShellWindowViewModel">
            <summary>
            ViewModel de ShellWindow.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.ShellWindowViewModel.regionManager">
            <summary>
            Referencia al gestor de regiones Prism.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ShellWindowViewModel.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion2.UX.WPF.MVVM.ViewModels.ShellWindowViewModel" />.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.ShellWindowViewModel.NavigationService_NavigationFailed(System.Object,Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs)">
            <summary>
            Handles the NavigationFailed event of the NavigationService.
            
            Developers you can use this event handler as a central place to 
            display a navigation failed message.  This handler can come in handy
            when initiating navigation from XAML where no call back is available.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:Microsoft.Practices.Prism.Regions.RegionNavigationFailedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel">
            <summary>
            .en view model to managed user login
            .es View model para el login de usuario en el sistema.
            </summary>
            <remarks>
            .en No comment
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.CurrentDateAndTime">
            <summary>
            Reloj
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.Login">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.Password">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.DialogResult">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.Ok">
            <summary>
            go on command
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.Cancel">
            <summary>
            cancel dialog command and close the aplication
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.CanExecuteOk">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.ExecuteOk">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.LoginViewModel.SetupValidation(MvvmValidation.ValidationHelper)">
            <summary>
            
            </summary>
            <remarks>
            Sin comentarios adicionales
            </remarks>
            <param name="validation"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel">
            <summary>
            Clase base para las clases modelo de vista (MVVM) que utilizan regiones Prism.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.eventAggregator">
            <summary>
            Referencia a la interfaz para obtener las instancias de un tipo de evento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.regionManager">
            <summary>
            Referencia al gestor de regiones Prism.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.unityContainer">
            <summary>
            Referencia al contenedor de inyección de dependencias Unity.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.isActive">
            <summary>
            Valor que indica si esta instancia está activa.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:RegionViewModel"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:RegionViewModel"/>.
            </remarks>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.IsActiveChanged">
            <summary>
            Se produce después de que la propiedad <see cref="P:IsActive"/> cambia de valor.
            </summary>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.IActiveAware"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.IsActive">
            <summary>
            Obtiene o establece un valor que indica si esta instancia está activa.
            </summary>
            <value>
            Es true para indicar que la instancia está activa; en caso contrario, false.
            </value>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.IActiveAware"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.KeepAlive">
            <summary>
            Obtiene un valor que indica si esta instancia debe ser mantenida cuando se desactiva.
            </summary>
            <value>
            Es true para indicar que la instancia debe ser mantenida; en caso contrario, false.
            </value>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Regions.IRegionMemberLifetime"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.NavigationService">
            <summary>
            get instace of i navigation service to manage the navigation betwen views
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.EventAggregator">
            <summary>
            Obtiene la referencia a la interfaz para obtener las instancias de un tipo de evento.
            </summary>
            <value>
            Referencia a la interfaz para obtener las instancias de un tipo de evento.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.IsActiveChangedHandler">
            <summary>
            Proporciona acceso al controlador de eventos <see cref="M:IsActiveChanged"/> para las clases derivadas.
            </summary>
            <value>
            La referencia al controlador de eventos <see cref="M:IsActiveChanged"/>.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.RegionManager">
            <summary>
            Obtiene la referencia al gestor de regiones Prism.
            </summary>
            <value>
            Referencia al gestor de regiones Prism.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.UnityContainer">
            <summary>
            Obtiene la referencia al contenedor de inyección de dependencias Unity.
            </summary>
            <value>
            Referencia al contenedor de inyección de dependencias Unity.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.IsNavigationTarget(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Determina si esta instancia puede manejar la solicitud de navegación.
            </summary>
            <param name="navigationContext">
            El contexto de navegación.
            </param>
            <returns>
            Es true si esta instancia acepta la solicitud de navegación; en caso contrario, false.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Regions.INavigationAware"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.OnNavigatedFrom(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Se invoca antes de ejecutar una operación de navegación.
            </summary>
            <param name="navigationContext">
            El contexto de navegación.
            </param>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Regions.INavigationAware"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext)">
            <summary>
            Se invoca cuando finaliza una operación de navegación.
            </summary>
            <param name="navigationContext">
            El contexto de navegación.
            </param>
            <remarks>
            Miembro de la interfaz <see cref="T:Microsoft.Practices.Prism.Regions.INavigationAware"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.ViewModels.RegionViewModel.RaiseIsActiveChanged">
            <summary>
            Provoca el evento <see cref="M:IsActiveChanged"/> si es necesario.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.Adapters.RibbonRegionAdapter">
            <summary>
            Adaptador que habilita el uso del control Ribbon como una región Prism.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Adapters.RibbonRegionAdapter.#ctor(Microsoft.Practices.Prism.Regions.IRegionBehaviorFactory)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:RibbonRegionAdapter"/>.
            </summary>
            <param name="behaviorFactory">
            Permite el registro de la configuración por defecto de los comportamientos de la región.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:RibbonRegionAdapter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Adapters.RibbonRegionAdapter.Adapt(Microsoft.Practices.Prism.Regions.IRegion,Microsoft.Windows.Controls.Ribbon.Ribbon)">
            <summary>
            Adapta un control WPF para servir como una región Prism.
            </summary>
            <param name="region">
            La nueva región que se utiliza.
            </param>
            <param name="regionTarget">
            El control WPF que se va a adaptar.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.Adapters.RibbonRegionAdapter.CreateRegion">
            <summary>
            Crea una región.
            </summary>
            <returns>
            La región creada.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.BaseBootstrapper">
            <summary>
            Clase base de programa previo (arranque Prism).
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.moduleSearchFilter">
            <summary>
            Filtro de búsqueda de módulos.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.moduleSearchPath">
            <summary>
            Ruta de búsqueda de módulos.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BootstrapperBase"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:BootstrapperBase"/>.
            <para>
            La ruta de búsqueda de módulos por defecto es la ruta del directorio
            donde se encuentra el ejecutable de la aplicación.
            </para>
            <para>
            El filtro de búsqueda de módulos por defecto es "*.dll".
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BootstrapperBase"/>.
            </summary>
            <param name="searchFilter">
            Filtro de búsqueda de módulos.
            </param>
            <param name="searchPath">
            Ruta de búsqueda de módulos.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:BootstrapperBase"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.ModuleSearchFilter">
            <summary>
            Obtiene el filtro de búsqueda de módulos.
            </summary>
            <value>
            Cadena que contiene el filtro de búsqueda de módulos.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.ModuleSearchPath">
            <summary>
            Obtiene la ruta de búsqueda de módulos.
            </summary>
            <value>
            Cadena que contiene la ruta de búsqueda de módulos.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.ConfigureRegionAdapterMappings">
            <summary>
            Configura las asignaciones para el adaptador de región por defecto.
            </summary>
            <returns>
            Asignaciones configuradas para el adaptador de región por defecto.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.CreateModuleCatalog">
            <summary>
            Configura el catálogo de módulos.
            </summary>
            <returns>
            Catálogo de módulos configurado.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.CreateShell">
            <summary>
            Crea la ventana principal de aplicación.
            </summary>
            <returns>
            Instancia creada de la ventana principal de aplicación.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.InitializeShell">
            <summary>
            Inicializa la ventana principal de aplicación.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.BaseBootstrapper.Run(System.Boolean)">
            <summary>
            execution of bootstrapper
            </summary>
            <param name="runWithDefaultConfiguration"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.RelayCommand`1">
            <summary>
            A command whose sole purpose is to relay its functionality to other 
            objects by invoking delegates. The default return value for the 
            CanExecute method is 'true'.
            </summary>
            <remarks>
            Sin comenarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.UX.WPF.MVVM.RelayCommand`1"/> 
            class and the command can always be executed.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="execute">
            The execution logic.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand`1.#ctor(System.Action{`0},System.Predicate{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.UX.WPF.MVVM.RelayCommand`1"/> class.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="execute">
            The execution logic.
            </param>
            <param name="canExecute">
            The execution status logic.
            </param>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.RelayCommand`1.CanExecuteChanged">
            <summary>
            Evento que se lanza para preguntar si se puede ejecutar el comando.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Función pública utilizada para preguntar si se puede ejecutar el comando.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Object"/> de entrada a la función.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand`1.Execute(System.Object)">
            <summary>
            Método público encargado de ejecutar el método.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Object"/> de entrada al método.
            </param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other 
            objects by invoking delegates. The default return value for the 
            CanExecute method is 'true'.
            </summary>
            <remarks>
            Sin comenarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.UX.WPF.MVVM.RelayCommand`1"/> 
            class and the command can always be executed.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="execute">
            The execution logic.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.UX.WPF.MVVM.RelayCommand`1"/> class.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="execute">
            The execution logic.
            </param>
            <param name="canExecute">
            The execution status logic.
            </param>
        </member>
        <member name="E:Inflexion2.UX.WPF.MVVM.RelayCommand.CanExecuteChanged">
            <summary>
            Evento que se lanza para preguntar si se puede ejecutar el comando.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand.CanExecute(System.Object)">
            <summary>
            Función pública utilizada para preguntar si se puede ejecutar el comando.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Object"/> de entrada a la función.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.RelayCommand.Execute(System.Object)">
            <summary>
            Método público encargado de ejecutar el método.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Object"/> de entrada al método.
            </param>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog">
            <summary>
            Representa un catálogo de módulos creado desde un directorio filtrado.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.DefaultFilter">
            <summary>
            Define el filtro por defecto.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.filter">
            <summary>
            Representa el filtro.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FilteredDirectoryModuleCatalog"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:FilteredDirectoryModuleCatalog"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.Filter">
            <summary>
            Obtiene o establece el filtro.
            </summary>
            <value>
            Cadena que contiene el filtro.
            </value>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerLoad">
            <summary>
            Acciona la lógica principal de la construcción del dominio secundario
            y la búsqueda de las ensamblados que contienen módulos Prism definidos.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader">
            <summary>
            Cargador de información de módulos Prism.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader.GetModuleInfos(System.String,System.String)">
            <summary>
            Obtiene la información de módulos a partir de una ruta y filtro determinado.
            </summary>
            <param name="path">
            Ruta donde se va a realizar la búsqueda.
            </param>
            <param name="filter">
            Filtro que se va a aplicar.
            </param>
            <returns>
            Matriz que contiene la información de módulos obtenida.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader.LoadAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Carga los ensamblados especificados.
            </summary>
            <param name="assemblies">
            Ensamblados que se van a cargar.
            </param>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader.CreateModuleInfo(System.Type)">
            <summary>
            Crea la información de módulo a partir de su tipo.
            </summary>
            <param name="type">
            Tipo que se va a utilizar.
            </param>
            <returns>
            Información de módulo del tipo indicado.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader.GetNotAllreadyLoadedModuleInfos(System.IO.DirectoryInfo,System.String,System.Type)">
            <summary>
            Obtener las informaciones de módulo que todavía no estén cargadas.
            </summary>
            <param name="directory">
            Directorio donde se va a realizar la búsqueda.
            </param>
            <param name="filter">
            Filtro que se va a utilizar.
            </param>
            <param name="moduleType">
            Tipo de módulo.
            </param>
            <returns>
            Informaciones de módulo obtenidas.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.MVVM.FilteredDirectoryModuleCatalog.InnerModuleInfoLoader.OnReflectionOnlyResolve(System.ResolveEventArgs,System.IO.DirectoryInfo)">
            <summary>
            Se invoca solamente al resolver en el contexto de reflexión.
            </summary>
            <param name="args">
            Datos del evento.
            </param>
            <param name="directory">
            Directorio donde se va a realizar la búsqueda.
            </param>
            <returns>
            Ensamblado resuelto.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.RegionNames">
            <summary>
            Clase estática que define los nombres de región Prism.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.RegionNames.NavigationRegion">
            <summary>
            Define el nombre de la región de navegación.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.RegionNames.TaskbarRegion">
            <summary>
            Define el nombre de la región de tareas.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.RegionNames.ToolbarRegion">
            <summary>
            Define el nombre de la región de la barra de herramientas.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.MVVM.RegionNames.WorkspaceRegion">
            <summary>
            Define el nombre de la región de espacio de trabajo.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.MVVM.IRegionViewModel">
            <summary>
            Interfaz para las clases modelo de vista (MVVM) que utilizan regiones Prism.
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.RangeObservableCollection`1">
            <summary>
            Esta clase hereda de ObservableCollection y soporta añadir bloques de entidades.
            </summary>
            <typeparam name="T">El tipo a implementar.</typeparam>
        </member>
        <member name="F:Inflexion2.UX.WPF.Helpers.RangeObservableCollection`1.suppressNotification">
            <summary>
            Flag que hace que se inhiba o se dispare el evento OnCollectionChanged
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.RangeObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Agrega un rango de elementos a la ObservableCollection.
            </summary>
            <param name="list">La lista de entidades.</param>
            <exception cref="T:System.ArgumentNullException">Eleva una excepción si la lista suministrada es nula.</exception>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.RangeObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Levanta el evento <see cref="E:CollectionChanged" />.
            </summary>
            <param name="e">La instancia <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> conteniendo los datos del evento.</param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.AsyncCallHelper">
            <summary>
            TODO: update summary
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.AsyncCallHelper.Execute(System.Action{System.Boolean},System.Func{Inflexion2.UX.WPF.Helpers.AsyncCallResult},System.Action{Inflexion2.UX.WPF.Helpers.AsyncCallResult})">
            <summary>
            todo: update summary
            </summary>
            <param name="isBusy"></param>
            <param name="operation"></param>
            <param name="resultHandler"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.AsyncCallResult">
            <summary>
            A class designed to encapsulate the result of an asynchronous operation.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Helpers.AsyncCallResult.Result">
            <summary>
            Todo: update summary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Helpers.AsyncCallResult.Error">
            <summary>
            Todo: update summary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Helpers.AsyncCallResult.OperationFailed">
            <summary>
            Todo: update summary
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.AsyncCallResult.#ctor(System.Exception)">
            <summary>
            Todo: update summary
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.AsyncCallResult.#ctor(System.Object)">
            <summary>
            Todo: update summary
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.DataGridHelper">
            <summary>
            Clase pública estática utilzada como ayuda adicional a acciones 
            habituales o generales con los controles DataGrid.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.DataGridHelper.GetCell(System.Windows.Controls.DataGridCellInfo)">
            <summary>
            Función pública estática, que nos devuelve una celda 
            seleccionada en el control DataGrid.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="dataGridCellInfo">
            Información de la celda del control DataGrid.
            </param>
            <returns>
            Celda seleccionada.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.DataGridHelper.GetDataGridFromChild(System.Windows.DependencyObject)">
            <summary>
            Función pública estática, que nos devuelve el control DataGrid existente en un control child.
            </summary>
            <param name="dataGridPart"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.DataGridHelper.GetRowIndex(System.Windows.Controls.DataGridCell)">
            <summary>
            Función pública estática, que nos devuelve el índice de la 
            fila seleccionada en el control DataGrid.
            </summary>
            <param name="dataGridCell">
            Celda seleccionada en el control DataGrid.
            </param>
            <returns>
            Índica de la fila seleccionada en el control DataGrid.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.DataGridHelper.GetSelectedRow(System.Windows.Controls.DataGrid)">
            <summary>
            Función pública estática, que nos devuelve una fila de acuerdo 
            a la fila seleccionada.
            </summary>
            <param name="dataGrid">
            Control DataGrid.
            </param>
            <returns>
            Fila seleccionada.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.DialogCloser">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Helpers.DialogCloser.DialogResultProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.DialogCloser.SetDialogResult(System.Windows.Window,System.Nullable{System.Boolean})">
            <summary>
            
            </summary>
            <param name="target"></param>
            <param name="value"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.GeneralHelper">
            <summary>
            Clase pública utilzada como ayuda adicional a acciones habituales o generales.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.GeneralHelper.GetVisualChild``1(System.Windows.Media.Visual)">
            <summary>
            Función pública estática, encargada de obtener un elemento.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Helpers.PasswordHelper">
             <summary>
            Password box binding helper
            https://wpftutorial.net/PasswordBox.html
             </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Helpers.PasswordHelper.PasswordProperty">
            <summary>
            wpf depedency property for passwords
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Helpers.PasswordHelper.AttachProperty">
            <summary>
            todo:update summary
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.PasswordHelper.SetAttach(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            todo:update summary
            </summary>
            <param name="dp"></param>
            <param name="value"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.PasswordHelper.GetAttach(System.Windows.DependencyObject)">
            <summary>
            todo:update summary
            </summary>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.PasswordHelper.GetPassword(System.Windows.DependencyObject)">
            <summary>
            todo:update summary
            </summary>
            <param name="dp"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Helpers.PasswordHelper.SetPassword(System.Windows.DependencyObject,System.String)">
            <summary>
            todo:update summary
            </summary>
            <param name="dp"></param>
            <param name="value"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.BoolToVisibility">
            <summary>
            wpf Boolean converter To Visibility property
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BoolToVisibility.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BoolToVisibility.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            ConvertBack implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.MultiplyConverter">
            <summary>
            https://github.com/JohanLarsson/So.Wpf/blob/master/So.Wpf/Converters/MultiplyConverter.cs
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.MultiplyConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="values"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.MultiplyConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.SelectedToColorConverter">
            <summary>
            wpf Selected Color Converter
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.SelectedToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.SelectedToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.StringStateToPathConverter">
            <summary>
            use an image to show an item with 3 status
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringStateToPathConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IMultiValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringStateToPathConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            IMultiValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetTypes"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.StringToGeometryConverter">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToGeometryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToGeometryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            reverse conversion not implemented 
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.StringToImageSourceConverter">
            <summary>
            https://social.msdn.microsoft.com/Forums/vstudio/en-US/ea1fd63b-738c-40ca-850e-994eb21dccea/binding-to-image-source-via-valueconverter-and-datacontext-in-usercontrol?forum=wpf
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToImageSourceConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToImageSourceConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter inverted not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.SystemIconConverter">
            <summary>
            Convierte una cadena representando un tipo de icono en una imagen
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.SystemIconConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte el valor especificado.
            </summary>
            <param name="value">El valor.</param>
            <param name="type">El tipo.</param>
            <param name="parameter">El parámetro.</param>
            <param name="culture">La cultura.</param>
            <returns>Devuelve un BitmapSource con la imagen para mostrar.</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.SystemIconConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            method notimplemented
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.BooleanActivoValueConverter">
            <summary>
            Clase pública encargada de convertir valores de tipo Date.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanActivoValueConverter.#ctor">
            <summary>
            Constructor de la clase.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanActivoValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Función pública encargada de la conversión de un valor booleano 
            a un valor considerado adecuado para la interfaz de usuario.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="value">
            Valor a convertir.
            </param>
            <param name="targetType">
            Tipo de valor a convertir.
            </param>
            <param name="parameter">
            Parámetro del valor.
            </param>
            <param name="culture">
            Cultura o idioma de conversión.
            </param>
            <returns>
            Objeto convertido.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanActivoValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Función pública encargada de la conversión de un valor booleano 
            a un valor considerado adecuado para la interfaz de usuario.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="value">
            Valor a convertir.
            </param>
            <param name="targetType">
            Tipo de valor a convertir.
            </param>
            <param name="parameter">
            Parámetro del valor.
            </param>
            <param name="culture">
            Cultura o idioma de conversión.
            </param>
            <returns>
            Objeto convertido.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityConverter">
            <summary>
            Conversor de valores de tipo booleano a estado de presentación de un elemento, y viceversa.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityConverter.Instance">
            <summary>
            Referencia a la instancia del conversor.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valores generados por el enlace de origen.
            </param>
            <param name="targetType">
            Tipo de la propiedad del destino de enlace.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valor que genera el destino de enlace.
            </param>
            <param name="targetType">
            Tipo en el que se va a convertir.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.BooleanValueConverter">
            <summary>
            Conversor de valores de tipo booleano.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.ValueConverters.BooleanValueConverter.Instance">
            <summary>
            Referencia a la instancia del conversor.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valores generados por el enlace de origen.
            </param>
            <param name="targetType">
            Tipo de la propiedad del destino de enlace.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valor que genera el destino de enlace.
            </param>
            <param name="targetType">
            Tipo en el que se va a convertir.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityCollapsedConverter">
            <summary>
            Conversor de valores de tipo booleano a estado de presentación de un elemento, y viceversa.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityCollapsedConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valores generados por el enlace de origen.
            </param>
            <param name="targetType">
            Tipo de la propiedad del destino de enlace.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.BooleanToVisibilityCollapsedConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valor que genera el destino de enlace.
            </param>
            <param name="targetType">
            Tipo en el que se va a convertir.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.MarkupConverter">
            <summary>
            http://sourcebrowser.io/Browse/MahApps/MahApps.Metro/MahApps.Metro/Converters/MarkupConverter.cs
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.MarkupConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            todo: update summary
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.MarkupConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.MarkupConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.OffOnConverter">
            <summary>
            off on converter
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.OffOnConverter.#ctor">
            <summary>
            Constructor de la clase.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.OffOnConverter.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="valueTrue">Valor mostrado cuando vale <c>true</c>.</param>
            <param name="valueFalse">Valor mostrado cuando vale <c>false</c>.</param>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.OffOnConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.OffOnConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.String,System.String)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <param name="valueTrue">Valor mostrado cuando vale <c>true</c>.</param>
            <param name="valueFalse">Valor mostrado cuando vale <c>false</c>.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.OffOnConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.StringToColorConverter">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            color converter
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            inverted conversion
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.StringToPathGeometryConverter">
            <summary>
            String To PathGeometry Converter
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToPathGeometryConverter.Convert(System.String)">
            <summary>
            converter from string to file path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToPathGeometryConverter.ConvertBack(System.Windows.Media.PathGeometry)">
            <summary>
            not implemented
            </summary>
            <param name="geometry"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToPathGeometryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.StringToPathGeometryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            reverse converter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.TextToColorConverter">
            <summary>
            Devuelve un color ARGB en hexadecimal dependiendo de los valores recibidos.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.TextToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Devuelve el color "#FFF9B778" si el valor recibido es null, vacío o es igual al parámetro recibido. 
            </summary>
            <param name="value">
            Objeto a comprobar
            </param>
            <param name="targetType"></param>
            <param name="parameter">
            Valor con el que se compara el objeto a comprobar.
            </param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.TextToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            method not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.ThicknessToDoubleConverter">
            <summary>
            Thickness To Double Converter
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ThicknessToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ThicknessToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.DateValueConverter">
            <summary>
            Conversor de valores de tipo fecha.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.ValueConverters.DateValueConverter.Instance">
            <summary>
            Referencia a la instancia del conversor.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.DateValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valores generados por el enlace de origen.
            </param>
            <param name="targetType">
            Tipo de la propiedad del destino de enlace.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.DateValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">
            Valor que genera el destino de enlace.
            </param>
            <param name="targetType">
            Tipo en el que se va a convertir.
            </param>
            <param name="parameter">
            Parámetro de convertidor que se va a usar.
            </param>
            <param name="culture">
            Referencia cultural que se va a usar en el convertidor.
            </param>
            <returns>
            Valor convertido.
            </returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.TimeSpanMinuteSecondValueConverter">
            <summary>
            Convierte un valor de tipo TimeSpan a su representación de cadena de minutos : segundos
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.TimeSpanMinuteSecondValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">Valores generados por el enlace de origen.</param>
            <param name="targetType">Tipo de la propiedad del destino de enlace.</param>
            <param name="parameter">Parámetro de convertidor que se va a usar.</param>
            <param name="culture">Referencia cultural que se va a usar en el convertidor.</param>
            <returns>Valor convertido.</returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.TimeSpanMinuteSecondValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convierte un valor.
            </summary>
            <param name="value">Valores generados por el enlace de origen.</param>
            <param name="targetType">Tipo de la propiedad del destino de enlace.</param>
            <param name="parameter">Parámetro de convertidor que se va a usar.</param>
            <param name="culture">Referencia cultural que se va a usar en el convertidor.</param>
            <returns>Valor convertido.</returns>
            <remarks>
            Miembro de la interfaz <see cref="T:System.Windows.Data.IValueConverter"/>.
            </remarks>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.ToLowerConverter">
            <summary>
            to lower
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ToLowerConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ToLowerConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.ValueConverters.ToUpperConverter">
            <summary>
            to upper
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ToUpperConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.ValueConverters.ToUpperConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            IValueConverter implementation
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.LoginView">
            <summary>
            Interaction logic for Login.xaml
            </summary>
            <summary>
            LoginView
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.LoginView.WindowLanguajeProperty">
            <summary>
            Esta propiedad es para salvar en la configuración del usuario el idioma seleccionado.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.LoginView.#ctor">
            <summary>
            default parameterless constructor for the view of Login.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.LoginView.WindowLanguaje">
            <summary>
            Atributo para dar soporte a la propiedad de dependencia en la que almacenamos el lenguaje elegido
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.LoginView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.AccessBehavior">
            <summary>
            This behavior controls the UI elements. 
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.VMBoundedProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.RemoveInvisibleProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.CollapseInvisibleProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.ContextProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.DTemplateProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.DTemplateNameProperty">
            <summary>
            The template key for readonly mode.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessBehavior.ReadOnlyTemplateProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.VMBounded">
            <summary>
            Gets or sets the VM bounded property.
            </summary>
            <value>The VM bounded.</value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.RemoveInvisible">
            <summary>
            Gets or sets a value indicating whether [remove invisible].
            </summary>
            <value><c>true</c> if [remove invisible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.CollapseInvisible">
            <summary>
            Gets or sets a value indicating whether [collapse invisible].
            </summary>
            <value><c>true</c> if [collapse invisible]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.Context">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.DTemplate">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.DTemplateName">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.ReadOnlyTemplate">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.AccessBehavior.Provider">
            <summary>
            Gets or sets the auth level provider.
            </summary>
            <value>The auth provider.</value>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.EnforceAuthorization">
            <summary>
            Updates the UI base on authorization level.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.SetReadOnly">
            <summary>
            Sets the read only.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.SetInvisible">
            <summary>
            Sets the invisible.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.GetLevel(System.Object)">
            <summary>
            Gets the level from bounded property or entire VM.
            </summary>
            <param name="vmBounded">The vm bounded property.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.CheckLevel(System.Object)">
            <summary>
            Checks the level for class.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessBehavior.CheckLevel(System.Reflection.PropertyInfo)">
            <summary>
            Checks the level.
            </summary>
            <param name="info">The info.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.AccessHandler">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessHandler.#ctor(System.Windows.DependencyObject)">
            <summary>
            todo: update sumary
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessHandler.GetCheck(System.Windows.DependencyObject)">
            <summary>
            todo: update sumary
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessHandler.SetCheck(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            todo: update sumary
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessHandler.CheckProperty">
            <summary>
            todo: update sumary
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.AccessLevel">
            <summary>
            Lsita enumerada que determina el nivel de seguridad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessLevel.Invisible">
            <summary>
            Estado correspondiente a dato que no se muestra.
            </summary>
            <value>
            El valor del enumerado es <c>1</c>.
            </value>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessLevel.ReadOnly">
            <summary>
            Estado correspondiente a dato que se muestra pero no se 
            puede modificar.
            </summary>
            <value>
            El valor del enumerado es <c>2</c>.
            </value>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessLevel.Disabled">
            <summary>
            Estado correspondiente a dato no activo.
            </summary>
            <value>
            El valor del enumerado es <c>3</c>.
            </value>
        </member>
        <member name="F:Inflexion2.UX.WPF.Security.AccessLevel.Unassigned">
            <summary>
            Estado correspondiente a permiso no asignado.
            </summary>
            <value>
            El valor del enumerado es <c>4</c>.
            </value>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.CheckAccessAttribute">
            <summary>
            using System;
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.CheckAccessAttribute.#ctor">
            <summary>
            using System;
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.CheckAccessAttribute.#ctor(System.String)">
            <summary>
            using System;
            </summary>
            <param name="permissionName"></param>
        </member>
        <member name="P:Inflexion2.UX.WPF.Security.CheckAccessAttribute.PermissionName">
            <summary>
            using System;
            </summary>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.AccessLevelProvider">
            <summary>
            ClasepProveedor del nivel de autorización.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.AccessLevelProvider.GetAccessLevel(System.String)">
            <summary>
            Función pública encargada de obtener el nivel de acceso para el nombre 
            del permiso de seguridad en interfaz proporcionado.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="permissionName">
            Parámetro que indica el nombre del permiso de seguridad para interfaz.
            </param>
            <returns>
            Devuelve el nivel de acceso asignado.<see cref="T:Inflexion2.UX.WPF.Security.AccessLevel"/>
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Security.IAccessLevelProvider">
            <summary>
            The provider for authorization level base on security name. 
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Security.IAccessLevelProvider.GetAccessLevel(System.String)">
            <summary>
            Gets the auth level base on permission name (string).
            </summary>
            <param name="permissionName">Name of the security.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.MaestraKeyValueItem">
            <summary>
            Representa la clase base para los elementos clave-valor.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.activo">
            <summary>
            Valor que indica si el elemento está activo.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.id">
            <summary>
            Identificador del elemento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.isSelected">
            <summary>
            Valor que indica si el elemento está seleccionado.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.nombre">
            <summary>
            Nombre del elemento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.codigo">
            <summary>
            Código del elemento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.horaInicio">
            <summary>
            Hora de inicio del elemento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.horaFin">
            <summary>
            Hora de fin del elemento.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.#ctor(System.Int32,System.String,System.Boolean,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseKeyValueItem" />.
            </summary>
            <param name="id">Identificador del elemento.</param>
            <param name="nombre">Nombre del elemento.</param>
            <param name="activo">Valor que indica si el elemento está activo.</param>
            <param name="codigo">El codigo del elemento.</param>
            <param name="horaInicio">La hora inicio del elemento.</param>
            <param name="horaFin">La hora fin del elemento.</param>
            <remarks>
            Constructor de la clase <see cref="T:BaseKeyValueItem" />.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.#ctor(System.Int32,System.String,System.Boolean,System.Boolean,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseKeyValueItem" />.
            </summary>
            <param name="id">Identificador del elemento.</param>
            <param name="nombre">Nombre del elemento.</param>
            <param name="activo">Valor que indica si el elemento está activo.</param>
            <param name="isSelected">Valor que indica si el elemento está seleccionado.</param>
            <param name="codigo">El codigo del elemento.</param>
            <param name="horaInicio">La hora inicio del elemento.</param>
            <param name="horaFin">La hora fin del elemento.</param>
            <remarks>
            Constructor de la clase <see cref="T:BaseKeyValueItem" />.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.Activo">
            <summary>
            Obtiene o establece un valor que indica si el elemento está activo.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.Id">
            <summary>
            Obtiene o establece el identificador del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.IsSelected">
            <summary>
            Obtiene o establece un valor que indica si el elemento está seleccionado.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.Nombre">
            <summary>
            Obtiene o establece el nombre del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.NumericId">
            <summary>
            Obtiene el identificador numérico del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.HoraFin">
            <summary>
            Obtiene o establece la hora de fin del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.HoraInicio">
            <summary>
            Obtiene o establece la hora de inicio del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.Codigo">
            <summary>
            Obtiene o establece el código del elemento.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.Equals(System.Object)">
            <summary>
            Devuelve un valor que indica cuando esta instancia es igual al objeto especificado.
            </summary>
            <param name="obj">
            El objeto que se va a comparar con esta instancia.
            </param>
            <returns>
            Es <b>true</b> si es igual; en caso contrario, <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.GetHashCode">
            <summary>
            Devuelve el código hash de esta instancia.
            </summary>
            <returns>
            El código hash de esta instancia.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MaestraKeyValueItem.ToString">
            <summary>
            Obtiene la representación de cadena de la instancia actual.
            </summary>
            <returns>
            La representación de cadena de la instancia actual.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.NavigationService">
            <summary>
            <see cref="T:Inflexion2.UX.WPF.Services.INavigationService"/> implementation
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.NavigationService.NavigateTo(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateToWorkSpace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>
            </summary>
            <param name="region"></param>
            <param name="view"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.NavigationService.NavigateToWorkSpace(System.String,System.Object)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateToWorkSpace(System.String,System.Object)"/>
            </summary>
            <param name="view"></param>
            <param name="id"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.NavigationService.NavigateToWorkSpace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateToWorkSpace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})"/>
            </summary>
            <param name="view"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.INavigationService">
            <summary>
            navigation services with regions and views
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateTo(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            open or focus a view in a region
            </summary>
            <param name="region"></param>
            <param name="view"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateToWorkSpace(System.String,System.Object)">
            <summary>
            open a view with a dynamic id entity
            </summary>
            <param name="view"></param>
            <param name="id"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.INavigationService.NavigateToWorkSpace(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            open a view with parameters
            </summary>
            <param name="view"></param>
            <param name="parameters"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.BaseKeyValueItem">
            <summary>
            Representa la clase base para los elementos clave-valor.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.BaseKeyValueItem.activo">
            <summary>
            Valor que indica si el elemento está activo.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.BaseKeyValueItem.id">
            <summary>
            Identificador del elemento.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.BaseKeyValueItem.isSelected">
            <summary>
            Valor que indica si el elemento está seleccionado.
            </summary>
        </member>
        <member name="F:Inflexion2.UX.WPF.Services.BaseKeyValueItem.nombre">
            <summary>
            Nombre del elemento.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseKeyValueItem"/>.
            </summary>
            <param name="id">
            Identificador del elemento.
            </param>
            <param name="nombre">
            Nombre del elemento.
            </param>
            <param name="activo">
            Valor que indica si el elemento está activo.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:BaseKeyValueItem"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseKeyValueItem"/>.
            </summary>
            <param name="id">
            Identificador del elemento.
            </param>
            <param name="nombre">
            Nombre del elemento.
            </param>
            <param name="activo">
            Valor que indica si el elemento está activo.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:BaseKeyValueItem"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.#ctor(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:BaseKeyValueItem"/>.
            </summary>
            <param name="id">
            Identificador del elemento.
            </param>
            <param name="nombre">
            Nombre del elemento.
            </param>
            <param name="activo">
            Valor que indica si el elemento está activo.
            </param>
            <param name="isSelected">
            Valor que indica si el elemento está seleccionado.
            </param>
            <remarks>
            Constructor de la clase <see cref="T:BaseKeyValueItem"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.BaseKeyValueItem.Activo">
            <summary>
            Obtiene o establece un valor que indica si el elemento está activo.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.BaseKeyValueItem.Id">
            <summary>
            Obtiene o establece el identificador del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.BaseKeyValueItem.IsSelected">
            <summary>
            Obtiene o establece un valor que indica si el elemento está seleccionado.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.BaseKeyValueItem.Nombre">
            <summary>
            Obtiene o establece el nombre del elemento.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.BaseKeyValueItem.NumericId">
            <summary>
            Obtiene el identificador numérico del elemento.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.Equals(System.Object)">
            <summary>
            Devuelve un valor que indica cuando esta instancia es igual al objeto especificado.
            </summary>
            <param name="obj">
            El objeto que se va a comparar con esta instancia.
            </param>
            <returns>
            Es <b>true</b> si es igual; en caso contrario, <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.GetHashCode">
            <summary>
            Devuelve el código hash de esta instancia.
            </summary>
            <returns>
            El código hash de esta instancia.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.BaseKeyValueItem.ToString">
            <summary>
            Obtiene la representación de cadena de la instancia actual.
            </summary>
            <returns>
            La representación de cadena de la instancia actual.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.MessageBoxService">
            <summary>
            IMessageBoxService implementation
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)"/> implementation
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)"/>
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton)"/> implementation
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MessageBoxService.Show(System.String,System.String)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String)"/>
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.MessageBoxService.Show(System.String)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String)"/> implementation
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.IMessageBoxService">
            <summary>
            Messages services for user interface
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Show a message with captation, buttons icon and default result
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <param name="defaultResult"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Show e message with captation buttons and icon
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <param name="icon"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Show a message with captation and buttons
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
            <param name="buttons"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String,System.String)">
            <summary>
            Show a message with captatio
            </summary>
            <param name="message"></param>
            <param name="caption"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IMessageBoxService.Show(System.String)">
            <summary>
            Show a message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.QueryServiceFactory">
            <summary>
            IQueryServiceFactory implemetation <see cref="T:Inflexion2.UX.WPF.Services.IQueryServiceFactory"/>
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.QueryServiceFactory.RegisterInstance``2">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.RegisterInstance``2"/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.QueryServiceFactory.RegisterInstance``2(System.String)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.RegisterInstance``2(System.String)"/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TService"></typeparam>
            <param name="serviceName"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.QueryServiceFactory.GetInstance(System.String)">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.GetInstance(System.String)"/>
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.QueryServiceFactory.GetInstance``1">
            <summary>
            <see cref="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.GetInstance``1"/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.IQueryService">
            <summary>
            Define el contrato para el servicio de consulta.
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryService.GetKeyValueItems">
            <summary>
            Obtiene un conjunto de elementos clave-valor resultado de la consulta.
            </summary>
            <returns>
            El conjunto de elementos clave-valor resultante.
            </returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryService.GetKeyValueItems(System.Int32)">
            <summary>
            Obtiene una colección de elementos clave-valor resultado de la consulta.
            </summary>
            <param name="selectedId">
            Identificador del elemento clave-valor seleccionado.
            </param>
            <returns>
            La colección de elementos clave-valor resultante.
            </returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.IQueryServiceFactory">
            <summary>
            IQuery service Factory Interface
            </summary>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.RegisterInstance``2">
            <summary>
            Register an instance of query service 
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TService"></typeparam>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.RegisterInstance``2(System.String)">
            <summary>
            REgister a query instace of a query service with a service name
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TService"></typeparam>
            <param name="serviceName"></param>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.GetInstance(System.String)">
            <summary>
            Get the instance of the service name
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.UX.WPF.Services.IQueryServiceFactory.GetInstance``1">
            <summary>
            Get the instance of one interface
            </summary>
            <typeparam name="TInterface"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.UX.WPF.Services.IKeyValueItem">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.IKeyValueItem.Id">
            <summary>
            Propiedad pública que permite establecer y obtener el 
            identificador del Dto.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener el 
            identificador del Dto.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.IKeyValueItem.Nombre">
            <summary>
            Propiedad pública que permite obtener o establecer el nombre 
            de la localidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el nombre 
            de la localidad.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.IKeyValueItem.Activo">
            <summary>
            Propiedad pública que permite obtener o establecer
            si un registro está activo o no.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o 
            establecer si un registro está activo o no.
            </value>
        </member>
        <member name="P:Inflexion2.UX.WPF.Services.IKeyValueItem.IsSelected">
            <summary>
            Propiedad pública que permite obtener o establecer
            si un registro está seleccionado o no.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o 
            establecer si un registro está seleccionado o no.
            </value>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
