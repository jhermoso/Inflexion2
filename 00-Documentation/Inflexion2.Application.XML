<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion2.Application</name>
    </assembly>
    <members>
        <member name="T:Inflexion2.Application.PerLifeTimeManager">
            <summary>
            implementation of LiftimeManager from Unity 2.1
            </summary>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.GetValue">
            <summary>
            getter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.RemoveValue">
            <summary>
            delete
            </summary>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.SetValue(System.Object)">
            <summary>
            setter
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:Inflexion2.Application.IDataValueObjectMapper`2">
            <summary>
            Interfaz para los mapeadores entre entidades del dominio.
            (<see cref="T:Inflexion2.Domain.IEntity`1"/>) y
            objetos de transferencia de datos (<see cref="T:Inflexion2.Application.IDataTransferObject"/>).
            </summary>
            <remarks>
            La interfaz <c>IMapper</c> permite mapear entre entidades del dominio.
            </remarks>
            <typeparam name="TDto">Representa la interfaz de los objetos de transferencia de datos.</typeparam>
            <typeparam name="TValueObjec">Representa las entidades del negocio.</typeparam>
        </member>
        <member name="M:Inflexion2.Application.IDataValueObjectMapper`2.ValueObjectMapping(`1)">
            <summary>
            Función encargada de mapear una entidad con un Dto.
            </summary>
            <remarks>
            Con esta función, mapeamos una entidad con un Dto.
            </remarks>
            <param name="entity">Representa las entidades de negocio.</param>
            <returns>Devuelve un objeto de transferencia de datos.</returns>
        </member>
        <member name="M:Inflexion2.Application.IDataValueObjectMapper`2.ValueObjectMapping(`1,System.Boolean,System.Boolean)">
            <summary>
            Función encargada de mapear una entidad con un Dto,
            con la opción de seleccionar si se mapean también los hijos y los padres 
            </summary>
            <param name="entity"></param>
            <param name="mapParents"></param>
            <param name="mapChildren"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.IDataEntityMapper`3">
            <summary>
            Interfaz para los mapeadores entre entidades del dominio.
            (<see cref="T:Inflexion2.Domain.IEntity`1"/>) y
            objetos de transferencia de datos (<see cref="T:Inflexion2.Application.IDataTransferObject"/>).
            </summary>
            <remarks>
            La interfaz <c>IMapper</c> permite mapear entre entidades del dominio.
            </remarks>
            <typeparam name="TDto">Representa la interfaz de los objetos de transferencia de datos.</typeparam>
            <typeparam name="TEntity">Representa las entidades del negocio.</typeparam>
            <typeparam name="TIdentifier">Representa un identificador unívoco de entidad.</typeparam>
        </member>
        <member name="M:Inflexion2.Application.IDataEntityMapper`3.EntityMapping(`1,System.Boolean,System.Boolean)">
            <summary>
            Función encargada de mapear una entidad con un Dto.
            </summary>
            <remarks>
            Con esta función, mapeamos una entidad con un Dto.
            </remarks>
            <param name="entity">Representa las entidades de negocio.</param>
            <param name="mapChildren"></param>
            <param name="mapParents"></param>
            <returns>Devuelve un objeto de transferencia de datos.</returns>
        </member>
        <member name="M:Inflexion2.Application.IDataEntityMapper`3.EntityMapping(`1)">
            <summary>
            wrapper constructor
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.IGenericServices`3">
            <summary>
            Interfaz para los mapeadores entre entidades del dominio.
            (<see cref="T:Inflexion2.Domain.IEntity`1"/>) y
            objetos de transferencia de datos (<see cref="T:Inflexion2.Application.IDataTransferObject"/>).
            </summary>
            <remarks>
            La interfaz <c>IGenericMapper</c> permite mapear entre entidades del dominio.
            </remarks>
            <typeparam name="TDto">
            Representa la interfaz de los objetos de transferencia de datos.
            </typeparam>
            <typeparam name="TEntity">
            Representa las entidades del negocio.
            </typeparam>
            <typeparam name="TIdentifier">
            Representa un identificador unívoco de entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Create(`0)">
            <summary>
            Service to create a new entity
            </summary>
            <param name="entityDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Delete(`2)">
            <summary>
            Service to ask for to remove or to deactivate the entity identified by the id
            </summary>
            <param name="Id">unique entity's identifier </param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetAll">
            <summary>
            Service to ask for all the entities in the respository
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            get paged elements throught an specification dto 
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetById(`2)">
            <summary>
            Get an entity dto throught his Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Update(`0)">
            <summary>
            update entity
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.BaseValueObjectDataTransferObject">
            <summary>
            Clase base para los objetos DTO que representan entidades persistidas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.BaseValueObjectDataTransferObject.CompareTo(System.Object)">
            <summary>
            System.IComparable implementation
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseValueObjectDataTransferObject.Equals(Inflexion2.Application.BaseValueObjectDataTransferObject)">
            <summary>
            System.IComparable implementation
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseValueObjectDataTransferObject.Clone">
            <summary>
            Dto clone implementation to help the implementation of IEditableObject in View Models
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.IDataTransferObject">
            <summary>
            Interfaz para representar los objetos de transferencia de datos.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.IEntityDataTransferObject`1">
            <summary>
            .es Interfaz para representar los objetos de transferencia de datos para una entidad.
            </summary>
            <remarks>
            <para>
            La interfaz <c>IEntityDataTransferObject</c> permite representar
            los objetos de transferencia de datos para una entidad.
            </para>
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.IEntityDataTransferObject`1.Id">
            <summary>
            .es Obtiene el Id de la entidad representada por el dto.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.EfValueObjectApplicationServicesBase`2">
            <summary>
            .es Clase base para los servicios de aplicación de un bounded context con entityFramework 
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.ValueObjectMapper">
            <summary>
            .es Referencia al mapeador de la entidad Component.
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.ValueObjectRepository">
            <summary>
            .en this field has to be initialize inside the constructor of the derived real entity with his own repository.
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.unitOfWork">
            <summary>
            .es referencia a la unidad de trabajo
            </summary>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Component>Service"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ComponentServices"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.Create(`0)">
            <summary>
            .en Function in charge to create a Value Object of type <typeparamref name="TValueObject"/>.
            .es Función encargada de la creación de una entidad de tipo <typeparamref name="TValueObject"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/></param>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.Delete(`0)">
            <summary>
            .es Elimina una determinada entidad Address.
            </summary>
            <param name="dto">
            Identificador de la entidad que se va a eliminar.
            </param>
            <returns>
            Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .es Elimina Los objetos valor seleccionados en el array de entrada.
            </summary>
            <param name="dtos"></param>
            <returns>. Es devuelve los objectos valor que no se han podido borrar</returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetAll">
            <summary>
            .es Recupera todas las entidades Address.
            </summary>
            <returns>
            Todas las entidades Address.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetAllExceptThis(`0)">
            <summary>
            .es Recupera todas las entidades excepto la indicada por el parametro. 
            </summary>
            <param name="dto">.es Entidad a evitar.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetAllExceptThese(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetByDto(`0)">
            <summary>
            .es Comprueba que el objeto valor existe.
            </summary>
            <returns>
            el objeto valor resultante es nulo si no se encuentra.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            Recupera una lista paginada de entidades según la especificación indicada.
            </summary>
            <param name="specificationDto">
            Especificación que se va a aplicar.
            </param>
            <returns>
            La lista paginada de entidades según la especificación indicada.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.Commit">
            <summary>
            adapter of commit operation independent form the ORM
            </summary>
        </member>
        <member name="M:Inflexion2.Application.EfValueObjectApplicationServicesBase`2.AutoFactory(`0)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.EfApplicationServicesBase`3">
            <summary>
            .es Clase base para los servicios de aplicación de un bounded context con entityFramework 
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfApplicationServicesBase`3.EntityMapper">
            <summary>
            .es Referencia al mapeador de la entidad Component.
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfApplicationServicesBase`3.EntityRepository">
            <summary>
            .en this field has to be initialize inside the constructor of the derived real entity with his own repository.
            </summary>
        </member>
        <member name="F:Inflexion2.Application.EfApplicationServicesBase`3.unitOfWork">
            <summary>
            .es referencia a la unidad de trabajo
            </summary>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Component>Service"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ComponentServices"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Create(`0)">
            <summary>
            .en Function in charge to create an entity of type <typeparamref name="TEntity"/>.
            .es Función encargada de la creación de una entidad de tipo <typeparamref name="TEntity"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/></param>
            <returns><typeparamref name="TIdentifier"/> of the new <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Delete(`2)">
            <summary>
            .es Elimina una determinada entidad Address.
            </summary>
            <param name="id">
            Identificador de la entidad que se va a eliminar.
            </param>
            <returns>
            Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Delete(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .es Elimina las entidades Address seleccionadas por los ids del parametro.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetAll">
            <summary>
            .es Recupera todas las entidades Address.
            </summary>
            <returns>
            Todas las entidades Address.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetAllExceptThis(`2)">
            <summary>
            .es Recupera todas las entidades excepto la indicada por el parametro. 
            </summary>
            <param name="id">.es Entidad a evitar.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetSelectedThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetAllExceptThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetById(`2)">
            <summary>
            .es Recupera una entidad Address mediante su identificador correspondiente.
            </summary>
            <param name="id">
            .es Identificador de la entidad que se va a recuperar.
            </param>
            <returns>
            La entidad Address recuperada o valor nulo si no se encuentra.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            Recupera una lista paginada de entidades según la especificación indicada.
            </summary>
            <param name="specificationDto">
            Especificación que se va a aplicar.
            </param>
            <returns>
            La lista paginada de entidades según la especificación indicada.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetFilteredEntities(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Update(`0)">
            <summary>
            Actualiza una determinada entidad Address.
            </summary>
            <param name="dto">
            DTO que contiene la información de la entidad que se va a actualizar.
            </param>
            <returns>
            Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.EfApplicationServicesBase`3.Commit">
            <summary>
            adapter of commit operation independent form the ORM
            </summary>
        </member>
        <member name="T:Inflexion2.Application.ApplicationErrorHandler">
            <summary>
            Clase pública sellada encargada de la gestión de errores para la
            fachada remota WCF.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandler.HandleError(System.Exception)">
            <summary>
            Permite errores de procesamiento y devuelve un valor que indica si
            el transportador del envío cancela la sesión y el contexto de la
            instancia en ciertos casos.
            </summary>
            <remarks>
            Traza el error y lo maneja.
            </remarks>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que representa la
            excepción lanzada durante el proceso.
            </param>
            <returns>
            Devuelve <c>true</c> si  o debería abortar la sesión y
            el contexto de la instancia si no es de tipo
            System.ServiceModel.InstanceContextMode.Single;
            de lo contrario devuelve <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Método que encargado de la creación de <see cref="T:System.ServiceModel.FaultException"/>
            personalizadas que será devuelta como una excepción en la ejecución de un método de un servicio.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> lanzada en la ejecución de un
            método de un servicio.
            </param>
            <param name="version">
            Parámetro que indica la versión SOAP del mensaje.
            </param>
            <param name="message">
            Parámetro de tipo <see cref="T:System.ServiceModel.Channels.Message" />
            que es devuelto al cliente.
            </param>
        </member>
        <member name="T:Inflexion2.Application.ApplicationErrorHandlerAttribute">
            <summary>
            Clase pública sellada encargada de indicar el comportamiento del
            servicio permitiendo agregar el DefaultErrorHandler a todos los
            servicios WCF.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Application.ApplicationErrorHandlerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Application.ApplicationErrorHandlerAttribute"/> class.
            </summary>
            <param name="handlerType">The handler.</param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Método que ofrece la posibilidad de pasar datos personalizados para
            los elementos de enlace para apoyar la ejecución del contrato.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
            <param name="endpoints">
            Parámetro que indica la colección de endponits de los servicios.
            </param>
            <param name="bindingParameters">
            Parámetro que indica la colección de objetos personalizados
            a los que los elementos de enlace tienen acceso.
            </param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Método encargado de cambiar valores de propiedades o insertar extensiones de objetos
            tales como gestores de errores, mensajes, en tiempo de ejecución.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Método que ofrece la posibilidad de inspeccionar el service host y
            la descripción del servicio para confirmar que el servicio puede
            ejecutarse correctamente.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
        </member>
        <member name="T:Inflexion2.Application.FaultObject">
            <summary>
            Clase pública para la captura de excepciones desde los servicios.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.FaultObject.FaultCode">
            <summary>
            this enum code the possible origin of the error
            </summary>
        </member>
        <member name="F:Inflexion2.Application.FaultObject.FaultCode.Sever">
            <summary>
            the error is originated in the server
            </summary>
        </member>
        <member name="P:Inflexion2.Application.FaultObject.Code">
            <summary>
            Propiedad que obtiene o establece el origen de la excepción.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el código de la excepción.
            </value>
        </member>
        <member name="P:Inflexion2.Application.FaultObject.Reason">
            <summary>
            Propiedad pública que obtiene o establece el texto del mensaje de excepción.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el texto del mensaje de excepción.
            </value>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.Create``1(``0)">
            <summary>
            Creates a WCF SOAP FaultException based on a CAS Exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.Throw``1(``0)">
            <summary>
            Throws the specified exception for wcf services.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.WebThrow``1(Inflexion2.Application.InternalException)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception"></param>
        </member>
        <member name="T:Inflexion2.Application.InternalException">
            <summary>
            Clase de excepción interna para el Fault.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            la excepción especificada.
            </summary>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que indica la excepción producida.
            </param>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado y la excepción interna.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
            <param name="innerException">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica la excepción interna.
            </param>
        </member>
        <member name="T:Inflexion2.Application.ValidationException">
            <summary>
            Validation exception
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ValidationException.#ctor(Inflexion2.Domain.Validation.ValidationException)">
            <summary>
            constructs and gets the message for a validation exception
            </summary>
            <param name="validationException"></param>
        </member>
        <member name="P:Inflexion2.Application.ValidationException.ValidationErrors">
            <summary>
            .en collection of errors messages
            </summary>
        </member>
        <member name="T:Inflexion2.Application.ServiceFaultContracts">
            <summary>
            Services for contract exceptions
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.#ctor">
            <summary>
            gets the info from the exception
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.#ctor(System.Type[])">
            <summary>
            add the info from the exception contracts
            </summary>
            <param name="knownFaultTypes"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            add info from the parameters in the contracts
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="clientRuntime"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="dispatchRuntime"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
        </member>
        <member name="T:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2">
            <summary>
            
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TValueObject"></typeparam>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.Create(`0)">
            <summary>
            .en Function in charge to create an Value Object of type <typeparamref name="TValueObject"/>.
            .es Función encargada de la creación de un value object. <typeparamref name="TValueObject"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/></param>
            <returns><typeparamref name="TDto"/> of the new <typeparamref name="TValueObject"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.Delete(`0)">
            <summary>
            .en Function in charge to delete an Value Object of type <typeparamref name="TValueObject"/>.
            .es Función encargada del borrado de un value object <typeparamref name="TValueObject"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/> Value Object's id to delete</param>
            <returns><b>True:</b> the Value Object has been deleted succesefuly, <b>False</b> not</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetAll">
            <summary>
            .en Function in charge to get all Value Objects of type <typeparamref name="TValueObject"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/>.
            </summary>
            <returns>the whole collection of Value Objects of type <typeparamref name="TValueObject"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .en Function in charge to delete all Value Objects of type <typeparamref name="TValueObject"/> selected.
            </summary>
            <param name="dto"><typeparamref name="TDto"/>Selection of <typeparamref name="TValueObject"/> to delete.</param>
            <returns>array of <typeparamref name="TDto"/> of Value Objects that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to delete all Value Objects of type <typeparamref name="TValueObject"/> selected by the satisfaction of the specification in the parameter.
            </summary>
            <param name="specificationDto">Specification to select all the Value Objects to delete.</param>
            <returns>array of <typeparamref name="TDto"/> of Value Objects that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.DeleteAll">
            <summary>
            .en Function in charge to delete all Value Objects of type <typeparamref name="TValueObject"/>.
            </summary>
            <returns>array of <typeparamref name="TDto"/> of Value Objects that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetAllExceptThis(`0)">
            <summary>
            .en Function in charge to get a collection of all Value Objects of type <typeparamref name="TValueObject"/> except the Value Object with the <typeparamref name="TDto"/> in the parameter.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/> excepto la indicada por el id en el parametro.
            </summary>
            <param name="dto"><typeparamref name="TDto"/> to avoid.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetAllExceptThese(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .en Function in charge to get all Value Objects of type <typeparamref name="TValueObject"/>except those selected by the array of <typeparamref name="TDto"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/>excepto aquellas seleccionadas por el array de <typeparamref name="TDto"/>.
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetFilteredValueObjects(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to get all Value Objects of type <typeparamref name="TValueObject"/> selected by the satisfaction of the specification.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/> seleccionadas por la satisfacción de la especificación en el parametro.
            </summary>
            <param name="specificationDto"> especificación a satisfaccer por las entidades recuperadas</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBaseContract`2.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            .es Recupera una lista paginada de dto <typeparamref name="TDto"/> de tipo <typeparamref name="TValueObject"/>, según la especificación indicada el parametro.
            </summary>
            <param name="specificationDto">Especificación que se va a aplicar.</param>
            <returns> collección de <typeparamref name="TDto"/></returns>
        </member>
        <member name="T:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2">
            <summary>
            .es Interface genérica para los contratos de base en servicios de la capa de aplicación con EntityFramework
            .en Base generic interface for the contracts of application services layer with EntityFramework
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TValueObject"></typeparam>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.Create(`0)">
            <summary>
            .en Function in charge to create an entity of type <typeparamref name="TValueObject"/>.
            .es Función encargada de la creación de una entidad de tipo <typeparamref name="TValueObject"/>.
            </summary>
            <param name="dto"><typeparamref name="TValueObject"/></param>
            <returns><typeparamref name="TValueObject"/> of the new <typeparamref name="TValueObject"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.Delete(`0)">
            <summary>
            .en Function in charge to delete an entity of type <typeparamref name="TValueObject"/>.
            .es Función encargada del borrado de una entidad de tipo <typeparamref name="TValueObject"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/> value Object to delete</param>
            <returns><b>True:</b> the entity has been deleted succesefuly, <b>False</b> not</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.GetAll">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TValueObject"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/>.
            </summary>
            <returns>the whole collection of entities of type <typeparamref name="TValueObject"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .en Function in charge to delete all value objects of type <typeparamref name="TValueObject"/> selected.
            </summary>
            <param name="dto"><typeparamref name="TValueObject"/>Selection of <typeparamref name="TValueObject"/> to delete.</param>
            <returns>array of <typeparamref name="TValueObject"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to delete all value objects of type <typeparamref name="TValueObject"/> selected by the satisfaction of the specification in the parameter.
            </summary>
            <param name="specificationDto">Specification to select all the value objects to delete.</param>
            <returns>array of <typeparamref name="TDto"/> of value objects that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.DeleteAll">
            <summary>
            .en Function in charge to delete all value objects of type <typeparamref name="TValueObject"/>.
            </summary>
            <returns>array of <typeparamref name="TDto"/> of value objects that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.GetAllExceptThis(`0)">
            <summary>
            .en Function in charge to get a collection of all value objects of type <typeparamref name="TValueObject"/> except the value object with the <typeparamref name="TDto"/> in the parameter.
            .es Función encargada de obtener todas las value objects de tipo <typeparamref name="TValueObject"/> excepto la indicada por el id en el parametro.
            </summary>
            <param name="dto"><typeparamref name="TDto"/> to avoid.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.GetAllExceptThese(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TValueObject"/>except those selected by the array of <typeparamref name="TDto"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/>excepto aquellas seleccionadas por el array de <typeparamref name="TDto"/>.
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TValueObject"/> selected by the satisfaction of the specification.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TValueObject"/> seleccionadas por la satisfacción de la especificación en el parametro.
            </summary>
            <param name="specificationDto"> especificación a satisfaccer por las entidades recuperadas</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfValueObjectApplicationServiceBase`2.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            .es Recupera una lista paginada de dto <typeparamref name="TDto"/> de tipo <typeparamref name="TValueObject"/>, según la especificación indicada el parametro.
            </summary>
            <param name="specificationDto">Especificación que se va a aplicar.</param>
            <returns> collección de <typeparamref name="TDto"/></returns>
        </member>
        <member name="T:Inflexion2.Application.IEfApplicationServiceBase`3">
            <summary>
            .es Interface genérica para los contratos de base en servicios de la capa de aplicación con EntityFramework
            .en Base generic interface for the contracts of application services layer with EntityFramework
            </summary>
            <typeparam name="TDto"></typeparam>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Create(`0)">
            <summary>
            .en Function in charge to create an entity of type <typeparamref name="TEntity"/>.
            .es Función encargada de la creación de una entidad de tipo <typeparamref name="TEntity"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/></param>
            <returns><typeparamref name="TIdentifier"/> of the new <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Delete(`2)">
            <summary>
            .en Function in charge to delete an entity of type <typeparamref name="TEntity"/>.
            .es Función encargada del borrado de una entidad de tipo <typeparamref name="TEntity"/>.
            </summary>
            <param name="id"><typeparamref name="TIdentifier"/> entity's id to delete</param>
            <returns><b>True:</b> the entity has been deleted succesefuly, <b>False</b> not</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetAll">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/>.
            </summary>
            <returns>the whole collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Delete(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/> selected.
            </summary>
            <param name="ids"><typeparamref name="TIdentifier"/>Selection of <typeparamref name="TEntity"/> to delete.</param>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/> selected.
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/> selected by the satisfaction of the specification in the parameter.
            </summary>
            <param name="specificationDto">Specification to select all the entities to delete.</param>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.DeleteAll">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/>.
            </summary>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetAllExceptThis(`2)">
            <summary>
            .en Function in charge to get a collection of all entities of type <typeparamref name="TEntity"/> except the entity with the <typeparamref name="TIdentifier"/> in the parameter.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> excepto la indicada por el id en el parametro.
            </summary>
            <param name="id"><typeparamref name="TDto"/> to avoid.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetSelectedThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/> selected by the array of <typeparamref name="TIdentifier"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> seleccionadas por el array de <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="ids">array of <typeparamref name="TIdentifier"/> of <typeparamref name="TDto"/> to select</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetAllExceptThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/>except those selected by the array of <typeparamref name="TIdentifier"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/>excepto aquellas seleccionadas por el array de <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/> selected by the satisfaction of the specification.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> seleccionadas por la satisfacción de la especificación en el parametro.
            </summary>
            <param name="specificationDto"> especificación a satisfaccer por las entidades recuperadas</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetFilteredEntities(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/> selected by the satisfaction of the specification.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> seleccionadas por la satisfacción de la especificación en el parametro.
            </summary>
            <param name="specificationDto"> especificación a satisfaccer por las entidades recuperadas</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            .es Recupera una lista paginada de dto <typeparamref name="TDto"/> de tipo <typeparamref name="TEntity"/>, según la especificación indicada el parametro.
            </summary>
            <param name="specificationDto">Especificación que se va a aplicar.</param>
            <returns> collección de <typeparamref name="TDto"/></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.GetById(`2)">
            <summary>
            .en Function in charge to get the <typeparamref name="TDto"/> of the entity <typeparamref name="TEntity"/> by his <typeparamref name="TIdentifier"/>.
            .es Función encargada de recuperar el <typeparamref name="TDto"/> de la entidad <typeparamref name="TEntity"/> por su <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="id"><typeparamref name="TIdentifier"/> of the <typeparamref name="TEntity"/> to get</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBase`3.Update(`0)">
            <summary>
            .en Function in charge to update the entity <typeparamref name="TEntity"/>  with the <typeparamref name="TDto"/> in the parameter.
            .es Función encargada de actualizar la entidad <typeparamref name="TEntity"/> con su <typeparamref name="TDto"/> en el parametro.
            </summary>
            <param name="dto">new status for the entity <typeparamref name="TEntity"/></param>
            <returns><b>True:</b> the entity has been updated succesefuly, <b>False</b> not</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.Create(`0)">
            <summary>
            .en Function in charge to create an entity of type <typeparamref name="TEntity"/>.
            .es Función encargada de la creación de una entidad de tipo <typeparamref name="TEntity"/>.
            </summary>
            <param name="dto"><typeparamref name="TDto"/></param>
            <returns><typeparamref name="TIdentifier"/> of the new <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.Delete(`2)">
            <summary>
            .en Function in charge to delete an entity of type <typeparamref name="TEntity"/>.
            .es Función encargada del borrado de una entidad de tipo <typeparamref name="TEntity"/>.
            </summary>
            <param name="id"><typeparamref name="TIdentifier"/> entity's id to delete</param>
            <returns><b>True:</b> the entity has been deleted succesefuly, <b>False</b> not</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetAll">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/>.
            </summary>
            <returns>the whole collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.Delete(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/> selected.
            </summary>
            <param name="ids"><typeparamref name="TIdentifier"/>Selection of <typeparamref name="TEntity"/> to delete.</param>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.Delete(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/> selected by the satisfaction of the specification in the parameter.
            </summary>
            <param name="specificationDto">Specification to select all the entities to delete.</param>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.DeleteAll">
            <summary>
            .en Function in charge to delete all entities of type <typeparamref name="TEntity"/>.
            </summary>
            <returns>array of <typeparamref name="TIdentifier"/> of entities that has not been posible to delete.</returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetAllExceptThis(`2)">
            <summary>
            .en Function in charge to get a collection of all entities of type <typeparamref name="TEntity"/> except the entity with the <typeparamref name="TIdentifier"/> in the parameter.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> excepto la indicada por el id en el parametro.
            </summary>
            <param name="id"><typeparamref name="TDto"/> to avoid.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetSelectedThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/> selected by the array of <typeparamref name="TIdentifier"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> seleccionadas por el array de <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="ids">array of <typeparamref name="TIdentifier"/> of <typeparamref name="TDto"/> to select</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetAllExceptThese(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/>except those selected by the array of <typeparamref name="TIdentifier"/>.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/>excepto aquellas seleccionadas por el array de <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetFilteredEntities(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en Function in charge to get all entities of type <typeparamref name="TEntity"/> selected by the satisfaction of the specification.
            .es Función encargada de obtener todas las entidades de tipo <typeparamref name="TEntity"/> seleccionadas por la satisfacción de la especificación en el parametro.
            </summary>
            <param name="specificationDto"> especificación a satisfaccer por las entidades recuperadas</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            .es Recupera una lista paginada de dto <typeparamref name="TDto"/> de tipo <typeparamref name="TEntity"/>, según la especificación indicada el parametro.
            </summary>
            <param name="specificationDto">Especificación que se va a aplicar.</param>
            <returns> collección de <typeparamref name="TDto"/></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.GetById(`2)">
            <summary>
            .en Function in charge to get the <typeparamref name="TDto"/> of the entity <typeparamref name="TEntity"/> by his <typeparamref name="TIdentifier"/>.
            .es Función encargada de recuperar el <typeparamref name="TDto"/> de la entidad <typeparamref name="TEntity"/> por su <typeparamref name="TIdentifier"/>.
            </summary>
            <param name="id"><typeparamref name="TIdentifier"/> of the <typeparamref name="TEntity"/> to get</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IEfApplicationServiceBaseContract`3.Update(`0)">
            <summary>
            .en Function in charge to update the entity <typeparamref name="TEntity"/>  with the <typeparamref name="TDto"/> in the parameter.
            .es Función encargada de actualizar la entidad <typeparamref name="TEntity"/> con su <typeparamref name="TDto"/> en el parametro.
            </summary>
            <param name="dto">new status for the entity <typeparamref name="TEntity"/></param>
            <returns><b>True:</b> the entity has been updated succesefuly, <b>False</b> not</returns>
        </member>
        <member name="T:Inflexion2.Application.ApplicationLayer">
            <summary>
            Host e inicializacion del contenedor de IOC
            </summary>
        </member>
        <member name="F:Inflexion2.Application.ApplicationLayer.UnitOfWorkPerTestLifeTimeManager">
            <summary>
            ciclo de vida para la unidad de trabajo
            </summary>
        </member>
        <member name="F:Inflexion2.Application.ApplicationLayer.ContextPerTestLifeTimeManager">
            <summary>
            ciclo de vida para el contexto
            </summary>
        </member>
        <member name="P:Inflexion2.Application.ApplicationLayer.IocContainer">
            <summary>
            singelton property to wrapper the ContainerInit()
            the Ioc container only can be instanced once.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ApplicationLayer.ContainerInit">
            <summary>
            Initialize the IoC container to allow the registering of types and objects.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.IConfiguration">
            <summary>
            Interface encargada de la configuración para los servicios Wcf.
            </summary>
            <remarks>
            Interface para la configuración predeterminada de los servicios WCF que
            forman parte de la fachada remota.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.IConfiguration.Configure">
            <summary>
            Método encargado de la ejecución de la configuración.
            </summary>
            <remarks>
            Configuración predeterminada construyendo la cadena de conexión por usuario.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.IConfiguration.ConfigureDataAccess(System.String,System.String)">
            <summary>
            Método encarga de la ejecución de la configuración del acceso a datos.
            </summary>
            <param name="userName">
            Parámetro que indica el nombre de usuario para el inicio de sesión.
            </param>
            <param name="password">
            Parámetro que indica la password del usuario para el inicio de sesión.
            </param>
            <remarks>
            Configuración predeterminada construyendo la cadena de conexión por usuario.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor de <c>userName</c> ó <c>password</c> es null ó vacío.
            </exception>
        </member>
        <member name="T:Inflexion2.Application.BaseEntityDataTransferObject`1">
            <summary>
            Clase base para los objetos DTO que representan entidades persistidas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.BaseEntityDataTransferObject`1.Id">
            <summary>
            Propiedad que obtiene o establece el identificador de la entidad representada por el DTO.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el identificador de
            la entidad representada por el DTO.
            </value>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.Clone">
            <summary>
            implementation of IClonable  to help the implementation of IEditableObject.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.CompareTo(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.CompareTo(`0)">
            <summary>
            
            </summary>
            <param name="otherId"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.CompareTo(Inflexion2.Application.IEntityDataTransferObject{`0})">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.Equals(Inflexion2.Application.BaseEntityDataTransferObject{`0})">
            <summary>
            Use the id property like a criteria for default sorting
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.Equals(`0)">
            <summary>
            for the DTOs of entities we use the Id value like a criteria to compare and check the equality
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.IsTransient">
            <summary>
                Transient objects are not associated with an item already in storage.  For instance,
                a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.CompositeFilter">
            <summary>
            Clase para los filtros compuestos en las especificaciones para Dto´s.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.CompositeFilter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:CompositeFilter"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.CompositeFilter.Filters">
            <summary>
            Propiedad que obtiene o establece la lista de filtros.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer la lista de filtros.
            </value>
        </member>
        <member name="P:Inflexion2.Application.CompositeFilter.LogicalOperator">
            <summary>
            Propiedad que obtiene o establece el operador lógico del filtro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el operador lógico del filtro.
            </value>
        </member>
        <member name="T:Inflexion2.Application.CompositeFilterLogicalOperator">
            <summary>
            Lista enumerada para almacenar los operadores lógicos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Application.CompositeFilterLogicalOperator.And">
            <summary>
            Operador lógico AND.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Application.CompositeFilterLogicalOperator.Or">
            <summary>
            Operador lógico OR.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Application.Filter">
            <summary>
            Clase que representa un filtro para las especificaciones.
            </summary>
        </member>
        <member name="P:Inflexion2.Application.Filter.Operator">
            <summary>
            Propiedad que obtiene o establece el operador que aplicará en el filtro.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el
            operador que aplicará en el filtro.
            </value>
        </member>
        <member name="P:Inflexion2.Application.Filter.Property">
            <summary>
            Propiedad que obtiene o establece el nombre de la propiedad
            sobre la que se aplicará el filtro.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el nombre de la propiedad
            sobre la que se aplicará el filtro.
            </value>
        </member>
        <member name="P:Inflexion2.Application.Filter.Value">
            <summary>
            Propiedad que obtiene o establece el valor para el filtro.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el valor del filtro.
            </value>
        </member>
        <member name="T:Inflexion2.Application.SpecificationDto">
            <summary>
            Clase Dto que representa la especificación para la obtención de datos.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDto.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SpecificationDto"/>.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDto.#ctor(System.Func{System.String,Inflexion2.Application.CompositeFilter},System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Parse filters to
            </summary>
            <remarks>
            the current version of json in the facade needs at least .net of 4.5.2 but this porjects works with .net 4.0.
            the only way to use the deserializer of josn in the constructor is to pass it like a func.
            In this way is also posible to use other deserializers
            </remarks>
            <param name="deserializer"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="sortColum"></param>
            <param name="sortOrder"></param>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.CompositeFilter">
            <summary>
            Propiedad que obtiene el filtro compuesto para la especificación.
            </summary>
            <value>
            Valor que es utilizado para obtener el filtro compuesto para la especificación.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.IsSearch">
            <summary>
            Propiedad de solo lectura que indica si el filtro es de búsqueda.
            </summary>
            <value>
            Valor que es utilizado para indica si el filtro es de búsqueda.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.PageIndex">
            <summary>
            Propiedad que obtiene o establece el índice de la página en la búsqueda.
            </summary>
            <value>
            Valor utilizado para obtener o establecer el índice de la página en la búsqueda.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.PageSize">
            <summary>
            Propiedad que obtiene o establece el número de páginas que se van a devolver.
            </summary>
            <value>
            Valor utilizado para obtener o establecer el número de páginas que se van a devolver.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.SortColumn">
            <summary>
            Propiedad obtiene o establece el nombre de la columna por la que se ordenará.
            </summary>
            <value>
            Valor utilizado para obtener o establecer el nombre de la columna por la que se ordenará.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.SortOrder">
            <summary>
            Propiedad obtiene o establece el ordinal
            de la columna por la que se ordenará.
            </summary>
            <value>
            Valor utilizado para obtener o establecer
            el ordinal de la columna por la que se ordenará.
            </value>
        </member>
        <member name="T:Inflexion2.Application.SpecificationDtoExtensions">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDtoExtensions.ToSpecification``1(Inflexion2.Application.SpecificationDto)">
            <summary>
            .en converts an specification Dto into an specification
            .es Convierte el dto de especification a una especification
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDtoExtensions.ToSpecification``1(Inflexion2.Application.SpecificationDto,Inflexion2.Domain.Specification.ISpecification{``0})">
            <summary>
            .es extensión de un Dto de especificacion para obtener la especificacion correspondiente 
            .en Dto specification extension to get the specification.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.WcfService.EntityWcfSvcBase`3">
            <summary>
            Clase pública del servicio Wcf para entidades 
            </summary>
        </member>
        <member name="F:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.service">
            <summary>
            Referencia a los servicios de administración de la entidad Address.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AddressService"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:AddressService"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.Create(`0)">
            <summary>
            Función encargada de la creación de una entidad de tipo Address.
            </summary>
            <param name="dto">
            Parámetro de tipo TDto con los datos necesarios
            para la creación de la entidad.
            </param>
            <return>
            Devuelve el identificador único de la entidad creada.
            </return>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.Update(`0)">
            <summary>
            Función encargada de la actualización de una entidad.
            </summary>
            <param name="dto">
            Parámetro de tipo Tdto con los datos necesarios
            para el borrado de la entidad.
            </param>
            <returns>
            Devuelve <b>true</b> si la actualización ha sido correcta y
            <b>false</b> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.Delete(`2)">
            <summary>
            Función encargada del borrado de una entidad de tipo Address.
            </summary>
            <remarks>
            Se trata de un borrado lógico.
            </remarks>
            <param name="id">
            Parámetro que indica el identificador único de la entidad a borrar.
            </param>
            <returns>
            Devuelve <b>true</b> si la eliminación ha sido correcta y
            <b>false</b> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetAll">
            <summary>
            Método encargado de obtener todas las entidades.
            </summary>
            <returns>
            Devuelve listado de Dto´s de la entidad.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetById(`2)">
            <summary>
            Método encargado de obtener una entidad Address de acuerdo a
            su identificador.
            </summary>
            <param name="id">
            Parámetro que indica el identificador único de la entidad cuya
            información se desea obtener.
            </param>
            <returns>
            Devuelve objeto dto Tdto con la información
            requerida.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            Recupera una lista paginada de entidades según la especificación indicada.
            </summary>
            <param name="specificationDto">
            Especificación que se va a aplicar.
            </param>
            <returns>
            La lista paginada de entidades según la especificación indicada.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetAllExceptId(`2)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetSelectedIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetAllExceptIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.EntityWcfSvcBase`3.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2">
            <summary>
            Interfaz que permite definir el contrato de servicio para las acciones
            relacionadas con Value Objects.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.Create(`0)">
            <summary>
            .es Función encargada de la creación de la entidad.
            </summary>
            <param name="dto">
            Parámetro de tipo TDto holder de datos para transmision de la información de la entidad .
            </param>
            <return>
            Devuelve el identificador único de la entidad creada.
            </return>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.Delete(`0)">
            <summary>
            Elimina una determinada entidad.
            </summary>
            <param name="dto">
            Identificador de la entidad que se va a eliminar.
            </param>
            <returns>
            Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetAll">
            <summary>
            Método encargado de obtener todas las entidades.
            </summary>
            <returns>
            Devuelve listado de Dtos de la entidad.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetByDto(`0)">
            <summary>
            Método encargado de obtener una entidad de acuerdo a
            su identificador.
            </summary>
            <param name="dto">
            Parámetro que indica el identificador único de la entidad cuya
            información se desea obtener.
            </param>
            <returns>
            Devuelve objeto TDto con la información requerida.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            Recupera una lista paginada de entidades, según la especificación indicada.
            </summary>
            <param name="specificationDto">
            Especificación que se va a aplicar.
            </param>
            <returns>
            La lista paginada de entidades, según la especificación indicada.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetAllExceptThis(`0)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetSelected(`0[])">
            <summary>
            
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetAllExceptThese(`0[])">
            <summary>
            
            </summary>
            <param name="dtos"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IValueObjectServiceContract`2.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            /
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3">
            <summary>
            Interfaz que permite definir el contrato de servicio para las acciones
            relacionadas con la entidad.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.Create(`0)">
            <summary>
            .es Función encargada de la creación de la entidad.
            </summary>
            <param name="dto">
            Parámetro de tipo TDto holder de datos para transmision de la información de la entidad .
            </param>
            <return>
            Devuelve el identificador único de la entidad creada.
            </return>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.Update(`0)">
            <summary>
            .es Función encargada de la actualización de una entidad.
            </summary>
            <param name="dto">
            Parámetro de tipo TDto con los datos necesarios
            para el borrado de la entidad.
            </param>
            <returns>
            Devuelve <b>true</b> si la actualización ha sido correcta y
            <b>false</b> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.Delete(`2)">
            <summary>
            Elimina una determinada entidad.
            </summary>
            <param name="id">
            Identificador de la entidad que se va a eliminar.
            </param>
            <returns>
            Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetAll">
            <summary>
            Método encargado de obtener todas las entidades.
            </summary>
            <returns>
            Devuelve listado de Dtos de la entidad.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetById(`2)">
            <summary>
            Método encargado de obtener una entidad de acuerdo a
            su identificador.
            </summary>
            <param name="id">
            Parámetro que indica el identificador único de la entidad cuya
            información se desea obtener.
            </param>
            <returns>
            Devuelve objeto TDto con la información requerida.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            Recupera una lista paginada de entidades, según la especificación indicada.
            </summary>
            <param name="specificationDto">
            Especificación que se va a aplicar.
            </param>
            <returns>
            La lista paginada de entidades, según la especificación indicada.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.DeleteAll">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetAllExceptId(`2)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetSelectedIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetAllExceptIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.WcfService.Contracts.IEntityServiceContract`3.GetFiltered(Inflexion2.Application.SpecificationDto)">
            <summary>
            /
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
    </members>
</doc>
