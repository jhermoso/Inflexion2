<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion2.Application</name>
    </assembly>
    <members>
        <member name="T:Inflexion2.Application.PerLifeTimeManager">
            <summary>
            implementation of LiftimeManager from Unity 2.1
            </summary>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.GetValue">
            <summary>
            getter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.RemoveValue">
            <summary>
            delete
            </summary>
        </member>
        <member name="M:Inflexion2.Application.PerLifeTimeManager.SetValue(System.Object)">
            <summary>
            setter
            </summary>
            <param name="newValue"></param>
        </member>
        <member name="T:Inflexion2.Application.IDataEntityMapper`3">
            <summary>
            Interfaz para los mapeadores entre entidades del dominio.
            (<see cref="T:Inflexion2.Domain.IEntity`1"/>) y
            objetos de transferencia de datos (<see cref="T:Inflexion2.Application.IDataTransferObject"/>).
            </summary>
            <remarks>
            La interfaz <c>IMapper</c> permite mapear entre entidades del dominio.
            </remarks>
            <typeparam name="TDto">Representa la interfaz de los objetos de transferencia de datos.</typeparam>
            <typeparam name="TEntity">Representa las entidades del negocio.</typeparam>
            <typeparam name="TIdentifier">Representa un identificador unívoco de entidad.</typeparam>
        </member>
        <member name="M:Inflexion2.Application.IDataEntityMapper`3.EntityMapping(`1)">
            <summary>
            Función encargada de mapear una entidad con un Dto.
            </summary>
            <remarks>
            Con esta función, mapeamos una entidad con un Dto.
            </remarks>
            <param name="entity">Representa las entidades de negocio.</param>
            <returns>Devuelve un objeto de transferencia de datos.</returns>
        </member>
        <member name="T:Inflexion2.Application.IGenericServices`3">
            <summary>
            Interfaz para los mapeadores entre entidades del dominio.
            (<see cref="T:Inflexion2.Domain.IEntity`1"/>) y
            objetos de transferencia de datos (<see cref="T:Inflexion2.Application.IDataTransferObject"/>).
            </summary>
            <remarks>
            La interfaz <c>IGenericMapper</c> permite mapear entre entidades del dominio.
            </remarks>
            <typeparam name="TDto">
            Representa la interfaz de los objetos de transferencia de datos.
            </typeparam>
            <typeparam name="TEntity">
            Representa las entidades del negocio.
            </typeparam>
            <typeparam name="TIdentifier">
            Representa un identificador unívoco de entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Create(`0)">
            <summary>
            Service to create a new entity
            </summary>
            <param name="entityDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Delete(`2)">
            <summary>
            Service to ask for to remove or to deactivate the entity identified by the id
            </summary>
            <param name="Id">unique entity's identifier </param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetAll">
            <summary>
            Service to ask for all the entities in the respository
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetPaged(Inflexion2.Application.SpecificationDto)">
            <summary>
            get paged elements throught an specification dto 
            </summary>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.GetById(`2)">
            <summary>
            Get an entity dto throught his Id
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.IGenericServices`3.Update(`0)">
            <summary>
            update entity
            </summary>
            <param name="dto"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Application.IDataTransferObject">
            <summary>
            Interfaz para representar los objetos de transferencia de datos.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.IEntityDataTransferObject`1">
            <summary>
            Interfaz para representar los objetos de transferencia de datos para una entidad.
            </summary>
            <remarks>
            <para>
            La interfaz <c>IEntityDataTransferObject</c> permite representar
            los objetos de transferencia de datos para una entidad.
            </para>
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.IEntityDataTransferObject`1.Id">
            <summary>
            Obtiene el Id de la entidad representada por el dto.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Application.ApplicationErrorHandler">
            <summary>
            Clase pública sellada encargada de la gestión de errores para la
            fachada remota WCF.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandler.HandleError(System.Exception)">
            <summary>
            Permite errores de procesamiento y devuelve un valor que indica si
            el transportador del envío cancela la sesión y el contexto de la
            instancia en ciertos casos.
            </summary>
            <remarks>
            Traza el error y lo maneja.
            </remarks>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que representa la
            excepción lanzada durante el proceso.
            </param>
            <returns>
            Devuelve <c>true</c> si  o debería abortar la sesión y
            el contexto de la instancia si no es de tipo
            System.ServiceModel.InstanceContextMode.Single;
            de lo contrario devuelve <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)">
            <summary>
            Método que encargado de la creación de <see cref="T:System.ServiceModel.FaultException"/>
            personalizadas que será devuelta como una excepción en la ejecución de un método de un servicio.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> lanzada en la ejecución de un
            método de un servicio.
            </param>
            <param name="version">
            Parámetro que indica la versión SOAP del mensaje.
            </param>
            <param name="message">
            Parámetro de tipo <see cref="T:System.ServiceModel.Channels.Message" />
            que es devuelto al cliente.
            </param>
        </member>
        <member name="T:Inflexion2.Application.ApplicationErrorHandlerAttribute">
            <summary>
            Clase pública sellada encargada de indicar el comportamiento del
            servicio permitiendo agregar el DefaultErrorHandler a todos los
            servicios WCF.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Application.ApplicationErrorHandlerAttribute"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Application.ApplicationErrorHandlerAttribute"/> class.
            </summary>
            <param name="handlerType">The handler.</param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            Método que ofrece la posibilidad de pasar datos personalizados para
            los elementos de enlace para apoyar la ejecución del contrato.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
            <param name="endpoints">
            Parámetro que indica la colección de endponits de los servicios.
            </param>
            <param name="bindingParameters">
            Parámetro que indica la colección de objetos personalizados
            a los que los elementos de enlace tienen acceso.
            </param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Método encargado de cambiar valores de propiedades o insertar extensiones de objetos
            tales como gestores de errores, mensajes, en tiempo de ejecución.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
        </member>
        <member name="M:Inflexion2.Application.ApplicationErrorHandlerAttribute.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)">
            <summary>
            Método que ofrece la posibilidad de inspeccionar el service host y
            la descripción del servicio para confirmar que el servicio puede
            ejecutarse correctamente.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="serviceDescription">
            Parámetro que indica la descripción del servicio.
            </param>
            <param name="serviceHostBase">
            Parámetro que indica el host que está siendo construido.
            </param>
        </member>
        <member name="T:Inflexion2.Application.FaultObject">
            <summary>
            Clase pública para la captura de excepciones desde los servicios.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:FaultObject"/>.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.FaultObject.FaultCode">
            <summary>
            this enum code the possible origin of the error
            </summary>
        </member>
        <member name="F:Inflexion2.Application.FaultObject.FaultCode.Sever">
            <summary>
            the error is originated in the server
            </summary>
        </member>
        <member name="P:Inflexion2.Application.FaultObject.Code">
            <summary>
            Propiedad que obtiene o establece el origen de la excepción.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el código de la excepción.
            </value>
        </member>
        <member name="P:Inflexion2.Application.FaultObject.Reason">
            <summary>
            Propiedad pública que obtiene o establece el texto del mensaje de excepción.
            </summary>
            <value>
            Valor que es utilizado para obtener o establecer el texto del mensaje de excepción.
            </value>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.Create``1(``0)">
            <summary>
            Creates a WCF SOAP FaultException based on a CAS Exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.FaultObject.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:Inflexion2.Application.InternalException">
            <summary>
            Clase de excepción interna para el Fault.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            la excepción especificada.
            </summary>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que indica la excepción producida.
            </param>
        </member>
        <member name="M:Inflexion2.Application.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:InternalException"/> con el
            mensaje de error especificado y la excepción interna.
            </summary>
            <param name="message">
            Parámetro que indica el mensaje de la excepción.
            </param>
            <param name="innerException">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica la excepción interna.
            </param>
        </member>
        <member name="T:Inflexion2.Application.ValidationException">
            <summary>
            Validation exception
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ValidationException.#ctor(Inflexion2.Domain.Validation.ValidationException)">
            <summary>
            constructs and gets the message for a validation exception
            </summary>
            <param name="validationException"></param>
        </member>
        <member name="P:Inflexion2.Application.ValidationException.ValidationErrors">
            <summary>
            .en collection of errors messages
            </summary>
        </member>
        <member name="T:Inflexion2.Application.ServiceFaultContracts">
            <summary>
            Services for contract exceptions
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.#ctor">
            <summary>
            gets the info from the exception
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.#ctor(System.Type[])">
            <summary>
            add the info from the exception contracts
            </summary>
            <param name="knownFaultTypes"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)">
            <summary>
            add info from the parameters in the contracts
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="bindingParameters"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="clientRuntime"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
            <param name="dispatchRuntime"></param>
        </member>
        <member name="M:Inflexion2.Application.ServiceFaultContracts.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            not implemented
            </summary>
            <param name="contractDescription"></param>
            <param name="endpoint"></param>
        </member>
        <member name="T:Inflexion2.Application.ApplicationLayer">
            <summary>
            Host e inicializacion del contenedor de IOC
            </summary>
        </member>
        <member name="F:Inflexion2.Application.ApplicationLayer.UnitOfWorkPerTestLifeTimeManager">
            <summary>
            ciclo de vida para la unidad de trabajo
            </summary>
        </member>
        <member name="F:Inflexion2.Application.ApplicationLayer.ContextPerTestLifeTimeManager">
            <summary>
            ciclo de vida para el contexto
            </summary>
        </member>
        <member name="P:Inflexion2.Application.ApplicationLayer.IocContainer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inflexion2.Application.ApplicationLayer.ContainerInit">
            <summary>
            Initialize the IoC container to allow the registering of types and objects.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.IConfiguration">
            <summary>
            Interface encargada de la configuración para los servicios Wcf.
            </summary>
            <remarks>
            Interface para la configuración predeterminada de los servicios WCF que
            forman parte de la fachada remota.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.IConfiguration.Configure">
            <summary>
            Método encargado de la ejecución de la configuración.
            </summary>
            <remarks>
            Configuración predeterminada construyendo la cadena de conexión por usuario.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.IConfiguration.ConfigureDataAccess(System.String,System.String)">
            <summary>
            Método encarga de la ejecución de la configuración del acceso a datos.
            </summary>
            <param name="userName">
            Parámetro que indica el nombre de usuario para el inicio de sesión.
            </param>
            <param name="password">
            Parámetro que indica la password del usuario para el inicio de sesión.
            </param>
            <remarks>
            Configuración predeterminada construyendo la cadena de conexión por usuario.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor de <c>userName</c> ó <c>password</c> es null ó vacío.
            </exception>
        </member>
        <member name="T:Inflexion2.Application.BaseBussinesEntityDataTransferObject`1">
            <summary>
            Clase base para los objetos DTO que representan entidades persistidas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.BaseBussinesEntityDataTransferObject`1.Activo">
            <summary>
            Propiedad que indica si la entidad representada está activa.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad representado está activa.
            </value>
        </member>
        <member name="P:Inflexion2.Application.BaseBussinesEntityDataTransferObject`1.Id">
            <summary>
            Propiedad que obtiene o establece el identificador de la entidad representada por el DTO.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el identificador de
            la entidad representada por el DTO.
            </value>
        </member>
        <member name="M:Inflexion2.Application.BaseBussinesEntityDataTransferObject`1.IsTransient">
            <summary>
            Propiedad que obtiene el valor que indica si la entidad representada
            por el DTO ha sido persistida previamente o no.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtenerel valor que indica si la entidad representada
            por el DTO ha sido persistida previamente o no.
            </value>
        </member>
        <member name="T:Inflexion2.Application.BaseEntityDataTransferObject`1">
            <summary>
            Clase base para los objetos DTO que representan entidades persistidas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.BaseEntityDataTransferObject`1.Id">
            <summary>
            Propiedad que obtiene o establece el identificador de la entidad representada por el DTO.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el identificador de
            la entidad representada por el DTO.
            </value>
        </member>
        <member name="M:Inflexion2.Application.BaseEntityDataTransferObject`1.IsTransient">
            <summary>
                Transient objects are not associated with an item already in storage.  For instance,
                a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </summary>
        </member>
        <member name="T:Inflexion2.Application.IBussinesEntityDataTransferObject">
            <summary>
            Interfaz para representar los objetos de transferencia de datos para una entidad.
            </summary>
            <remarks>
            <para>
            La interfaz <c>IEntityDataTransferObject</c> permite representar
            los objetos de transferencia de datos para una entidad.
            </para>
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.IBussinesEntityDataTransferObject.Activo">
            <summary>
            Propiedad que indica si la entidad representada está activa.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.IBussinesEntityDataTransferObject.Id">
            <summary>
            Obtiene el Id de la entidad representada por el dto.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.IBussinesEntityDataTransferObject.IsTransient">
            <summary>
            Obtiene el valor que indica si la entidad representada por el dto ha sido persistida previamente o no.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Application.CompositeFilter">
            <summary>
            Clase para los filtros compuestos en las especificaciones para Dto´s.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.CompositeFilter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:CompositeFilter"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.CompositeFilter.Filters">
            <summary>
            Propiedad que obtiene o establece la lista de filtros.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer la lista de filtros.
            </value>
        </member>
        <member name="P:Inflexion2.Application.CompositeFilter.LogicalOperator">
            <summary>
            Propiedad que obtiene o establece el operador lógico del filtro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el operador lógico del filtro.
            </value>
        </member>
        <member name="T:Inflexion2.Application.CompositeFilterLogicalOperator">
            <summary>
            Lista enumerada para almacenar los operadores lógicos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Application.CompositeFilterLogicalOperator.And">
            <summary>
            Operador lógico AND.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Application.CompositeFilterLogicalOperator.Or">
            <summary>
            Operador lógico OR.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Application.Filter">
            <summary>
            Clase que representa un filtro para las especificaciones.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.Filter.Operator">
            <summary>
            Propiedad que obtiene o establece el operador que aplicará en el filtro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el
            operador que aplicará en el filtro.
            </value>
        </member>
        <member name="P:Inflexion2.Application.Filter.Property">
            <summary>
            Propiedad que obtiene o establece el nombre de la propiedad
            sobre la que se aplicará el filtro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el nombre de la propiedad
            sobre la que se aplicará el filtro.
            </value>
        </member>
        <member name="P:Inflexion2.Application.Filter.Value">
            <summary>
            Propiedad que obtiene o establece el valor para el filtro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener o establecer el valor del filtro.
            </value>
        </member>
        <member name="T:Inflexion2.Application.SpecificationDto">
            <summary>
            Clase Dto que representa la especificación para la obtención de datos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDto.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:SpecificationDto"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.CompositeFilter">
            <summary>
            Propiedad que obtiene el filtro compuesto para la especificación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el filtro compuesto para la especificación.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.IsSearch">
            <summary>
            Propiedad de solo lectura que indica si el filtro es de búsqueda.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para indica si el filtro es de búsqueda.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.PageIndex">
            <summary>
            Propiedad que obtiene o establece el índice de la página en la búsqueda.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor utilizado para obtener o establecer el índice de la página en la búsqueda.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.PageSize">
            <summary>
            Propiedad que obtiene o establece el número de páginas que se van a devolver.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor utilizado para obtener o establecer el número de páginas que se van a devolver.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.SortColumn">
            <summary>
            Propiedad obtiene o establece el nombre de la columna por la que se ordenará.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor utilizado para obtener o establecer el nombre de la columna por la que se ordenará.
            </value>
        </member>
        <member name="P:Inflexion2.Application.SpecificationDto.SortOrder">
            <summary>
            Propiedad obtiene o establece el ordinal
            de la columna por la que se ordenará.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor utilizado para obtener o establecer
            el ordinal de la columna por la que se ordenará.
            </value>
        </member>
        <member name="T:Inflexion2.Application.SpecificationDtoExtensions">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDtoExtensions.ToSpecification``1(Inflexion2.Application.SpecificationDto)">
            <summary>
            Convierte el dto de especification a una especification
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="specificationDto"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Application.SpecificationDtoExtensions.ToSpecification``1(Inflexion2.Application.SpecificationDto,Inflexion2.Domain.Specification.ISpecification{``0})">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
    </members>
</doc>
