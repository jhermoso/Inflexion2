<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion2</name>
    </assembly>
    <members>
        <member name="T:Inflexion2.IDataTransferObject">
            <summary>
            .en this interface is only to mark some clases like DTO and to be able to restrict the rules to help in the building of some generics. like pagedobject
            .es Interfaz para marcar los objetos de transferencia de datos yde esta forma poder aplicar ciertas restricciones en las construccion de algunos genericos como la de los objetos paginados.
            </summary>
        </member>
        <member name="T:Inflexion2.Converters.GenericConverters">
            <summary>
            public static service class to hols generic converting methods.
            </summary>
        </member>
        <member name="M:Inflexion2.Converters.GenericConverters.ChangeType``1(System.Object,System.Globalization.CultureInfo)">
            <summary>
            http://www.siepman.nl/blog/post/2012/03/06/Convert-to-unknown-generic-type-ChangeType-T.aspx
            this method convert from one value to unknown type indicating the culture.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Converters.GenericConverters.ChangeType``1(System.Object)">
            <summary>
            this method convert from one value to unknown type using the current culture.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Data.DatabaseManager">
            <summary>
            Handles Db creation, deletion, etc.
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.Firebird">
            <summary>
            net data provider for firebird Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.MsSqlProvider">
            <summary>
             net data provider for Sql Server Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.MySqlProvider">
            <summary>
            net data provider for MySql Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.OracleDataProvider">
            <summary>
            net data provider for Oracle Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.PostgreSQLProvider">
            <summary>
            net data provider for Postgress Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.SqlCe">
            <summary>
            net data provider for SqlCe Database
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DatabaseManager.SQLiteProvider">
            <summary>
            net data provider for SQLite Database
            </summary>
        </member>
        <member name="M:Inflexion2.Data.DatabaseManager.#ctor(Inflexion2.Data.DbProvider,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Data.DatabaseManager"/> class.
            </summary>
        </member>
        <member name="P:Inflexion2.Data.DatabaseManager.DbProviderFactory">
            <summary>
            Gets the db provider factory.
            </summary>
            <value>The db provider factory.</value>
        </member>
        <member name="M:Inflexion2.Data.DatabaseManager.CreateDatabase">
            <summary>
            Creates the database.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.DatabaseManager.DatabaseExists">
            <summary>
            Checks whether the database instance exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Data.DatabaseManager.DropDatabase">
            <summary>
            Drops the database.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.DatabaseManager._StripDbName(System.String,System.String,System.String@,System.String@)">
            <summary>
            Strips out the database instance name from a connectionString.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="providerName">name of the provider.</param>
            <param name="dbName">Name of the db.</param>
            <param name="dbFile">Name of the file db.</param>
            <returns>The newly created connection string.</returns>
        </member>
        <member name="T:Inflexion2.Data.DbProviderExtensions">
            <summary>
            extension for net provider data bases
            </summary>
        </member>
        <member name="M:Inflexion2.Data.DbProviderExtensions.ExecuteNonQuery(System.Data.Common.DbProviderFactory,System.String,System.String)">
            <summary>
            Execute sql procedures whose are not querys
            </summary>
            <param name="provider"></param>
            <param name="connectionString"></param>
            <param name="command"></param>
        </member>
        <member name="M:Inflexion2.Data.DbProviderExtensions.ExecuteScalar(System.Data.Common.DbProviderFactory,System.String,System.String)">
            <summary>
            execute an escalar function in a db which returns a value
            </summary>
            <param name="provider"></param>
            <param name="connectionString"></param>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Data.DbProvider">
            <summary>
            enum  of Database providers
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.MySqlProvider">
            <summary>
            MySqlProvider
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.SQLiteProvider">
            <summary>
            SQLiteProvider
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.MsSqlProvider">
            <summary>
            MsSqlProvider
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.OracleDataProvider">
            <summary>
            OracleDataProvider
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.PostgreSQLProvider">
            <summary>
            PostgreSQLProvider
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.SqlCe">
            <summary>
            SqlCe
            </summary>
        </member>
        <member name="F:Inflexion2.Data.DbProvider.Firebird">
            <summary>
            Firebird
            </summary>
        </member>
        <member name="T:Inflexion2.Data.IDatabaseManager">
            <summary>
            Handles Db creation, deletion, etc.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.IDatabaseManager.CreateDatabase">
            <summary>
            Creates the database.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.IDatabaseManager.DatabaseExists">
            <summary>
            Checks whether the database instance exists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Data.IDatabaseManager.DeleteDatabase">
            <summary>
            Deletes the database.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.IDatabaseManager.ValidateDatabaseSchema">
            <summary>
            Validates the database schema.
            </summary>
        </member>
        <member name="T:Inflexion2.Data.SqlScriptHelper">
            <summary>
            Helper class to execute scripts against a Sql Server database.
            </summary>
        </member>
        <member name="M:Inflexion2.Data.SqlScriptHelper.Execute(System.String,System.String)">
            <summary>
            Executes the specified script.
            </summary>
            <param name="connection">The connection.</param>
            <param name="script">The script.</param>
        </member>
        <member name="M:Inflexion2.Data.SqlScriptHelper.ExecuteCommands(System.Data.SqlClient.SqlCommand,System.String[])">
            <summary>
            Executes the commands.
            </summary>
            <param name="command">The command.</param>
            <param name="sqlCommands">The SQL commands.</param>
        </member>
        <member name="M:Inflexion2.Data.SqlScriptHelper.GetCommandsFromScript(System.String)">
            <summary>
            Gets the commands from the specified script.
            </summary>
            <param name="script">The script.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Inflector">
            <summary>
            Implementation of the Inflector in Ruby that transforms words from singular to plural,
            class names to table names, modularized class names to ones without, and class names to foreign keys
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.#cctor">
            <summary>
            Class Constructor.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Camelize(System.String)">
            <summary>
            Formats the string in Camel case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to format in Camel case.</param>
            <returns>string. The word in Camel case.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Capitalize(System.String)">
            <summary>
            Capitalizes the word.
            </summary>
            <param name="word">string. The word to capitalize.</param>
            <returns>The Capitalized word.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Dasherize(System.String)">
            <summary>
            Replaces underscores with dashes in the string.
            </summary>
            <param name="underscoredWord">string. The word to dasherize.</param>
            <returns>The word with dashes instead of underscores.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Humanize(System.String)">
            <summary>
            Capitalizes the first word and turns underscores into spaces and strips _id. Formats the word into
            human readable string.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to humaize</param>
            <returns>The humanized word.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Ordinalize(System.String)">
            <summary>
            Ordinalize turns a number into an ordinal string used to denote the position in an ordered
            sequence such as 1st, 2nd, 3rd, 4th
            </summary>
            <param name="number">string. The number to ordinalize.</param>
            <returns>string. The ordinalized number.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Pascalize(System.String)">
            <summary>
            Formats the string in pascal case.
            </summary>
            <param name="lowercaseAndUnderscoredWord">string. The word to Pascal case.</param>
            <returns>The word in Pascal case.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Pluralize(System.String)">
            <summary>
            Returns the plural form of the word in the string
            </summary>
            <param name="word">string. The word to pluralize.</param>
            <returns>The pluralized word.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Singularize(System.String)">
            <summary>
            The reverse of <see cref="M:Inflexion2.Domain.Inflector.Pluralize(System.String)"/>, returns the singular form of a word in a string.
            </summary>
            <param name="word">string. The word to singularize.</param>
            <returns>The singluralized word.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Titleize(System.String)">
            <summary>
            Capitalizes all the words and replaces some characters in the string to create a nicer looking title.
            </summary>
            <param name="word">string. The word to titleize.</param>
            <returns>The titlized word.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Uncapitalize(System.String)">
            <summary>
            Revers of <see cref="M:Inflexion2.Domain.Inflector.Capitalize(System.String)"/>
            </summary>
            <param name="word">string. The word to un-capitalize.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Inflector.Underscore(System.String)">
            <summary>
            Makes an underscored form from the expression in the string.
            </summary>
            <param name="pascalCasedWord">string. The word to underscore.</param>
            <returns>string. The word with underscore seperators.</returns>
        </member>
        <member name="T:Inflexion2.Domain.LogicalDeleteAttribute">
            <summary>
                Facilitates indicating which Classes are logical deleteable
            </summary>
            <remarks>
                This is intended for use with <see cref="T:Inflexion2.Domain.IEntity`1" />.  It may NOT be used on a <see cref="T:Inflexion2.Domain.ValueObject" />.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.EntityForbiddenDeleteAttribute">
            <summary>
                Facilitates indicating which Classes are logical deleteable
            </summary>
            <remarks>
                This is intended for use with <see cref="T:Inflexion2.Domain.IEntity`1" />.  It may NOT be used on a <see cref="T:Inflexion2.Domain.ValueObject" />.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.ChildrenRelationshipDeleteBehaviorAttribute">
            <summary>
                Facilitates indicating which Classes are forbidden deleteable
            </summary>
            <remarks>
                This is intended for use with <see cref="T:Inflexion2.Domain.IEntity`1" />.  It may NOT be used on a <see cref="T:Inflexion2.Domain.ValueObject" />.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.ChildrenRelationshipDeleteBehaviorAttribute.Behavior">
            <summary>
            Discriminant value. allow only threee behaviors
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ChildrenRelationshipDeleteBehaviorAttribute.#ctor">
            <summary>
            empty constructor set default value to cascade
            TODO: modificar este comportamiento para que sea cascade en composición y orphannull en agregación.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ChildrenRelationshipDeleteBehaviorAttribute.#ctor(Inflexion2.Domain.Delete)">
            <summary>
            .es Constructor para establecer el comportamiento deseado
            .en constructor to set the behavieor
            </summary>
            <param name="attributeValue"></param>
        </member>
        <member name="T:Inflexion2.Domain.Delete">
            <summary>
            .es lista de comportamientos validos 
            .en valid behavieors listing
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Delete.Cascade">
            <summary>
            .es con este comportamiento indicamos que al borrar la clase se borran todos las entidades hijas.
            Este comportamiento solo tiene sentido en relaciones de composición
            .en delete the children entitys 
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Delete.Restrict">
            <summary>
            .es indicamos que no podemos borrar la entidad si esta relación/propiedad tiene hijos. 
            Este comportamiento solo tiene sentido en relaciones de composición
            .en Can´t delete if there is at least one child entity or value object in this property/relationship
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.DateGreaterThanAttribute">
            <summary>
            Clase de tipo atributo encargado de validar fechas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.DateGreaterThanAttribute.basePropertyName">
            <summary>
            Variable privada que representa el nombre de la propiedad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.DateGreaterThanAttribute.errorMessage">
            <summary>
            Variable privada encargada de almacenar el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.DateGreaterThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion2.Domain.DateGreaterThanAttribute"/>.
            </summary>
            <param name="basePropertyName">
            Parámetro que indica el nombre base de la propiedad fecha de la que comparar.
            </param>
            <param name="errorMessage">
            Parámetro que indica el mensaje en caso de error.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.DateGreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si una fecha es mayor a otra.
            </summary>
            <param name="value">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor de la fecha es válido y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.DomainSignatureAttribute">
            <summary>
                Facilitates indicating which property(s) describe the unique signature of an 
                entity.  See Entity.GetTypeSpecificSignatureProperties() for when this is leveraged.
            </summary>
            <remarks>
                This is intended for use with <see cref="T:Inflexion2.Domain.IEntity`1" />.  It may NOT be used on a <see cref="T:Inflexion2.Domain.ValueObject" />.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.GreaterOrEqualThanCurrentDateAttribute">
            <summary>
            Clase atributo encargada comprobar si una fecha es menor
            que la fecha actual.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.GreaterOrEqualThanCurrentDateAttribute.errorMessage">
            <summary>
            Variable encargada de almacenar el mensaje de error.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.GreaterOrEqualThanCurrentDateAttribute.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GreaterOrEqualThanCurrentDateAttribute"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.GreaterOrEqualThanCurrentDateAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si una fecha es mayor a otra.
            </summary>
            <param name="value">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor de la fecha es válido y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.GreaterThanAttribute">
            <summary>
            Clase de tipo atributo encargado de validar datos dentro de un rango.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.GreaterThanAttribute.basePropertyName">
            <summary>
            Variable privada que representa el nombre de la propiedad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.GreaterThanAttribute.errorMessage">
            <summary>
            Variable privada encargada de almacenar el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.GreaterThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GreaterThanAttribute"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="basePropertyName">
            Parámetro que indica el nombre base de la propiedad de la que comparar.
            </param>
            <param name="errorMessage">
            Parámetro que indica el mensaje en caso de error.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si un número es mayor que otro.
            </summary>
            <param name="value">
            Parámetro que indica el número a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor a comparar es mayor y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.MinimumCollectionSizeAttribute">
            <summary>
            Clase atributo para la validación de tamaño mínimo de una colección.
            </summary>
            <remarks>
            Validamos el número de elementos mínimos que tiene que tener la colección.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Validation.MinimumCollectionSizeAttribute.minSize">
            <summary>
             Variable privada que indica el tamañon mínimo de la colección.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Validation.MinimumCollectionSizeAttribute.#ctor(System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase MinimumCollectionSizeAttribute.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="minSize">
            Parámetro que indica el tamaño mínimo.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.MinimumCollectionSizeAttribute.IsValid(System.Object)">
            <summary>
            Función para validar el tamaño mínimo de una colección.
            </summary>
            <param name="value">
            Parámetro que corresponde a la colección que se quiere validar.
            </param>
            <returns>
            Devuelve <c>true</c> sin la colección cumple con el tamaño mínimo y <c>false</c>
            en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.DataAnnotationHelper">
            <summary>
            Static class capable of readinng de DataAnnotations of a type and return a list of corresponding IValidationInfos.
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.Validation.DataAnnotationsValidator`1">
            <summary>
            generic implementation of data anotations validations for validetable entitys
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.Validation.DataAnnotationsValidator`1.AssertValidation(`0)">
            <summary>
            Generic Entity Assert Validation 
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.DataAnnotationsValidator`1.IsValid(`0)">
            <summary>
            Generic valid condition for an entity
            </summary>
            <param name="instance"></param>
            <returns>Instance Entity valid condition</returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.DataAnnotationsValidator`1.Validate(`0)">
            <summary>
            Generic validate trigger for a Validate entity.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.IValidatable">
            <summary>
            Interface for validatable objects.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidatable.AssertValidation">
            <summary>
            Validates this instance.
            If instance is not valid, method must throw a ValidationException.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidatable.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidatable.Validate">
            <summary>
            Validates this instance.
            If instance is not valid, a collection of errors will be returned.
            </summary>
            <returns>A list containing error details, or null</returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.IValidatable`1">
            <summary>
            Interface for validatable objects.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidatable`1.Validate(Inflexion2.Domain.Validation.IValidator{`0})">
            <summary>
            Validates an entitty using the specified validator.
            </summary>
            <param name="validator">The validator.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.IValidator`1">
            <summary>
            Interface implemented by different flavors of validators that provide validation
            logic on domain entities.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidator`1.AssertValidation(`0)">
            <summary>
            Validates this instance.
            If instance is not valid, method must throw a ValidationException.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidator`1.IsValid(`0)">
            <summary>
            Determines whether the specified instance is valid.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
            <c>true</c> if the specified instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.ValidationError">
            <summary>
            Details of a validation error
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> data structure.
            </summary>
            <param name="message">string. The validation error message.</param>
            <param name="property">string. The property that was validated.</param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> data structure.
            </summary>
            <param name="entityType">Type of the entity.</param>
            <param name="message">string. The validation error message.</param>
            <param name="property">string. The property that was validated.</param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> struct.
            </summary>
            <param name="property"></param>
            <param name="ex">The exception which caused the validation error.</param>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationError.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationError.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message.</value>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationError.PropertyName">
            <summary>
            Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.op_Inequality(Inflexion2.Domain.Validation.ValidationError,Inflexion2.Domain.Validation.ValidationError)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.op_Equality(Inflexion2.Domain.Validation.ValidationError,Inflexion2.Domain.Validation.ValidationError)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.Equals(System.Object)">
            <summary>
            Overridden. Compares if an object is equal to the <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.Equals(Inflexion2.Domain.Validation.ValidationError)">
            <summary>
            Overriden. Compares if a <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> instance is equal to this
            <see cref="T:Inflexion2.Domain.Validation.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationError.ToString">
            <summary>
            Overriden. Gets a string that represents the validation error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Validation.ValidationException">
            <summary>
            Validation Exception
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationException.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{Inflexion2.Domain.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="errors">The errors.</param>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{Inflexion2.Domain.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationException"/> class.
            </summary>
            <param name="errors">The errors.</param>
            <param name="entityType">Type of the entity.</param>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationException.EntityType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationException.ValidationErrors">
            <summary>
            Gets or sets the validation errors.
            </summary>
            <value>The validation errors.</value>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Inflexion2.Domain.Validation.ValidationResult">
            <summary>
            Contains the result of a <see cref="M:Inflexion2.Domain.Validation.IValidator`1.Validate(`0)"/> method call.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationResult"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{Inflexion2.Domain.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.Validation.ValidationResult"/> class.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationResult.Errors">
            <summary>
            Gets the errors.
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Validation.ValidationResult.IsValid">
            <summary>
            Gets wheater the validation operation on an entity was valid or not.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.AddError(Inflexion2.Domain.Validation.ValidationError)">
            <summary>
            Adds a validation error into the result.
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.System#Collections#Generic#IEnumerable{Inflexion2#Domain#Validation#ValidationError}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Validation.ValidationResult.RemoveError(Inflexion2.Domain.Validation.ValidationError)">
            <summary>
            Removes a validation error from the result.
            </summary>
            <param name="error"></param>
        </member>
        <member name="T:Inflexion2.Domain.AuditableEntity`2">
             <summary>
             Interfaz para representar las entidades del negocio auditables.
             </summary>
             <remarks>
             Sin comentarios especiales.
             </remarks>
             <typeparam name="TEntity">
             <see cref="T:Inflexion2.Domain.IEntity{TIdentifier}" />
             </typeparam>
             <typeparam name="TIdentifier">
             Representación del tipo del identificador de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta interfaz suponiendo la interfaz
             <c>IAmbito</c> que la implementa:
             <code>
               <![CDATA[
            
             using System;
            
             /// <summary>
             /// Interfaz que identifica una entidad de tipo Ámbito
             /// dentro de la aplicación.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public interface IAmbito : Inflexion2.Domain.IAuditableEntity<int>
             {
            
                 #region PROPERTIES
            
                     /// <summary>
                     /// Propiedad pública que permite obtener la descripción del ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <value>
                     /// Valor que es utilizado para obtener la descripción del ámbito.
                     /// </value>
                     string Descripcion { get; }
            
                 #endregion
            
                 #region MEMBERS
            
                     /// <summary>
                     /// Método encargada del borrado lógico de la entidad.
                     /// </summary>
                     /// <remarks>
                     /// Modifica el valor la propiedad Activo a <c>false</c>.
                     /// </remarks>
                     void Disable();
            
                     /// <summary>
                     /// Método encargada de establecer la descripción
                     /// de la entidad ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     /// <exception cref="System.ArgumentNullException">
                     /// Lanzada cuando el valor del parámetro <c>description</c> es cadena vacía.
                     /// </exception>
                     void SetDescripcion(string description);
            
                 #endregion
            
             } // IAmbito
            
               ]]>
             </code>
             </example>
        </member>
        <member name="F:Inflexion2.Domain.AuditableEntity`2.auditInfo">
            <summary>
            Variable encargada de almacenar la información
            de auditoría.
            </summary>
            <remarks>
            Para ello se utilizará el objeto valor <see cref="T:Inflexion2.Domain.IAuditInfo"/>.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.AuditableEntity`2.AuditInfo">
            <summary>
            Propiedad que obtiene la información de auditoría.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor utilizado para obtener la información de auditoría.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.AuditableEntity`2.AuditDelete(System.String)">
            <summary>
            Método para auditar la eliminación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.AuditableEntity`2.AuditInsert(System.String)">
            <summary>
            Método para auditar la creación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="createdBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.AuditableEntity`2.AuditUpdate(System.String)">
            <summary>
            Método para auditar la modificación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="T:Inflexion2.Domain.Entity`2">
            <summary>
            Clase pública abstracta para representar las entidades del negocio.
            </summary>
            <remarks>
            La clase abstracta <see cref="T:Inflexion2.Domain.IEntity`1"/> representa una clase base de tipo
            entidad de negocio.
            </remarks>
            <typeparam name="TEntity">
            Tipo genérico para representar el propio tipo del identificador.
            su inclusión se justifica para facilitar las operaciones de reflexión, 
            concretamente para facilitar la construción del metodo CanDelete del AgregateRoot.
            </typeparam>
            <typeparam name="TIdentifier">
            Tipo genérico para representar el tipo de identificador de las
            entidades y que es necesario para los repositorios.
            </typeparam>
            <seealso cref="T:Inflexion2.Domain.IEntity{TIdentifier}" />
        </member>
        <member name="F:Inflexion2.Domain.Entity`2.HASH_MULTIPLIER">
            <summary>
                To help ensure hashcode uniqueness, a carefully selected random number multiplier 
                is used within the calculation.  Goodrich and Tamassia's Data Structures and
                Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
                of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
                for more information.
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Entity`2.id">
            <summary>
            Identificador único de la entidad.
            </summary>
            <remarks>
            Este campo o variable se utiliza conjuntamente con la propiedad
            <see cref="P:Inflexion2.Domain.Entity`2.Id"/>.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Entity`2.cachedHashcode">
            <summary>
            Derived from Hexacore
            
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Entity`2.signaturePropertiesDictionary">
            <summary>
                This static member caches the domain signature properties to avoid looking them up for 
                each instance of the same type.
            
                A description of the very slick ThreadStatic attribute may be found at 
                http://www.dotnetjunkies.com/WebLog/chris.taylor/archive/2005/08/18/132026.aspx
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Entity`2.Id">
            <summary>
            Devuelve el identificador único de la entidad.
            </summary>
            <value>
            Identificador único de la entidad.
            </value>
            <remarks>
            <para>
            El valor del identificador único será utilizado como
            criterio principal durante la igualdad y comparación entre
            entidades.
            </para>
            <para>
            TIdentifier Representa el tipo de datos del identificador único
            de la entidad.
            </para>
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.Entity`2.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.#ctor(`1)">
            <summary>
            Constructor de la clase.
            </summary>
            <remarks>
            El constructor nos permite crear una entidad de acuerdo al
            identificador único.
            </remarks>
            <param name="id">
            Identificador unívoco de la entidad.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.#ctor">
            <summary>
            Constructor vacio de la clase.
            </summary>
            <remarks>
            El constructor nos permite crear una entidad de acuerdo al
            identificador único.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.CompareTo(System.Object)">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="element">
            Parámetro que hace referencia al elemento a comparar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>element</c> es null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Lanzada cuando el valor de la variable <c>otherEntity</c> es null.
            </exception>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.CompareTo(Inflexion2.Domain.IEntity{`1})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">
            Parámetro que hace referencia al identificador a comparar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>entityIdentifier</c> es null.
            </exception>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.CompareTo(Inflexion2.Domain.Entity{`0,`1})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador de dos entidades base para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">Indica el otro objeto con el cual comparar.</param>
            <returns>Devuelve un entero que indica si la comparación es correcta o no.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.CompareTo(`0)">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador de dos entidades base para saber si
            son iguales o no.
            </remarks>
            <param name="entity">Indica el otro objeto con el cual comparar.</param>
            <returns>Devuelve un entero que indica si la comparación es correcta o no.</returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.IsTransient">
            <summary>
                Transient objects are not associated with an item already in storage.  For instance,
                a Customer is transient if its Id is 0.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.Equals(`0)">
            <summary>
            Equalses the specified compare to.
            </summary>
            <param name="other">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.Equals(Inflexion2.Domain.IEntity{`1})">
            <summary>
            Equalses the specified compare to.
            </summary>
            <param name="other">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.Equals(Inflexion2.Domain.Entity{`0,`1})">
            <summary>
            Equalses the specified compare to.
            </summary>
            <param name="other">The compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.GetHashCode">
            <summary>
            This is used to provide the hashcode identifier of an object using the signature
            properties of the object; although it's necessary for NHibernate's use, this can
            also be useful for business logic purposes and has been included in this base
            class, accordingly.  Since it is recommended that GetHashCode change infrequently,
            if at all, in an object's lifetime, it's important that properties are carefully
            selected which truly represent the signature of an object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.GetSignatureProperties">
            <summary>
            Init the signaturePropertiesDictionary here due to reasons described at 
            http://blogs.msdn.com/jfoscoding/archive/2006/07/18/670497.aspx
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.GetTypeUnproxied">
            <summary>
                When NHibernate proxies objects, it masks the type of the actual entity object.
                This wrapper burrows into the proxied object to get its actual type.
            
                Although this assumes NHibernate is being used, it doesn't require any NHibernate
                related dependencies and has no bad side effects if NHibernate isn't being used.
            
                Related discussion is at http://groups.google.com/group/sharp-architecture/browse_thread/thread/ddd05f9baede023a ...thanks Jay Oliver!
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.HasSameNonDefaultIdAs(Inflexion2.Domain.Entity{`0,`1})">
            <summary>
            derived from Hexacore
            Returns true if self and the provided entity have the same Id values
            and the Ids are not of the default Id value
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Entity`2.GetTypeSpecificSignatureProperties">
            <summary>
                The property getter for SignatureProperties should ONLY compare the properties which make up 
                the "domain signature" of the object.
            
                If you choose NOT to override this method (which will be the most common scenario), 
                then you should decorate the appropriate property(s) with [DomainSignature] and they 
                will be compared automatically.  This is the preferred method of managing the domain
                signature of entity objects.
            </summary>
            <remarks>
                This ensures that the entity has at least one property decorated with the 
                [DomainSignature] attribute.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.Event">
            <summary>
             poc for CQRS implementation 
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Event.Version">
            <summary>
            event version
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.EventSourcedEntity">
            <summary>
            event source entity to save historic changes
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.EventSourcedEntity.Id">
            <summary>
            entity identifier
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.EventSourcedEntity.Version">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedEntity.GetUncommittedChanges">
            <summary>
            TODO: update comments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedEntity.LoadsFromHistory(System.Collections.Generic.IEnumerable{Inflexion2.Domain.Event})">
            <summary>
            TODO: update comments
            </summary>
            <param name="history"></param>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedEntity.MarkChangesAsCommitted">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedEntity.ApplyChange(Inflexion2.Domain.Event)">
            <summary>
            TODO: update comments
            </summary>
            <param name="event"></param>
        </member>
        <member name="T:Inflexion2.Domain.BusinessEntity`2">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="F:Inflexion2.Domain.BusinessEntity`2.isActive">
            <summary>
            Variable privada de propiedad para indicar
            si la entidad está activa ó habilitada.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.BusinessEntity`2.#ctor(`1)">
            <summary>
            TODO: INCORPORAR EL AUDITINFO ENLOS CONSTRUCTORES Y DESTRUCTORES
            Inicializa una nueva instancia de la clase <see cref="T:AuditableEntityBase"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="id">
            Parámetro que indica el identificador único de la entidad.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.BusinessEntity`2.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.BusinessEntity`2.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.BusinessEntity`2.IsActive">
            <summary>
            Propiedad pública que indica
            si la entidad está activa.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            está o no activa.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.BusinessEntity`2.Disable">
            <summary>
            Método encargado del borrado lógico de la entidad.
            </summary>
            <remarks>
            Borrado lógico de la entidad.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.BusinessEntity`2.Enable">
            <summary>
            Método encargada del activar ó habilitar una entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.IAuditableEntity`1">
             <summary>
             Interfaz para representar las entidades del negocio auditables.
             </summary>
             <remarks>
             Sin comentarios especiales.
             </remarks>
             <typeparam name="TIdentifier">
             Representación del tipo del identificador de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta interfaz suponiendo la interfaz
             <c>IAmbito</c> que la implementa:
             <code>
               <![CDATA[
            
             using System;
            
             /// <summary>
             /// Interfaz que identifica una entidad de tipo Ámbito
             /// dentro de la aplicación.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public interface IAmbito : Inflexion2.Domain.IAuditableEntity<int>
             {
            
                 #region PROPERTIES
            
                     /// <summary>
                     /// Propiedad pública que permite obtener la descripción del ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <value>
                     /// Valor que es utilizado para obtener la descripción del ámbito.
                     /// </value>
                     string Descripcion { get; }
            
                 #endregion
            
                 #region MEMBERS
            
                     /// <summary>
                     /// Método encargada del borrado lógico de la entidad.
                     /// </summary>
                     /// <remarks>
                     /// Modifica el valor la propiedad Activo a <c>false</c>.
                     /// </remarks>
                     void Disable();
            
                     /// <summary>
                     /// Método encargada de establecer la descripción
                     /// de la entidad ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     /// <exception cref="System.ArgumentNullException">
                     /// Lanzada cuando el valor del parámetro <c>description</c> es cadena vacía.
                     /// </exception>
                     void SetDescripcion(string description);
            
                 #endregion
            
             } // IAmbito
            
               ]]>
             </code>
             </example>
        </member>
        <member name="P:Inflexion2.Domain.IAuditableEntity`1.AuditInfo">
            <summary>
            Propiedad que obtiene la información de auditoría.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor utilizado para obtener la información de auditoría.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.IAuditableEntity`1.AuditDelete(System.String)">
            <summary>
            Método para auditar la eliminación de una entidad existente.
            </summary>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que elimina la entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.IAuditableEntity`1.AuditInsert(System.String)">
            <summary>
            Método para auditar la creación de una nueva entidad.
            </summary>
            <param name="createdBy">
            Parámetro que indica el identificador único del usuario
            que crea la nueva entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.IAuditableEntity`1.AuditUpdate(System.String)">
            <summary>
            Método para auditar la modificación de una entidad existente.
            </summary>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.IBusinessEntity`1">
            <summary>
            Interfaz para representar las entidades del negocio.
            </summary>
            <remarks>
            La interfaz <c>IEntity</c> representa una entidad de negocio.
            </remarks>
            <typeparam name="TIdentifier">
            Representación del tipo del identificador de la entidad.
            </typeparam>
        </member>
        <member name="P:Inflexion2.Domain.IBusinessEntity`1.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.IBusinessEntity`1.IsActive">
            <summary>
            Propiedad que indica si la entidad está activa.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            está o no activa.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.IBusinessEntity`1.Disable">
            <summary>
            Método encargado del borrado lógico de la entidad.
            </summary>
            <remarks>
            Modifica el valor la propiedad IsActive a <c>False</c>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.IBusinessEntity`1.Enable">
            <summary>
            Método encargada del activar ó habilitar una entidad.
            </summary>
            <remarks>
            Modifica el valor la propiedad IsActive a <c>True</c>.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.IEntity`1">
            <summary>
            .es Interfaz para representar una entidad basica siguiendo la defenición de Eric Evans.
            Las entidades estan pensadas para que tengan 2 factorias estaticas con la responsabilidad de crear la propia entidad.
            Una primera factoria sin parametros para cuando se hace cqrs y podemos guardar con 
            .en Interface for basic entity from Eric Evans definition.
            </summary>
            <remarks>
            .ee La interfaz <c>IEntity</c> representa una entidad basica.
            .en The interface <c>IEntity</c> represents a basic entity.
            </remarks>
            <typeparam name="TIdentifier">
            Representación del tipo del identificador de la entidad.
            Representation of Entity's type.
            </typeparam>
        </member>
        <member name="P:Inflexion2.Domain.IEntity`1.Id">
            <summary>
            .es Devuelve el identificador único de la entidad.
            .en Get unic entity's identification
            </summary>
            <remarks>
            .es El valor del identificador único será utilizado como criterio
            principal durante la igualdad y comparación entre entidades.
            .en identity's value is the only criteria to compare two entities.
            </remarks>
            <value>
            <para>
            .es Identificador único de la entidad.
            .en Unic Entity's Identifier
            </para>
            <para>
            .es TIdentifier representa el tipo de datos del identificador único de
            la entidad.
            .en TIdentifier represents identity's type used to identify an entity.
            </para>
            </value>
        </member>
        <member name="M:Inflexion2.Domain.IEntity`1.IsTransient">
            <summary>
                Derived from Sharp Arch
                Transient objects are not associated with an item already in storage.  For instance,
                a Customer is transient if its Id is defalut value.  It's virtual to allow NHibernate-backed 
                objects to be lazily loaded.
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.AggregateRoot`2">
            <summary>
            http://msdn.microsoft.com/en-us/magazine/hh547108.aspx
            any aggregate root is an entity wich is the root for any write operation in the repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.AggregateRoot`2.CanBeSaved">
            <summary>
            .es esta propiedad indica si podemos o no salvar el agregado
            por norma general esto dependera de si se cumplen  los invariantes o no
            o por el contrario si hemos de salvarla incluso aunque no cumplan dichos invariantes.
            no son virtuales por que estas propiedaes no se guardan solo se consultan en memoria
            igualmente no existe una implementación de rootaggregate sino que actua como marcador.
            la funcion puede establecerse mediante la recuperación de los settings para esta clase
            es decir como una preferencia del administrador para la clase. Esta preferencia indicaria si esta clase puede grabarse sin cumplir las validaciones o si por el contrario depende de las validaciones.
            de forma similar se puede indicar si se permite borrar o solo desactivar.
            Si el setting no existe la clase podra grabarse  no en funcion de su metodo de validación. si la entidad no es validable entonces la propiedad devuelve true.
            .en this property indicate if is it posible to save the root agregate.
            in the original this has not set but for CQRS is posible to save with out complmete the invariants
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.AggregateRoot`2.CanBeDeleted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.AggregateRoot`2.IsLogicalDelete">
            <summary>
             este metodo nos obliga a definir la entidad como un generico en el que se incluye como primer parametro la propia entidad
             este metodo necesita la refelxión sobre la clase que hereda y que queda marcada como root agregate.
            </summary>
             <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.IAggregateRoot`2">
            <summary>
            http://msdn.microsoft.com/en-us/magazine/hh547108.aspx
            any aggregate root is an entity wich is the root for any write operation in the repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.IAggregateRoot`2.CanBeSaved">
            <summary>
            .es estos metodos indican si podemos o no salvar el agregado
            por norma general esto dependera de si se cumplen  los invariantes o no
            o por el contrario si hemos de salvarla incluso aunque no cumplan dichos invariantes.
            no son virtuales por que estas propiedaes no se guardan solo se consultan en memoria
            igualmente no existe una implementación de rootaggregate sino que actua como marcador.
            la funcion puede establecerse mediante la recuperación de los settings para esta clase
            es decir como una preferencia del administrador para la clase. Esta preferencia indicaria si esta clase puede grabarse sin cumplir las validaciones o si por el contrario depende de las validaciones.
            de forma similar se puede indicar si se permite borrar o solo desactivar.
            Si el setting no existe la clase podra grabarse  no en funcion de su metodo de validación. si la entidad no es validable entonces la propiedad devuelve true.
            .en this property indicate if is it posible to save the root agregate.
            in the original this has not set but for CQRS is posible to save with out complmete the invariants
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.IAggregateRoot`2.CanBeDeleted">
            <summary>
            .es al invocar este metodo indicamos si es posible borrar a nivel de dominio la entidad que se ha solicitado borrar.
            nada tiene que ver con las necesidades de borrado del repositorio que puedne ser completamente diferentes.
            por ejemplo en una relación m:n podemos marcar que el borrado introduce un valor nulo en los hijos borrando las entidades del rootagregate
            esta acción borrara o no ademas los registros de la tabla intermedia pero esa responsabilidad es del orm.
            </summary>
            <returns>devolvemos un valor true si la respuesta es que si podemos borrar y false en caso contrario</returns>
        </member>
        <member name="M:Inflexion2.Domain.IAggregateRoot`2.IsLogicalDelete">
            <summary>
            para aquellas entidades de tipo business el borrado puede marcarse como logico y tendran un campo que indicara si la 
            entidad esta activa o no.
            </summary>
            <returns>devolvemos true si el root aggragte esta marcado como de borrado logico </returns>
        </member>
        <member name="T:Inflexion2.Domain.IEntityAuditTrail">
            <summary>
            TODO: update comments, auditing interface to add to root aggregates
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.ChangeSetUniqueId">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.EntityUniqueId">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.NewValue">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.OldValue">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.PropertyName">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.UpdateBy">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.IEntityAuditTrail.UpdatedAt">
            <summary>
            TODO: update comments
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.ValidatableEntity`2">
            <summary>
            Entitiy validatable with data annotations
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="F:Inflexion2.Domain.ValidatableEntity`2.validator">
            <summary>
            
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.ValidatableEntity`2.Validator">
            <summary>
            Gets the validator.
            </summary>
            <value>The validator.</value>
            <remarks>Object should _explicitly_ implement IValidatable or this call will fail.</remarks>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableEntity`2.AssertValidation">
            <summary>
            Validates this instance.
            If instance is not valid, method must throw a ValidationException.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableEntity`2.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableEntity`2.Validate">
            <summary>
            Validates this instance.
            If instance is not valid, a collection of errors will be returned.
            </summary>
            <returns>A list containing error details, or null</returns>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableEntity`2.Validate(Inflexion2.Domain.Validation.IValidator{Inflexion2.Domain.Entity{`0,`1}})">
            <summary>
            Validates the instance with the specified validator.
            </summary>
            <param name="validator">The validator.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.AuditableAggregateRoot`2">
            <summary>
            http://msdn.microsoft.com/en-us/magazine/hh547108.aspx
            any aggregate root is an entity wich is the root for any write operation in the repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.AuditableAggregateRoot`2.CanBeSaved">
            <summary>
            .es esta propiedad indica si podemos o no salvar el agregado
            por norma general esto dependera de si se cumplen  los invariantes o no
            o por el contrario si hemos de salvarla incluso aunque no cumplan dichos invariantes.
            no son virtuales por que estas propiedaes no se guardan solo se consultan en memoria
            igualmente no existe una implementación de rootaggregate sino que actua como marcador.
            la funcion puede establecerse mediante la recuperación de los settings para esta clase
            es decir como una preferencia del administrador para la clase. Esta preferencia indicaria si esta clase puede grabarse sin cumplir las validaciones o si por el contrario depende de las validaciones.
            de forma similar se puede indicar si se permite borrar o solo desactivar.
            Si el setting no existe la clase podra grabarse  no en funcion de su metodo de validación. si la entidad no es validable entonces la propiedad devuelve true.
            .en this property indicate if is it posible to save the root agregate.
            in the original this has not set but for CQRS is posible to save with out complmete the invariants
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.AuditableAggregateRoot`2.CanBeDeleted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.AuditableAggregateRoot`2.IsLogicalDelete">
            <summary>
             este metodo nos obliga a definir la entidad como un generico en el que se incluye como primer parametro la propia entidad
             este metodo necesita la refelxión sobre la clase que hereda y que queda marcada como root agregate.
            </summary>
             <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.BusinessAggregateRoot`2">
            <summary>
            http://msdn.microsoft.com/en-us/magazine/hh547108.aspx
            any aggregate root is an entity which is the root for any write operation in the repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.BusinessAggregateRoot`2.CanBeSaved">
            <summary>
            .es esta propiedad indica si podemos o no salvar el agregado
            por norma general esto dependera de si se cumplen  los invariantes o no
            o por el contrario si hemos de salvarla incluso aunque no cumplan dichos invariantes.
            no son virtuales por que estas propiedaes no se guardan solo se consultan en memoria
            igualmente no existe una implementación de rootaggregate sino que actua como marcador.
            la funcion puede establecerse mediante la recuperación de los settings para esta clase
            es decir como una preferencia del administrador para la clase. Esta preferencia indicaria si esta clase puede grabarse sin cumplir las validaciones o si por el contrario depende de las validaciones.
            de forma similar se puede indicar si se permite borrar o solo desactivar.
            Si el setting no existe la clase podra grabarse  no en funcion de su metodo de validación. si la entidad no es validable entonces la propiedad devuelve true.
            .en this property indicate if is it posible to save the root agregate.
            in the original this has not set but for CQRS is posible to save with out complmete the invariants
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.BusinessAggregateRoot`2.CanBeDeleted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.BusinessAggregateRoot`2.IsLogicalDelete">
            <summary>
             este metodo nos obliga a definir la entidad como un generico en el que se incluye como primer parametro la propia entidad
             este metodo necesita la reflexión sobre la clase que hereda y que queda marcada como root agregate.
            </summary>
             <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.ValidatableAggregateRoot`2">
            <summary>
            http://msdn.microsoft.com/en-us/magazine/hh547108.aspx
            any aggregate root is an entity wich is the root for any write operation in the repository
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableAggregateRoot`2.CanBeSaved">
            <summary>
            .es esta propiedad indica si podemos o no salvar el agregado
            por norma general esto dependera de si se cumplen  los invariantes o no
            o por el contrario si hemos de salvarla incluso aunque no cumplan dichos invariantes.
            no son virtuales por que estas propiedaes no se guardan solo se consultan en memoria
            igualmente no existe una implementación de rootaggregate sino que actua como marcador.
            la funcion puede establecerse mediante la recuperación de los settings para esta clase
            es decir como una preferencia del administrador para la clase. Esta preferencia indicaria si esta clase puede grabarse sin cumplir las validaciones o si por el contrario depende de las validaciones.
            de forma similar se puede indicar si se permite borrar o solo desactivar.
            Si el setting no existe la clase podra grabarse  no en funcion de su metodo de validación. si la entidad no es validable entonces la propiedad devuelve true.
            .en this property indicate if is it posible to save the root agregate.
            in the original this has not set but for CQRS is posible to save with out complmete the invariants
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableAggregateRoot`2.CanBeDeleted">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.ValidatableAggregateRoot`2.IsLogicalDelete">
            <summary>
             este metodo nos obliga a definir la entidad como un generico en el que se incluye como primer parametro la propia entidad
             este metodo necesita la refelxión sobre la clase que hereda y que queda marcada como root agregate.
            </summary>
             <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.AndSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador And lógico.
            </summary>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion2.Domain.Specification.AndSpecification`1.leftSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Specification.AndSpecification`1.rightSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.AndSpecification`1.#ctor(Inflexion2.Domain.Specification.ISpecification{`0},Inflexion2.Domain.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase AndSpecification.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="left">
            Parámetro que indica la especifición del operando de la
            izquierda.
            </param>
            <param name="right">
            Parámetro que indica la especificación del operando de la
            derecha.
            </param>
        </member>
        <member name="P:Inflexion2.Domain.Specification.AndSpecification`1.LeftSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            derecha del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte derecha del elemento compuesto.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.Specification.AndSpecification`1.RightSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            izquierda del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte izquierda del elemento compuesto.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.Specification.AndSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.CompositeSpecification`1">
            <summary>
            Clase base para especificaciones compuestas.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="P:Inflexion2.Domain.Specification.CompositeSpecification`1.LeftSpecification">
            <summary>
            Propiedad pública que establece la especificación
            de la parte izquierda dentro de la composición.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación
            de la parte izquierda dentro de la composición.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.Specification.CompositeSpecification`1.RightSpecification">
            <summary>
            Propiedad pública que establece la especificación
            de la parte derecha dentro de la composición.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación
            de la parte derecha dentro de la composición.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.Specification.DirectSpecification`1">
            <summary>
            Clase que representa la especificación directa.
            </summary>
            <remarks>
            La especificación directa es una implementación simple de una
            especificación que viene dada por la expresión lambda en el constructor.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion2.Domain.Specification.DirectSpecification`1.matchingCriteria">
            <summary>
            Variable privada que representa el criterio de coincidencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:DirectSpecification"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="matchingCriteria">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa
            los criterios coincidentes.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.DirectSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.ExpressionBuilder">
            <summary>
            Clase extensora para añadir AND y OR con parámetros
            en expresiones lambda.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Método extensor del operador AND.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            izquierdo de la operación AND.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            derecho de la operación AND.
            </param>
            <returns>
            Devuelve nueva AND <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Método extensor que compone y une dos expresiones en una nueva expresión.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa la
            instancia de la primera expresión.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa la
            instancia de la segunda expresión a unir o juntar.
            </param>
            <param name="merge">
            Parámetro que representa la función de unión.
            </param>
            <returns>
            Devuelve nueva <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Método extensor del operador OR.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            derecho de la operación OR.
            </param>
            <returns>
            Devuelve nueva OR <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.IOrderBySpecification`1">
            <summary>
            Base contract for Specification pattern, for more information
            about this pattern see http://martinfowler.com/apsupp/spec.pdf
            or http://en.wikipedia.org/wiki/Specification_pattern.
            This is really a variant implementation where we have added Linq and
            lambda expression into this pattern.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="M:Inflexion2.Domain.Specification.IOrderBySpecification`1.ApplyOrderBy(System.Linq.IQueryable{`0})">
            <summary>
            gets a sorted query
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.OrderBySpecificationExtensions">
            <summary>
            extension
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecificationExtensions.OrderBySpecification``1(System.Linq.IQueryable{``0},Inflexion2.Domain.Specification.IOrderBySpecification{``0})">
            <summary>
            sort by specification
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="query"></param>
            <param name="orderBy"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.ISpecification`1">
            <summary>
            Interfaz para el patrón Especificación.
            </summary>
            <remarks>
            Variante del patrón especificación para que
            soporte árboles de expresión.
            <see href="http://en.wikipedia.org/wiki/Specification_pattern"/>
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ISpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.NotSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador NOT lógico.
            </summary>
            <remarks>
            Convierte una especificación original con el operador NOT.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion2.Domain.Specification.NotSpecification`1.originalCriteria">
            <summary>
            Variable privada que indica el criterio original.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.NotSpecification`1.#ctor(Inflexion2.Domain.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase NotSpecification.
            </summary>
            <param name="originalSpecification"></param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Inicializa una nueva instancia de la clase NotSpecification.
            </summary>
            <param name="originalSpecification">
            Parámetro de tipo <see cref="N:System.Linq.Expressions"/>
            que representa la especificación original.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.NotSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.OrderDirection">
            <summary>
            directions of sorting, ascending or descending
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Specification.OrderDirection.Ascending">
            <summary>
            Ascendign sorting
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.Specification.OrderDirection.Descending">
            <summary>
            descending sorting
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.Specification.OrderBySpecification`1">
            <summary>
            sort implementation with an expresion tree
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Specification.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="orderBy">A predicate that can be used to check entities that
            satisfy the specification.</param>
            <param name="descending">if set to <c>true</c> [descending] order will be used.</param>
            <param name="thenBy">The then by.</param>
            <param name="thenByDescending">if set to <c>true</c> [then by descending].</param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Specification.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="orderBy">A predicate that can be used to check entities that
            satisfy the specification.</param>
            <param name="descending">if set to <c>true</c> [descending] order will be used.</param>
            <param name="thenBy">The then by.</param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Specification.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="orderBy">A predicate that can be used to check entities that
            satisfy the specification.</param>
            <param name="thenBy">The then by.</param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean)">
            <summary>
            Default Constructor.
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Specification.Specification`1"/> instnace with the
            provided predicate expression.
            </summary>
            <param name="predicate">A predicate that can be used to check entities that
            satisfy the specification.</param>
            <param name="descending">if set to <c>true</c> [descending] order will be used.</param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Creates a new instance of the <see cref="T:Inflexion2.Domain.Specification.Specification`1"/> instnace with the
            provided predicate expression, with ascending order.
            </summary>
            <param name="predicate">A predicate that can be used to check entities that
            satisfy the specification.</param>
        </member>
        <member name="P:Inflexion2.Domain.Specification.OrderBySpecification`1.Direction">
            <summary>
            get or sets the direction of sorting
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.OrderBySpecification`1.ThenByDirection">
            <summary>
            second sorting option
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrderBySpecification`1.ApplyOrderBy(System.Linq.IQueryable{`0})">
            <summary>
            apply sorting
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.OrSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador Or lógico.
            </summary>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion2.Domain.Specification.OrSpecification`1.leftSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Specification.OrSpecification`1.rightSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrSpecification`1.#ctor(Inflexion2.Domain.Specification.ISpecification{`0},Inflexion2.Domain.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase OrSpecification.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="left">
            Parámetro que indica la especifición del operando de la
            izquierda.
            </param>
            <param name="right">
            Parámetro que indica la especificación del operando de la
            derecha.
            </param>
        </member>
        <member name="P:Inflexion2.Domain.Specification.OrSpecification`1.LeftSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            derecha del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte derecha del elemento compuesto.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.Specification.OrSpecification`1.RightSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            izquierda del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte izquierda del elemento compuesto.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.Specification.OrSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.ParameterRebinder">
            <summary>
            Clase de ayuda para los carga de parámetros en
            expresiones sin utilizar el método Invoke.
            </summary>
            <remarks>
            Este método no está soportado por todos lo proveedores de Linq,
            por ejemplo en LinqToEntities.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Specification.ParameterRebinder.map">
            <summary>
            Variable privada de tipo colección
            de parámetros para árboles de expresión.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Inicializa una nueva instancia de la clase ParameterRebinder.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="map">
            Parámetro de tipo colección de parámetros de expresión.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Función encargada de reemplazar los parámetros
            en la expresión dada según la información contenidad
            en la colección de parámetros <paramref name="map"/>.
            </summary>
            <param name="map">
            Parámetro de tipo colección de parámetros que se utilizarán para reemplazar
            en la expresión.
            </param>
            <param name="expression">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            donde se reempalzarán los  parámetros.
            </param>
            <returns>
            Devuelve <see cref="T:System.Linq.Expressions.Expression"/>
            con los parámetros reemplazados.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Función del patrón Visitor.
            </summary>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.ParameterExpression"/> que representa el
            parámetro a reemplazar.
            </param>
            <returns>
            Devuelve <see cref="T:System.Linq.Expressions.Expression"/> visitada
            con el parámetro reeplazado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.Specification`1">
            <summary>
            Clase que representa una especificación de expresión.
            </summary>
            <remarks>
            Esta clase sobrecarga los operadores
            para crear AND, OR, ó NOT especificaciones.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.op_LogicalNot(Inflexion2.Domain.Specification.Specification{`0})">
            <summary>
            Función que representa el operador NOT.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación NOT.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.op_BitwiseAnd(Inflexion2.Domain.Specification.Specification{`0},Inflexion2.Domain.Specification.Specification{`0})">
            <summary>
            Función que representa el operador AND.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="leftSpecification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/> que representa el operando
            izquierdo de la operación AND.
            </param>
            <param name="rightSpecification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/> que representa el operando
            derecho de la operación AND.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación AND.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.op_False(Inflexion2.Domain.Specification.Specification{`0})">
            <summary>
            Función que representa el operador false.
            </summary>
            <remarks>
            Operador sobreescrito sólo para el soporte a
            los operadores AND y OR.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/>.
            </param>
            <returns>
            Devuelve False.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.op_True(Inflexion2.Domain.Specification.Specification{`0})">
            <summary>
            Función que representa el operador true.
            </summary>
            <remarks>
            Operador sobreescrito sólo para el soporte a
            los operadores AND y OR.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/>.
            </param>
            <returns>
            Devuelve true.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.op_BitwiseOr(Inflexion2.Domain.Specification.Specification{`0},Inflexion2.Domain.Specification.Specification{`0})">
            <summary>
            Función que representa el operador OR.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="leftSpecification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <param name="rightSpecification">
            Parámetro de tipo <see cref="N:Inflexion2.Domain.Specification"/> que representa el operando
            derecho de la operación OR.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación OR.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Specification`1.IsSatisfiedBy">
            <summary>
            Método abstracto encargado de comprobar si la
            especificación se satisface con la expresión
            lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.SpecificationExtensions">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.SpecificationExtensions.AndAlso``1(Inflexion2.Domain.Specification.ISpecification{``0},Inflexion2.Domain.Specification.ISpecification{``0})">
            <summary>
             AndAlso operator
            </summary>
            <param name="leftSideSpecification">left operand in this AND operation</param>
            <param name="rightSideSpecification">right operand in this AND operation</param>
            <returns>New specification</returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.SpecificationExtensions.OrElse``1(Inflexion2.Domain.Specification.ISpecification{``0},Inflexion2.Domain.Specification.ISpecification{``0})">
            <summary>
            OrElse operator
            </summary>
            <param name="leftSideSpecification">left operand in this OR operation</param>
            <param name="rightSideSpecification">left operand in this OR operation</param>
            <returns>New specification</returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.Filter">
            <summary>
            Filtering class with specifications
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.Filter.groupOp">
            <summary>
            groupping operator
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.Filter.rules">
            <summary>
            internal collection of rules
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.Filter.Create(System.String)">
            <summary>
            Create filter from json data
            </summary>
            <param name="jsonData"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.Specification.LinqExtensions">
            <summary>
            linq extensions
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.LinqExtensions.AndAlso``1(Inflexion2.Domain.Specification.ISpecification{``0},System.String,System.Object,System.String)">
            <summary>
            concatenate specifications
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.LinqExtensions.CreateSpecification``1(System.String,System.Object,System.String)">
            <summary>
            create specifications
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.LinqExtensions.OrElse``1(Inflexion2.Domain.Specification.ISpecification{``0},System.String,System.Object,System.String)">
            <summary>
            concatenate specifications with logic or
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Specification.LinqExtensions.ToSpecification``1(Inflexion2.Domain.Specification.SpecificationModel)">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.Specification.LinqExtensions.ToSpecification``1(Inflexion2.Domain.Specification.SpecificationModel,Inflexion2.Domain.Specification.ISpecification{``0})">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.Specification.Rule">
            <summary>
            rule and his members
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.Rule.data">
            <summary>
            data rule
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.Rule.field">
            <summary>
            field rule
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.Rule.op">
            <summary>
            operation rule
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.Specification.SpecificationModel">
            <summary>
            specification model for paged results
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.Field">
            <summary>
            field specification for paged results
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.IsSearch">
            <summary>
            is a search? indicator
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.Operator">
            <summary>
            operator specification
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.PageIndex">
            <summary>
            page index of the specification
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.PageSize">
            <summary>
            page size of specification
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.SearchString">
            <summary>
            search expresion
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.SortColumn">
            <summary>
            sort columm
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.SortOrder">
            <summary>
            sort order
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.Specification.SpecificationModel.Where">
            <summary>
            where expresion for search
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.Specification.TrueSpecification`1">
            <summary>
            Clase para la especificación TRUE.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Specification.TrueSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.DomainEvents">
            <summary>
            Domain Event Publisher 
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.DomainEvents.actions">
            <summary>
            The callback actions
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.DomainEvents.eventPublisher">
            <summary>
            The event publisher
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.DomainEvents.publishMethod">
            <summary>
            The publish method
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.DomainEvents.EventPublisher">
            <summary>
            Gets or sets the event publisher.
            </summary>
            <value>
            The event publisher.
            </value>
        </member>
        <member name="M:Inflexion2.Domain.DomainEvents.ClearCallbacks">
            <summary>
            Clears the callbacks.
            Used for unit testing.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.DomainEvents.Raise``1(``0)">
            <summary>
            Raises the specified event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event">The args.</param>
        </member>
        <member name="M:Inflexion2.Domain.DomainEvents.Raise(System.Object[])">
            <summary>
            Publishes the specified events.
            </summary>
            <param name="events">The events.</param>
        </member>
        <member name="M:Inflexion2.Domain.DomainEvents.Register``1(System.Action{``0})">
            <summary>
            Registers a callback for the given domain event.
            Used for unit testing.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="callback">The callback.</param>
        </member>
        <member name="T:Inflexion2.Domain.ConsumeEventPublisher">
            <summary>
            Consume Event Publisher
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ConsumeEventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="T:Inflexion2.Domain.EmptyEventPublisher">
            <summary>
            Default Event Publisher
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.EmptyEventPublisher.logger">
            <summary>
            The logger
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EmptyEventPublisher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Domain.EmptyEventPublisher"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EmptyEventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="T:Inflexion2.Domain.IConsumeEvent`1">
            <summary>
            Event consumer contract
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.IConsumeEvent`1.Consume(`0)">
            <summary>
            Consumes the specified event.
            </summary>
            <param name="event">The event.</param>
        </member>
        <member name="T:Inflexion2.Domain.IEventPublisher">
            <summary>
            Event Publisher contract
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.IEventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event">The event.</param>
        </member>
        <member name="T:Inflexion2.Domain.DateTimeExtension">
            <summary>
            Clase estática que define métodos extensores para la clase
            <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            Para utilizar los métodos extensores es necesario incluir el
            espacio de nombres <see cref="N:Inflexion2.Domain.Extensions"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.CompareTo24(System.DateTime,System.DateTime)">
            <summary>
            Método que compara dos fechas teniendo en cuenta que el día empieza a las 6:00 y termina a las 5:59.
            </summary>
            <param name="date">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="value">
            Parámetro que indica el valor de la fecha a comparar.
            </param>
            <returns>
            - Un valor menor que cero indica que esta fecha es anterior al valor comparado.
            - Un valor mayor que cero indica que esta fecha es posterior al valor comparado.
            - Un valor igual a cero indica que ambas fechas comparadas son iguales.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.Compose(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Compone un campo DateTime con la fecha y hora combinadas a partir de dos campos datetime separados.
            </summary>
            <param name="dia">
            Parámetro que indica el valor para el dia.
            </param>
            <param name="hora">
            Parámetro que indica el valor para la hora.
            </param>
            <returns>
            Devuelve el dia / hora combinados.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.ComposeAndCompareTo24(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Método que compara una fecha, su hora de inicio y su hora de fin.
            </summary>
            <param name="date">
            Parámetro que indica la fecha.
            </param>
            <param name="time1">
            Parámetro que indica la hora de inicio.</param>
            <param name="time2">
            Parámetro que indica laa hora de fin.
            </param>
            <returns>
            - Un valor menor que cero indica que hora1 es anterior a hora2.
            - Un valor mayor que cero indica que hora1 es posterior a hora2.
            - Un valor igual a cero indica que ambas horas comparadas son iguales.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.ComposeForSchedule(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Compone un campo DateTime con la fecha y hora combinadas a partir de dos campos datetime separados.
            </summary>
            <remarks>
            Utilizar este método únicamente en la parrilla.
            </remarks>
            <param name="dia">
            Parámetro que indica valor para el dia.
            </param>
            <param name="hora">
            Parámetro que indica el valor para la hora.</param>
            <returns>
            Devuelve el dia / hora combinados.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.GetDateOnly(System.DateTime)">
            <summary>
            Obtiene un DateTime con exclusivamente la parte fecha de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con día y hora.
            </param>
            <returns>
            Devuelve el valor sólo de fecha.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.GetDateOnlyForSchedule(System.DateTime)">
            <summary>
            Utilizar este método únicamente en la parrilla.
            Obtiene un DateTime con exclusivamente la parte fecha de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con dia y hora.
            </param>
            <returns>
            Devuelve el valor sólo con fecha.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.GetTimeOnly(System.DateTime)">
            <summary>
            Obtiene un DateTime con exclusivamente la parte horaria de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con día y hora.
            </param>
            <returns>
            Devuelve el valor sólo con las horas.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.WeekNumber(System.DateTime)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <param name="dateTimeFormatInfo">
            Indicamos el formato de fecha y hora de la cultura pasada como argumento.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.DateTimeExtension.Normalize(System.DateTime,System.Boolean,System.Int32)">
             <summary>
             Método empleado para añadir o eliminar un día a la fecha especificada, si la hora es menor que hourShift.
             </summary>
             <remarks>
             Sin comentarios adicionales.
             </remarks>
             <param name="dateTime">
             Parámetro que indica la fecha a arreglar.
             </param>
             <param name="addDay">
             Parámetro indica: <c>True</c> añade un día, <c>false</c> retrasa un día.</param>
             <param name="hourShift">
            
             </param>
             <returns>
             Devuelve el valor de la fecha normalizado.
             </returns>
        </member>
        <member name="T:Inflexion2.Domain.Extensions.EnumExtension">
            <summary>
              Clase estática que define métodos extensores para la clase
              <see cref="T:System.Enum"/>.
            </summary>
            <remarks>
              Para utilizar los métodos extensores es necesario incluir el
              espacio de nombres <see cref="N:Inflexion2.Domain.Extensions"/>.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetDescription``1(``0,System.Enum)">
            <summary>
            Devuelve la descripción  asociada al valor enumerado
            <paramref name="value"/> especificado.
            </summary>
            <remarks>
            Esta función es un método extensor de la clase
             <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Valor del enumerado del que se desea obtener la descripción.
            </param>
            <returns>
            La descripción asociada al valor enumerado
            <paramref name="value"/> especificado.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetEnumMemberValue``1(``0,System.Enum)">
            <summary>
            Función encargada de obtener el valor del atributo EnumMember.
            </summary>
            <remarks>
            Esta función es un método extensor de la clase
             <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <returns>
            Devuelve el valor del atributo EnumMember.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetEnumMemberValue(System.Enum)">
            <summary>
            Alternative implementation
            .es obtenemos el valor de correspondiente al enumerado
            .en get the value of enum member
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetName``1(``0)">
            <summary>
              Devuelve el identificador asociado al valor enumerado
              <paramref name="value"/> especificado.
            </summary>
            <remarks>
              Esta función es un método extensor de la clase
              <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
              Tipo genérico restringido a enumerado (descendiente de
              <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="value">
              Valor enumerado cuyo identificador se desea obtener.
            </param>
            <returns>
              El identificador asociado al valor enumerado
              <paramref name="value"/> especificado.
            </returns>
            <example>
              Ejemplo de uso del método extensor:
              <code>
                <![CDATA[
            using Inflexion2.Domain.Extensions;
            using global::Inflexion2.Infrastructure.Security.LoginProvider;
            // ...
            string enumValueName = LoginProviderType.Database.GetName();
                ]]>
              </code>
            </example>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetNameFromEnumMemberValue``1(``0,System.String)">
            <summary>
            Método extensor para obtener el valor del enumerado a partir del valor del atributo EnumMember.
            </summary>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Parámetro que indica el valor del atributo EnumMember.
            </param>
            <returns>
            Devuelve el valor de enumerado.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.Extensions.EnumExtension.GetValueFromDescription``1(``0,System.String)">
            <summary>
            Método extensor para obtener el valor del enumerado a partir de la descripción.
            </summary>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="description">
            Parámetro que indica la descripción del valor del enumerdo.
            </param>
            <returns>
            Devuelve el valor de enumerado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.PagingExtensions">
            <summary>
            .es Conjunto de métodos estaticos de paginación con devolución de colecciones inenumerable o iqueryable
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.PagingExtensions.Page``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagingExtensions.Page``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.PropertyExtension">
            <summary>
            <para>
            Clase estática que permite obtener la descripción y el nombre de la
            propiedad.
            </para>
            <para>
            Para obtener la descripción de la propiedad, ésta debería tener la
            etiqueta o decorado DescriptionAttribute.
            </para>
            </summary>
            <remarks>
            Permite obtener la descripción y el nombre de la propiedad.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
              <![CDATA[
            string nameField = "";
            nameField = msisdnInformation.GetPropertyName(o => msisdnInformation.Version);
            string nameDescriptionField = msisdnInformation.GetPropertyDescription(nameField);
              ]]>
            </code>
            </example>
        </member>
        <member name="M:Inflexion2.Domain.PropertyExtension.GetPropertyDescription(System.Object,System.String)">
            <summary>
            Función para obtener la descripción de la propiedad.
            </summary>
            <remarks>
            Obtiene la descripción de la propiedad.
            </remarks>
            <param name="structure">
            Nombre de la estructura.
            </param>
            <param name="nameField">
            Nombre del campo de la propiedad.
            </param>
            <returns>
            Descripción de la propiedad de la etiqueta o decorado
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.PropertyExtension.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Función Lambda para obtener el nombre de la propiedad.
            </summary>
            <remarks>
            Obtiene el nombre de la propiedad.
            </remarks>
            <typeparam name="T">
            Primer parámetro Lambda.
            </typeparam>
            <typeparam name="R">
            Segundo parámetro Lambda.
            </typeparam>
            <param name="objectParameter">
            Parámetro que corresponde con el objeto en sí encargado de
            realizar la llamada.</param>
            <param name="expression">
            Expresión Lambda a utilizar.
            </param>
            <returns>
            Nombre de la propiedad que será utilizada para obtener
            la descripción de la propiedad.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.AuditInfo">
            <summary>
            Clase pública que representa la información de auditoría.
            </summary>
            <remarks>
            Objeto-valor para los datos de auditoría.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.AuditInfo.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AuditInfo"/>.
            </summary>
            <remarks>
            Constructor vacio requerido por nHibernate.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.AuditInfo.#ctor(System.String,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AuditInfo"/>.
            </summary>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario
            que crea el registro.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario
            que modifica el registro.
            </param>
            <param name="createdTimestamp">
            Parámetro que indica la fecha de creación del registro.
            </param>
            <param name="updatedTimestamp">
            Parámetro que indica la fecha de modificación del registro.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.AuditInfo.CreatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que crea el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener  el identificador
            único del usuario que crea el registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.AuditInfo.CreatedTimestamp">
            <summary>
            Propiedad que obtiene la fecha de
            creación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener la
            fecha de creación del registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.AuditInfo.UpdatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que modifica el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el identificador
            único del usuario que modifica el registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.AuditInfo.UpdatedTimestamp">
            <summary>
            Propiedad que obtiene o establece la fecha de
            modificación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener o establecer la
            fecha de modificación del registro.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.AuditInfoFactory">
            <summary>
            Clase estática factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion2.Domain.IAuditInfo"/>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.AuditInfoFactory.Create(System.String,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Método encargado de crear objetos valor de tipo
            <see cref="T:Inflexion2.Domain.IAuditInfo"/>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario
            que crea el registro.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario
            que modifica el registro.
            </param>
            <param name="createTimestamp">
            Parámetro que indica la fecha de creación del registro.
            </param>
            <param name="updateTimestamp">
            Parámetro que indica la fecha de modificación del registro.
            </param>
            <returns>
            Devuelve el objeto valor <see cref="T:Inflexion2.Domain.IAuditInfo"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.IAuditInfo">
            <summary>
            Interfaz que representa el objeto-valor
            de tipo auditoría de datos.
            </summary>
            <remarks>
            Representa los datos de tipo auditoría.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.IAuditInfo.CreatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que crea el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el
            identificador único del usuario que crea el registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IAuditInfo.CreatedTimestamp">
            <summary>
            Propiedad que indica la fecha de creación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de creación del registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IAuditInfo.UpdatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que modifica el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el identificador
            único del usuario que modifica el registro.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IAuditInfo.UpdatedTimestamp">
            <summary>
            Propiedad que indica la fecha de modificación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de modificación del registro.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.IInterval">
            <summary>
            Interfaz que expone el contrato para el objeto valor intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.IInterval.FromTime">
            <summary>
            Propiedad que indica la hora de inicio
            del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            hora de inicio del intervalo.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IInterval.ToTime">
            <summary>
            Propiedad que indica la hora de fin del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            hora de fin del intervalo.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.Interval">
            <summary>
            Clase pública que representa un intervalo.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Interval.fromTime">
            <summary>
            Variable privada de propiedad para almacenar la hora de inicio.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.Interval.toTime">
            <summary>
            Variable privada de propiedad para almacenar la hora de fin.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Interval.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Interval.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="toTime">
            Parámetro que indica la hora final del intervalo.
            </param>
        </member>
        <member name="M:Inflexion2.Domain.Interval.#ctor(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="duration">
            Parámetro que indica la duración del intervalo.
            </param>
        </member>
        <member name="P:Inflexion2.Domain.Interval.FromTime">
            <summary>
            Propiedad pública que obtiene la hora inicial
            del intervalo
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la hota inicial
            del intervalo.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.Interval.ToTime">
            <summary>
            Propiedad pública que obtiene la hora final del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la hora final del intervalo.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.IntervalFactory">
            <summary>
            Clase factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion2.Domain.IInterval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.IntervalFactory.Create(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Método encargado de la creación de objetos valor <see cref="T:Inflexion2.Domain.IInterval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="atTime">
            Parámetro que indica la hora final del intervalo.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion2.Domain.IInterval"/> creado.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.IntervalFactory.Create(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Método estático encargado de la creación de objetos valor <see cref="T:Inflexion2.Domain.IInterval"/>
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="duration">
            Parámetro que indica la duración del intervalo.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion2.Domain.IInterval"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.IRange">
            <summary>
            Interfaz que expone el contrato para el objeto-valor de rango.
            </summary>
            <remarks>
            Este objeto valor consta de un valor inicial y valor final,
            de tipo Int32, que determinan dicho rango.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.IRange.FinalValue">
            <summary>
            Propiedad que obtiene el valor final del rango
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor final del rango
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IRange.InitialValue">
            <summary>
            Propiedad que obtiene el valor inicial del rango.
            </summary>
            /// <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor inicial del rango
            </value>
        </member>
        <member name="T:Inflexion2.Domain.IValidPeriod">
            <summary>
            Interfaz que expone el contrato para el objeto valor
            de periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.IValidPeriod.FromDate">
            <summary>
            Propiedad que indica la fecha de inicio
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de inicio del periodo de vigencia.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.IValidPeriod.ToDate">
            <summary>
            Propiedad que indica la fecha de fin
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de fin del periodo de vigencia.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.Range">
            <summary>
            Clase pública que representa un rango de enteros.
            </summary>
            <remarks>
            Objeto-valor para rangos de números enteros.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Range.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Range"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Range"/>.
            </summary>
            <param name="initialValue">
            Parámetro que indica el valor inicial del rango.
            </param>
            <param name="finalValue">
            Parámetro que indica el valor final del rango.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Domain.Range.FinalValue">
            <summary>
            Propiedad que obtiene el valor final del rango
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor final del rango
            </value>
        </member>
        <member name="P:Inflexion2.Domain.Range.InitialValue">
            <summary>
            Propiedad que obtiene el valor inicial del rango.
            </summary>
            /// <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor inicial del rango
            </value>
        </member>
        <member name="T:Inflexion2.Domain.RangeFactory">
            <summary>
            Clase estática factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion2.Domain.IRange"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.RangeFactory.Create(System.Int32,System.Int32)">
            <summary>
            Método estático encargado de crear objetos valor de tipo
            <see cref="T:Inflexion2.Domain.IRange"/> según los parámetros proporcionados.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="initialValue">
            Parámetro que indica el valor inicial del rango.
            </param>
            <param name="finalValue">
            Parámetro que indica el valor final del rango.
            </param>
            <returns>
            Devuelve objeto <see cref="T:Inflexion2.Domain.IRange"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.ValidPeriod">
            <summary>
            Clase pública que representa un periodo de vigencia.
            </summary>
            <remarks>
            Objeto-valor para las fechas de un periodo de vigencia.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.ValidPeriod.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.ValidPeriod.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromDate">
            Parámetro que indica la fecha inicial del período.
            </param>
            <param name="toDate">
            Parámetro que indica la fecha final del período.
            </param>
        </member>
        <member name="P:Inflexion2.Domain.ValidPeriod.FromDate">
            <summary>
            Propiedad pública que obtiene la fecha inicial
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la fecha inicial
            del periodo de vigencia.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.ValidPeriod.ToDate">
            <summary>
            Propiedad pública que obtiene la fecha final del período de
            vigencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la fecha final
            del periodo de vigencia.
            </value>
        </member>
        <member name="T:Inflexion2.Domain.ValidPeriodFactory">
            <summary>
            Clase factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion2.Domain.IValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.ValidPeriodFactory.Create(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Método encargado de la creación de objetos valor de
            periodo de vigencia.
            </summary>
            <param name="fromDate">
            Parámetro que indica la fecha inicial del periodo de vigencia.
            </param>
            <param name="toDate">
            Parámetro que indica la fecha final del periodo de vigencia.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion2.Domain.IValidPeriod"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.IUnitOfWork">
            <summary>
            Contract for UnitOfWork pattern. For more
            references see http://martinfowler.com/eaaCatalog/unitOfWork.html or
            http://msdn.microsoft.com/en-us/magazine/dd882510.aspx
            In this solution sample Unit Of Work is implemented out-of-box in
            ADO.NET Entity Framework persistence engine. But for academic
            purposed and for mantein PI ( Persistence Ignorant ) in Domain
            this pattern is implemented.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.IUnitOfWork.Commit">
            <summary>
            Commit all changes made in  a container.
            </summary>
            <remarks>
            If entity have fixed properties and optimistic concurrency problem exists
            exception is thrown
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.IUnitOfWork.RollbackChanges">
            <summary>
            Rollbacks the changes.
            </summary>
        </member>
        <member name="T:Inflexion2.Domain.UnitOfWorkScope">
            <summary>
            El objeto de esta clase es evitar la necesidad de pasar como parametro la unidad de trabajo en el repositorio.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.UnitOfWorkScope.Start">
            <summary>
            TODO: update comments
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.UnitOfWorkScope.Start``1">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="TUnitOfWork"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.BaseRepository`2">
            <summary>
            .en Default base class for repositories. This generic repository
            is a default implementation of <see cref="T:Inflexion2.Domain.IRepository`2"/>
            and the specific repositories for every ORM (nhibernate, entity framework, other ) inherit from this base class 
            calling to their own functions. For example from this class inherit EfRepository which overrite the  generic abstract members of this base class to use the EF memebers.
            Why to do that, and don't use EF directly becouse in this case is possible to write the logic decopled from the technology EF, NH etc.
            </summary>
            <typeparam name="TEntity">Type of elements in repostory</typeparam>
            <typeparam name="TIdentifier">identifier</typeparam>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.#ctor">
            <summary>
            Default constructor for GenericRepository
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.BaseRepository`2.Logger">
            <summary>
            loger instance for tracing porpouses
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.Add(`0)">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="entity"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.Attach(`0)">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="entity"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetAll">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <returns><see cref="T:Inflexion2.Domain.IRepository`2"/></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetBySpec(Inflexion2.Domain.Specification.ISpecification{`0})">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="specification"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
            <returns><see cref="T:Inflexion2.Domain.IRepository`2"/></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetFilteredElements(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="filter"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
            <returns><see cref="T:Inflexion2.Domain.IRepository`2"/></returns>b
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetFilteredElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="filter"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
            <param name="orderByExpression"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
            <param name="ascending"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
            <returns><see cref="T:Inflexion2.Domain.IRepository`2"/></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Get a filtered sorted paged collection of enties ascending or descending
            </summary>
            <typeparam name="S"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="filter"></param>
            <param name="orderByExpression"></param>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.GetPagedElements(System.Int32,System.Int32,Inflexion2.Domain.Specification.ISpecification{`0},Inflexion2.Domain.Specification.IOrderBySpecification{`0})">
            <summary>
             Get a filtered sorted paged collection of enties
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="specification"></param>
            <param name="orderBySpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.Modify(`0)">
            <summary>
            modify entity
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.Remove(`0)">
            <summary>
            <see cref="T:Inflexion2.Domain.IRepository`2"/>
            </summary>
            <param name="entity"><see cref="T:Inflexion2.Domain.IRepository`2"/></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.InternalAdd(`0)">
            <summary>
            method to be over writed to add operations
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.InternalAttach(`0)">
            <summary>
            method to be over writed to attach operations
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.InternalModify(`0)">
            <summary>
            method to be over writed to modify operations
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.InternalRemove(`0)">
            <summary>
            method to be over writed to remove operations
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseRepository`2.Query">
            <summary>
            method to write to query operations
            </summary>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.BaseEventStore">
            <summary>
            poc for CQRS implementation 
            event store implementation
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.BaseEventStore.#ctor(Inflexion2.Domain.IEventPublisher)">
            <summary>
            event store constructor and inizialitation
            </summary>
            <param name="publisher"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseEventStore.GetEventsForAggregate(System.Guid)">
            <summary>
            get events of one entity (root agregate)
            </summary>
            <param name="aggregateId"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseEventStore.SaveEvents(System.Guid,System.Collections.Generic.IEnumerable{Inflexion2.Domain.Event},System.Int32)">
            <summary>
            save events of one aggregate
            </summary>
            <param name="aggregateId"></param>
            <param name="events"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="M:Inflexion2.Domain.BaseEventStore.LoadEventDescriptorsForAggregate(System.Guid)">
            <summary>
            abstract method to load event descriptor of one entity (R. aggregate)
            </summary>
            <param name="aggregateId"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.BaseEventStore.PersistEventDescriptors(System.Collections.Generic.IEnumerable{Inflexion2.Domain.EventDescriptor},System.Guid,System.Int32)">
            <summary>
            abstract save descriptor
            </summary>
            <param name="newEventDescriptors"></param>
            <param name="aggregateId"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="T:Inflexion2.Domain.EventDescriptor">
            <summary>
            value object event descriptor
            TODO: add inheritence from value object
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EventDescriptor.#ctor">
            <summary>
            parameterless constructor for event descriptor
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EventDescriptor.#ctor(System.Guid,Inflexion2.Domain.Event,System.Int32)">
            <summary>
            pararmetrized event descriptor constructor
            </summary>
            <param name="id"></param>
            <param name="eventData"></param>
            <param name="version"></param>
        </member>
        <member name="P:Inflexion2.Domain.EventDescriptor.EventData">
            <summary>
            realted data of the event
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.EventDescriptor.Id">
            <summary>
            related Id
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.EventDescriptor.Version">
            <summary>
            entity version
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.EventDescriptor.GetHashCode">
            <summary>
            has code to get the value object identity
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.EventDescriptor.Equals(System.Object)">
            <summary>
            equals comparation for value objet identity
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.EventSourcedRepository`1">
            <summary>
            poc for CQRS implementation 
            repository iplementation for Event Sourced Entities 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedRepository`1.#ctor(Inflexion2.Domain.IEventStore)">
            <summary>
            constructor ann initialization of the repository for the related Event Sourced Entity
            </summary>
            <param name="storage"></param>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedRepository`1.GetById(System.Guid)">
            <summary>
            get by id the Event Sourced Entity
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.EventSourcedRepository`1.Save(Inflexion2.Domain.EventSourcedEntity,System.Int32)">
            <summary>
            save the Event Sourced Entity
            </summary>
            <param name="aggregate"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="T:Inflexion2.Domain.IEventSourcedRepository`1">
            <summary>
             poc for CQRS implementation 
             repository interface for Event Sourced Entities 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.IEventSourcedRepository`1.GetById(System.Guid)">
            <summary>
            get the entity by id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IEventSourcedRepository`1.Save(Inflexion2.Domain.EventSourcedEntity,System.Int32)">
            <summary>
            save a new version of a Event Sourced entity 
            </summary>
            <param name="aggregate"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="T:Inflexion2.Domain.IEventStore">
            <summary>
            poc for CQRS implementation 
            main interface to save events
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.IEventStore.GetEventsForAggregate(System.Guid)">
            <summary>
            poc for CQRS implementation 
            store for the id of the entities afected
            important in this case the id type has to be a guid
            </summary>
            <param name="aggregateId"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IEventStore.SaveEvents(System.Guid,System.Collections.Generic.IEnumerable{Inflexion2.Domain.Event},System.Int32)">
            <summary>
            saving  events interface operation
            </summary>
            <param name="aggregateId"></param>
            <param name="events"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="T:Inflexion2.Domain.MemoryEventStore">
            <summary>
            poc for CQRS implementation 
            final event store implementation 
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.MemoryEventStore.#ctor(Inflexion2.Domain.IEventPublisher)">
            <summary>
            constructor
            </summary>
            <param name="publisher"></param>
        </member>
        <member name="M:Inflexion2.Domain.MemoryEventStore.LoadEventDescriptorsForAggregate(System.Guid)">
            <summary>
            get the vents for one entity
            </summary>
            <param name="aggregateId"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.MemoryEventStore.PersistEventDescriptors(System.Collections.Generic.IEnumerable{Inflexion2.Domain.EventDescriptor},System.Guid,System.Int32)">
            <summary>
            save the events for one entity
            </summary>
            <param name="newEventDescriptors"></param>
            <param name="aggregateId"></param>
            <param name="expectedVersion"></param>
        </member>
        <member name="T:Inflexion2.Domain.IRepository`2">
            <summary>
            Base interface for implement a "Repository Pattern", for
            more information about this pattern see http://martinfowler.com/eaaCatalog/repository.html
            or http://blogs.msdn.com/adonet/archive/2009/06/16/using-repository-and-unit-of-work-patterns-with-entity-framework-4-0.aspx
            </summary>
            <remarks>
            Indeed, one might think that IObjectSet is already a generic repository and therefore
            would not need this item. Using this interface allows us to ensure the persistence
            of ignorance within our domain model
            </remarks>
            <typeparam name="TEntity">Type of entity for this repository </typeparam>
            <typeparam name="TIdentifier">Type of identity for this repository </typeparam>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.Add(`0)">
            <summary>
            Add item into repository
            </summary>
            <param name="item">Item to add to repository</param>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.Attach(`0)">
            <summary>
            Attach entity to this repository.
            Attach is similar to add but the internal state
            for this object is not  mark as 'Added, Modifed or Deleted', submit changes
            in Unit Of Work don't send anything to storage
            </summary>
            <param name="item">Item to attach</param>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetAll">
            <summary>
            Get all elements of type {T} in repository
            </summary>
            <returns>List of selected elements</returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetBySpec(Inflexion2.Domain.Specification.ISpecification{`0})">
            <summary>
            Get all elements of type {T} that matching a
            Specification <paramref name="specification"/>
            </summary>
            <param name="specification">Specification that result meet</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetFilteredElements(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get elements of type {T} in repository
            </summary>
            <param name="filter">Filter that each element do match</param>
            <returns>List of selected elements</returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetFilteredElements``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Get a collection of filtered and sorted elements of type {T} in repository by pages ascending or descending
            </summary>
            <typeparam name="S"></typeparam>
            <param name="filter"></param>
            <param name="orderByExpression"></param>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetPagedElements``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Get a page  of filtered and sorted elements of type {T} in repository 
            </summary>
            <typeparam name="S"></typeparam>
            <param name="pageIndex"></param>
            <param name="pageCount"></param>
            <param name="filter"></param>
            <param name="orderByExpression"></param>
            <param name="ascending"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.GetPagedElements(System.Int32,System.Int32,Inflexion2.Domain.Specification.ISpecification{`0},Inflexion2.Domain.Specification.IOrderBySpecification{`0})">
            <summary>
            Get a page  of filtered and sorted elements of type {T} in repository 
            </summary>
            <param name="pageIndex"></param>
            <param name="pageCount"></param>
            <param name="specification"></param>
            <param name="orderBySpecification"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.Modify(`0)">
            <summary>
            Sets modified entity into the repository.
            When calling Commit() method in UnitOfWork
            these changes will be saved into the storage
            <remarks>
            Internally this method always calls Repository.Attach() and Context.SetChanges()
            </remarks>
            </summary>
            <param name="item">Item with changes</param>
        </member>
        <member name="M:Inflexion2.Domain.IRepository`2.Remove(`0)">
            <summary>
            Delete item
            </summary>
            <param name="item">Item to delete</param>
        </member>
        <member name="T:Inflexion2.Domain.PagedElements`1">
            <summary>
            Clase que representa los elementos paginados de una entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase PagedElements.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase PagedElements.
            </summary>
            <param name="items">
            Parámetro que identifica la lista de items.
            </param>
            <param name="totalElements">
            Parámetro que indica el número total de elemntos de la lista.
            </param>
        </member>
        <member name="P:Inflexion2.Domain.PagedElements`1.Count">
            <summary>
            Total num of elements in the repository
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.PagedElements`1.Elements">
            <summary>
            a page of elements
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.PagedElements`1.IsReadOnly">
            <summary>
            mark read only
            </summary>
        </member>
        <member name="P:Inflexion2.Domain.PagedElements`1.TotalElements">
            <summary>
            Propiedad que obtiene el total de elementos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el total de elementos.
            </value>
        </member>
        <member name="P:Inflexion2.Domain.PagedElements`1.Item(System.Int32)">
            <summary>
            indexer implementation
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.Add(`0)">
            <summary>
            add entity to the page
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.Clear">
            <summary>
            clear the page
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.Contains(`0)">
            <summary>
            asking if the page contains the entity
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.CopyTo(`0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.GetEnumerator">
            <summary>
            enumerator implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.Remove(`0)">
            <summary>
            remove item from page
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            enumerator to iterate the page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.PagedElements`1.TotalPages(System.Int32)">
            <summary>
            Método que devuelve el total de páginas a partir
            del tamaño de cada página
             </summary>
            <param name="pageSize">
            Parámetro que indica el tamaño de cada página.
            </param>
            <returns>
            Devuelve el total de páginas.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.IAuditTrailFactory">
            <summary>
            Factory for auditable entities
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.IAuditTrailFactory.CreateAuditTrail(System.Guid,System.String,System.String,System.String,System.Object,System.Object,System.String,System.DateTime)">
            <summary>
            auditing a change
            </summary>
            <param name="changeSetUniqueId"></param>
            <param name="entityName"></param>
            <param name="entityUniqueId"></param>
            <param name="propertyName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="updatedBy"></param>
            <param name="updatedAt"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.IAuditTrailFactory.IsEntityRegistered(System.String)">
            <summary>
            asking for auditing success
            </summary>
            <param name="entityName"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Domain.IComparableValueObject`1">
            <summary>
            TODO: implementar un icomparable para objetos valor basado en la firma de los campos seleccionados por orden.
            Interfaz marcadora para los objetos valor del dominio.
            </summary>
            <typeparam name="TValueObject">
            Representación del Objeto Valor.
            </typeparam>
            <remarks>
            Sin comentartios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.IValueObject`1">
            <summary>
            Interfaz marcadora para los objetos valor del dominio.
            </summary>
            <typeparam name="TValueObject">
            Representación del Objeto Valor.
            </typeparam>
            <remarks>
            Sin comentartios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion2.Domain.ValueObject">
            <summary>
            Provides a standard base class for facilitating comparison of value objects using all the object's fields.
            </summary>
            <remarks>
            For a discussion of the implementation of Equals/GetHashCode, see
            http://devlicio.us/blogs/billy_mccafferty/archive/2007/04/25/using-equals-gethashcode-effectively.aspx
            and http://groups.google.com/group/sharp-architecture/browse_thread/thread/f76d1678e68e3ece?hl=en for
            an in depth and conclusive resolution.
            </remarks>
        </member>
        <member name="F:Inflexion2.Domain.ValueObject.reflectingFlags">
            <summary>
            Flags used to reflect over Generic Equeatable
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.ValueObject.HASH_MULTIPLIER">
            <summary>
            To help ensure hashcode uniqueness, a carefully selected random number multiplier
            is used within the calculation.  Goodrich and Tamassia's Data Structures and
            Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
            of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
            for more information.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject.op_Inequality(Inflexion2.Domain.ValueObject,Inflexion2.Domain.ValueObject)">
            <summary>
            implementation of iequality interface, Definition of distinct operator
            </summary>
            <param name="x">first value object to check</param>
            <param name="y">second value object to check</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject.op_Equality(Inflexion2.Domain.ValueObject,Inflexion2.Domain.ValueObject)">
            <summary>
            implementation of iequality interface, Definition of equality operator
            </summary>
            <param name="x">first value object to check</param>
            <param name="y">second value object to check</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Inflexion2.Domain.ValueObject`1">
            <summary>
            Provides a standard base class for facilitating comparison of value objects using all the object's fields.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Inflexion2.Domain.ValueObject`1.reflectingFlags">
            <summary>
            Flags used to reflect over Generic Equeatable
            </summary>
        </member>
        <member name="F:Inflexion2.Domain.ValueObject`1.HASH_MULTIPLIER">
            <summary>
            To help ensure hashcode uniqueness, a carefully selected random number multiplier
            is used within the calculation.  Goodrich and Tamassia's Data Structures and
            Algorithms in Java asserts that 31, 33, 37, 39 and 41 will produce the fewest number
            of collissions.  See http://computinglife.wordpress.com/2008/11/20/why-do-hash-functions-use-prime-numbers/
            for more information.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject`1.op_Inequality(Inflexion2.Domain.ValueObject{`0},Inflexion2.Domain.ValueObject{`0})">
            <summary>
            implementation of iequality interface, DEfinition of distinct operator
            </summary>
            <param name="x">first value object to check</param>
            <param name="y">second value object to check</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject`1.op_Equality(Inflexion2.Domain.ValueObject{`0},Inflexion2.Domain.ValueObject{`0})">
            <summary>
            implementation of iequality interface, Definition of equality operator
            </summary>
            <param name="x">first value object to check</param>
            <param name="y">second value object to check</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject`1.Equals(`0)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:Inflexion2.Domain.ValueObject`1.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:Inflexion2.CantDeleteTransientException">
            <summary>
            Try to delete a transient entity Exception
            </summary>
        </member>
        <member name="M:Inflexion2.CantDeleteTransientException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CantDeleteTransientException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.CantDeleteTransientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CantDeleteTransientException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.CantDeleteTransientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CantDeleteTransientException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Inflexion2.CantDeleteTransientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Initializes a new instance of the <see cref="T:Inflexion2.CantDeleteTransientException"/> class.
             </summary>
             <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
             <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
             <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Inflexion2.Extensions.SpecificationsLinqExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Inflexion2.Extensions.SpecificationsLinqExtensions.AndAlso``1(Inflexion2.Domain.Specification.ISpecification{``0},System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Extensions.SpecificationsLinqExtensions.CreateSpecification``1(System.String,System.Object,System.String)">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="T"></typeparam>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Extensions.SpecificationsLinqExtensions.OrElse``1(Inflexion2.Domain.Specification.ISpecification{``0},System.String,System.Object,System.String)">
            <summary>
            TODO: update comments
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="column"></param>
            <param name="value"></param>
            <param name="operation"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.AggregateNotFoundException">
            <summary>
            Aggregate Not found Exception
            </summary>
        </member>
        <member name="M:Inflexion2.AggregateNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.AggregateNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.AggregateNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.AggregateNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.AggregateNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.AggregateNotFoundException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Inflexion2.AggregateNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
             Initializes a new instance of the <see cref="T:Inflexion2.AggregateNotFoundException"/> class.
             </summary>
             <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
             <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
             <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            
             <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Inflexion2.ConcurrencyException">
            <summary>
            Concurrency Exception.
            </summary>
        </member>
        <member name="F:Inflexion2.ConcurrencyException._UniqueId">
            <summary>
            Exception unique id used for logging purposes.
            </summary>
        </member>
        <member name="M:Inflexion2.ConcurrencyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConcurrencyException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.ConcurrencyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConcurrencyException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Inflexion2.ConcurrencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConcurrencyException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inflexion2.ConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Inflexion2.ConstraintException">
            <summary>
            Constraint Exception.
            </summary>
        </member>
        <member name="M:Inflexion2.ConstraintException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConstraintException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.ConstraintException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConstraintException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.ConstraintException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConstraintException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Inflexion2.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.ConstraintException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inflexion2.ConstraintException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Inflexion2.CoreException">
            <summary>
            Core Exception
            </summary>
        </member>
        <member name="F:Inflexion2.CoreException._UniqueId">
            <summary>
            Exception unique id used for logging purposes.
            </summary>
        </member>
        <member name="M:Inflexion2.CoreException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CoreException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inflexion2.CoreException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CoreException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.CoreException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CoreException"/> class.
            </summary>
            <param name="message">The  message.</param>
        </member>
        <member name="M:Inflexion2.CoreException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.CoreException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:Inflexion2.CoreException.UniqueId">
            <summary>
            Gets the unique id.
            </summary>
            <value>The unique id.</value>
        </member>
        <member name="M:Inflexion2.CoreException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Inflexion2.DatabaseException">
            <summary>
            Database Exception.
            </summary>
        </member>
        <member name="M:Inflexion2.DatabaseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.DatabaseException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.DatabaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.DatabaseException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.DatabaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.DatabaseException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Inflexion2.DatabaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.DatabaseException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inflexion2.DatabaseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Inflexion2.InternalException">
            <summary>
            Internal Exception.
            </summary>
        </member>
        <member name="M:Inflexion2.InternalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.InternalException"/> class.
            </summary>
        </member>
        <member name="M:Inflexion2.InternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.InternalException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.InternalException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Inflexion2.InternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.InternalException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Inflexion2.InternalException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic).
            </exception>
            <PermissionSet>
            <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
            <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
            </PermissionSet>
        </member>
        <member name="T:Inflexion2.GuidExtensions">
            <summary>
            Contains methods to create and manipulate GUID and COMBGUID unique IDs.
            </summary>
        </member>
        <member name="M:Inflexion2.GuidExtensions.IsEmptyOrNull(System.Guid)">
            <summary>
            Determines whether [is empty or null] [the specified GUID].
            </summary>
            <param name="value">The GUID.</param>
            <returns>
            <c>true</c> if [is empty or null] [the specified GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.IsEmptyOrNull(System.Nullable{System.Guid})">
            <summary>
            Determines whether [is empty or null] [the specified GUID].
            </summary>
            <param name="value">The GUID.</param>
            <returns>
            <c>true</c> if [is empty or null] [the specified GUID]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.IsValid(System.Guid)">
            <summary>
            Determines whether the specified GUID is valid.
            </summary>
            <param name="value">The GUID.</param>
            <returns>
            <c>true</c> if the specified GUID is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.NewCombGuid">
            <summary>
            Creates a new Guid object that conforms to the COMBGUID rules.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.NewCombGuid(System.Guid)">
            <summary>
            Creates a new Guid object that conforms to the COMBGUID rules.
            </summary>
            <param name="value">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.ShowDate(System.Guid)">
            <summary>
            Shows the date.
            </summary>
            <param name="value">The GUID.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.GuidExtensions.__IsEmptyOrNull(System.Nullable{System.Guid})">
            <summary>
            Is the Guid empty or null.
            </summary>
            <param name="value">The GUID.</param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.JSONExtensions">
            <summary>
            JSON extension methods
            </summary>
        </member>
        <member name="M:Inflexion2.JSONExtensions.ToJSON(System.Object)">
            <summary>
            Serializes an object to JSON.
            </summary>
            <param name="obj">The obj.</param>
            <returns>JSON string representation of the given object</returns>
        </member>
        <member name="T:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObject">
            <summary>
            http://blogs.msdn.com/b/davidebb/archive/2010/01/18/use-c-4-0-dynamic-to-drastically-simplify-your-private-reflection-code.aspx
            </summary>
        </member>
        <member name="T:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObject.IProperty">
            <summary>
             Simple abstraction to make field and property access consistent
            </summary>
        </member>
        <member name="P:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObject.IProperty.Name">
            <summary>
            property name
            </summary>
        </member>
        <member name="P:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObject.RealObject">
            <summary>
            real object to wrap
            </summary>
        </member>
        <member name="T:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObjectExtensions">
            <summary>
            .es extension de refelxion para objetos dinámicos 
            .en reflexion extension to dinamic objects
            </summary>
        </member>
        <member name="M:Inflexion2.DynamicExtensions.PrivateReflectionDynamicObjectExtensions.AsDynamic(System.Object)">
            <summary>
            TODO: update comments
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.ReflectionExtensions">
            <summary>
            .es extensiones de reflexión. 
            .en Reflexion Extensions
            </summary>
        </member>
        <member name="M:Inflexion2.ReflectionExtensions.IsSubclassOfGeneric(System.Type,System.Type)">
            <summary>
            nos inidica si el tipo que pasamos deriva de un tipo generico que pasamos como segundo parametro
            </summary>
            <param name="source">type to evaluate</param>
            <param name="generic">the generic type</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ReflectionExtensions.IsNonStringEnumerable(System.Reflection.PropertyInfo)">
            <summary>
            TODO: update comments
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ReflectionExtensions.IsNonStringEnumerable(System.Object)">
            <summary>
            TODO: update comments
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ReflectionExtensions.IsNonStringEnumerable(System.Type)">
            <summary>
            TODO: update comments
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.HashHelper">
            <summary>
            .es extensiones extaticas para ayudar en el calculo de códigos hash
            </summary>
        </member>
        <member name="M:Inflexion2.HashHelper.CalculateMD5Hash(System.String)">
            <summary>
            Calculate hash with algorthim MD5
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.HashHelper.CalculateSHA1Hash(System.String)">
            <summary>
            Calculate hash with algorthim SHA1
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.HashHelper.CalculateHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Calculate hash
            </summary>
            <param name="input"></param>
            <param name="hashAlgorithm"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.HtmlHelper">
            <summary>
            .es Extensiones estaticas para simplifica el uso de cadenas de html
            </summary>
        </member>
        <member name="M:Inflexion2.HtmlHelper.StripHtml(System.String)">
            <summary>
            remove html marks
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.StringSlugExtension">
            <summary>
            funciones de transformacion de "slug urls"
            </summary>
        </member>
        <member name="M:Inflexion2.StringSlugExtension.#cctor">
            <summary>
            constructor estatico que inicializa los 
            </summary>
        </member>
        <member name="M:Inflexion2.StringSlugExtension.Slugify(System.String)">
            <summary>
            .es transformaciones de url feas en urls feas con espacios.
            .en Will transform "some $ugly ###url wit[]h spaces" into "some-ugly-url-with-spaces"
            </summary>
        </member>
        <member name="M:Inflexion2.StringSlugExtension._StrTr(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            .es elimina caracteres con acentos extraños y lo sustituye siguiendo las reglas internas.
            </summary>
            <param name="source"></param>
            <param name="replacements"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Logging.ILogger">
            <summary>
            common logger manager contract for trace instrumentation.
            this interface is independent from the end tool selected.
            </summary>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Debug(System.Object)">
            <summary>
            log debug message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            log debug message and exception
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            log debug format message 
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            log debug format provider message (CultureInfo)
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Error(System.Object)">
            <summary>
            log error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            log error with message and exception
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            log error message with format
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            log error with format provider (CultureInfo)
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Fatal(System.Object)">
            <summary>
            log fatal error message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            log fatal error message with exception
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            log fatal error message with format
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            log fatal error message with format provider 
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Info(System.Object)">
            <summary>
            log info message 
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            log info message with exception
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            log info message with format
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            log info message with format provider
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Warn(System.Object)">
            <summary>
            log warn message
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            log warn message with exception
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            log warn message with format
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            log warn message with format provider
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Inflexion2.Logging.ConsoleLogger">
            <summary>
            logger implementation for console
            </summary>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Debug(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Debug(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Debug(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Debug(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Error(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Error(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Error(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Error(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.ErrorFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Fatal(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Fatal(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Fatal(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Fatal(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.FatalFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Info(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Info(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Info(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Info(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Warn(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Warn(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.Warn(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Warn(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.WarnFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.ConsoleLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Inflexion2.Logging.EmptyLogger">
            <summary>
            mplementation of ILoggerFacade that does nothing. 
            This implementation is useful when the application does 
            not need logging but there are infrastructure pieces that assume there is a logger.
            https://msdn.microsoft.com/en-us/library/microsoft.practices.prism.logging.emptylogger(v=pandp.50).aspx
            </summary>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Debug(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Debug(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Debug(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Debug(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Error(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Error(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Error(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Error(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.ErrorFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Fatal(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Fatal(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Fatal(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Fatal(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.FatalFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Info(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Info(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Info(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Info(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Warn(System.Object)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Warn(System.Object)"/>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.Warn(System.Object,System.Exception)">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.Warn(System.Object,System.Exception)"/>
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.WarnFormat(System.String,System.Object[])"/>
            </summary>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Logging.EmptyLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            <see cref="M:Inflexion2.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])"/>
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
        </member>
        <member name="T:Inflexion2.Logging.LoggerManager">
            <summary>
            inyect an empty logger
            </summary>
        </member>
        <member name="F:Inflexion2.Logging.LoggerManager.GetLogger">
            <summary>
            TODO: update summary
            </summary>
        </member>
        <member name="T:Inflexion2.Guard">
            <summary>
            Provides utility methods to guard parameter and local variables.
            </summary>
        </member>
        <member name="M:Inflexion2.Guard.Against(System.Boolean,System.Exception)">
            <summary>
            Método encargado de comprobar el valor de la afirmación y
            lanzar la excepción de tipo <see cref="T:System.InvalidOperationException"/>
            en caso afirmativo.
            </summary>
            <param name="assertion">
            Parámetro que indica si se lanzará la excepción.
            </param>
            <param name="exception">
            Parámetro que indica el tipo de excepción que se lanzará.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Lanzada cuando el valor de <c>assertion</c> es <c>true</c>.
            </exception>
        </member>
        <member name="M:Inflexion2.Guard.ArgumentIsNotNull(System.Object,System.String)">
            <summary>
            Método público encargado de comprobar si el argumento es null.
            </summary>
            <param name="argumentValue">
            Parámetro a comprobar si es <c>null</c>.
            </param>
            <param name="argumentName">
            Parámetro que indica el nombre del argumento que se está comprobando.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el parámetro <c>argumentValue</c> es nulo.
            </exception>
        </member>
        <member name="M:Inflexion2.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Método público encargado de comprobar si el valor
            del argumento es null o cadena vacía.
            </summary>
            <param name="argumentValue">
            Parámetro a comprobar si es <c>null</c>.
            </param>
            <param name="argumentName">
            Parámetro que indica el nombre del argumento que se está comprobando.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el parámetro <c>argumentValue</c> es nulo o cadena vacía.
            </exception>
        </member>
        <member name="M:Inflexion2.Guard.Against``1(System.Boolean,System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion statement is true.
            </summary>
            <typeparam name="TException">The type of exception to throw.</typeparam>
            <param name="assertion">The assertion to evaluate. If true then the <typeparamref name="TException"/> exception is thrown.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:Inflexion2.Guard.Against``1(System.Boolean,System.String,System.Object[])">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion statement is true.
            </summary>
            <typeparam name="TException">The type of exception to throw.</typeparam>
            <param name="assertion">The assertion to evaluate. If true then the <typeparamref name="TException"/> exception is thrown.</param>
            <param name="message">string. The exception message to throw.</param>
            <param name="args"></param>
        </member>
        <member name="M:Inflexion2.Guard.Against``1(System.Func{System.Boolean},System.String)">
            <summary>
            Throws an exception of type <typeparamref name="TException"/> with the specified message
            when the assertion
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="assertion"></param>
            <param name="message"></param>
        </member>
        <member name="M:Inflexion2.Guard.Implements``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type the object instance should implement.</typeparam>
            <param name="instance">The object insance to check if it implements the <typeparamref name="TInterface"/> interface</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:Inflexion2.Guard.Implements``1(System.Type,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified type does not
            implement the <typeparamref name="TInterface"/> interface.
            </summary>
            <typeparam name="TInterface">The interface type that the <paramref name="type"/> should implement.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it implements from <typeparamref name="TInterface"/> interface.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:Inflexion2.Guard.InheritsFrom``1(System.Object,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified object
            instance does not inherit from <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="instance">The object to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:Inflexion2.Guard.InheritsFrom``1(System.Type,System.String)">
            <summary>
            Throws a <see cref="T:System.InvalidOperationException"/> when the specified type does not
            inherit from the <typeparamref name="TBase"/> type.
            </summary>
            <typeparam name="TBase">The base type to check for.</typeparam>
            <param name="type">The <see cref="T:System.Type"/> to check if it inherits from <typeparamref name="TBase"/> type.</param>
            <param name="message">string. The exception message to throw.</param>
        </member>
        <member name="M:Inflexion2.Guard.IsEqual``1(System.Object,System.Object,System.String)">
            <summary>
            Throws an exception if an instance of an object is not equal to another object instance.
            </summary>
            <typeparam name="TException">The type of exception to throw when the guard check evaluates false.</typeparam>
            <param name="compare">The comparison object.</param>
            <param name="instance">The object instance to compare with.</param>
            <param name="message">string. The message of the exception.</param>
        </member>
        <member name="M:Inflexion2.Guard.IsNotNull(System.Object,System.String)">
            <summary>
            Throws an exception if instance is null.
            </summary>
            <param name="instance">The instance.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.Guard.IsNotNullNorEmpty(System.String,System.String)">
            <summary>
            Throws an exception if instance is null or empty.
            </summary>
            <param name="instance">The instance.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Inflexion2.Guard.TypeOf``1(System.Object,System.String)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when the specified object instance is
            not of the specified type.
            </summary>
            <typeparam name="TType">The Type that the <paramref name="instance"/> is expected to be.</typeparam>
            <param name="instance">The object instance whose type is checked.</param>
            <param name="message">The message of the <see cref="T:System.InvalidOperationException"/> exception.</param>
        </member>
        <member name="T:Inflexion2.Security.CertificateHelper">
            <summary>
            helper class to manage certificates
            </summary>
        </member>
        <member name="M:Inflexion2.Security.CertificateHelper.GetCertificate">
            <summary>
            Gets a X509 certificate from windows store. Asks the user for the correct certificate.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Security.CertificateHelper.GetCertificate(System.String,System.String)">
            <summary>
            Gets a X509 certificate from a pfx file.
            </summary>
            <param name="path">Path whre the pfx file is stored.</param>
            <param name="password">Password for pfx file.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Security.CertificateHelper.GetCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary>
            Gets a X509 specific certificate from windows store withoit asking the user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.Security.CertificateHelper.LoadFromFile(System.String)">
            <summary>
            Load a certificate from the specified file.
            The filename can contains the password when using this format: file|password.
            The file can be a relative file or an absolute file.
            Return null if the file is not specified.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="T:Inflexion2.Security.CoreIdentity">
            <summary>
            Class used to hold user name info.
            </summary>
        </member>
        <member name="M:Inflexion2.Security.CoreIdentity.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Security.CoreIdentity"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Inflexion2.Security.CoreIdentity.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Security.CoreIdentity"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Inflexion2.Security.CoreIdentity.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Security.CoreIdentity"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
            <param name="id">The id.</param>
        </member>
        <member name="P:Inflexion2.Security.CoreIdentity.AuthenticationType">
            <summary>
            Gets the type of authentication used.
            </summary>
            <value></value>
            <returns>The type of authentication used to identify the user.</returns>
        </member>
        <member name="P:Inflexion2.Security.CoreIdentity.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:Inflexion2.Security.CoreIdentity.IsAuthenticated">
            <summary>
            Gets a value that indicates whether the user has been authenticated.
            </summary>
            <value></value>
            <returns>true if the user was authenticated; otherwise, false.</returns>
        </member>
        <member name="P:Inflexion2.Security.CoreIdentity.Name">
            <summary>
            Gets the name of the current user.
            </summary>
            <value></value>
            <returns>The name of the user on whose behalf the code is running.</returns>
        </member>
        <member name="T:Inflexion2.Security.CorePrincipal">
            <summary>
            Main class used to hold user identity and roles
            </summary>
        </member>
        <member name="M:Inflexion2.Security.CorePrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Inflexion2.Security.CorePrincipal"/> class.
            </summary>
            <param name="identity">The identity.</param>
            <param name="roles">The roles.</param>
        </member>
        <member name="P:Inflexion2.Security.CorePrincipal.Identity">
            <summary>
            Gets the identity of the current principal.
            </summary>
            <value></value>
            <returns>The <see cref="T:System.Security.Principal.IIdentity"/> object associated with the current principal.</returns>
        </member>
        <member name="M:Inflexion2.Security.CorePrincipal.IsInRole(System.String)">
            <summary>
            Determines whether the current principal belongs to the specified role.
            </summary>
            <param name="role">The name of the role for which to check membership.</param>
            <returns>
            true if the current principal is a member of the specified role; otherwise, false.
            </returns>
        </member>
        <member name="T:Inflexion2.Security.ICoreIdentity">
            <summary>
            todo: update sumamry
            </summary>
        </member>
        <member name="P:Inflexion2.Security.ICoreIdentity.Id">
            <summary>
            todo: update sumamry
            </summary>
        </member>
        <member name="T:Inflexion2.Infrastructure.Manager">
            <summary>
            Clase estática
            </summary>
            <remarks>
            .en The System.Data.Common namespace provides classes for creating DbProviderFactory 
            instances to work with specific data sources. 
            When you create a DbProviderFactory instance and pass it information about the data provider, 
            the DbProviderFactory can determine the correct, strongly typed connection object to return based on the information it has been provided.
            Beginning in the .NET Framework version 4, data providers such as System.Data.Odbc, 
            System.Data.OleDb, System.Data.SqlClient, 
            and System.Data.OracleClient are no longer listed in machine.config file, 
            but custom providers will continue to be listed there.
            </remarks>
            <seealso href="http://msdn.microsoft.com/en-us/library/wda6c36e.aspx">DbProviderFactories (ADO.NET) .NET Framework 4</seealso>
        </member>
        <member name="F:Inflexion2.Infrastructure.Manager.providerFactories">
            <summary>
            Variable privada de tipo colección de objetos de tipo
            <see cref="T:System.Data.Common.DbProviderFactory"/>
            </summary>
            <remarks>
            http://juank.io/csharp-c-palabra-clave-volatile-explicacion-ejemplos/
            advertencia ProviderFactoryDictionary es un alias de DbProviderFactory declarado al principio de este fichero de código.
            </remarks>
        </member>
        <member name="F:Inflexion2.Infrastructure.Manager.providerFactoriesMonitorLock">
            <summary>
            Variable privada utilizada para la sección crítica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion2.Infrastructure.Manager.providerFactoriesSingletonMutex">
            <summary>
            Variable privada utilizada para aplicar el patrón singelton.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion2.Infrastructure.Manager.Factories">
            <summary>
            Propiedad que obtiene una colección de objetos <see cref="T:System.Data.Common.DbProviderFactory"/>
            </summary>
            <remarks>
            Se utiliza un patrón solitario para la creación
            perezosa de la colección (diccionario) de factorías.
            </remarks>
            <value>
            Valor que es utilizado para obtener una colección de objetos
            de tipo <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </value>
        </member>
        <member name="M:Inflexion2.Infrastructure.Manager.Clear">
            <summary>
            Método estático para limpiar la colección.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Infrastructure.Manager.GetFactory(System.String)">
            <summary>
            Método estático encargado de devolver una instancia de la clase
            <see cref="T:System.Data.Common.DbProviderFactory"/> de acuerdo al nombre del proveedor proporcionado.
            </summary>
            <param name="providerFactoryName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Data.Common.DbProviderFactory"/> que representa la
            factoría de proveedores.
            </returns>
        </member>
        <member name="M:Inflexion2.Infrastructure.Manager.GetOpenConnection(System.String,System.String)">
            <summary>
            Función estática encargada de crear una conexión abierta.
            </summary>
            <param name="providerName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <param name="connectionString">
            Parámetro que indica la cadena de conexión.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:System.Data.IDbConnection"/> con la conexión creada.
            </returns>
        </member>
        <member name="M:Inflexion2.Infrastructure.Manager.Remove(System.String)">
            <summary>
            Método estático encargado de eliminar una factoría de la colección.
            </summary>
            <param name="providerFactoryName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion2.Infrastructure.Manager.RetrieveAllConfiguredFactories(System.Boolean)">
            <summary>
            Método encargado de devolver todas las factorías de tipo
            <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <param name="clearCurrentFactories">
            Parámetro que indica si se limpiará previamente la colección.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <seealso href="http://msdn.microsoft.com/en-us/library/system.data.common.dbproviderfactories.getfactoryclasses.aspx"/>
        </member>
        <member name="T:Inflexion2.ApplicationContext">
            <summary>
            Core Context singleton class. Contains a reference to a root CoreContainer object.
            </summary>
        </member>
        <member name="P:Inflexion2.ApplicationContext.User">
            <summary>
            gets the identity of the user through http or current thread
            </summary>
        </member>
        <member name="T:Inflexion2.ServiceLocator">
            <summary>
            Service Locator implementation
            </summary>
        </member>
        <member name="M:Inflexion2.ServiceLocator.GetAllInstances``1">
            <summary>
            Get all the registeres instances
            </summary>
            <typeparam name="TDependency"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ServiceLocator.GetInstance``1">
            <summary>
            Get one instance on function of the dependency
            </summary>
            <typeparam name="TDependency"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ServiceLocator.GetInstance(System.Type)">
            <summary>
            Get one instance on function of the dependency type in a parameter
            </summary>
            <param name="dependencyType"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion2.ServiceLocator.Initialize(System.Action{System.Type,System.Type},System.Action{System.Type,System.Object},System.Func{System.Type,System.Object},System.Func{System.Type,System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            .es Inicializa una nueva instancia de la clase <see cref="T:Inflexion2.ServiceLocator"/>
            esto significa que este metodo es invocado al principio y se le pasan mediante
            expresiones lambda una serie de acciones y de funciones, es decir unos punteros a unos metodos anonimos.
            utilizando action y func
            .en Initializes a new instance of the <see cref="T:Inflexion2.ServiceLocator"/> class.
            this means this method is called in the begining and their parameters are lambda expresions for methods.
            </summary>
            <example>
                        ServiceLocator.Initialize(
                (x, y) => this.unityContainer.RegisterType(x, y),
                (x, y) => this.unityContainer.RegisterInstance(x, y),
                (x) => { return this.unityContainer.Resolve(x); },
                (x) => { return this.unityContainer.ResolveAll(x); });
            </example>
        </member>
        <member name="M:Inflexion2.ServiceLocator.RegisterInstance``1(System.Object)">
            <summary>
            Registers the instance.
            </summary>
            <typeparam name="I"></typeparam>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Inflexion2.ServiceLocator.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers the instance.
            </summary>
            <param name="type">The type.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Inflexion2.ServiceLocator.RegisterType``2">
            <summary>
            Registers a service implementation.
            </summary>
            <typeparam name="I"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Inflexion2.ServiceLocator.RegisterType(System.Type,System.Type)">
            <summary>
            Registers the type.
            </summary>
            <param name="interface">The @interface.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Inflexion2.ServiceLocator.TryGetInstance``1">
            <summary>
            Try to resolve a dependency
            </summary>
            <typeparam name="TDependency"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Hexa.Core.ObjectExtensions">
            <summary>
            static methods to extended object operations like DeepClone.
            </summary>
        </member>
        <member name="M:Hexa.Core.ObjectExtensions.DeepClone``1(``0)">
            <summary>
            Perform a deep Copy of the object.
            </summary>
            <typeparam name="T">The type of object being copied.</typeparam>
            <param name="source">The object instance to copy.</param>
            <returns>The copied object.</returns>
        </member>
        <member name="T:GNU.Gettext.GettextResourceManager">
            <summary>
            Each instance of this class can be used to lookup translations for a
            given resource name. For each <c>CultureInfo</c>, it performs the lookup
            in several assemblies, from most specific over territory-neutral to
            language-neutral.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="baseName">the resource name, also the assembly base
            name</param>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Constructor.
            </summary>
            <param name="baseName">the resource name, also the assembly base
            name</param>
            <param name="assembly"></param>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetPluralString(System.String,System.String,System.Int64,System.Globalization.CultureInfo)">
            <summary>
            Returns the translation of <paramref name="msgid"/> and
            <paramref name="msgidPlural"/> in a given culture, choosing the right
            plural form depending on the number <paramref name="n"/>.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <param name="msgidPlural">the English plural of <paramref name="msgid"/>,
            an ASCII string</param>
            <param name="n">the number, should be &gt;= 0</param>
            <returns>the translation, or <paramref name="msgid"/> or
            <paramref name="msgidPlural"/> if none is found</returns>
            <param name="culture"/>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetPluralString(System.String,System.String,System.Int64)">
            <summary>
            Returns the translation of <paramref name="msgid"/> and
            <paramref name="msgidPlural"/> in the current culture, choosing the
            right plural form depending on the number <paramref name="n"/>.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <param name="msgidPlural">the English plural of <paramref name="msgid"/>,
            an ASCII string</param>
            <param name="n">the number, should be &gt;= 0</param>
            <returns>the translation, or <paramref name="msgid"/> or
            <paramref name="msgidPlural"/> if none is found</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Returns the translation of <paramref name="msgid"/> in a given culture.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <returns>the translation of <paramref name="msgid"/>, or
            <paramref name="msgid"/> if none is found</returns>
            <param name="culture"></param>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetString(System.String)">
            <summary>
            Returns the translation of <paramref name="msgid"/> in the current
            culture.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <returns>the translation of <paramref name="msgid"/>, or
            <paramref name="msgid"/> if none is found</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.ConstructClassName(System.String)">
            <summary>
            Converts a resource name to a class name.
            </summary>
            <returns>a nonempty string consisting of alphanumerics and underscores
            and starting with a letter or underscore</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetSatelliteAssembly(System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
            <summary>
            Loads and returns a satellite assembly.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.InstantiateResourceSet(System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
            <summary>
            Instantiates a resource set for a given culture.
            </summary>
            <exception cref="T:System.ArgumentException">
            The expected type name is not valid.
            </exception>
            <exception cref="T:System.Reflection.ReflectionTypeLoadException">
            satelliteAssembly does not contain the expected type.
            </exception>
            <exception cref="T:System.NullReferenceException">
            The type has no no-arguments constructor.
            </exception>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.GetResourceSetsFor(System.Globalization.CultureInfo)">
            <summary>
            Returns the array of <c>GettextResourceSet</c>s for a given culture,
            loading them if necessary, and maintaining the cache.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceManager.MySatelliteAssembly(System.Globalization.CultureInfo)">
            <summary>
            Loads and returns the satellite assembly for a given culture.
            </summary>
        </member>
        <member name="T:GNU.Gettext.GettextResourceSet">
            <summary>
            <para>
            Each instance of this class encapsulates a single PO file.
            </para>
            <para>
            This API of this class is not meant to be used directly; use
            <c>GettextResourceManager</c> instead.
            </para>
            </summary>
        </member>
        <member name="F:GNU.Gettext.GettextResourceSet.DummyResourceReader">
            <summary>
            A trivial instance of <c>IResourceReader</c> that does nothing.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.#ctor(System.Resources.IResourceReader)">
            <summary>
            Creates a new message catalog, by reading the string/value pairs from
            the given <paramref name="reader"/>. The message catalog will support
            plural forms only if the reader can produce values of type
            <c>String[]</c> and if the <c>PluralEval</c> method is overridden.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.#ctor(System.IO.Stream)">
            <summary>
            Creates a new message catalog, by reading the string/value pairs from
            the given <paramref name="stream"/>, which should have the format of
            a <c>.resources</c> file. The message catalog will not support plural
            forms.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.#ctor(System.String)">
            <summary>
            Creates a new message catalog, by reading the string/value pairs from
            the file with the given <paramref name="fileName"/>. The file should
            be in the format of a <c>.resources</c> file. The message catalog will
            not support plural forms.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.#ctor">
            <summary>
            Creates a new message catalog. When using this constructor, you
            must override the <c>ReadResources</c> method, in order to initialize
            the <c>Table</c> property. The message catalog will support plural
            forms only if the <c>ReadResources</c> method installs values of type
            <c>String[]</c> and if the <c>PluralEval</c> method is overridden.
            </summary>
        </member>
        <member name="P:GNU.Gettext.GettextResourceSet.Keys">
            <summary>
            Returns the keys of this resource set, i.e. the strings for which
            <c>GetObject()</c> can return a non-null value.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.GetPluralString(System.String,System.String,System.Int64)">
            <summary>
            Returns the translation of <paramref name="msgid"/> and
            <paramref name="msgidPlural"/>, choosing the right plural form
            depending on the number <paramref name="n"/>.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
                                string</param>
            <param name="msgidPlural">the English plural of <paramref name="msgid"/>,
                                      an ASCII string</param>
            <param name="n">the number, should be &gt;= 0</param>
            <returns>the translation, or <c>null</c> if none is found</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.GetString(System.String)">
            <summary>
            Returns the translation of <paramref name="msgid"/>.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <returns>the translation of <paramref name="msgid"/>, or <c>null</c> if
            none is found</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.GetString(System.String,System.Boolean)">
            <summary>
            Returns the translation of <paramref name="msgid"/>, with possibly
            case-insensitive lookup.
            </summary>
            <param name="msgid">the key string to be translated, an ASCII
            string</param>
            <param name="ignoreCase"></param>
            <returns>the translation of <paramref name="msgid"/>, or <c>null</c> if
            none is found</returns>
        </member>
        <member name="M:GNU.Gettext.GettextResourceSet.PluralEval(System.Int64)">
            <summary>
            Returns the index of the plural form to be chosen for a given number.
            The default implementation is the Germanic plural formula:
            zero for <paramref name="n"/> == 1, one for <paramref name="n"/> != 1.
            </summary>
        </member>
        <member name="T:GNU.Gettext.DummyIResourceReader">
            <summary>
            A trivial <c>IResourceReader</c> implementation.
            </summary>
        </member>
        <member name="T:GNU.Gettext.GettextHelper">
            <summary>
            Class used to call Gettext.
            </summary>
        </member>
        <member name="F:GNU.Gettext.GettextHelper._ResourceManager">
            <summary>
            Gettext resource manager.
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextHelper.ForceInvariantCulture">
            <summary>
            Method to enforce the invariant culture
            </summary>
        </member>
        <member name="M:GNU.Gettext.GettextHelper.t(System.String)">
            <summary>
            Translates a string using Gettext resource manager.
            </summary>
            <param name="key">The string.</param>
            <returns></returns>
        </member>
        <member name="M:GNU.Gettext.GettextHelper.t(System.String,System.Reflection.Assembly)">
            <summary>
            Translates a string using Gettext resource manager.
            </summary>
            <param name="key">The string</param>
            <param name="callingAssembly">The calling assembly.</param>
            <returns></returns>
        </member>
    </members>
</doc>
