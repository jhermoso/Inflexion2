<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Acept" xml:space="preserve">
    <value>接受</value>
  </data>
  <data name="AnObjectOfType0WasNotAvailableFromThePool" xml:space="preserve">
    <value>类型为{0}的对象不可从池中使用</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="Canceled" xml:space="preserve">
    <value>已取消{0}</value>
  </data>
  <data name="CanNotDeactivate" xml:space="preserve">
    <value>不能取消激活{0}。</value>
  </data>
  <data name="CanNotDelete" xml:space="preserve">
    <value>无法删除{0}。</value>
  </data>
  <data name="CanNotDirectlySaveAChildObject" xml:space="preserve">
    <value>无法直接保存子对象</value>
  </data>
  <data name="CanNotUpdateInexistenceEntity" xml:space="preserve">
    <value>无法更新不存在实体{0}。</value>
  </data>
  <data name="CertificateFileNameFormatNotValidFilePassword" xml:space="preserve">
    <value>证书文件名格式无效。 'file | password'</value>
  </data>
  <data name="Code0WasNotPresentInDataSetCollection" xml:space="preserve">
    <value>代码：{0}不存在于数据集集合中</value>
  </data>
  <data name="CodeFieldNameNotSpecifiedUnableToFetchByCode" xml:space="preserve">
    <value>未指定代码字段名称。无法通过代码获取。</value>
  </data>
  <data name="CollectionCantBeNull" xml:space="preserve">
    <value>{0}的集合不能为空</value>
  </data>
  <data name="CouldNotCreateType" xml:space="preserve">
    <value>无法创建类型</value>
  </data>
  <data name="CouldNotDefineType" xml:space="preserve">
    <value>无法定义类型</value>
  </data>
  <data name="CouldNotGenerateAssembly" xml:space="preserve">
    <value>无法生成装配</value>
  </data>
  <data name="CouldNotGenerateModuleBuilder" xml:space="preserve">
    <value>无法生成模块构建器</value>
  </data>
  <data name="CreationTimeoutCannotBeNegative" xml:space="preserve">
    <value>创建超时不能为负</value>
  </data>
  <data name="DataLayerServiceCanTBeNull" xml:space="preserve">
    <value>数据层服务不能为空</value>
  </data>
  <data name="DataTransferObjectIsNull" xml:space="preserve">
    <value>实体{0} D.T.O.不能为null</value>
  </data>
  <data name="EmailNotCorrect" xml:space="preserve">
    <value>电子邮件{0}不正确</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>实体{0}</value>
  </data>
  <data name="EntityNotActive" xml:space="preserve">
    <value>实体{0}未处于活动状态</value>
  </data>
  <data name="EntityRequired" xml:space="preserve">
    <value>实体{0}是必需的</value>
  </data>
  <data name="ErrorMasterObjectsCanNotSupportChildDeleteMethod" xml:space="preserve">
    <value>错误：主对象不能支持子删除方法</value>
  </data>
  <data name="ErrorReadingField0FormTheDataSource" xml:space="preserve">
    <value>从数据源读取字段“{0}”时出错</value>
  </data>
  <data name="EspecificationDataTransferObjectIsNull" xml:space="preserve">
    <value>规格D.T.O.实体{0}的参数不能为空</value>
  </data>
  <data name="FieldIsRequired" xml:space="preserve">
    <value>需要实体{1}的字段{0}</value>
  </data>
  <data name="FieldNameRequired" xml:space="preserve">
    <value>实体{0}的名称是必需的</value>
  </data>
  <data name="Founded" xml:space="preserve">
    <value>{0}成立</value>
  </data>
  <data name="IdentityCanNotBeNull" xml:space="preserve">
    <value>身份不能为空。</value>
  </data>
  <data name="IEndpointBehaviorTypeSpecifiedMustHaveAPublicEmptyConstructor" xml:space="preserve">
    <value>在FlatWsdlServiceBehaviorAttribute构造函数中指定的IEndpointBehavior类型必</value>
  </data>
  <data name="InvalidConnectionStringId" xml:space="preserve">
    <value>须具有公共的空构造函数。</value>
  </data>
  <data name="IsNotTransient" xml:space="preserve">
    <value>无效的ConnectionStringId（{0}）</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>{0}是必需的</value>
  </data>
  <data name="LinqEntityAttributeNotDefined" xml:space="preserve">
    <value>Linq实体属性未定义。</value>
  </data>
  <data name="MapperErrorEntityNull" xml:space="preserve">
    <value>实体“{0}”的映射错误。不允许输入参数null。</value>
  </data>
  <data name="MaxPoolSizeCannotBeNegative" xml:space="preserve">
    <value>最大池大小不能为负</value>
  </data>
  <data name="MinPoolSizeCannotBeGreaterThanMaxPoolSize" xml:space="preserve">
    <value>min池大小不能大于max Pool Size</value>
  </data>
  <data name="MinPoolSizeCannotBeNegative" xml:space="preserve">
    <value>min池大小不能为负</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>修改{0}</value>
  </data>
  <data name="MustBeGreaterOrEqualThan1" xml:space="preserve">
    <value>{0}必须大于或等于{1}</value>
  </data>
  <data name="NameCannotBeNull" xml:space="preserve">
    <value>名称不能为空。</value>
  </data>
  <data name="NameOfUser" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="NoDataById" xml:space="preserve">
    <value>不存在具有此标识{1}的{0}</value>
  </data>
  <data name="Object" xml:space="preserve">
    <value>对象{0}</value>
  </data>
  <data name="ObjectIsNotChildAndCanNotBeSaved" xml:space="preserve">
    <value>对象不是子对象，无法保存</value>
  </data>
  <data name="ObjectIsNotValidAndCanNotBeSaved" xml:space="preserve">
    <value>对象无效，无法保存</value>
  </data>
  <data name="ObjectIsStillBeingEditedAndCanNotBeSaved" xml:space="preserve">
    <value>对象仍在编辑中，无法保存</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>好</value>
  </data>
  <data name="PageMustBeGreaterOrEqualTo1" xml:space="preserve">
    <value>页面必须大于或等于1</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>密码</value>
  </data>
  <data name="PropertyRequired" xml:space="preserve">
    <value>实体{1}中的属性{0}是必需的</value>
  </data>
  <data name="Read" xml:space="preserve">
    <value>读</value>
  </data>
  <data name="Readed" xml:space="preserve">
    <value>{0}已读</value>
  </data>
  <data name="Repeated" xml:space="preserve">
    <value>重复{0}。</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>保存</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value>{0}已保存</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>搜索</value>
  </data>
  <data name="Type0CannotBeUnregisteredBecauseThereAreActiveThreadsWaitingForAnObject" xml:space="preserve">
    <value>类型{0}无法注销，因为有活动线程正在等待对象。</value>
  </data>
  <data name="Type0IsNotRegisteredInTheObjectPool" xml:space="preserve">
    <value>类型{0}未在对象池中注册</value>
  </data>
  <data name="TypeCannotBeNull" xml:space="preserve">
    <value>类型不能为null。</value>
  </data>
  <data name="TypeIsAlreadyRegisteredInTheObjectPool" xml:space="preserve">
    <value>类型{0}已在对象池中注册</value>
  </data>
  <data name="UnableToReadKeyOrIv" xml:space="preserve">
    <value>无法读取密钥或ID</value>
  </data>
  <data name="UnableToStartProvider" xml:space="preserve">
    <value>无法启动提供商</value>
  </data>
  <data name="UnitOfWorkIsNull" xml:space="preserve">
    <value>工作单元为空</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>更新{0}</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>用户{0}</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>用户名</value>
  </data>
  <data name="ValueIsNotAnEmail" xml:space="preserve">
    <value>{0}值不是电子邮件</value>
  </data>
  <data name="ValueIsNotCorrectlyFormatted" xml:space="preserve">
    <value>{0}值格式不正确</value>
  </data>
  <data name="ValueIsNotOfTheCorrectType" xml:space="preserve">
    <value>{0}值的类型不正确</value>
  </data>
  <data name="ValueMustBeBetween1And2" xml:space="preserve">
    <value>{0}值必须在{1}和{2}之间</value>
  </data>
  <data name="flow" xml:space="preserve">
    <value>左到右</value>
  </data>
  <data name="Access" xml:space="preserve">
    <value>访问</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>登录</value>
  </data>
  <data name="SaveMessage" xml:space="preserve">
    <value>保存{0}</value>
  </data>
  <data name="SaveRecord" xml:space="preserve">
    <value>保存记录</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>新</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>加</value>
  </data>
  <data name="AddNewRecord" xml:space="preserve">
    <value>添加新记录</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>编辑</value>
  </data>
  <data name="EditRecord" xml:space="preserve">
    <value>编辑记录</value>
  </data>
  <data name="DeleteRecord" xml:space="preserve">
    <value>删除记录</value>
  </data>
  <data name="Get" xml:space="preserve">
    <value>得到</value>
  </data>
  <data name="SearchMessage" xml:space="preserve">
    <value>搜索{0}</value>
  </data>
  <data name="First" xml:space="preserve">
    <value>第一</value>
  </data>
  <data name="FirstPage" xml:space="preserve">
    <value>第一页</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>下一个</value>
  </data>
  <data name="NextPage" xml:space="preserve">
    <value>下一页</value>
  </data>
  <data name="Paging" xml:space="preserve">
    <value>分页</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>以前</value>
  </data>
  <data name="PreviousPage" xml:space="preserve">
    <value>上一页</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>持续</value>
  </data>
  <data name="LastPage" xml:space="preserve">
    <value>最后一页</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>删除</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>家</value>
  </data>
</root>