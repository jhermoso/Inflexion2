<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Acept" xml:space="preserve">
    <value>Accept</value>
  </data>
  <data name="AnObjectOfType0WasNotAvailableFromThePool" xml:space="preserve">
    <value>An object of type {0} was not available from the pool</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Canceled" xml:space="preserve">
    <value>{0} canceled</value>
  </data>
  <data name="CanNotDeactivate" xml:space="preserve">
    <value>The {0} can't be deactivated.</value>
  </data>
  <data name="CanNotDelete" xml:space="preserve">
    <value>The {0} can't be deleted.</value>
  </data>
  <data name="CanNotDirectlySaveAChildObject" xml:space="preserve">
    <value>Can not directly save a child object</value>
  </data>
  <data name="CanNotUpdateInexistenceEntity" xml:space="preserve">
    <value>Can Not Update Inexistence Entity {0}.</value>
  </data>
  <data name="CertificateFileNameFormatNotValidFilePassword" xml:space="preserve">
    <value>Certificate file name format not valid. 'file|password'</value>
  </data>
  <data name="Code0WasNotPresentInDataSetCollection" xml:space="preserve">
    <value>Code: {0} was not present in data set collection</value>
  </data>
  <data name="CodeFieldNameNotSpecifiedUnableToFetchByCode" xml:space="preserve">
    <value>Code Field Name not specified. Unable to Fetch by code.</value>
  </data>
  <data name="CollectionCantBeNull" xml:space="preserve">
    <value>The collection of {0} can't be null</value>
  </data>
  <data name="CouldNotCreateType" xml:space="preserve">
    <value>Could not CreateType </value>
  </data>
  <data name="CouldNotDefineType" xml:space="preserve">
    <value>Could not DefineType </value>
  </data>
  <data name="CouldNotGenerateAssembly" xml:space="preserve">
    <value>Could not generate assembly</value>
  </data>
  <data name="CouldNotGenerateModuleBuilder" xml:space="preserve">
    <value>Could not generate module builder</value>
  </data>
  <data name="CreationTimeoutCannotBeNegative" xml:space="preserve">
    <value>creationTimeout cannot be negative</value>
  </data>
  <data name="DataLayerServiceCanTBeNull" xml:space="preserve">
    <value>DataLayerService can't be null</value>
  </data>
  <data name="DataTransferObjectIsNull" xml:space="preserve">
    <value>The entity {0} Dto can't be null</value>
  </data>
  <data name="EmailNotCorrect" xml:space="preserve">
    <value>The email {0}  is not correct</value>
  </data>
  <data name="Entity" xml:space="preserve">
    <value>Entity  {0}</value>
  </data>
  <data name="EntityNotActive" xml:space="preserve">
    <value>The entity {0} is not active</value>
  </data>
  <data name="EntityRequired" xml:space="preserve">
    <value>The entity {0} is required</value>
  </data>
  <data name="ErrorMasterObjectsCanNotSupportChildDeleteMethod" xml:space="preserve">
    <value>Error: Master Objects Can Not support ChildDelete Method</value>
  </data>
  <data name="ErrorReadingField0FormTheDataSource" xml:space="preserve">
    <value>Error Reading Field: {0} from the Data Source</value>
  </data>
  <data name="EspecificationDataTransferObjectIsNull" xml:space="preserve">
    <value>The specification D.T.O. parameter for entity {0} can not be null</value>
  </data>
  <data name="FieldIsRequired" xml:space="preserve">
    <value>The Field {0}  of the entity {1} is required</value>
  </data>
  <data name="FieldNameRequired" xml:space="preserve">
    <value>The name of the entity { 0} is required</value>
  </data>
  <data name="Founded" xml:space="preserve">
    <value>{0} Founded</value>
  </data>
  <data name="IdentityCanNotBeNull" xml:space="preserve">
    <value>Identity can not be null.</value>
  </data>
  <data name="IEndpointBehaviorTypeSpecifiedMustHaveAPublicEmptyConstructor" xml:space="preserve">
    <value>IEndpointBehaviorType specified in the FlatWsdlServiceBehaviorAttribute constructor must have a public empty constructor.</value>
  </data>
  <data name="InvalidConnectionStringId" xml:space="preserve">
    <value>Invalid ConnectionStringId ({0})</value>
  </data>
  <data name="IsNotTransient" xml:space="preserve">
    <value>The entity {0} has to be transient, their Id has to have the default value.</value>
  </data>
  <data name="IsRequired" xml:space="preserve">
    <value>{0} is required</value>
  </data>
  <data name="LinqEntityAttributeNotDefined" xml:space="preserve">
    <value>LinqEntityAttribute not defined.</value>
  </data>
  <data name="MapperErrorEntityNull" xml:space="preserve">
    <value>Mapping error for entity '{0}'. Input parameter null not allowed.</value>
  </data>
  <data name="MaxPoolSizeCannotBeNegative" xml:space="preserve">
    <value>maxPoolSize cannot be negative</value>
  </data>
  <data name="MinPoolSizeCannotBeGreaterThanMaxPoolSize" xml:space="preserve">
    <value>minPoolSize cannot be greater than maxPoolSize</value>
  </data>
  <data name="MinPoolSizeCannotBeNegative" xml:space="preserve">
    <value>minPoolSize cannot be negative</value>
  </data>
  <data name="Modify" xml:space="preserve">
    <value>Modify  {0}</value>
  </data>
  <data name="MustBeGreaterOrEqualThan1" xml:space="preserve">
    <value>{0} must be greater or equal than {1}</value>
  </data>
  <data name="NameCannotBeNull" xml:space="preserve">
    <value>The name can not be null.</value>
  </data>
  <data name="NameOfUser" xml:space="preserve">
    <value>Name Of User</value>
  </data>
  <data name="NoDataById" xml:space="preserve">
    <value>there is not {0} with this id {1}</value>
  </data>
  <data name="Object" xml:space="preserve">
    <value>Object {0}</value>
  </data>
  <data name="ObjectIsNotChildAndCanNotBeSaved" xml:space="preserve">
    <value>Object is not Child and can not be saved</value>
  </data>
  <data name="ObjectIsNotValidAndCanNotBeSaved" xml:space="preserve">
    <value>Object is not valid and can not be saved</value>
  </data>
  <data name="ObjectIsStillBeingEditedAndCanNotBeSaved" xml:space="preserve">
    <value>Object is still being edited and can not be saved</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="PageMustBeGreaterOrEqualTo1" xml:space="preserve">
    <value>page must be greater or equal to 1</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="PropertyRequired" xml:space="preserve">
    <value>The property {0} in entity {1} is required</value>
  </data>
  <data name="Read" xml:space="preserve">
    <value>Read</value>
  </data>
  <data name="Readed" xml:space="preserve">
    <value>{0} readed</value>
  </data>
  <data name="Repeated" xml:space="preserve">
    <value>The {0} is repeated.</value>
  </data>
  <data name="SaveMessage" xml:space="preserve">
    <value>Save {0}</value>
  </data>
  <data name="Saved" xml:space="preserve">
    <value>{0} Saved</value>
  </data>
  <data name="SearchMessage" xml:space="preserve">
    <value>Search {0}</value>
  </data>
  <data name="Type0CannotBeUnregisteredBecauseThereAreActiveThreadsWaitingForAnObject" xml:space="preserve">
    <value>The type {0} cannot be unregistered because there are active threads waiting for an object.</value>
  </data>
  <data name="Type0IsNotRegisteredInTheObjectPool" xml:space="preserve">
    <value>Type {0} is not registered in the object pool</value>
  </data>
  <data name="TypeCannotBeNull" xml:space="preserve">
    <value>Type cannot be null.</value>
  </data>
  <data name="TypeIsAlreadyRegisteredInTheObjectPool" xml:space="preserve">
    <value>Type {0} is already registered in the object pool</value>
  </data>
  <data name="UnableToReadKeyOrIv" xml:space="preserve">
    <value>Unable to read key or Id</value>
  </data>
  <data name="UnableToStartProvider" xml:space="preserve">
    <value>Unable to start provider</value>
  </data>
  <data name="UnitOfWorkIsNull" xml:space="preserve">
    <value>the unit of work is null</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update {0}</value>
  </data>
  <data name="User" xml:space="preserve">
    <value>User  {0}</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User Name</value>
  </data>
  <data name="ValueIsNotAnEmail" xml:space="preserve">
    <value>{0} value is not an email</value>
  </data>
  <data name="ValueIsNotCorrectlyFormatted" xml:space="preserve">
    <value>{0} value is not correctly formatted</value>
  </data>
  <data name="ValueIsNotOfTheCorrectType" xml:space="preserve">
    <value>{0} value is not of the correct type</value>
  </data>
  <data name="ValueMustBeBetween1And2" xml:space="preserve">
    <value>{0} value must be between {1} and {2}</value>
  </data>
  <data name="flow" xml:space="preserve">
    <value>LeftToRight</value>
  </data>
  <data name="Access" xml:space="preserve">
    <value>Access</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AddNewRecord" xml:space="preserve">
    <value>Add New Record</value>
  </data>
  <data name="DeleteRecord" xml:space="preserve">
    <value>Delete record</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="EditRecord" xml:space="preserve">
    <value>Edit record</value>
  </data>
  <data name="First" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="FirstPage" xml:space="preserve">
    <value>First Page</value>
  </data>
  <data name="Get" xml:space="preserve">
    <value>Get</value>
  </data>
  <data name="Last" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="LastPage" xml:space="preserve">
    <value>LastPage</value>
  </data>
  <data name="New" xml:space="preserve">
    <value>New</value>
  </data>
  <data name="Next" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="NextPage" xml:space="preserve">
    <value>Next page</value>
  </data>
  <data name="Paging" xml:space="preserve">
    <value>Paging</value>
  </data>
  <data name="Previous" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="PreviousPage" xml:space="preserve">
    <value>Previous Page</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="SaveRecord" xml:space="preserve">
    <value>Save record</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Product" xml:space="preserve">
    <value>Product</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
    <comment>title of presentation page</comment>
  </data>
</root>