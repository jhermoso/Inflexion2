#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Categoria" company="Atento">
//     Copyright (c) 2017. Atento. All Rights Reserved.
//     Copyright (c) 2017. Atento. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Atento.Suite.Shared.Application
{


    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Atento.Suite.Shared.Application.Dtos;
    using Atento.Suite.Shared.Application;    
    using Atento.Suite.Shared.Domain;
    using Atento.Suite.Shared.Infrastructure;
    using Atento.Suite.Shared.Infrastructure.Resources;
// Shared

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
	/// .en generated with ServiceHeaderClass.tt
	/// Administration services of the entity Categoria.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
	/// Representa los servicios de administración de la entidad Categoria.
    /// </summary>
    /// <remarks>
	/// .en Create an object of type <see cref="Categoria"/>.
    /// .es Crea un objeto <see cref="Categoria"/>.
    /// </remarks>
    public partial class CategoriaServices : /*Atento.Suite.Shared.Application.EfApplicationServiceBase,*/ ICategoriaServices
    {

        #region Fields
        /// <summary>
        /// Referencia al mapeador de la entidad Categoria.
        /// </summary>
        private readonly ICategoriaMapper categoriaMapper;

        // <summary>
        // Referencia a la factoría de repositorios de la entidad Categoria.
        // </summary>
        //private readonly CategoriaRepositoryFactory categoriaRepositoryFactory;

        // <summary>
        // referencia a la unidad de trabajo
        // </summary>
		private IUnitOfWork unitOfWork;
        #endregion

        #region Constructors
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:Categoria>Service"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:CategoriaServices"/>.
        /// </remarks>
        public CategoriaServices() : base()
        {
  
            this.categoriaMapper = new CategoriaMapper();
        }

        #endregion


        #region Private Properties
        /// <summary>
        /// Obtiene la referencia al mapeador de la entidad <see cref="T:ICategoria"/>.
        /// </summary>
        private ICategoriaMapper CategoriaMapper
        {
            get { return this.categoriaMapper; }
        }

        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad <see cref="T:Categoria"/>.
        // </summary>
        //private CategoriaRepositoryFactory CategoriaRepositoryFactory
        //{
            //get { return this.categoriaRepositoryFactory; }
        //}

        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad Categoria.
        /// </summary>
        /// <param name="categoriaDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public int Create(CategoriaDto categoriaDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    categoriaDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    SharedResources.CategoriaAlias));
            // Comprobar los campos mandatory dentro del DTO.
            #endregion

            // el dto debe corresponder a un transient el id debe tener el valor por defecto
            Guard.Against<ArgumentException>(categoriaDto.Id != default(Int32),                                    
                                                    string.Format(
                                                                FrameworkResource.IsNotTransient,
                                                                SharedResources.CategoriaAlias
                                                                    )
                                            );

            Categoria categoria = CategoriaFactory.Create(); 
               categoria.Name = categoriaDto.Name;
            ICategoriaRepository repo =  ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();
            repo.Add(categoria);
            this.Commit();

            return categoria.Id; 
        }
        #endregion

        #region Service Delete
        /// <summary>
        /// Elimina una determinada entidad Categoria.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Delete(int id)
        {
            ICategoriaRepository repo = ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();
            IEnumerable<Categoria> results = repo.GetFilteredElements(u => u.Id == id);
            Categoria categoria2Delete = results.First();

            if (!categoria2Delete.CanBeDeleted())
            {
                return false;
            }
            repo.Remove(categoria2Delete);
            this.Commit();

            return true;
        }
        #endregion


        #region GetAll Method
        /// <summary>
        /// Recupera todas las entidades Categoria.
        /// </summary>
        /// <returns>
        /// Todas las entidades Categoria.
        /// </returns>
        public IEnumerable<CategoriaDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<CategoriaDto>(0);

            try
            {
                ICategoriaRepository repo = ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();
                var entities = repo.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.CategoriaMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }
        #endregion


        #region service GetById
        /// <summary>
        /// Recupera una entidad Categoria mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// La entidad Categoria recuperada o valor nulo si no se encuentra.
        /// </returns>
        public CategoriaDto GetById(Int32 id)
        {
            // Variable de respuesta.
            CategoriaDto entityDto = null;

            try
            {               
                ICategoriaRepository repo = ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();

                // Obtener y comprobar la entidad.
                //ISpecification<Categoria> spec = new DirectSpecification<Categoria>(t => t.Id == entityBId);
                var temp = repo.GetFilteredElements(t => t.Id == id);
                //string s = string.Format(Inflexion2.Resources.NoDataById, "Categoria", id);

                //Guard.ArgumentIsNotNull( entity, s );

                if (temp.Count() > 0)
                {
                    Categoria entity = temp.Single();
                    // Mapeamos los datos.
                    entityDto = this.CategoriaMapper.EntityMapping(entity);
                }
            }
            catch (Exception ex)
            {
                throw ex;
			}
            finally
            {
                // Confirmamos la transacción.
                this.Commit();
            }

            // Devolvemos el resultado.
            return entityDto;
        }
        #endregion


        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades Categoria, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'Categoria', según la especificación indicada.
        /// </returns>
        public PagedElements<CategoriaDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "Categoria")); 
            #endregion
            List<CategoriaDto> result = new List<CategoriaDto>(0);
            int totalElements = 0;

            try
            {
                // Creamos el repositorio de la entidad.
                ICategoriaRepository repo = ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();

                // Obtenemos las entidades aplicando la especificación.
                ISpecification<Categoria> filter =
                    specificationDto.ToSpecification<Categoria>();

                PagedElements<Categoria> entities =
                    repo.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        entity => entity.Id,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.categoriaMapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<CategoriaDto>(result, totalElements);
        }
#endregion

        #region Private Duplicated data for precondition methods
        #endregion



        #region update
        // ServiceUpdateMethod.tt
        /// <summary>
        /// Actualiza una determinada entidad Categoria.
        /// </summary>
        /// <param name="categoriaDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Update(CategoriaDto categoriaDto)
        {
            #region preconditions
            // Comprobar el DTO de entrada. 
            Guard.ArgumentIsNotNull(
                                    categoriaDto,
                                    string.Format(
                                                  FrameworkResource.DataTransferObjectIsNull,
                                                  "Categoria"));
            // en una actualización no comprobamos los campos mandatory.
            #endregion            

            try
            {
                // Creamos el repositorio de la entidad.
                ICategoriaRepository repo = ApplicationLayer.IocContainer.Resolve<ICategoriaRepository>();

                // Obtener y comprobar validez de la inserción a modificar.
               Categoria entity2Update = repo.GetFilteredElements(t => t.Id == categoriaDto.Id).Single();
                Guard.ArgumentIsNotNull(
                                        entity2Update,
                                        string.Format(
                                                        FrameworkResource.CanNotUpdateInexistenceEntity,
                                                        "Categoria"));
                // Comprobar duplicidades;

                    // Actualización de la entidad.
                    // Datos mandatory

                    // asignación de Datos no mandatory con ciclo de vida variable, no se incluyen aquellas propiedaes constantes o derivadas
                    entity2Update.Name = categoriaDto.Name; // property.AutoProperty = True; property.OnlyGetProperty = False

                // igualmente hemos de mapear las entidades emparentadas.
                if (!entity2Update.CanBeSaved())
                {
                    return false;
                }
                repo.Modify(entity2Update);

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolvemos el resultado.
            return true;
        }
        #endregion

        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.


        #endregion


        /// <summary>
        /// adapter of commit operation independent form the ORM
        /// </summary>
        public void Commit()
        {
            if (unitOfWork == null) unitOfWork = ApplicationLayer.IocContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }

    } // class Categoria 

} //  Atento.Suite.Shared.Application

