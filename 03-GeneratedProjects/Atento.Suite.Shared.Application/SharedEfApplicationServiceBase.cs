
//-----------------------------------------------------------------------
// <copyright file="Persona" company="Atento">
//     Copyright (c) 2016. Atento. All Rights Reserved.
//     Copyright (c) 2016. Atento. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     will lost all your modifications in the process to regenerate.
//      The original t4 template to get this file is " ApplicationServiceBaseCT.tt" with "public class ApplicationServiceBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationServiceBaseCT.tt" con "public class ApplicationServiceBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------

namespace Atento.Suite.Shared.Application
{

    #region usings
    using System;
    using System.Data.Entity;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Configuration;

    using Microsoft.Practices.Unity;
    using Inflexion2;
    using Inflexion2.Domain;
    using Inflexion2.Data;
    using Inflexion2.Application;

    using Atento.Suite.Shared.Domain.Data;
    using Atento.Suite.Shared.Domain;
    #endregion

    /// <summary>
    /// .es Clase base para los servicios de aplicación de un bounded context con Entity Framework 
    /// </summary>
     public class EfApplicationServiceBase
    {
        #region fields
        protected Atento.Suite.Shared.Domain.PerLifeTimeManager unitOfWorkPerTestLifeTimeManager = new Atento.Suite.Shared.Domain.PerLifeTimeManager();
        protected Atento.Suite.Shared.Domain.PerLifeTimeManager contextPerTestLifeTimeManager = new Atento.Suite.Shared.Domain.PerLifeTimeManager();
        protected UnityContainer unityContainer;
        protected string connString = null;
        protected RootAggregateFrameworkUnitOfWorkFactory<Atento.Suite.Shared.Infrastructure.BootstrapUnitOfWork> ctxFactory = null;
        #endregion

        #region Constructor
        public EfApplicationServiceBase()
        {
            this.unityContainer = new UnityContainer();

            ServiceLocator.Initialize(
                (x, y) => this.unityContainer.RegisterType(x, y),
                (x, y) => this.unityContainer.RegisterInstance(x, y),
                (x) => { return this.unityContainer.Resolve(x); },
                (x) => { return this.unityContainer.ResolveAll(x); });

            // Context Factory
            this.connString = this.ConnectionString();
            ctxFactory = new RootAggregateFrameworkUnitOfWorkFactory<Atento.Suite.Shared.Infrastructure.BootstrapUnitOfWork>(this.connString);//1

            //ctxFactory.ValidateDatabaseSchema();//1
            if (!ctxFactory.DatabaseExists())
            {
                ctxFactory.CreateDatabase();
            }

            this.unityContainer.RegisterInstance<IDatabaseManager>(ctxFactory);//1

            // esta linea se ha de incluir en el constructor de la clase de servicios.
            //this.unityContainer.RegisterType<DbContext, DomainUnitOfWork>(this.contextPerTestLifeTimeManager, new InjectionConstructor(connString));

            this.unityContainer.RegisterType<IUnitOfWork, EntityFrameworkUnitOfWork>(this.unitOfWorkPerTestLifeTimeManager);
        }
        #endregion
    
        #region Methods
        protected virtual string ConnectionString()
        {
            return ConfigurationManager.ConnectionStrings["Suite.Connection"].ConnectionString;
        }

        public void Commit()
        {
            IUnitOfWork unitOfWork = this.unityContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }
        #endregion 

    } // end class 

} //  Atento.Suite.Shared.Application
