#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="MNZ" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Application;    
    using Needel.Common.Domain;
    using Needel.Common.Infrastructure;
    using Needel.Common.Infrastructure.Resources;
// Common

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// .en generated with ServiceHeaderClass.tt
    /// Administration services of the entity MNZ.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
    /// Representa los servicios de administración de la entidad MNZ.
    /// </summary>
    /// <remarks>
    /// .en Create an object of type <see cref="MNZ"/>.
    /// .es Crea un objeto <see cref="MNZ"/>.
    ///  permanent guid = 
    /// </remarks>
    public partial class MNZServices : Inflexion2.Application.EfValueObjectApplicationServicesBase<MNZDto, MNZ>, IMNZServices
    {

        #region Fields
        // Mappers of related entitites
        /// <summary>
        /// .en Reference to the mapper of entity entityM
        /// .es Referencia a la factoría de repositorios de la entidad entityM.
        /// </summary>
        private readonly IEntityMMapper entityMMapper;
        /// <summary>
        /// .en Reference to the mapper of entity entityN
        /// .es Referencia a la factoría de repositorios de la entidad entityN.
        /// </summary>
        private readonly IEntityNMapper entityNMapper;
        /// <summary>
        /// .en Reference to the mapper of entity entityZ
        /// .es Referencia a la factoría de repositorios de la entidad entityZ.
        /// </summary>
        private readonly IEntityZMapper entityZMapper;
        #endregion

        #region Constructors
        /// <summary>
        /// .es Inicializa una nueva instancia de la clase <see cref="T:MNZ>Service"/>.
        /// </summary>
        /// <remarks>
        /// .es Constructor de la clase <see cref="T:MNZServices"/>.
        /// </remarks>
        public MNZServices() : base()
        {
            this.ValueObjectMapper = new MNZMapper();
            this.entityMMapper = new EntityMMapper();
            this.entityNMapper = new EntityNMapper();
            this.entityZMapper = new EntityZMapper();
            this.ValueObjectRepository = ApplicationLayer.IocContainer.Resolve<IMNZRepository>();
        }
        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad MNZ.
        /// </summary>
        /// <param name="mNZDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public override MNZDto Create(MNZDto mNZDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    mNZDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    CommonResources.MNZAlias));
            // Comprobar los campos mandatory dentro del DTO.
            #endregion

            #region Preconditions from composition sources
                Guard.ArgumentIsNotNull(
                                    mNZDto.EntityM,
                                    string.Format(
                                                FrameworkResource.DataTransferObjectIsNull,
                                                CommonResources.MNZ_EntityMAlias_));

                Guard.ArgumentIsNotNull(
                                    mNZDto.EntityN,
                                    string.Format(
                                                FrameworkResource.DataTransferObjectIsNull,
                                                CommonResources.MNZ_EntityNAlias_));

                Guard.ArgumentIsNotNull(
                                    mNZDto.EntityZ,
                                    string.Format(
                                                FrameworkResource.DataTransferObjectIsNull,
                                                CommonResources.MNZ_EntityZAlias_));

            #endregion

            IEntityMRepository entityMRepo = ApplicationLayer.IocContainer.Resolve<IEntityMRepository>();
            EntityM entityM = entityMRepo.GetById(mNZDto.EntityM.Id);
            IEntityNRepository entityNRepo = ApplicationLayer.IocContainer.Resolve<IEntityNRepository>();
            EntityN entityN = entityNRepo.GetById(mNZDto.EntityN.Id);
            IEntityZRepository entityZRepo = ApplicationLayer.IocContainer.Resolve<IEntityZRepository>();
            EntityZ entityZ = entityZRepo.GetById(mNZDto.EntityZ.Id);

            MNZ mNZ = MNZFactory.Create
            (
                entityM, entityN, entityZ
            );//*#*
                //.en Getting properties that comes from parent relationships
                //.es Obtenemos las propiedades que provienen the relaciones parentales.
            if (mNZDto.EntityM != null)
            {
                IEntityMRepository repoentityM = ApplicationLayer.IocContainer.Resolve<IEntityMRepository>();
                var entityMTemp = repoentityM.GetById(mNZDto.EntityM.Id);
                mNZ.SetEntityM(entityMTemp);
            }
            if (mNZDto.EntityN != null)
            {
                IEntityNRepository repoentityN = ApplicationLayer.IocContainer.Resolve<IEntityNRepository>();
                var entityNTemp = repoentityN.GetById(mNZDto.EntityN.Id);
                mNZ.SetEntityN(entityNTemp);
            }
            if (mNZDto.EntityZ != null)
            {
                IEntityZRepository repoentityZ = ApplicationLayer.IocContainer.Resolve<IEntityZRepository>();
                var entityZTemp = repoentityZ.GetById(mNZDto.EntityZ.Id);
                mNZ.SetEntityZ(entityZTemp);
            }

            try
            {
                this.ValueObjectRepository.Add(mNZ);
                this.Commit();
                var dtoResult = this.ValueObjectMapper.ValueObjectMapping(mNZ);
                return dtoResult;
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        #region Service Delete

        /// <summary>
        /// .es Elimina una determinada entidad MNZ.
        /// </summary>
        /// <param name="mNZDto">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public override bool Delete(MNZDto mNZDto)
        {
        // Comprobamos que el mNZDto no es nulo.
        Guard.ArgumentIsNotNull(
                                mNZDto,
                                string.Format(
                                                FrameworkResource.DataTransferObjectIsNull,
                                                CommonResources.MNZAlias));
            MNZ mNZ2Delete = AutoFactory(mNZDto);

            try
            {
                if(mNZ2Delete != null)
                {
                    this.ValueObjectRepository.Remove(mNZ2Delete);
                }
                else
                {
                    return false;
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                this.Commit();
            }

            return true;
        }

        /// <summary>
        /// .es Elimina las entidades MNZ seleccionadas por los ids del parametro.
        /// </summary>
        /// <param name="MNZs"></param>
        /// <returns></returns>
        public override IEnumerable<MNZDto> Delete(IEnumerable<MNZDto> MNZs)
        {
            foreach (var mNZDto in MNZs)
            {
                if ((!Delete(mNZDto)))
                {
                    yield return mNZDto;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificationDto"></param>
        /// <returns></returns>
        public override IEnumerable<MNZDto> Delete(SpecificationDto specificationDto)
        {
            var dtos2delete = GetFiltered(specificationDto);
            return Delete(dtos2delete);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override IEnumerable<MNZDto> DeleteAll()
        {
            List<MNZDto> result = new List<MNZDto>();

            try
            {
                var entities = this.ValueObjectRepository.RemoveAll();
                this.Commit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result.ToArray();
        }




        #endregion


        #region GetAll Method
        /// <summary>
        /// .es Recupera todas las entidades MNZ.
        /// </summary>
        /// <returns>
        /// Todas las entidades MNZ.
        /// </returns>
        public override IEnumerable<MNZDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<MNZDto>(0);

            try
            {
                var entities = this.ValueObjectRepository.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.ValueObjectMapper.ValueObjectMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }

        /// <summary>
        /// .es Recupera todas las instancias de MNZ excepto la indicada por el parametro. 
        /// </summary>
        /// <param name="mNZDto">.es Entidad a evitar.</param>
        /// <returns></returns>
        public override IEnumerable<MNZDto> GetAllExceptThis(MNZDto mNZDto)
        {
            IEnumerable<MNZ> domainObjs;
            try
            {
                MNZ dobj = AutoFactory(mNZDto);
                domainObjs = this.ValueObjectRepository.GetAllExceptThis(dobj);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                this.Commit();
            }

            foreach (var item in domainObjs)
            {
                yield return (this.ValueObjectMapper.ValueObjectMapping(item));
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="mNZIds"></param>
        /// <returns></returns>
        public override IEnumerable<MNZDto> GetAllExceptThese(IEnumerable<MNZDto> dtos )
        {
            List<MNZ> avoidedObjs = new List<MNZ>();
            IEnumerable<MNZ> entities;
            try
            {
                foreach (var item in dtos)
                {
                    var va = AutoFactory(item);
                    avoidedObjs.Add(va);
                }			
                entities = this.ValueObjectRepository.GetAllExceptThese(avoidedObjs);
                this.Commit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Mapeamos los datos. 
            foreach (var entity in entities)
            {
                yield return this.ValueObjectMapper.ValueObjectMapping(entity);
            }
        }
        #endregion



        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades MNZ, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'MNZ', según la especificación indicada.
        /// </returns>
        public override PagedElements<MNZDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "MNZ")); 
            #endregion
            List<MNZDto> result = new List<MNZDto>(0);
            int totalElements = 0;

            try
            {
                // Obtenemos las entidades aplicando la especificación.
                ISpecification<MNZ> filter =
                    specificationDto.ToSpecification<MNZ>();

                PagedElements<MNZ> entities =
                    this.ValueObjectRepository.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        valueObj => true,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.ValueObjectMapper.ValueObjectMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<MNZDto>(result, totalElements);
        }

        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="specificationDto"></param>
        ///// <returns></returns>
        //public override IEnumerable<MNZDto> GetFilteredValueObjects(SpecificationDto specificationDto)
        //{
        //    #region Preconditions
        //    // Comprobar el DTO de entrada.
        //    Guard.ArgumentIsNotNull(
        //                            specificationDto,
        //                            string.Format(
        //                                          FrameworkResource.EspecificationDataTransferObjectIsNull,
        //                                          "MNZ"));
        //    #endregion
        //
        //    List<MNZDto> result = new List<MNZDto>(0);
        //    try
        //    {
        //        // Obtenemos las entidades aplicando la especificación.
        //        ISpecification<MNZ> filter = specificationDto.ToSpecification<MNZ>();
        //        IEnumerable<MNZ> entities = this.ValueObjectRepository.GetFilteredElements(filter.IsSatisfiedBy());
        //        this.Commit();
        //
        //        entities.ToList()
        //            .ForEach(entity =>
        //            {
        //                var entityDto = this.EntityMapper.EntityMapping(entity);
        //                result.Add(entityDto);
        //            });
        //
        //
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }          
        //}


        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificationDto"></param>
        /// <returns></returns>
        public override IEnumerable<MNZDto> GetFiltered(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "MNZ"));
            #endregion

            List<MNZDto> result = new List<MNZDto>(0);
            try
            {
                // Obtenemos las entidades aplicando la especificación.
                ISpecification<MNZ> filter = specificationDto.ToSpecification<MNZ>();
                IEnumerable<MNZ> entities = ValueObjectRepository.GetFilteredElements(filter.IsSatisfiedBy());

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.ValueObjectMapper.ValueObjectMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();

            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return result;
        }

#endregion

        #region Private Duplicated data for precondition methods
        #endregion

        #region internal methods to help create service to map collections froms targets relationships

        #endregion



        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.


        #endregion

    } // class MNZ 

} //  Needel.Common.Application

