#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="EntityM" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Application;    
    using Needel.Common.Domain;
    using Needel.Common.Infrastructure;
    using Needel.Common.Infrastructure.Resources;
// Common

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// .en generated with ServiceHeaderClass.tt
    /// Administration services of the entity EntityM.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
    /// Representa los servicios de administración de la entidad EntityM.
    /// </summary>
    /// <remarks>
    /// .en Create an object of type <see cref="EntityM"/>.
    /// .es Crea un objeto <see cref="EntityM"/>.
    ///  permanent guid = 
    /// </remarks>
    public partial class EntityMServices : Inflexion2.Application.EfApplicationServicesBase<EntityMDto, EntityM, Int32>, IEntityMServices
    {

        #region Fields
        // Mappers of related entitites
        #endregion

        #region Constructors
        /// <summary>
        /// .es Inicializa una nueva instancia de la clase <see cref="T:EntityM>Service"/>.
        /// </summary>
        /// <remarks>
        /// .es Constructor de la clase <see cref="T:EntityMServices"/>.
        /// </remarks>
        public EntityMServices() : base()
        {
            this.EntityMapper = new EntityMMapper();
            this.EntityRepository = ApplicationLayer.IocContainer.Resolve<IEntityMRepository>();
        }
        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad EntityM.
        /// </summary>
        /// <param name="entityMDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public override Int32 Create(EntityMDto entityMDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    entityMDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    CommonResources.EntityMAlias));
            // Comprobar los campos mandatory dentro del DTO.
            Guard.ArgumentNotNullOrEmpty(
                                        entityMDto.Name,
                                        string.Format(
                                                        FrameworkResource.PropertyRequired,
                                                        CommonResources.EntityM_NameAlias, 
                                                        CommonResources.EntityMAlias)
                                        );

            #endregion

            // .en the dto has to be transient, so the Id has to have a default value.
            // .es el dto debe corresponder a un transient por lo que el id debe tener el valor por defecto
            Guard.Against<ArgumentException>(entityMDto.Id != default(Int32),                                    
                                                    string.Format(
                                                                FrameworkResource.IsNotTransient,
                                                                CommonResources.EntityMAlias
                                                                    )
                                            );



            EntityM entityM = EntityMFactory.Create
            (
                entityMDto.Name
            );//**
            this.EntityRepository.Add(entityM);
            this.Commit();

            return entityM.Id;
        }
        #endregion

        #region Service Delete

        /// <summary>
        /// .es Elimina una determinada entidad EntityM.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public override bool Delete(Int32 id)
        {
             IEnumerable<EntityM> results = this.EntityRepository.GetFilteredElements(u => u.Id == id);
            EntityM entityM2Delete = results.First();
            if (!entityM2Delete.CanBeDeleted())
            {
                return false;
            }


            try
            {
                this.EntityRepository.Remove(entityM2Delete);
                this.Commit();
            }
            catch (Exception)
            {

                return false;
            }

            return true;
        }

        /// <summary>
        /// .es Elimina las entidades EntityM seleccionadas por los ids del parametro.
        /// </summary>
        /// <param name="entityMIds"></param>
        /// <returns></returns>
        public override IEnumerable<Int32> Delete(IEnumerable<Int32> entityMIds)
        {
            foreach (var id in entityMIds)
            {
                if ((!Delete(id)))
                {
                    yield return id;
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificationDto"></param>
        /// <returns></returns>
        public override IEnumerable<Int32> Delete(SpecificationDto specificationDto)
        {
            var dtos2delete = GetFilteredEntities(specificationDto).Select(c => c.Id).ToList();
            return Delete(dtos2delete);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override IEnumerable<Int32> DeleteAll()
        {
            List<Int32> result = new List<Int32>();

            try
            {
                var entities = this.EntityRepository.RemoveAll();
                this.Commit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return result.ToArray();
        }




        #endregion


        #region GetAll Method
        /// <summary>
        /// .es Recupera todas las entidades EntityM.
        /// </summary>
        /// <returns>
        /// Todas las entidades EntityM.
        /// </returns>
        public override IEnumerable<EntityMDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<EntityMDto>(0);

            try
            {
                var entities = this.EntityRepository.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.EntityMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }

        /// <summary>
        /// .es Recupera todas las instancias de EntityM excepto la indicada por el parametro. 
        /// </summary>
        /// <param name="entityMId">.es Entidad a evitar.</param>
        /// <returns></returns>
        public override IEnumerable<EntityMDto> GetAllExceptThis(Int32 entityMId)
        {
            try
            {
                List<EntityMDto> result = new List<EntityMDto>(0);

                 IEnumerable<EntityM> entities = this.EntityRepository.GetAllExceptThis(entityMId);

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.EntityMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();

                // Devolver el resultado.
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="entityMIds"></param>
        /// <returns></returns>
        public override IEnumerable<EntityMDto> GetSelectedThese(IEnumerable<Int32> entityMIds)
        {
            try
            {
                List<EntityMDto> result = new List<EntityMDto>(0);

                IEnumerable<EntityM> entities = this.EntityRepository.GetSelectedThese(entityMIds);

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.EntityMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();

                // Devolver el resultado.
                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="entityMIds"></param>
        /// <returns></returns>
        public override IEnumerable<EntityMDto> GetAllExceptThese(IEnumerable<Int32> entityMIds )
        {
            IEnumerable<EntityM> entities;
            try
            {
                entities = this.EntityRepository.GetAllExceptThese(entityMIds);
                this.Commit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Mapeamos los datos. 
            foreach (var entity in entities)
            {
                yield return this.EntityMapper.EntityMapping(entity);
            }
        }
        #endregion


        #region service GetById
        /// <summary>
        /// .es Recupera una entidad EntityM mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
        /// .es Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// La entidad EntityM recuperada o valor nulo si no se encuentra.
        /// </returns>
        public override EntityMDto GetById(Int32 id)
        {
            // Variable de respuesta.
            EntityMDto entityDto = null;

            try
            {               
                var entity = this.EntityRepository.GetAggregateById(id); //TODO: call async
                entityDto = this.EntityMapper.EntityMapping(entity, true, true);
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                // Confirmamos la transacción.
                this.Commit();
            }

            // Devolvemos el resultado.
            return entityDto;
        }
        #endregion


        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades EntityM, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'EntityM', según la especificación indicada.
        /// </returns>
        public override PagedElements<EntityMDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "Entity M")); 
            #endregion
            List<EntityMDto> result = new List<EntityMDto>(0);
            int totalElements = 0;

            try
            {
                // Obtenemos las entidades aplicando la especificación.
                ISpecification<EntityM> filter =
                    specificationDto.ToSpecification<EntityM>();

                PagedElements<EntityM> entities =
                    this.EntityRepository.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        entity => entity.Id,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.EntityMapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<EntityMDto>(result, totalElements);
        }

        ///// <summary>
        ///// 
        ///// </summary>
        ///// <param name="specificationDto"></param>
        ///// <returns></returns>
        //public override IEnumerable<EntityMDto> GetFilteredEntities(SpecificationDto specificationDto)
        //{
        //    #region Preconditions
        //    // Comprobar el DTO de entrada.
        //    Guard.ArgumentIsNotNull(
        //                            specificationDto,
        //                            string.Format(
        //                                          FrameworkResource.EspecificationDataTransferObjectIsNull,
        //                                          "EntityM"));
        //    #endregion
        //
        //    List<EntityMDto> result = new List<EntityMDto>(0);
        //    try
        //    {
        //        // Obtenemos las entidades aplicando la especificación.
        //        ISpecification<EntityM> filter = specificationDto.ToSpecification<EntityM>();
        //        IEnumerable<EntityM> entities = this.EntityRepository.GetFilteredElements(filter.IsSatisfiedBy());
        //        this.Commit();
        //
        //        entities.ToList()
        //            .ForEach(entity =>
        //            {
        //                var entityDto = this.EntityMapper.EntityMapping(entity);
        //                result.Add(entityDto);
        //            });
        //
        //
        //        return result;
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }          
        //}


        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificationDto"></param>
        /// <returns></returns>
        public override IEnumerable<EntityMDto> GetFiltered(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "EntityM"));
            #endregion

            List<EntityMDto> result = new List<EntityMDto>(0);
            try
            {
                // Obtenemos las entidades aplicando la especificación.
                ISpecification<EntityM> filter = specificationDto.ToSpecification<EntityM>();
                IEnumerable<EntityM> entities = EntityRepository.GetFilteredElements(filter.IsSatisfiedBy());

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.EntityMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();

            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return result;
        }

#endregion

        #region Private Duplicated data for precondition methods
        #endregion

        #region internal methods to help create service to map collections froms targets relationships

        #endregion


        #region update
        // ServiceUpdateMethod.tt
        /// <summary>
        /// Actualiza una determinada entidad EntityM.
        /// </summary>
        /// <param name="entityMDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public override bool Update(EntityMDto entityMDto)
        {
            #region preconditions
            // Comprobar el DTO de entrada. 
            Guard.ArgumentIsNotNull(
                                    entityMDto,
                                    string.Format(
                                                  FrameworkResource.DataTransferObjectIsNull,
                                                  "Entity M"));
            // en una actualización no comprobamos los campos mandatory.
            #endregion            

            try
            {
                // Obtener y comprobar validez de la inserción a modificar.
                EntityM entity2Update = this.EntityRepository.GetFilteredElements(t => t.Id == entityMDto.Id).Single();
                Guard.ArgumentIsNotNull(
                                        entity2Update,
                                        string.Format(
                                                        FrameworkResource.CanNotUpdateInexistenceEntity,
                                                        "Entity M"));
                // Comprobar duplicidades;

                    // Actualización de la entidad.
                    entity2Update.Name = entityMDto.Name;

                // igualmente hemos de mapear las entidades emparentadas.

                if (!entity2Update.CanBeSaved())
                {
                    return false;
                }

                this.EntityRepository.Modify(entity2Update);
                this.Commit();
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolvemos el resultado.
            return true;
        }
        #endregion

        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.

        /// <summary>
        /// Función encargada de la añadir a la entidad EntityM una instancia de la propiedad NZs de tipo EntityM
        /// </summary>
        /// <param name="nZsDto"> de tipo MNZ</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool AddNZs(MNZDto nZsDto)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de borrar de la entidad EntityM una instancia de la colección NZs de tipo EntityM
        /// </summary>
        /// <param name="nZsDto"> de tipo EntityM</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool RemoveNZs(MNZDto nZsDto)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de actualizar de la entidad EntityM una instancia de la colección NZs de tipo EntityM
        /// </summary>
        /// <param name="nZsDto"> de tipo EntityM</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool UpdateNZs(MNZDto nZsDto)
        {
            // TODO: falta completar este metodo
            return false;
        }


        #endregion

    } // class EntityM 

} //  Needel.Common.Application

