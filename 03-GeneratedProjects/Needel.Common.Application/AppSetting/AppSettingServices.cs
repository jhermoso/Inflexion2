#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="AppSetting" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Application;    
    using Needel.Common.Domain;
    using Needel.Common.Infrastructure;
    using Needel.Common.Infrastructure.Resources;
// Common

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
	/// .en generated with ServiceHeaderClass.tt
	/// Administration services of the entity AppSetting.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
	/// Representa los servicios de administración de la entidad AppSetting.
    /// </summary>
    /// <remarks>
	/// .en Create an object of type <see cref="AppSetting"/>.
    /// .es Crea un objeto <see cref="AppSetting"/>.
	///  permanent guid = 
    /// </remarks>
    public partial class AppSettingServices : /*Needel.Common.Application.EfApplicationServiceBase,*/ IAppSettingServices
    {

        #region Fields
        /// <summary>
        /// Referencia al mapeador de la entidad AppSetting.
        /// </summary>
        private readonly IAppSettingMapper appSettingMapper;

        // <summary>
        // Referencia a la factoría de repositorios de la entidad AppSetting.
        // </summary>
        //private readonly AppSettingRepositoryFactory appSettingRepositoryFactory;

        // <summary>
        // referencia a la unidad de trabajo
        // </summary>
		private IUnitOfWork unitOfWork;
        // Lista de factorias de repositorios de entidades relacionadas
        #endregion

        #region Constructors
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:AppSetting>Service"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:AppSettingServices"/>.
        /// </remarks>
        public AppSettingServices() : base()
        {
  
            this.appSettingMapper = new AppSettingMapper();
        }

        #endregion


        #region Private Properties
        /// <summary>
        /// Obtiene la referencia al mapeador de la entidad <see cref="T:IAppSetting"/>.
        /// </summary>
        private IAppSettingMapper AppSettingMapper
        {
            get { return this.appSettingMapper; }
        }

        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad <see cref="T:AppSetting"/>.
        // </summary>
        //private AppSettingRepositoryFactory AppSettingRepositoryFactory
        //{
            //get { return this.appSettingRepositoryFactory; }
        //}

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad AppSetting.
        /// </summary>
        /// <param name="appSettingDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public int Create(AppSettingDto appSettingDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    appSettingDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    CommonResources.AppSettingAlias));
            // Comprobar los campos mandatory dentro del DTO.
            Guard.ArgumentNotNullOrEmpty(
                                        appSettingDto.Key,
                                        string.Format(
                                                        FrameworkResource.PropertyRequired,
                                                        CommonResources.AppSetting_KeyAlias, 
                                                        CommonResources.AppSettingAlias)
                                        );

            Guard.ArgumentNotNullOrEmpty(
                                        appSettingDto.Value,
                                        string.Format(
                                                        FrameworkResource.PropertyRequired,
                                                        CommonResources.AppSetting_ValueAlias, 
                                                        CommonResources.AppSettingAlias)
                                        );

            #endregion

            #region Preconditions from composition sources
                Guard.ArgumentIsNotNull(
                                    appSettingDto.AppSettingUsing,
                                    string.Format(
                                                FrameworkResource.DataTransferObjectIsNull,
                                                CommonResources.AppSetting_AppSettingUsingAlias_));

            #endregion
            // .en the dto has to be transient, so the Id has to have a default value.
            // .es el dto debe corresponder a un transient por lo que el id debe tener el valor por defecto
            Guard.Against<ArgumentException>(appSettingDto.Id != default(Int32),                                    
                                                    string.Format(
                                                                FrameworkResource.IsNotTransient,
                                                                CommonResources.AppSettingAlias
                                                                    )
                                            );

            AppSetting appSetting = AppSettingFactory.Create
            (
                appSettingDto.Key, appSettingDto.Value,
                appSettingDto.AppSettingUsing 
            );

                appSetting.SetRemark ( appSettingDto.Remark ); // property.AutoProperty = False; property.OnlyGetProperty = True
                // .en Getting properties that comes from parent relationships
                // .es Obtenemos las propiedades que provienen the relaciones parentales.
            IAppSettingRepository repo =  ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();
            repo.Add(appSetting);
            this.Commit();

            return appSetting.Id; 
        }
        #endregion

        #region Service Delete
        /// <summary>
        /// Elimina una determinada entidad AppSetting.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Delete(int id)
        {
            IAppSettingRepository repo = ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();
            IEnumerable<AppSetting> results = repo.GetFilteredElements(u => u.Id == id);
            AppSetting appSetting2Delete = results.First();
            if (!appSetting2Delete.CanBeDeleted())
            {
                return false;
            }
            repo.Remove(appSetting2Delete);
            this.Commit();

            return true;
        }
        #endregion


        #region GetAll Method
        /// <summary>
        /// Recupera todas las entidades AppSetting.
        /// </summary>
        /// <returns>
        /// Todas las entidades AppSetting.
        /// </returns>
        public IEnumerable<AppSettingDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<AppSettingDto>(0);

            try
            {
                IAppSettingRepository repo = ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();
                var entities = repo.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.AppSettingMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }
        #endregion


        #region service GetById
        /// <summary>
        /// .es Recupera una entidad AppSetting mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
        /// .es Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// La entidad AppSetting recuperada o valor nulo si no se encuentra.
        /// </returns>
        public AppSettingDto GetById(Int32 id)
        {
            // Variable de respuesta.
            AppSettingDto entityDto = null;

            try
            {               
                IAppSettingRepository repo = ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();
				var entity = repo.GetById(id); //TODO: call async
                entityDto = this.AppSettingMapper.EntityMapping(entity);
            }
            catch (Exception ex)
            {
                throw ex;
			}
            finally
            {
                // Confirmamos la transacción.
                this.Commit();
            }

            // Devolvemos el resultado.
            return entityDto;
        }
        #endregion


        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades AppSetting, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'AppSetting', según la especificación indicada.
        /// </returns>
        public PagedElements<AppSettingDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "App Setting")); 
            #endregion
            List<AppSettingDto> result = new List<AppSettingDto>(0);
            int totalElements = 0;

            try
            {
                // Creamos el repositorio de la entidad.
                IAppSettingRepository repoAppSetting = ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();

                // Obtenemos las entidades aplicando la especificación.
                ISpecification<AppSetting> filter =
                    specificationDto.ToSpecification<AppSetting>();

                PagedElements<AppSetting> entities =
                    repoAppSetting.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        entity => entity.Id,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.appSettingMapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<AppSettingDto>(result, totalElements);
        }
#endregion

        #region Private Duplicated data for precondition methods
        #endregion

        #region internal methods to help create service to map collections froms targets relationships

        #endregion


        #region update
        // ServiceUpdateMethod.tt
        /// <summary>
        /// Actualiza una determinada entidad AppSetting.
        /// </summary>
        /// <param name="appSettingDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Update(AppSettingDto appSettingDto)
        {
            #region preconditions
            // Comprobar el DTO de entrada. 
            Guard.ArgumentIsNotNull(
                                    appSettingDto,
                                    string.Format(
                                                  FrameworkResource.DataTransferObjectIsNull,
                                                  "App Setting"));
            // en una actualización no comprobamos los campos mandatory.
            #endregion            

            try
            {
                // Creamos el repositorio de la entidad.
                IAppSettingRepository repoAppSetting = ApplicationLayer.IocContainer.Resolve<IAppSettingRepository>();

                // Obtener y comprobar validez de la inserción a modificar.
               AppSetting entity2Update = repoAppSetting.GetFilteredElements(t => t.Id == appSettingDto.Id).Single();
                Guard.ArgumentIsNotNull(
                                        entity2Update,
                                        string.Format(
                                                        FrameworkResource.CanNotUpdateInexistenceEntity,
                                                        "App Setting"));
                // Comprobar duplicidades;

                    // Actualización de la entidad.
                    // Mandatory data
                    entity2Update.Key = appSettingDto.Key;
                    entity2Update.Value = appSettingDto.Value;
					// .en Updating properties that comes from parent relationships
					// .es Actualizamos las propiedades que provienen the relaciones parentales.
                    entity2Update.SetAppSettingUsing(appSettingDto.AppSettingUsing);
                    // asignación de Datos no mandatory con ciclo de vida variable, no se incluyen aquellas propiedaes constantes o derivadas
                    entity2Update.SetRemark ( appSettingDto.Remark ); // property.AutoProperty = False; property.OnlyGetProperty = True

                // igualmente hemos de mapear las entidades emparentadas.
                if (!entity2Update.CanBeSaved())
                {
                    return false;
                }
                repoAppSetting.Modify(entity2Update);

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolvemos el resultado.
            return true;
        }
        #endregion

        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.


        #endregion


        /// <summary>
        /// adapter of commit operation independent form the ORM
        /// </summary>
        public void Commit()
        {
            if (unitOfWork == null) unitOfWork = ApplicationLayer.IocContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }

    } // class AppSetting 

} //  Needel.Common.Application

