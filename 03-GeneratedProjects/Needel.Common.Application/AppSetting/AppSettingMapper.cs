#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="AppSetting" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityMapperCT.tt" with "public class ApplicationEntityMapperCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityMapperCT.tt" con "public class ApplicationEntityMapperCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{

	#region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
	using Inflexion2;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Domain;
	#endregion

    /// <summary>
	/// .en mapping class from entity to dto <see cref="AppSettingMapper"/>
    /// .es Clase pública encargada de mapear los datos de una entidad <see cref="AppSettingMapper"/>.
    /// </summary>
    public class AppSettingMapper : IAppSettingMapper
    {
        #region CONSTRUCTORS
        /// <summary>
		/// .en Get an instance of <see cref="AppSettingMapper"/>
        /// .es Inicializa una nueva instancia de la clase <see cref="AppSettingMapper"/>.
        /// </summary>
        public AppSettingMapper()
        {
        } // AppSettingMapper Constructor
        #endregion

        #region FUNCTIONS

          /// <summary>
		  /// .en public function mapping from entity to dto
          /// .es Función pública que mapea las entidades para devolver el
          /// correspondiente Dto.
          /// </summary>
          /// <param name="entityAppSetting">
          /// .es Objeto de la entidad <see cref="AppSetting"/>.
          /// </param>
          /// <exception cref="System.ArgumentNullException">
		  /// .en exception when there is a null value in the parameter.
          /// .es Lanzada cuando el valor de <c>entityAppSetting</c> es null.
          /// </exception>
          /// <returns>
		  /// .en returns an object of type <see cref="AppSettingDto"/>
          /// .es Devuelve un objeto de tipo <see cref="AppSettingDto"/> 
          /// con los datos mapeados.
          /// </returns>
          public AppSettingDto EntityMapping(IAppSetting entityAppSetting)
          {
		    // .en checking parameters
            // .es Comprobamos el valor del argumento de entrada.
            if (entityAppSetting == null)
            {
				// .en Error, throwing exception.
                // .es Error, lanzamos la excepción.
                throw new System.ArgumentNullException("entityAppSetting");
            }
            else
            {
				// .en Answer object
                // .es Objeto de respuesta.
                AppSettingDto dtoAppSetting = new AppSettingDto();
				// .en Mapping simple/main properties
                // .es Mapeamos cada propiedad.
                dtoAppSetting.Id = entityAppSetting.Id;
                dtoAppSetting.Key = entityAppSetting.Key;
                dtoAppSetting.Value = entityAppSetting.Value;
                dtoAppSetting.Remark = entityAppSetting.Remark;
				// .en Properties Mapping that comes from parent relationships
				// .es Mapeado de propiedades que provienen the relaciones parentales.
				dtoAppSetting.AppSettingUsing = entityAppSetting.AppSettingUsing;

				// .en return mapped object
                // .es Devolvemos el resultado.
                return dtoAppSetting;
            }
          } // EntityMapping
        
        #endregion
    } // end class AppSettingMapper
} //  Needel.Common.Application


