#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Address" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Application;    
    using Needel.Common.Domain;
    using Needel.Common.Infrastructure;
    using Needel.Common.Infrastructure.Resources;
// Common

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
	/// .en generated with ServiceHeaderClass.tt
	/// Administration services of the entity Address.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
	/// Representa los servicios de administración de la entidad Address.
    /// </summary>
    /// <remarks>
	/// .en Create an object of type <see cref="Address"/>.
    /// .es Crea un objeto <see cref="Address"/>.
	///  permanent guid = 
    /// </remarks>
    public partial class AddressServices : /*Needel.Common.Application.EfApplicationServiceBase,*/ IAddressServices
    {

        #region Fields
        /// <summary>
        /// Referencia al mapeador de la entidad Address.
        /// </summary>
        private readonly IAddressMapper addressMapper;

        // <summary>
        // Referencia a la factoría de repositorios de la entidad Address.
        // </summary>
        //private readonly AddressRepositoryFactory addressRepositoryFactory;

        // <summary>
        // referencia a la unidad de trabajo
        // </summary>
		private IUnitOfWork unitOfWork;
        #endregion

        #region Constructors
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:Address>Service"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:AddressServices"/>.
        /// </remarks>
        public AddressServices() : base()
        {
  
            this.addressMapper = new AddressMapper();
        }

        #endregion


        #region Private Properties
        /// <summary>
        /// Obtiene la referencia al mapeador de la entidad <see cref="T:IAddress"/>.
        /// </summary>
        private IAddressMapper AddressMapper
        {
            get { return this.addressMapper; }
        }

        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad <see cref="T:Address"/>.
        // </summary>
        //private AddressRepositoryFactory AddressRepositoryFactory
        //{
            //get { return this.addressRepositoryFactory; }
        //}

        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad Address.
        /// </summary>
        /// <param name="addressDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public int Create(AddressDto addressDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    addressDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    CommonResources.AddressAlias));
            // Comprobar los campos mandatory dentro del DTO.
            #endregion

            // .en the dto has to be transient, so the Id has to have a default value.
            // .es el dto debe corresponder a un transient por lo que el id debe tener el valor por defecto
            Guard.Against<ArgumentException>(addressDto.Id != default(Int32),                                    
                                                    string.Format(
                                                                FrameworkResource.IsNotTransient,
                                                                CommonResources.AddressAlias
                                                                    )
                                            );

            Address address = AddressFactory.Create
            (
                
            );

                address.StreetName = addressDto.StreetName; // property.AutoProperty = True; property.OnlyGetProperty = False
                address.BuildingNumber = addressDto.BuildingNumber; // property.AutoProperty = True; property.OnlyGetProperty = False
            IAddressRepository repo =  ApplicationLayer.IocContainer.Resolve<IAddressRepository>();
            repo.Add(address);
            this.Commit();

            return address.Id; 
        }
        #endregion

        #region Service Delete
        /// <summary>
        /// Elimina una determinada entidad Address.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Delete(int id)
        {
            IAddressRepository repo = ApplicationLayer.IocContainer.Resolve<IAddressRepository>();
            IEnumerable<Address> results = repo.GetFilteredElements(u => u.Id == id);
            Address address2Delete = results.First();
            repo.Remove(address2Delete);
            this.Commit();

            return true;
        }
        #endregion


        #region GetAll Method
        /// <summary>
        /// Recupera todas las entidades Address.
        /// </summary>
        /// <returns>
        /// Todas las entidades Address.
        /// </returns>
        public IEnumerable<AddressDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<AddressDto>(0);

            try
            {
                IAddressRepository repo = ApplicationLayer.IocContainer.Resolve<IAddressRepository>();
                var entities = repo.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.AddressMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }
        #endregion


        #region service GetById
        /// <summary>
        /// .es Recupera una entidad Address mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
        /// .es Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// La entidad Address recuperada o valor nulo si no se encuentra.
        /// </returns>
        public AddressDto GetById(Int32 id)
        {
            // Variable de respuesta.
            AddressDto entityDto = null;

            try
            {               
                IAddressRepository repo = ApplicationLayer.IocContainer.Resolve<IAddressRepository>();
				var entity = repo.GetById(id); //TODO: call async
                entityDto = this.AddressMapper.EntityMapping(entity);
            }
            catch (Exception ex)
            {
                throw ex;
			}
            finally
            {
                // Confirmamos la transacción.
                this.Commit();
            }

            // Devolvemos el resultado.
            return entityDto;
        }
        #endregion


        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades Address, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'Address', según la especificación indicada.
        /// </returns>
        public PagedElements<AddressDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "Address")); 
            #endregion
            List<AddressDto> result = new List<AddressDto>(0);
            int totalElements = 0;

            try
            {
                // Creamos el repositorio de la entidad.
                IAddressRepository repoAddress = ApplicationLayer.IocContainer.Resolve<IAddressRepository>();

                // Obtenemos las entidades aplicando la especificación.
                ISpecification<Address> filter =
                    specificationDto.ToSpecification<Address>();

                PagedElements<Address> entities =
                    repoAddress.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        entity => entity.Id,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.addressMapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<AddressDto>(result, totalElements);
        }
#endregion

        #region Private Duplicated data for precondition methods
        #endregion



        #region update
        // ServiceUpdateMethod.tt
        /// <summary>
        /// Actualiza una determinada entidad Address.
        /// </summary>
        /// <param name="addressDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Update(AddressDto addressDto)
        {
            #region preconditions
            // Comprobar el DTO de entrada. 
            Guard.ArgumentIsNotNull(
                                    addressDto,
                                    string.Format(
                                                  FrameworkResource.DataTransferObjectIsNull,
                                                  "Address"));
            // en una actualización no comprobamos los campos mandatory.
            #endregion            

            try
            {
                // Creamos el repositorio de la entidad.
                IAddressRepository repoAddress = ApplicationLayer.IocContainer.Resolve<IAddressRepository>();

                // Obtener y comprobar validez de la inserción a modificar.
               Address entity2Update = repoAddress.GetFilteredElements(t => t.Id == addressDto.Id).Single();
                Guard.ArgumentIsNotNull(
                                        entity2Update,
                                        string.Format(
                                                        FrameworkResource.CanNotUpdateInexistenceEntity,
                                                        "Address"));
                // Comprobar duplicidades;

                    // Actualización de la entidad.
                    // Mandatory data
                    // asignación de Datos no mandatory con ciclo de vida variable, no se incluyen aquellas propiedaes constantes o derivadas
                    entity2Update.StreetName = addressDto.StreetName; // property.AutoProperty = True; property.OnlyGetProperty = False
                    entity2Update.BuildingNumber = addressDto.BuildingNumber; // property.AutoProperty = True; property.OnlyGetProperty = False

                // igualmente hemos de mapear las entidades emparentadas.
                repoAddress.Modify(entity2Update);

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolvemos el resultado.
            return true;
        }
        #endregion

        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.


        #endregion


        /// <summary>
        /// adapter of commit operation independent form the ORM
        /// </summary>
        public void Commit()
        {
            if (unitOfWork == null) unitOfWork = ApplicationLayer.IocContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }

    } // class Address 

} //  Needel.Common.Application

