#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Address" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesCoreCT.tt" with "public class ApplicationEntityServicesCoreCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesCoreCT.tt" con "public class ApplicationEntityServicesCoreCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    using System.Collections.Generic;
    using System;
	using Inflexion2.Domain;
    using Inflexion2.Application;

    using Needel.Common.Application.Dtos;

    /// <summary>
	///  .en Define the contract for the entity's administration services.
    ///  .es Define el contrato para los servicios de administración de la entidad.
    /// de tipo <see cref="Needel.Common.Application.IAddressServices"/>.
    /// </summary>
    public interface IAddressServices 
    {
        #region Methods
        /// <summary>
		/// .en Create an entity of type IAddress.
        /// .es Función encargada de la creación de una entidad de tipo IAddress.
        /// </summary>
        /// <param name="addressDto">
        /// Parámetro de tipo <see cref="AddressDto"/> con los datos necesarios
        /// para la creación de la entidad Address.
        /// </param>        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor de alguno de los argumentos de entrada es <b>null</b>.
        /// </exception>
        /// <returns>
        /// Devuelve el identificador único de la entidad creada.
        /// </returns>
        Int32 Create( AddressDto addressDto);

        /// <summary>
        /// Función encargada del borrado de una entidad de tipo Address.
        /// </summary>
        /// <remarks>
        /// Se trata de un borrado lógico.
        /// </remarks>
        /// <param name="AddressId">
        /// Parámetro que indica el identificador único de la entidad.
        /// </param>        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor del argumento de entrada <c>userContextDto</c> es <b>null</b>.
        /// </exception>
        /// <returns>
        /// Devuelve <b>True</b> si la eliminación ha sido correcta y
        /// <b>False</b> en caso contrario.
        /// </returns>
        bool Delete( Int32 AddressId);

        /// <summary>
        /// Función encargada de obtener todas las entidades de tipo Address.
        /// </summary>
        /// <remarks>
        /// Devuelve la totalidad de las entidades.
        /// </remarks>        /// <returns>
        /// Devuelve listado de Dto´s de tipo <see cref="AddressDto"/>.
        /// </returns>
        IEnumerable<AddressDto> GetAll( );

        /// <summary>
        /// Recupera una lista paginada de entidades Address, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>        /// <returns>
        /// La lista paginada de entidades Address, según la especificación indicada.
        /// </returns>
        PagedElements<AddressDto> GetPaged(SpecificationDto specificationDto);

        /// <summary>
        /// Función encargada de obtener una entidad Address de acuerdo a
        /// su identificador.
        /// </summary>
        /// <param name="addressId">
        /// Parámetro que indica el identificador único de la entidad.
        /// </param>
        /// <returns>
        /// Devuelve objeto Dto <see cref="AddressDto"/> con la información requerida.
        /// </returns>
        AddressDto GetById( Int32 addressId);

        /// <summary>
        /// Actualiza una determinada entidad Address.
        /// </summary>
        /// <param name="addressDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        bool Update(AddressDto addressDto);

        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.

        #endregion

    } // end class ICreateAddress
} //  Needel.Common.Application

