#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Teacher" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityMapperCT.tt" with "public class ApplicationEntityMapperCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityMapperCT.tt" con "public class ApplicationEntityMapperCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{

    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Inflexion2;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Domain;
    #endregion

    /// <summary>
    /// .en mapping class from Entity to dto <see cref="TeacherMapper"/>
    /// .es Clase pública encargada de mapear los datos de una entidad <see cref="TeacherMapper"/>.
    /// </summary>
    public class TeacherMapper : ITeacherMapper
    {
        #region Fields parent mappers
        private Needel.Common.Application.IStudentMapper studentDtoMapper;
        #endregion

        #region Fields children mappers
        #endregion

        #region CONSTRUCTORS
        /// <summary>
        /// .en Get an instance of <see cref="TeacherMapper"/>
        /// .es Inicializa una nueva instancia de la clase <see cref="TeacherMapper"/>.
        /// </summary>
        public TeacherMapper()
        {
        }
        #endregion

        #region Properties parent mappers
        /// <summary>
        /// Mapper for Parent
        /// </summary>
        protected Needel.Common.Application.IStudentMapper StudentDtoMapper
        {
            get
            {
                if (studentDtoMapper == null) studentDtoMapper = new StudentMapper();
                return studentDtoMapper;
            }
        }

        #endregion

        #region Properties children mappers
        #endregion

        #region FUNCTIONS
        /// <summary>
        /// Default constructor parameters
        /// </summary>
        /// <param name="entityTeacher"></param>
        /// <returns></returns>
        public TeacherDto EntityMapping(Teacher entityTeacher)
        {
            if (entityTeacher == null)
            {
                return null;
            }

            return EntityMapping(entityTeacher, true, false);
        }

        /// <summary>
        /// .en public function mapping from Entity to dto
        /// </summary>
        /// <param name="entityTeacher">
        /// </param>
        /// <param name="mapParents">
        /// .en option to map parent objects
        /// </param>
        /// <param name="mapChildren">
        /// .en option to map children objects
        /// </param>
        /// <returns>
        /// .en returns an DTO of type <see cref="TeacherDto"/>
        /// </returns>
        public TeacherDto EntityMapping(Teacher entityTeacher, bool mapParents , bool mapChildren)
        {
            if (entityTeacher == null)
            {
                return null;
            }

            TeacherDto dtoTeacher = new TeacherDto();
            dtoTeacher.Id = entityTeacher.Id;
            dtoTeacher.Name = entityTeacher.Name;

            if (mapChildren)
            {
                if (entityTeacher.Students != null)
                {
                    foreach (var item in entityTeacher.Students)
                    {
                        var childDto = StudentDtoMapper.EntityMapping(item, false, false);
                        if (childDto != null)
                        {
                            dtoTeacher.Students.Add(childDto);
                        }
                    }
                }
            }

            return dtoTeacher;
        } // EntityMapping
        #endregion
    } // end class TeacherMapper
} //  Needel.Common.Application
