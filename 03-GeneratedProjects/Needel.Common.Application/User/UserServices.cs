#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityServicesBaseCT.tt" with "public class ApplicationEntityServicesBaseCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityServicesBaseCT.tt" con "public class ApplicationEntityServicesBaseCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{
    #region usings 

    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Text;
    using System.Globalization;
    using System.Reflection;
    using System.Data.Entity;
    using System.Configuration;

    using Microsoft.Practices.Unity;

    using Inflexion2.Domain;
    using Inflexion2.Application;
    using Inflexion2;
    using Inflexion2.Domain.Specification;
    using Inflexion2.Logging;
    using Inflexion2.Data;
    using Inflexion2.Resources;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Application;    
    using Needel.Common.Domain;
    using Needel.Common.Infrastructure;
    using Needel.Common.Infrastructure.Resources;
// Common

    using System.ComponentModel.DataAnnotations;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
	/// .en generated with ServiceHeaderClass.tt
	/// Administration services of the entity User.
    /// .es geenrado con la plantilla ServiceHeaderClass.tt
	/// Representa los servicios de administración de la entidad User.
    /// </summary>
    /// <remarks>
	/// .en Create an object of type <see cref="User"/>.
    /// .es Crea un objeto <see cref="User"/>.
	///  permanent guid = 
    /// </remarks>
    public partial class UserServices : /*Needel.Common.Application.EfApplicationServiceBase,*/ IUserServices
    {

        #region Fields
        /// <summary>
        /// Referencia al mapeador de la entidad User.
        /// </summary>
        private readonly IUserMapper userMapper;

        // <summary>
        // Referencia a la factoría de repositorios de la entidad User.
        // </summary>
        //private readonly UserRepositoryFactory userRepositoryFactory;

        // <summary>
        // referencia a la unidad de trabajo
        // </summary>
		private IUnitOfWork unitOfWork;
        // Lista de factorias de repositorios de entidades relacionadas
        /// <summary>
        /// Referencia a la factoría de repositorios de la entidad department.
        /// </summary>
        //static IDepartmentRepositoryFactory departmentRepositoryFactory;
        /// <summary>
        /// Referencia a la factoría de repositorios de la entidad address.
        /// </summary>
        //static IAddressRepositoryFactory addressesRepositoryFactory;
        #endregion

        #region Constructors
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:User>Service"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:UserServices"/>.
        /// </remarks>
        public UserServices() : base()
        {
  
            this.userMapper = new UserMapper();
        }

        #endregion


        #region Private Properties
        /// <summary>
        /// Obtiene la referencia al mapeador de la entidad <see cref="T:IUser"/>.
        /// </summary>
        private IUserMapper UserMapper
        {
            get { return this.userMapper; }
        }

        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad <see cref="T:User"/>.
        // </summary>
        //private UserRepositoryFactory UserRepositoryFactory
        //{
            //get { return this.userRepositoryFactory; }
        //}

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad Department.
        // </summary>
        //private DepartmentRepositoryFactory DepartmentRepositoryFactory 
            //{
                    //get 
                //{
                    //return UserServices.departmentRepositoryFactory ?? (UserServices.departmentRepositoryFactory = ManagerIoC.Container.Resolve<DepartmentRepositoryFactory>() );
                //}
            //}
        #endregion

        #region Propiedades procedentes de los roles de tipo 'target' en una asociación
        // <summary>
        // Obtiene la referencia a la factoría de repositorios de la entidad Addresses.
        // </summary>
        //public AddressRepositoryFactory AddressesRepositoryFactory 
        //{ 
            //get
            //{
                //// Si es null, lo instanciamos y devolvemos, sino, solo lo devolvemos
                //return UserServices.addressesRepositoryFactory ?? (UserServices.addressesRepositoryFactory = ManagerIoC.Container.Resolve<AddressRepositoryFactory>() ); 
            //}
        //}
        #endregion

        #region Create Method
        // from template Application\UpdateBase\I2ServiceRegionCreateMethod.tt

        /// <summary>
        /// Crea una entidad User.
        /// </summary>
        /// <param name="userDto">
        /// DTO que contiene la información para crear la entidad.
        /// </param>
        /// <returns>
        /// El identificador de la entidad creada.
        /// </returns>
        public int Create(UserDto userDto)
        {

            #region Preconditions

            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    userDto,
                                    string.Format(
                                                    FrameworkResource.DataTransferObjectIsNull,
                                                    CommonResources.UserAlias));
            // Comprobar los campos mandatory dentro del DTO.
            Guard.ArgumentNotNullOrEmpty(
                                        userDto.Name,
                                        string.Format(
                                                        FrameworkResource.PropertyRequired,
                                                        CommonResources.User_NameAlias, 
                                                        CommonResources.UserAlias)
                                        );

            #endregion

            // .en the dto has to be transient, so the Id has to have a default value.
            // .es el dto debe corresponder a un transient por lo que el id debe tener el valor por defecto
            Guard.Against<ArgumentException>(userDto.Id != default(Int32),                                    
                                                    string.Format(
                                                                FrameworkResource.IsNotTransient,
                                                                CommonResources.UserAlias
                                                                    )
                                            );

            User user = UserFactory.Create
            (
                userDto.Name
            );

                // .en Getting properties that comes from parent relationships
                // .es Obtenemos las propiedades que provienen the relaciones parentales.
            if (userDto.Department != null)
            {
                IDepartmentRepository repodepartment = ApplicationLayer.IocContainer.Resolve<IDepartmentRepository>();
                var department = repodepartment.GetById(userDto.Department.Id);
                user.SetDepartment(department);
            }

            // getting properties from strong composition source multiplicity 1:1 to target multiplicity 1:N
            Address address = AddressFactory.Create();
            address.StreetName = userDto.Addresses.First().StreetName;
            address.BuildingNumber = userDto.Addresses.First().BuildingNumber;

            user.Addresses.Add(address);

            IUserRepository repo =  ApplicationLayer.IocContainer.Resolve<IUserRepository>();
            repo.Add(user);
            this.Commit();

            return user.Id; 
        }
        #endregion

        #region Service Delete
        /// <summary>
        /// Elimina una determinada entidad User.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Delete(int id)
        {
            IUserRepository repo = ApplicationLayer.IocContainer.Resolve<IUserRepository>();
            IEnumerable<User> results = repo.GetFilteredElements(u => u.Id == id);
            User user2Delete = results.First();
            repo.Remove(user2Delete);
            this.Commit();

            return true;
        }
        #endregion


        #region GetAll Method
        /// <summary>
        /// Recupera todas las entidades User.
        /// </summary>
        /// <returns>
        /// Todas las entidades User.
        /// </returns>
        public IEnumerable<UserDto> GetAll()
        {
            // .en answer variable
            // .es Variable de respuesta.
            // list new cosntructor (int32) initial size http://msdn.microsoft.com/en-us/library/dw8e0z9z(v=vs.110).aspx
            var result = new List<UserDto>(0);

            try
            {
                IUserRepository repo = ApplicationLayer.IocContainer.Resolve<IUserRepository>();
                var entities = repo.GetAll();
                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                        {
                            var entityDto = this.UserMapper.EntityMapping(entity);
                            result.Add(entityDto);
                        });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver resultado.
            return result;
        }
        #endregion


        #region service GetById
        /// <summary>
        /// .es Recupera una entidad User mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
        /// .es Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// La entidad User recuperada o valor nulo si no se encuentra.
        /// </returns>
        public UserDto GetById(Int32 id)
        {
            // Variable de respuesta.
            UserDto entityDto = null;

            try
            {               
                IUserRepository repo = ApplicationLayer.IocContainer.Resolve<IUserRepository>();
				var entity = repo.GetById(id); //TODO: call async
                entityDto = this.UserMapper.EntityMapping(entity);
            }
            catch (Exception ex)
            {
                throw ex;
			}
            finally
            {
                // Confirmamos la transacción.
                this.Commit();
            }

            // Devolvemos el resultado.
            return entityDto;
        }
        #endregion


        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades User, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades 'User', según la especificación indicada.
        /// </returns>
        public PagedElements<UserDto> GetPaged(SpecificationDto specificationDto)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  FrameworkResource.EspecificationDataTransferObjectIsNull,
                                                  "User")); 
            #endregion
            List<UserDto> result = new List<UserDto>(0);
            int totalElements = 0;

            try
            {
                // Creamos el repositorio de la entidad.
                IUserRepository repoUser = ApplicationLayer.IocContainer.Resolve<IUserRepository>();

                // Obtenemos las entidades aplicando la especificación.
                ISpecification<User> filter =
                    specificationDto.ToSpecification<User>();

                PagedElements<User> entities =
                    repoUser.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
                                                        entity => entity.Id,
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.userMapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<UserDto>(result, totalElements);
        }
#endregion

        #region Private Duplicated data for precondition methods
        #endregion

        #region internal methods to help create service to map collections froms targets relationships

            /// <summary>
            /// Método encargado de obtener una <see cref="Address"/> a partir 
            /// de su identificador.
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="addressId">
            /// Parámetro que indica el identificador único de la entidad a obtener.
            /// </param>
            /// <returns>
            /// Devuelve la entidad <see cref="Address"/> según el identificador.
            /// </returns>
            internal Address GetAddressById(Int32 addressId)
            {
// TODO, completar este metodo y cambiar los parametros añadiendo la entidad sobre la que se aplica.
                //// Unidad de trabajo para el acceso a datos.
                //using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional())
                //{
                    //// Buscamos la entidad por el Id.
                    //AddressRepository addressRepository = this.AddressesRepositoryFactory.Create(unitOfWork);
                    //Address address = addressRepository.GetById(addressId);
                    //// Validamos que exista la entidad.
                    //Guard.ArgumentIsNotNull(
                                            //address,
                                            //string.Format(
                                                          //CoreResources.Neutral.NoHayDatosPorId,
                                                          //CommonResources.AddressAlias));
//
                    //// Confirmamos la transacción.
                    //unitOfWork.CommitTransaction();
                    //// Devolvemos la respuesta.
                    //return address;
                //}
                return null;
            } // GetAddressById

        #endregion


        #region update
        // ServiceUpdateMethod.tt
        /// <summary>
        /// Actualiza una determinada entidad User.
        /// </summary>
        /// <param name="userDto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Update(UserDto userDto)
        {
            #region preconditions
            // Comprobar el DTO de entrada. 
            Guard.ArgumentIsNotNull(
                                    userDto,
                                    string.Format(
                                                  FrameworkResource.DataTransferObjectIsNull,
                                                  "User"));
            // en una actualización no comprobamos los campos mandatory.
            #endregion            

            try
            {
                // Creamos el repositorio de la entidad.
                IUserRepository repoUser = ApplicationLayer.IocContainer.Resolve<IUserRepository>();

                // Obtener y comprobar validez de la inserción a modificar.
               User entity2Update = repoUser.GetFilteredElements(t => t.Id == userDto.Id).Single();
                Guard.ArgumentIsNotNull(
                                        entity2Update,
                                        string.Format(
                                                        FrameworkResource.CanNotUpdateInexistenceEntity,
                                                        "User"));
                // Comprobar duplicidades;

                    // Actualización de la entidad.
                    // Mandatory data
                    entity2Update.Name = userDto.Name;
					// .en Updating properties that comes from parent relationships
					// .es Actualizamos las propiedades que provienen the relaciones parentales.
					if (entity2Update.Department.Id != userDto.Department.Id)
					{
						IDepartmentRepository repodepartment = ApplicationLayer.IocContainer.Resolve<IDepartmentRepository>();
						Department department = repodepartment.GetById(userDto.Department.Id);
						entity2Update.SetDepartment(department);
					}
                    // asignación de Datos no mandatory con ciclo de vida variable, no se incluyen aquellas propiedaes constantes o derivadas

                // igualmente hemos de mapear las entidades emparentadas.
                repoUser.Modify(entity2Update);

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
                throw ex;
            }

            // Devolvemos el resultado.
            return true;
        }
        #endregion

        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.

        /// <summary>
        /// Función encargada de la añadir a la entidad User una instancia de la propiedad Addresses de tipo User
        /// </summary>
        /// <param name="addressesDto"> de tipo Address</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool AddAddresses(AddressDto addressesDto)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de borrar de la entidad User una instancia de la colección Addresses de tipo User
        /// </summary>
        /// <param name="addressesDto"> de tipo User</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool RemoveAddresses(AddressDto addressesDto)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de actualizar de la entidad User una instancia de la colección Addresses de tipo User
        /// </summary>
        /// <param name="addressesDto"> de tipo User</param>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool UpdateAddresses(AddressDto addressesDto)
        {
            // TODO: falta completar este metodo
            return false;
        }


        #endregion


        /// <summary>
        /// adapter of commit operation independent form the ORM
        /// </summary>
        public void Commit()
        {
            if (unitOfWork == null) unitOfWork = ApplicationLayer.IocContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }

    } // class User 

} //  Needel.Common.Application

