#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityMapperCT.tt" with "public class ApplicationEntityMapperCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityMapperCT.tt" con "public class ApplicationEntityMapperCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application
{

	#region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
	using Inflexion2;

    using Needel.Common.Application.Dtos;
    using Needel.Common.Domain;
	#endregion

    /// <summary>
	/// .en mapping class from entity to dto <see cref="UserMapper"/>
    /// .es Clase pública encargada de mapear los datos de una entidad <see cref="UserMapper"/>.
    /// </summary>
    public class UserMapper : IUserMapper
    {
        #region CONSTRUCTORS
        /// <summary>
		/// .en Get an instance of <see cref="UserMapper"/>
        /// .es Inicializa una nueva instancia de la clase <see cref="UserMapper"/>.
        /// </summary>
        public UserMapper()
        {
        } // UserMapper Constructor
        #endregion

        #region FUNCTIONS

          /// <summary>
		  /// .en public function mapping from entity to dto
          /// .es Función pública que mapea las entidades para devolver el
          /// correspondiente Dto.
          /// </summary>
          /// <param name="entityUser">
          /// .es Objeto de la entidad <see cref="User"/>.
          /// </param>
          /// <exception cref="System.ArgumentNullException">
		  /// .en exception when there is a null value in the parameter.
          /// .es Lanzada cuando el valor de <c>entityUser</c> es null.
          /// </exception>
          /// <returns>
		  /// .en returns an object of type <see cref="UserDto"/>
          /// .es Devuelve un objeto de tipo <see cref="UserDto"/> 
          /// con los datos mapeados.
          /// </returns>
          public UserDto EntityMapping(IUser entityUser)
          {
		    // .en checking parameters
            // .es Comprobamos el valor del argumento de entrada.
            if (entityUser == null)
            {
				// .en Error, throwing exception.
                // .es Error, lanzamos la excepción.
                throw new System.ArgumentNullException("entityUser");
            }
            else
            {
				// .en Answer object
                // .es Objeto de respuesta.
                UserDto dtoUser = new UserDto();
				// .en Mapping simple/main properties
                // .es Mapeamos cada propiedad.
                dtoUser.Id = entityUser.Id;
                dtoUser.Name = entityUser.Name;
				// .en Properties Mapping that comes from parent relationships
				// .es Mapeado de propiedades que provienen the relaciones parentales.
				var departmentMapper = new DepartmentMapper();
				dtoUser.Department = departmentMapper.EntityMapping(entityUser.Department);

                // .en Mapping from children relationships with multiplicity 1:1
                var addressMapper = new AddressMapper();
                foreach (var item in entityUser.Addresses)
                {
                    var childDto = addressMapper.EntityMapping(item);
                    if (childDto != null)
                    {
                        dtoUser.Addresses.Add(childDto);
                    }
                }

                // .en return mapped object
                // .es Devolvemos el resultado.
                return dtoUser;
            }
          } // EntityMapping
        
        #endregion
    } // end class UserMapper
} //  Needel.Common.Application


