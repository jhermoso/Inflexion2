#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="MNZ" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationEntityDtoCT.tt" with "public class ApplicationEntityDtoCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationEntityDtoCT.tt" con "public class ApplicationEntityDtoCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application.Dtos
{

    #region SharedKernel usings
    #endregion

    #region usings
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;
    using Inflexion2.Application;//.DataTransfer.Base;

    using Needel.Common.Domain.Data;
    #endregion

    /// <summary>
    /// Clase que representa a la entidad <see cref="MNZDto"/>.
    /// </summary>
    /// <remarks>
    /// Crea un objeto <see cref="MNZDto"/>.
    /// </remarks>
    // no tiene subclases
    // no tiene superclases
    [DataContract]
    public  class MNZDto : BaseValueObjectDataTransferObject 
    {
        #region CONSTRUCTORS
        
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="MNZDto"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="MNZDto"/>.
        /// </remarks>
        public MNZDto()
        {
        } // MNZDto Constructor

        #endregion

        #region PROPERTIES

        // Este campo proviene de una relación de tipo Composición y Asociación
        /// <summary>
        /// Propiedad que almacena el valor de EntityM.
        /// </summary>
        /// <remarks>
        /// Propiedad proveniente del rol source de una relación.
        /// </remarks>
        [DataMember]
        public EntityMDto EntityM {get; set;} /*entity from source asociation, target rol*/

        [DataMember]
        public Int32 EntityM_Id { get; set; }

        // Este campo proviene de una relación de tipo Composición y Asociación
        /// <summary>
        /// Propiedad que almacena el valor de EntityN.
        /// </summary>
        /// <remarks>
        /// Propiedad proveniente del rol source de una relación.
        /// </remarks>
        [DataMember]
        public EntityNDto EntityN {get; set;} /*entity from source asociation, target rol*/

        [DataMember]
        public Int32 EntityN_Id { get; set; }

        // Este campo proviene de una relación de tipo Composición y Asociación
        /// <summary>
        /// Propiedad que almacena el valor de EntityZ.
        /// </summary>
        /// <remarks>
        /// Propiedad proveniente del rol source de una relación.
        /// </remarks>
        [DataMember]
        public EntityZDto EntityZ {get; set;} /*entity from source asociation, target rol*/

        [DataMember]
        public Int32 EntityZ_Id { get; set; }
        #endregion

        #region Actual IClonable implementation

        /// <summary>
        /// Actual IClonable implementation to help the IEditableObject Implementation 
        /// </summary>
        /// <returns></returns>
        public override object Clone()
        {
            var obj = new MNZDto();
            

            //Parents from sources
            obj.EntityM = (this.EntityM != null) ? (EntityMDto)this.EntityM.Clone() : null;
            obj.EntityM_Id = this.EntityM_Id;
            obj.EntityN = (this.EntityN != null) ? (EntityNDto)this.EntityN.Clone() : null;
            obj.EntityN_Id = this.EntityN_Id;
            obj.EntityZ = (this.EntityZ != null) ? (EntityZDto)this.EntityZ.Clone() : null;
            obj.EntityZ_Id = this.EntityZ_Id;

            //Children from targets
            return obj;
        }
        #endregion

        #region actual equals implementation for this value object dto
        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            if (obj == null) return false;
            return Equals((MNZDto) obj);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(BaseValueObjectDataTransferObject obj)
        {
            if (obj == null) return false;
            return Equals((MNZDto)obj);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public bool Equals(MNZDto obj)
        {
            if (obj == null) return false;
            
            bool result = true;
            result = result && obj.EntityM_Id == this.EntityM_Id;
            result = result && obj.EntityM != null && obj.EntityM.Id != this.EntityM.Id;
            result = result && obj.EntityN_Id == this.EntityN_Id;
            result = result && obj.EntityN != null && obj.EntityN.Id != this.EntityN.Id;
            result = result && obj.EntityZ_Id == this.EntityZ_Id;
            result = result && obj.EntityZ != null && obj.EntityZ.Id != this.EntityZ.Id;

            return result;
        }
        #endregion
    } // end class MNZDto
} //  Needel.Common.Application.Dtos

