
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Component" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainBaseEntityCT.tt" with "public class DomainBaseEntityCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainBaseEntityCT.tt" con "public class DomainBaseEntityCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Domain
{

    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Needel.Common.Domain.Data;
    using Needel.Common.Infrastructure.Resources;
    using Inflexion2;
    using Inflexion2.Domain;

    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// <see cref="Component"/>
    /// </summary>
    [System.Runtime.InteropServices.Guid("d705ba33-7558-4282-8a58-fbff6b29116e")]
    [Serializable]
    public partial class Component : Inflexion2.Domain.AggregateRoot<Component, Int32>, IComponent , IEquatable<Component>, IComparable<Component>
    {

        #region Campos y constantes
        /// <summary>
        /// campo privado que almacena el valor de parent.
        /// </summary>
        /// <remarks>
        /// campo privado proveniente de una relación parent.
        /// La relación es de tipo Agregación y Asociación
        /// </remarks>
        private Component parent;
        // Este campo proviene de una relación de tipo Agregación y Asociación
        /// <summary>
        /// Campo privado para almacenar la colección de  children.
        /// </summary>
        /// <remarks>
        /// campo privado proveniente de una relación children.
        /// La relación es una Asociación  de tipo Agregación 
        /// </remarks>
        private System.Collections.Generic.List<Component> children; 
        #endregion

        #region Constructors

        /// <summary>
        /// .en Empty Constructor for the class <see cref="Component"/> it is required by nHibernate and EntityFramework.
        /// .es Constructor vacio de la clase <see cref="Component"/> exigido por nHibernate o EntityFramework.
        /// </summary>
        /// <remarks>
        /// .en by convention the empty constructor initialize the default values and make the news for the collections.
        /// .es por convenicón el constructor vacio inizializa los valores por defecto y hace los news de las colecciones.
        /// </remarks>
        protected internal Component()                
        {
            this.SetChildren(new System.Collections.Generic.List<Component>());
        } // end empty constructor Component

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="Component"/>.
        /// con un constructor parametrizado con los campos de tipo mandatory.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="Component"/>.
        /// </remarks>
        /// <param name="name"> 
        /// Parametro <see cref="Component.Name"/> del constructor de campos mandatory de la clase <see cref="Component"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        /// <param name="partNumber"> 
        /// Parametro <see cref="Component.PartNumber"/> del constructor de campos mandatory de la clase <see cref="Component"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        protected internal Component( string name, string partNumber ) :  this()  //cbc.isDerivedFromOneEntity ='False', IsDerived(cbc.entitySuperClass ) = ''
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
            this.Name = name;
            this.PartNumber = partNumber;


        }// Constructor
        #endregion

        #region Propiedades

        /// <summary>
        /// Propiedad pública que permite obtener Name.
        /// </summary>
        /// <remarks>
        /// Name of component
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Name.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string Name 
            {
                get;
                set;
            }


        /// <summary>
        /// Propiedad pública que permite obtener PartNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener PartNumber.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string PartNumber 
            {
                get;
                set;
            }


        /// <summary>
        /// Propiedad pública que permite obtener Description.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Description.
        /// </value>
        public virtual string Description 
            {
                get;
                set;
            }

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        // Esta propiedad proviene de una relación de tipo AgregaciónM:N y Asociación Sources
        /// <summary>
        /// Propiedad pública que permite establecer y obtener Parent.
        /// </summary>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Parent.
        /// </value>
        public virtual Component Parent 
            {
                get 
                {
                    return this.parent;
                }
                private set 
                {
                   this.parent = value;
                }
            }

        #endregion

        #region Propiedades procedentes de los roles de tipo 'target' en una asociación

        /// <summary>
        /// Propiedad pública que provine de una relación (Target) y permite establecer y obtener la coleción de valores Children.
        /// </summary>
        /// <remarks>
        /// Nos permite establecer y obtener Children.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Children.
        /// </value>
        public virtual System.Collections.Generic.List<Component> Children 
        { 
            get
            {
                // Si es null, lo instanciamos y devolvemos, sino, solo lo devolvemos
                return this.children ?? (this.children = new System.Collections.Generic.List<Component>() );
            }
        }
        #endregion

        #region Métodos Set de propiedades comunes
        #endregion

        #region  Set methods properties from source roles

        /// <summary>
        /// .en Set method for the property Parent.
        /// .es Método encargado de establecer un nuevo valor para la propiedad Parent.
        /// </summary>
        /// <param name="component"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="Parent"/>. de la clase <see cref="Component"/>
        /// </param>
        /// <returns>
        /// .en return value: the own object to allow fluent calls
        /// .es Devuelve el propio objeto para facilitar las interfaces 'fluent'/>
        /// </returns>
        public virtual Component SetParent ( Component component )
        {
            //Guard.ArgumentIsNotNull( component, "El parametro component es null");          // si la multiplicidad minima es cero entonces puede ser null

            this.Parent = component;
            return this;
        }













        #endregion

        #region Métodos Set, Add y Remove de propiedades procedentes de los roles de tipo target en una asociación

        /// <summary>
        /// Método encargado de establecer la propiedad de Children en la entidad Component.
        /// El Component ha de existir previamente.
        /// Permite introducir un valor nulo a la colección.
        /// </summary>
        /// <param name="componentCollection "> 
        /// Parametro con el que se proporciona la colección <see cref="Component"/> a asociar. El valor de este paramentro puede ser null para borrar la relación.
        /// </param>
        /// <returns>
        /// Devuelve 'this' ( la propia entidad) de tipo <see cref="Component"/> para permitir fluent Interfaces/>
        /// </returns>
        public virtual Component SetChildren ( System.Collections.Generic.List<Component> componentCollection )
        {
            this.children = (System.Collections.Generic.List<Component>)componentCollection ;
            return this;
        }

        /// <summary>
        /// Método encargado de añadir un elemento a la colección Children en la entidad Component.
        /// El Component ha de existir previamente.
        /// </summary>
        /// <param name="componentCollection "> 
        /// Parametro con el que se proporciona la colección Component a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </param>
        /// <returns>
        /// Devuelve 'this' ( la propia entidad) de tipo <see cref="Component"/> para permitir fluent Interfaces/>
        /// </returns>
        public virtual IComponent AddComponentToChildren ( Component component )
        {
            Guard.ArgumentIsNotNull(component, "El parametro component es null");          // comprobamos que el parametro no es nulo. Resources
            // se permiten valores repetidos en esta propiedad
            // observar que estamos utilizando el acceso al campo y no a la propiedad, 
            // esto se debe a que se debe utilizar a nivel de propiedades colecciones 
            // que no publiquen operaciones sobre las mismas y asi utilizar las colecciones de los campos.
            this.children.Add( component ); 

            component.SetParent(this); // Relación bidereccional: es necesario establecer el valor en el rol opuesto.
            return this;
        }

        /// <summary>
        /// Método encargado de eliminar un elemento de la colección Children en la entidad Component.
        /// El Component ha de existir previamente.
        /// </summary>
        /// <param name="componentCollection "> 
        /// Identificador a borrar Component a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </param>
        /// <returns>
        /// Devuelve 'this' ( la propia entidad) de tipo <see cref="Component"/> para permitir fluent Interfaces/>
        /// </returns>
        public virtual IComponent RemoveComponentFromChildren ( Component component )
        {
            Guard.ArgumentIsNotNull(component, "El parametro component es null");          // comprobamos que el parametro no es nulo. Resources
            // observar que estamos utilizando el acceso al campo y no a la propiedad, 
            // esto se debe a que se debe utilizar a nivel de propiedades colecciones que 
            // no publiquen operaciones sobre las mismas y de esta forma se obliga a utilizar los métodos proporcionados
            this.children.Remove( component );
                component.SetParent(null);
            return this;
        }
        #endregion


    #region IEquatable implementation

        /// <summary>
        /// IEquatable implementation
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual bool Equals(IComponent other)
        {
            return base.Equals(other);
        }

    #endregion

    #region IComparable implementation

        /// <summary>
        /// 
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual int CompareTo(IComponent other)
        {
            // todo: move to code contract
            if (other == null)
            {
                throw new System.ArgumentNullException("Component");
            }

            int result = 0;
            result = this.Name.CompareTo(other.Name);
            if (result != 0) return result;

            return result;
        }	

    #endregion

    } // class Component 
} //  Needel.Common.Domain

