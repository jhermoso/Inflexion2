
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Address" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainBaseEntityCT.tt" with "public class DomainBaseEntityCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainBaseEntityCT.tt" con "public class DomainBaseEntityCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Domain
{

    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Needel.Common.Domain.Data;
    using Needel.Common.Infrastructure.Resources;
    using Inflexion2;
    using Inflexion2.Domain;

    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// <see cref="Address"/>
    /// </summary>
    [System.Runtime.InteropServices.Guid("ad19c8f6-bea7-4a38-8c3d-2ea098cd2aef")]
    [Serializable]
    public partial class Address : Inflexion2.Domain.Entity<Address, Int32>, IAddress , IEquatable<Address>, IComparable<Address>
    {

        #region Campos y constantes
        /// <summary>
        /// campo privado que almacena el valor de userAddress.
        /// </summary>
        /// <remarks>
        /// campo privado proveniente de una relación userAddress.
        /// La relación es de tipo Composición y Asociación
        /// </remarks>
        private User userAddress;
        #endregion

        #region Constructors

        /// <summary>
        /// .en Empty Constructor for the class <see cref="Address"/> it is required by nHibernate and EntityFramework.
        /// .es Constructor vacio de la clase <see cref="Address"/> exigido por nHibernate o EntityFramework.
        /// </summary>
        /// <remarks>
        /// .en by convention the empty constructor initialize the default values and make the news for the collections.
        /// .es por convenicón el constructor vacio inizializa los valores por defecto y hace los news de las colecciones.
        /// </remarks>
        protected internal Address()                
        {
        } // end empty constructor Address

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="Address"/>.
        /// con un constructor parametrizado con los campos de tipo mandatory.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="Address"/>.
        /// </remarks>
        /// <param name="streetName"> 
        /// Parametro <see cref="Address.StreetName"/> del constructor de campos mandatory de la clase <see cref="Address"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        /// <param name="addresses">
        /// Parametro <see cref="Address.Addresses"/> del constructor de campos mandatory de la clase <see cref="Address"/>
        /// Propiedad de unica instancia deducida del source rol source de una relación
        /// </param>
        protected internal Address( string streetName, User userAddress ) :  this()  //cbc.isDerivedFromOneEntity ='False', IsDerived(cbc.entitySuperClass ) = ''
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
            this.StreetName = streetName;
            SetUserAddress( userAddress ); /*mandatoryPropertyFromSources*/


        }// Constructor
        #endregion

        #region Propiedades

        /// <summary>
        /// Propiedad pública que permite obtener StreetName.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener StreetName.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string StreetName 
            {
                get;
                set;
            }


        /// <summary>
        /// Propiedad pública que permite obtener BuildingNumber.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener BuildingNumber.
        /// </value>
        public virtual string BuildingNumber 
            {
                get;
                set;
            }

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        // Esta propiedad proviene de una relación de tipo Composición y Asociación Sources
        /// <summary>
        /// Propiedad pública que permite establecer y obtener UserAddress.
        /// </summary>
        /// <value>
        /// Valor que es utilizado para establecer y obtener UserAddress.
        /// </value>
        [Required(ErrorMessageResourceName = "FieldIsMandatory", ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource))]
        public virtual User UserAddress 
            {
                get 
                {
                    return this.userAddress;
                }
                private set 
                {
                   this.userAddress = value;
                }
            }

        #endregion

        #region Métodos Set de propiedades comunes
        #endregion

        #region  Set methods properties from source roles

        /// <summary>
        /// .en Set method for the property UserAddress.
        /// .es Método encargado de establecer un nuevo valor para la propiedad UserAddress.
        /// </summary>
        /// <param name="user"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="UserAddress"/>. de la clase <see cref="Address"/>
        /// </param>
        /// <returns>
        /// .en return value: the own object to allow fluent calls
        /// .es Devuelve el propio objeto para facilitar las interfaces 'fluent'/>
        /// </returns>
        public virtual Address SetUserAddress ( User user )
        {
            //Guard.ArgumentIsNotNull( user, "El parametro address es null");          // si la multiplicidad minima es cero entonces puede ser null

            this.UserAddress = user;
            return this;
        }













        #endregion


    #region IEquatable implementation

        /// <summary>
        /// IEquatable implementation
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual bool Equals(IAddress other)
        {
            return base.Equals(other);
        }

    #endregion

    #region IComparable implementation

        /// <summary>
        /// 
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual int CompareTo(IAddress other)
        {
            // todo: move to code contract
            if (other == null)
            {
                throw new System.ArgumentNullException("Address");
            }

            int result = 0;
            result = this.StreetName.CompareTo(other.StreetName);
            if (result != 0) return result;
            result = this.BuildingNumber.CompareTo(other.BuildingNumber);
            if (result != 0) return result;

            return result;
        }	

    #endregion

    } // class Address 
} //  Needel.Common.Domain

