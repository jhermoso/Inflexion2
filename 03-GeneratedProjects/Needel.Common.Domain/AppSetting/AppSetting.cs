
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="AppSetting" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainBaseEntityCT.tt" with "public class DomainBaseEntityCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainBaseEntityCT.tt" con "public class DomainBaseEntityCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Domain
{

    #region usings
    using System;
	using System.Collections.Generic;
    using System.Linq;
    using Needel.Common.Domain.Data;
    using Needel.Common.Infrastructure.Resources;
    using Inflexion2;
    using Inflexion2.Domain;

    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// <see cref="AppSetting"/>
    /// </summary>
	[System.Runtime.InteropServices.Guid("c997f491-fd94-45b9-a3c1-5081f8ca0a34")]
    [Serializable]
    public partial class AppSetting : Inflexion2.Domain.AggregateRoot<AppSetting, Int32>, IAppSetting
    {

        #region Campos y constantes
        /// <summary>
        /// Variable privada que identifica Key.
        /// App setting identity
        /// </summary>
        /// <remarks>
        /// This is a preference usually managed by the programmers to modify the behavieur of the application for all or only some users.
        /// </remarks>
        private string key; 

        /// <summary>
        /// Variable privada que identifica Value.
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        private string value; 

        /// <summary>
        /// Variable privada que identifica Remark.
        /// Explanation of the meaning or use of this  key value par.
        /// </summary>
        /// <remarks>
        /// Please introduce herer how to use this settings or what is his meaning.
        /// </remarks>
        private string remark; 

        /// <summary>
        /// campo privado que almacena el valor de appSettingUsing.
        /// </summary>
        /// <remarks>
        /// campo privado proveniente de una relación appSettingUsing.
        /// La relación es de tipo Composición y Asociación
        /// </remarks>
        private AppSettingType appSettingUsing;
        #endregion

        #region Constructors

        /// <summary>
        /// .en Empty Constructor for the class <see cref="AppSetting"/> it is required by nHibernate and EntityFramework.
        /// .es Constructor vacio de la clase <see cref="AppSetting"/> exigido por nHibernate o EntityFramework.
        /// </summary>
        /// <remarks>
        /// .en by convention the empty constructor initialize the default values and make the news for the collections.
        /// .es por convenicón el constructor vacio inizializa los valores por defecto y hace los news de las colecciones.
        /// </remarks>
        protected internal AppSetting()                
        {
        } // end empty constructor AppSetting
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="AppSetting"/>.
        /// con un constructor parametrizado con los campos de tipo mandatory.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="AppSetting"/>.
		/// </remarks>
        /// <param name="key"> 
        /// Parametro <see cref="AppSetting.Key"/> del constructor de campos mandatory de la clase <see cref="AppSetting"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        /// <param name="value"> 
        /// Parametro <see cref="AppSetting.Value"/> del constructor de campos mandatory de la clase <see cref="AppSetting"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        protected internal AppSetting( string key, string value, AppSettingType appSettingUsing ) :  this()  //cbc.isDerivedFromOneEntity ='False', IsDerived(cbc.entitySuperClass ) = ''
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
            this.Key = key;
            this.Value = value;
            SetAppSettingUsing( appSettingUsing ); /*mandatoryPropertyFromSources*/


        }// Constructor
        #endregion

        #region Propiedades

        /// <summary>
        /// Propiedad públicacon set privado que permite obtener Key.
        /// </summary>
        /// <remarks>
        /// App setting identity
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Key.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string Key 
            {
                get  
                {
                    return this.key;
                }
                set
                {

                    this.key = value;
                }
            }


        /// <summary>
        /// Propiedad públicacon set privado que permite obtener Value.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Value.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string Value 
            {
                get  
                {
                    return this.value;
                }
                set
                {

                    this.value = value;
                }
            }


        /// <summary>
        /// Propiedad públicacon set privado que permite obtener Remark.
        /// </summary>
        /// <remarks>
        /// Explanation of the meaning or use of this  key value par.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Remark.
        /// </value>
        public virtual string Remark 
            {
             get // !property.AutoProperty && property.OnlyGetProperty
                {
                    return this.remark;
                }
                private set 
                {
                    this.remark = value;
                }
            }

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        // Esta propiedad proviene de una relación de tipo Composición y Asociación Sources
        /// <summary>
        /// Propiedad pública que permite establecer y obtener AppSettingUsing.
        /// </summary>
        /// <remarks>
        /// Nos permite establecer y obtener AppSettingUsing.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener AppSettingUsing.
        /// </value>
        [Required(ErrorMessageResourceName = "FieldIsMandatory", ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource))]
        public virtual AppSettingType AppSettingUsing 
            {
                get 
                {
                    return this.appSettingUsing;
                }
                private set 
                {
                   this.appSettingUsing = value;
                }
            }
        #endregion

        #region Métodos Set de propiedades comunes
        /// <summary>
        /// Método encargado de establecer un nuevo valor para la propiedad Remark.
        /// </summary>
        /// <remarks>
        /// Explanation of the meaning or use of this  key value par.
        /// </remarks>
        /// <param name="remark"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="Remark"/>. de la clase <see cref="AppSetting"/>
        /// </param>
        /// <returns>
        /// Devuelve  una entidad de tipo <see cref="AppSetting"/>
        /// </returns>
        public virtual AppSetting SetRemark ( string remark )
        {
            this.Remark = remark;
            return this;
        }
        #endregion

        #region  Set methods properties from source roles

        /// <summary>
        /// .en Set method for the property AppSettingUsing.
        /// .es Método encargado de establecer un nuevo valor para la propiedad AppSettingUsing.
        /// </summary>
        /// <param name="appSettingType"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="AppSettingUsing"/>. de la clase <see cref="AppSetting"/>
        /// </param>
        /// <returns>
        /// .en return value: the own object to allow fluent calls
        /// .es Devuelve el propio objeto para facilitar las interfaces 'fluent'/>
        /// </returns>
        public virtual AppSetting SetAppSettingUsing ( AppSettingType appSettingType )
        {
            Guard.ArgumentIsNotNull( appSettingType, "El parametro appSetting es null");          // comprobamos que el parametro no es nulo. Resources

            this.AppSettingUsing = appSettingType;
            return this;
        }
        #endregion

    } // class AppSetting 

} //  Needel.Common.Domain

