#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainCoreIEntityCT.tt" with "public class DomainCoreIEntityCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainCoreIEntityCT.tt" con "public class DomainCoreIEntityCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Domain
{


    #region Usings
    using System;
    using Needel.Common.Domain.Data;
    using Inflexion2.Domain;
    using Inflexion2;
    using System.Collections.Generic;
    #endregion

    /// <summary>
    /// .en Interfaz to identify an entidad of type User in the application.
    /// .es Interfaz que identifica una entidad de tipo User de la aplicación.
    /// User information data
    /// </summary>
    /// <remarks>
    /// .en Interfaz for an Entity implemented by User/>.
    /// .es Interfaz que representa  una entidad implementado enUser/>.
    /// </remarks>
    public interface IUser : Inflexion2.Domain.IEntity<Int32> 
    {

        #region Properties
        /// <summary>
        /// .en Property to get and set Name.
        /// .es Propiedad que permite obtener y establecer Name.
        /// </summary>
        /// <remarks>
        /// Field to explain the meaning of this key
        /// </remarks>
        /// <value>
        /// .en Value used to get and set Name.
        /// .es Valor que es utilizado para obtener y establecer Name.
        /// </value>
        string Name { get; set; }

        /// <summary>
		/// .en Public property Department.
        /// .es Propiedad pública  Department.
        /// </summary>
        /// <remarks>
        /// .en (SOURCE) This property comes from a relationship Agregación y Asociación
        /// .es (SOURCE)Esta propiedad proviene de una relación de tipo Agregación y Asociación
        /// Nos permite establecer y obtener Department.
        /// </remarks>
        /// <value>
        /// .es Valor que es utilizado para establecer y obtener Department.
        /// </value>
        Department Department { get; }

        /// <summary>
        /// .es Propiedad pública que permite establecer y obtener la colleción de valores Addresses.
        /// </summary>
        /// <remarks>
        /// .es (TARGET)Esta propiedad proviene de una relación de tipo Composición y Asociación
        /// Nos permite establecer y obtener Addresses.
        /// </remarks>
        /// <value>
        /// .es Valor que es utilizado para establecer y obtener Addresses.
        /// </value>
        [ChildrenRelationshipDeleteBehavior(Delete.Restrict)]
        System.Collections.Generic.List<Address> Addresses { get; }
   
        #endregion

        #region Methods

        /// <summary>
        /// .es Método encargado de establecer un nuevo valor para la propiedad Department.
        /// </summary>
        /// <value>
        /// .es Parametro con el que establecemos el nuevo valor de Department.
        /// </value>
        User SetDepartment ( Department department );

        /// <summary>
        /// .es Método encargado de añadir un elemento a la collección Addresses en la entidad Address.
        /// El Address ha de existir previamente.
        /// </summary>
        /// <value>
        /// .es Parametro con el que se proporciona la colección Address a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </value>
        IUser AddAddressToAddresses ( Address address );

        /// <summary>
        /// .es Método encargado de eliminar un elemento de la collección Addresses en la entidad Address.
        /// El Address ha de existir previamente.
        /// </summary>
        /// <value>
        /// .es Identificador a borrar Address a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </value>
        IUser RemoveAddressFromAddresses ( Address address );

        #endregion

    } // End class User.

} // End NameSpace Needel.Common.Domain.
