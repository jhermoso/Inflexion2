
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Teacher" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainBaseEntityCT.tt" with "public class DomainBaseEntityCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainBaseEntityCT.tt" con "public class DomainBaseEntityCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Domain
{

    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using Needel.Common.Domain.Data;
    using Needel.Common.Infrastructure.Resources;
    using Inflexion2;
    using Inflexion2.Domain;

    using System.ComponentModel.DataAnnotations;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    #endregion

    /// <summary>
    /// <see cref="Teacher"/>
    /// </summary>
    [System.Runtime.InteropServices.Guid("a2bd15d6-c044-4751-a83a-a42b6a8f3142")]
    [Serializable]
    public partial class Teacher : Inflexion2.Domain.AggregateRoot<Teacher, Int32>, ITeacher , IEquatable<Teacher>, IComparable<Teacher>
    {

        #region Campos y constantes
        /// <summary>
        /// campo privado que almacena el valor de students.
        /// </summary>
        /// <remarks>
        /// campo privado proveniente de una relación students.
        /// La relación es de tipo  y Asociación
        /// </remarks>
        private System.Collections.Generic.List<Student> students; 
        #endregion

        #region Constructors

        /// <summary>
        /// .en Empty Constructor for the class <see cref="Teacher"/> it is required by nHibernate and EntityFramework.
        /// .es Constructor vacio de la clase <see cref="Teacher"/> exigido por nHibernate o EntityFramework.
        /// </summary>
        /// <remarks>
        /// .en by convention the empty constructor initialize the default values and make the news for the collections.
        /// .es por convenicón el constructor vacio inizializa los valores por defecto y hace los news de las colecciones.
        /// </remarks>
        protected internal Teacher()                
        {
            this.SetStudents(new System.Collections.Generic.List<Student>());
        } // end empty constructor Teacher

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="Teacher"/>.
        /// con un constructor parametrizado con los campos de tipo mandatory.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="Teacher"/>.
        /// </remarks>
        /// <param name="name"> 
        /// Parametro <see cref="Teacher.Name"/> del constructor de campos mandatory de la clase <see cref="Teacher"/>
        /// Propiedad deducida del rol source de una relación
        /// </param>
        protected internal Teacher( string name ) :  this()  //cbc.isDerivedFromOneEntity ='False', IsDerived(cbc.entitySuperClass ) = ''
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
            this.Name = name;


        }// Constructor
        #endregion

        #region Propiedades

        /// <summary>
        /// Propiedad pública que permite obtener Name.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Name.
        /// </value>
        [Required(ErrorMessageResourceType = typeof(Inflexion2.Resources.FrameworkResource), 
                  ErrorMessageResourceName = "FieldIsMandatory" )]
        public virtual string Name 
            {
                get;
                set;
            }

        #endregion

        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
        // Esta propiedad proviene de una relación de tipo M:N y Asociación Sources
        /// <summary>
        /// Propiedad pública que permite establecer y obtener Students.
        /// </summary>
        /// <value>
        /// Valor que es utilizado para establecer y obtener Students.
        /// </value>
        public virtual System.Collections.Generic.List<Student> Students 
            {
                get 
                {
                    return this.students;
                }
                private set 
                {
                   this.students = value;
                }
            }

        #endregion

        #region Métodos Set de propiedades comunes
        #endregion

        #region  Set methods properties from source roles

        /// <summary>
        /// .en Set method for the property Students.
        /// .es Método encargado de establecer un nuevo valor para la propiedad Students.
        /// </summary>
        /// <param name="students"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="Students"/>. de la clase <see cref="Teacher"/>
        /// </param>
        /// <returns>
        /// .en return value: the own object to allow fluent calls
        /// .es Devuelve el propio objeto para facilitar las interfaces 'fluent'/>
        /// </returns>
        public virtual Teacher SetStudents ( System.Collections.Generic.List<Student> students )
        {
            //Guard.ArgumentIsNotNull( students, "El parametro teacher es null");          // si la multiplicidad minima es cero entonces puede ser null

            this.Students = students;
            return this;
        }

        /// <summary>
        /// .en add item to M:N
        /// </summary>
        /// <param name="student"></param>
        /// <returns></returns>
        public virtual Teacher AddStudentToStudents(Student student)
        {
           Guard.ArgumentIsNotNull( students, "El parametro student es null");          // comprobamos que el parametro no es nulo. Resources
           this.Students.Add(student);
           return this;
        }

        /// <summary>
        /// .en remove item from M:N
        /// </summary>
        /// <param name="student"></param>
        /// <returns></returns>
        public virtual Teacher RemoveStudentFromStudents(Student student)
        {
           Guard.ArgumentIsNotNull( students, "El parametro student es null");          // comprobamos que el parametro no es nulo. Resources
           this.Students.Remove(student);
           return this;
        }













        #endregion


    #region IEquatable implementation

        /// <summary>
        /// IEquatable implementation
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual bool Equals(ITeacher other)
        {
            return base.Equals(other);
        }

    #endregion

    #region IComparable implementation

        /// <summary>
        /// 
        /// </summary>
        /// <param name="other"></param>
        /// <returns></returns>
        public virtual int CompareTo(ITeacher other)
        {
            // todo: move to code contract
            if (other == null)
            {
                throw new System.ArgumentNullException("Teacher");
            }

            int result = 0;
            result = this.Name.CompareTo(other.Name);
            if (result != 0) return result;

            return result;
        }	

    #endregion

    } // class Teacher 
} //  Needel.Common.Domain

