#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Department" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " DomainBaseEntityFactoryCT.tt" with "public class DomainBaseEntityFactoryCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "DomainBaseEntityFactoryCT.tt" con "public class DomainBaseEntityFactoryCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion


namespace Needel.Common.Domain
{
    #region using de los sharedKernels 
    #endregion

    #region Usings de arquitectura
    using System;
    using System.Diagnostics.Contracts;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using Inflexion2;
    using Inflexion2.Domain;
    using Needel.Common.Domain;
    using Needel.Common.Domain.Data;
    #endregion

    /// <summary>
    /// Clase factoría para la creación de  una entidad de tipo <see cref="Department"/>.
    /// </summary>
    static public class DepartmentFactory 
    {

        #region Constructor vacio de la clase
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="DepartmentFactory"/>.
        /// </summary>
        /// <remarks>
        /// Constructor vacío de la clase <see cref="DepartmentFactory"/>.
        /// </remarks>
        /// <returns>
        /// Devuelve una instancia de dela clase DepartmentFactory />
        /// </returns>
        static DepartmentFactory()
        {
        }
        #endregion

        #region Método (Patrón Factory)
        /// <summary>
        /// Función para crear una entidad dentro de la factoría a partir 
        /// de los argumentos especificados.
        /// </summary>
        /// <remarks>
        /// Crea una entidad de tipo <see cref="Department"/>
        /// </remarks>
        /// <param name="name"> 
        /// Name of the department.
        /// </param>
        /// <param name="visible"> 
        /// visibility mark
        /// </param>
        /// <param name="creationTime"> 
        /// 
        /// </param>
        /// <returns>
        /// Devuelve  una entidad de tipo <see cref="DepartmentFactory"/>
        /// </returns>
        public static Department Create(string name, bool visible = true, DateTime? creationTime = null)
        {
            // Creamos la nueva entidad.
            Department EntityDepartment = new Department(  name, visible, creationTime );
            //devolvemos la entidad recien creada
            return EntityDepartment;
        }

        #endregion

    } // end class DepartmentFactory
} //  Needel.Common.Domain

