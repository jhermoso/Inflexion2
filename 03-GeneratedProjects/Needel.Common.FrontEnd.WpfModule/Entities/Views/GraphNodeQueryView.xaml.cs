
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="GraphNode" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityQueryViewXamlCsCT.tt" with "public class WpfEntityQueryViewXamlCsCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityQueryViewXamlCsCT.tt" con "public class WpfEntityQueryViewXamlCsCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.FrontEnd.WpfModule
{

    #region usings
    using Application.Dtos;
    using Inflexion2.UX.WPF.Helpers;
    using Inflexion2.UX.WPF.MVVM.ViewModels;
    using System;
    using System.Linq;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Input;
    using System.Windows.Media;
    #endregion

    /// <summary>
    /// .en Interaction logic for GraphNodeQueryView.xaml
    /// .es Logica de interación para la vista GraphNodeQueryView.xaml
    /// </summary>
    public partial class GraphNodeQueryView : UserControl
    {
        private Point? _startPoint;

        #region CONSTRUCTORS
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:GraphNodeQueryView"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:GraphNodeQueryView"/>.
        /// </summary>
        public GraphNodeQueryView()
        {
            InitializeComponent();
            if (!System.ComponentModel.DesignerProperties.GetIsInDesignMode(this) && this.DataContext == null)
            {
                this.DataContext = new GraphNodeQueryViewModel();
            }
            // .en Here you can configure future filters.
            // .es Aquí se puede introducir la configuración de futuros filtros.
  
        } // GraphNodeQueryView Constructor
        #endregion

        private void dataGrid_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            _startPoint = e.GetPosition(null);
        }

        private void dataGrid_PreviewMouseMove(object sender, MouseEventArgs e)
        {
            // No drag operation
            if (_startPoint == null)
                return;

            var dg = sender as DataGrid;
            if (dg == null) return;
            // Get the current mouse position
            Point mousePos = e.GetPosition(null);
            Vector diff = _startPoint.Value - mousePos;
            // test for the minimum displacement to begin the drag
            if (e.LeftButton == MouseButtonState.Pressed &&
                (Math.Abs(diff.X) > SystemParameters.MinimumHorizontalDragDistance ||
                Math.Abs(diff.Y) > SystemParameters.MinimumVerticalDragDistance))
            {

                // Get the dragged DataGridRow
                var DataGridRow =
                    GeneralHelper.FindAnchestor<DataGridRow>((DependencyObject)e.OriginalSource);

                if (DataGridRow == null)
                    return;

                // Find the data behind the DataGridRow
                var dataTodrop = (GraphNodeViewModel)dg.ItemContainerGenerator.
                    ItemFromContainer(DataGridRow);

                if (dataTodrop == null) return;

                // Initialize the drag & drop operation
                var dataObj = new DataObject(dataTodrop.ObjectElement);
                dataObj.SetData("DragSource", sender);
                DragDrop.DoDragDrop(dg, dataObj, DragDropEffects.Copy);
                _startPoint = null;
            }
        }

        private void dataGrid_PreviewMouseUp(object sender, MouseButtonEventArgs e)
        {
            _startPoint = null;
        }

        private void dataGrid_Drop(object sender, DragEventArgs e)
        {
            var dg = sender as DataGrid;
            if (dg == null) return;
            var dgSrc = e.Data.GetData("DragSource") as DataGrid;

            GraphNodeDto data = (GraphNodeDto)e.Data.GetData(typeof(GraphNodeDto));
            if (dgSrc == null || data == null) return;

            var originalVM = (GraphNodeQueryViewModel)dgSrc.DataContext;

            originalVM.MoveDataFromSrcToDest((GraphNodeQueryViewModel)dg.DataContext, data);
        }

        private void dataGrid_PreviewDragOver(object sender, DragEventArgs e)
        {
            // TO test if drop is allowed, to avoid drop 
            // if false e.Effects = DragDropEffects.None;
        }

        // Helper to search up the VisualTree
        //private static T FindAnchestor<T>(DependencyObject current)
        //    where T : DependencyObject
        //{
        //    do
        //    {
        //        if (current is T)
        //        {
        //            return (T)current;
        //        }
        //        current = VisualTreeHelper.GetParent(current);
        //    }
        //    while (current != null);
        //    return null;
        //}
    }

} //  Needel.Common.FrontEnd.WpfModule
