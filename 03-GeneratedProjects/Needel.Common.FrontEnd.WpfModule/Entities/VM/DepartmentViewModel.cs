
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Department" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityViewModelCT.tt" with "public class WpfEntityViewModelCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityViewModelCT.tt" con "public class WpfEntityViewModelCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.FrontEnd.WpfModule
{

    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.Linq;
    using System.ServiceModel;
    using System.Windows.Input;

    using MvvmValidation;
    using Needel.Common.Domain.Data;
    using Needel.Common.Application;
    using Needel.Common.Application.Dtos;
    using Needel.Common.Infrastructure.Resources;
    using Needel.Common.Application.WcfClient.DepartmentReference;
    using Needel.Common.Application.WcfClient.UserReference;

    using Inflexion2.Application;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    #endregion

    /// <summary>
    /// .en Interaction logic for DepartmentViewModel.xaml
    /// .es Logica de interación para la vista DepartmentViewModel.xaml
    /// </summary>
    public partial class DepartmentViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<DepartmentDto, Int32>
    {
        #region Fields

        #region query viewmodels for children entities *
        // .en Nested view models for the controls of children properties.
        // .es View models anidados para los controles de colecciones de propiedades correspondientes a los hijos.
        private UserQueryViewModel usersQueryVM; 		
        #endregion

        #endregion

        #region Constructors
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:DepartmentViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:DepartmentViewModel"/>.
        /// </summary>
        public DepartmentViewModel() : base()
        {
            Initialization();
        } // DepartmentViewModel Constructor

        private void Initialization()
        {
            // .en https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the class DepartmentControl what is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(DepartmentQueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("DepartmentAlias");
            locBinding.SetBinding(this, targetProperty);

            // .en after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };
        } // DepartmentViewModel intialization
        /// <summary>
        /// .en Child composed constructor <see cref="T:DepartmentViewModel"/>.
        /// This constructor is used to be the viewmodel of a nested viemodel in a hierchahy.
        /// </summary>
        /// <param name="element">
        /// .en Parameter of type <see cref="DepartmentDto"/> with all the related data.</param>
        /// <param name="first">first element in the current paged collection</param>
        /// <param name="previous">last element in the current paged collection</param>
        /// <param name="next">next element in the current paged collection</param>
        /// <param name="last">last element in the current paged collection</param>
        /// <remarks>
        /// .en these intialization are to allow navigation betwen pages and not only next record. TODO: test this.
        /// </remarks>
        public DepartmentViewModel(DepartmentDto element, DepartmentDto first, DepartmentDto previous, DepartmentDto next, DepartmentDto last)
            : base(element)
        {
            this.firstEntityId = first != null ? first.Id: default(Int32);
            this.nextEntityId = next != null ? next.Id : default(Int32);
            this.lastEntityId = last != null ? last.Id : default(Int32);
            this.previousEntityId = previous != null ? previous.Id : default(Int32);
            
            Initialization();

        } // DepartmentViewModel Parametrized Constructor


        #endregion

        #region Properties

        /// <summary>
        /// .es Propiedad para establecer el Título de la ventana cuando este view model se utiliza 
        /// en un control de usuario o ventana exclusivamente para el.
        /// cuando este view model se utiliza solo en una lista esta propiedad no se utiliza.
        /// </summary>
        public override string Title{ get; set; }

        /// <summary>
        /// Name of the department.
        /// </summary>
        public string Name
        {
            get
            {
                return this.ObjectElement.Name;
            }
            set
            {
                if (this.ObjectElement.Name != value)
                {
                    this.ObjectElement.Name  = value;
                    this.RaisePropertyChanged(() => this.Name);
                }
            }
        } // Name
        /// <summary>
        /// visibility mark
        /// </summary>
        public bool Visible
        {
            get
            {
                return this.ObjectElement.Visible;
            }
            set
            {
                if (this.ObjectElement.Visible != value)
                {
                    this.ObjectElement.Visible  = value;
                    this.RaisePropertyChanged(() => this.Visible);
                }
            }
        } // Visible
        /// <summary>
        /// Allow to the user to explain what is the responsabilities or functions of the department.
        /// </summary>
        public string Description
        {
            get
            {
                return this.ObjectElement.Description;
            }
            set
            {
                if (this.ObjectElement.Description != value)
                {
                    this.ObjectElement.Description  = value;
                    this.RaisePropertyChanged(() => this.Description);
                }
            }
        } // Description
        /// <summary>
        /// 
        /// </summary>
        public DateTime? CreationTime
        {
            get
            {
                return this.ObjectElement.CreationTime;
            }
            set
            {
                if (this.ObjectElement.CreationTime != value)
                {
                    this.ObjectElement.CreationTime  = value;
                    this.RaisePropertyChanged(() => this.CreationTime);
                }
            }
        } // CreationTime
        /// <summary>
        /// 
        /// </summary>
        public DateTime? UpdateTime
        {
            get
            {
                return this.ObjectElement.UpdateTime;
            }
            set
            {
                if (this.ObjectElement.UpdateTime != value)
                {
                    this.ObjectElement.UpdateTime  = value;
                    this.RaisePropertyChanged(() => this.UpdateTime);
                }
            }
        } // UpdateTime

        #endregion

        /// <summary>
        /// 
        /// </summary>
        public UserQueryViewModel UsersQueryVM
        {
            get
            {
                return usersQueryVM;
            }
            set
            {
                if (this.usersQueryVM != value)
                {
                    this.usersQueryVM = value;
                    this.RaisePropertyChanged(() => this.UsersQueryVM);
                }
            }
        } // Users

        #region Methods
        /// <summary>
        /// Deactivate all the children ViewModels the collections of related aggregates.
        /// </summary>
        public override void DeactivateChildrenCollections()
        {
            if ( this.UsersQueryVM != null)
            {
                this.UsersQueryVM.IsActive = false;
            }

        }


        /// <summary>.es Obtener el dto de la entidad Department por su identificador.</summary>
        /// <param name="identifier">.es Parámetro que indica el identificador de la entidad que se va a recuperar.</param>
        /// <returns>.es Devuelve el objeto Dto <see cref="DepartmentDto"/> correspondiente.</returns>
        public override DepartmentDto GetById(Int32 identifier)
        {
            DepartmentServiceClient serviceClient = new DepartmentServiceClient();
            // .en consume the service and get the data // .es Consumimos el servicio y obtenemos los datos.
            var departmentDto = serviceClient.GetById(identifier );

            return departmentDto;
        } // GetById

        /// <summary>.es Crear o actualizar una entidad de tipo Department.</summary>
        /// <param name="parameter">data to update.</param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive &&
                    (this.ObjectElement != null))
            {
                
                DepartmentServiceClient serviceClient = new DepartmentServiceClient();

                if (this.ObjectElement.Id == default(Int32) )
                {
                    serviceClient.Create(this.ObjectElement);
                    this.MessageBoxService.Show("Entidad agregada");
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement);
                    this.MessageBoxService.Show("Entidad actualizada");
                }

                UpdateParentView();
            }
        } // OnSaveRecord

        /// <summary>.en Create a new Department</summary>
        /// <param name="parameter">.en Data to create the new Department</param>
        public override void OnNewRecord(object parameter)
        {
            var views = this.RegionManager.Regions[Inflexion2.UX.WPF.MVVM.RegionNames.WorkspaceRegion].ActiveViews;
            base.OnNewRecord(parameter);
            this.Initialization();
            DepartmentView currentView = (DepartmentView)views.FirstOrDefault();

            // .en Nested Query view models for the controls of children properties.
            // .es View models anidados para los controles de colecciones de propiedades correspondientes a los hijos.
            (currentView.UserQueryView).DataContext = new UserQueryViewModel();
            ((UserQueryViewModel)(currentView.UserQueryView).DataContext).RefreshItems();	

        }

        #endregion

        #region Protected Methods


        /// <summary>
        /// example to execute validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.propiedad,
            //                   () => RuleResult.Assert(
            //                                           this.propiedad != null,
            //                                           "mensaje"));

        }

        /// <summary>
        /// .en Here is possible to override the actions to execute when there is a navigation request
        /// </summary>
        /// <remarks>
        /// .en Here is where to call to the methods to load the related entities (children and parents).
        /// .es aqui es donde se invoca a los métodos de carga de las entidades adicionales.
        /// </remarks>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            base.OnNavigatedTo(navigationContext);
            //.en load children entities
            //.es cargar aqui los agregados relacionados

            if (navigationContext.Parameters["Id"] != default(Int32).ToString())
            {
                // only in this case there is a need of subscription to update a parent view
                if (!CompositeViewUpdateEvent.Contains(this.OnReceiveCompositeViewUpdateEvent))
                {
                    CompositeViewUpdateEvent.Subscribe(this.OnReceiveCompositeViewUpdateEvent, ThreadOption.UIThread);
                }
            }

            //UserServiceClient userServiceClient = new UserServiceClient();
            var specDto = new SpecificationDto() { PageIndex = 0, PageSize = 5 };
            specDto.CompositeFilter.Filters.Add(new Filter() { Property = "Department.Id", Operator = "IsEqualTo", Value = navigationContext.Parameters["Id"] });//this.ObjectElement.Id.ToString()
            UsersQueryVM = new UserQueryViewModel(specDto, typeof(DepartmentView).FullName);

            this.Rebind();
        }

        /// <summary>. en Action to execute when there is a call to update the view.</summary>
        /// <param name="message"></param>
        public override void OnReceiveCompositeViewUpdateEvent(string message)
        {
            this.UsersQueryVM.OnGetRecords("from DepartmentViewModel");			
        }
        internal void RefreshRelatedEntities()
        {
        }

        #endregion
    }
} //  Needel.Common.FrontEnd.WpfModule
