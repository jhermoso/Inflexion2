
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityViewModelCT.tt" with "public class WpfEntityViewModelCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityViewModelCT.tt" con "public class WpfEntityViewModelCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.FrontEnd.WpfModule
{

    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.Linq;
    using System.ServiceModel;
    using System.Windows.Input;

    using MvvmValidation;
    using Needel.Common.Domain.Data;
    using Needel.Common.Application;
    using Needel.Common.Application.Dtos;
    using Needel.Common.Infrastructure.Resources;
    using Needel.Common.Application.WcfClient.UserReference;
    using Needel.Common.Application.WcfClient.DepartmentReference;

    using Inflexion2.Application;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    #endregion

    /// <summary>
    /// .en Interaction logic for UserViewModel.xaml
    /// .es Logica de interación para la vista UserViewModel.xaml
    /// </summary>
    public partial class UserViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<UserDto, Int32>
    {
        #region Fields

        #region query viewmodels for children entities *
        // .en Nested view models for the controls of children properties.
        // .es View models anidados para los controles de colecciones de propiedades correspondientes a los hijos.
        private AddressQueryViewModel addressesQueryVM;
        private AddressViewModel address1VM;	
        #endregion

        #region query viewmodels for parent entities
        // .en collections to select parent properties.
        // .es colecciones para seleccionar propiedades parentales.
        private ObservableCollection<DepartmentDto> departments;

        #endregion

        #endregion

        #region Constructors
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:UserViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:UserViewModel"/>.
        /// </summary>
        public UserViewModel() : base()
        {
            Initialization();
        } // UserViewModel Constructor

        private void Initialization()
        {
            // .en https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the class UserControl what is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(UserQueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("UserAlias");
            locBinding.SetBinding(this, targetProperty);

            // .en after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };
        } // UserViewModel intialization
        /// <summary>
        /// .en Child composed constructor <see cref="T:UserViewModel"/>.
        /// This constructor is used to be the viewmodel of a nested viemodel in a hierchahy.
        /// </summary>
        /// <param name="element">
        /// .en Parameter of type <see cref="UserDto"/> with all the related data.</param>
        /// <param name="first">first element in the current paged collection</param>
        /// <param name="previous">last element in the current paged collection</param>
        /// <param name="next">next element in the current paged collection</param>
        /// <param name="last">last element in the current paged collection</param>
        /// <remarks>
        /// .en these intialization are to allow navigation betwen pages and not only next record. TODO: test this.
        /// </remarks>
        public UserViewModel(UserDto element, UserDto first, UserDto previous, UserDto next, UserDto last)
            : base(element)
        {
            this.firstEntityId = first != null ? first.Id: default(Int32);
            this.nextEntityId = next != null ? next.Id : default(Int32);
            this.lastEntityId = last != null ? last.Id : default(Int32);
            this.previousEntityId = previous != null ? previous.Id : default(Int32);
            
            Initialization();

        } // UserViewModel Parametrized Constructor


        #endregion

        #region Properties

        /// <summary>
        /// .es Propiedad para establecer el Título de la ventana cuando este view model se utiliza 
        /// en un control de usuario o ventana exclusivamente para el.
        /// cuando este view model se utiliza solo en una lista esta propiedad no se utiliza.
        /// </summary>
        public override string Title{ get; set; }

        /// <summary>
        /// Field to explain the meaning of this key
        /// </summary>
        public string Name
        {
            get
            {
                return this.ObjectElement.Name;
            }
            set
            {
                if (this.ObjectElement.Name != value)
                {
                    this.ObjectElement.Name  = value;
                    this.RaisePropertyChanged(() => this.Name);
                }
            }
        } // Name

        #endregion

        #region Properties from Parents
        // .en collections to select parent properties.
        // .es colecciones para seleccionar propiedades parentales.
        //private ObservableCollection<DepartmentDto> departments; 		

        /// <summary>
        /// ***
        /// </summary>
        public string Department
        {
            get
            {
                return this.ObjectElement.Department.Name;
            }
            set
            {
                if (this.ObjectElement.Department.Name != value)
                {
                    this.ObjectElement.Department.Name = value;
                    this.RaisePropertyChanged(() => this.Department);
                }
            }
        } // Department

        /// <summary>
        /// .en Collection where to chose one parent
        /// </summary>
        public ObservableCollection<DepartmentDto> Departments
        {
            get
            {
                return this.departments;
            }
            set
            {
                if (this.departments != value)
                {
                    this.departments = value;
                    this.SelectedDepartment = this.departments.First();
                }
            }
        } // Departments

        /// <summary>
        /// 
        /// </summary>
        public DepartmentDto SelectedDepartment
        {
            get
            {
                return this.ObjectElement.Department;
            }
            set
            {
                if (this.ObjectElement.Department != value)
                {
                    this.ObjectElement.Department = value;
                    this.RaisePropertyChanged(() => this.SelectedDepartment);
                }
            }
        } // SelectedDepartment

        #endregion

        #region Properties from Children


        /// <summary>
        /// 
        /// </summary>
        public AddressQueryViewModel AddressesQueryVM
        {
            get
            {
                return addressesQueryVM;
            }
            set
            {
                if (this.addressesQueryVM != value)
                {
                    this.addressesQueryVM = value;
                    this.RaisePropertyChanged(() => this.AddressesQueryVM);
                }
            }
        } // Addresses

        /// <summary>
        /// 
        /// </summary>
        public AddressViewModel Address1VM
        {
            get
            {
                return address1VM;
            }
            set
            {
                if (this.address1VM != value)
                {
                    this.address1VM = value;
                    this.RaisePropertyChanged(() => this.Address1VM);
                }
            }
        } // Addresses

        #endregion

        #region Methods
        /// <summary>
        /// Deactivate all the children ViewModels the collections of related aggregates.
        /// </summary>
        public override void DeactivateChildrenCollections()
        {
            if ( this.AddressesQueryVM != null)
            {
                this.AddressesQueryVM.IsActive = false;
            }

        }


        /// <summary>.es Obtener el dto de la entidad User por su identificador.</summary>
        /// <param name="identifier">.es Parámetro que indica el identificador de la entidad que se va a recuperar.</param>
        /// <returns>.es Devuelve el objeto Dto <see cref="UserDto"/> correspondiente.</returns>
        public override UserDto GetById(Int32 identifier)
        {
            UserServiceClient serviceClient = new UserServiceClient();
            // .en consume the service and get the data // .es Consumimos el servicio y obtenemos los datos.
            var userDto = serviceClient.GetById(identifier );

            return userDto;
        } // GetById

        /// <summary>.es Crear o actualizar una entidad de tipo User.</summary>
        /// <param name="parameter">data to update.</param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive &&
                    (this.ObjectElement != null))
            {
                if (this.IsTransient)
                {
                    var a1 = this.Address1VM.ObjectElement.StreetName;
                    var a2 = this.Address1VM.ObjectElement.BuildingNumber;
                    this.ObjectElement.Addresses.Add(this.address1VM.ObjectElement);
                }

                
                UserServiceClient serviceClient = new UserServiceClient();

                if (this.ObjectElement.Id == default(Int32) )
                {
                    serviceClient.Create(this.ObjectElement);
                    //this.Address1VM.OnSaveRecord(parameter);
                    this.MessageBoxService.Show("Entidad agregada");
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement);
                    this.MessageBoxService.Show("Entidad actualizada");
                }

                UpdateParentView();
            }
        } // OnSaveRecord

        /// <summary>.en Create a new User</summary>
        /// <param name="parameter">.en Data to create the new User</param>
        public override void OnNewRecord(object parameter)
        {
            var views = this.RegionManager.Regions[Inflexion2.UX.WPF.MVVM.RegionNames.WorkspaceRegion].ActiveViews;
            base.OnNewRecord(parameter);
            this.Initialization();
            UserView currentView = (UserView)views.FirstOrDefault();

            // .en Nested Query view models for the controls of children properties.
            // .es View models anidados para los controles de colecciones de propiedades correspondientes a los hijos.
        }

        #endregion

        #region Protected Methods

        // .en implement here the loading of related entities or value objects.
        // .es implementar aqui los metodos de carga  de entidades u objetos valor relacionadas al root aggregate.

        private void PopulateDepartments(Int32 filterId)
        {
            DepartmentServiceClient serviceClient = new DepartmentServiceClient();
            if (filterId ==  default(Int32))
            {
                this.Departments = serviceClient.GetAll();
            }
            else
            {
                this.Departments = new ObservableCollection<DepartmentDto>() { serviceClient.GetById(filterId) };
            }

            //try
            //{
            //    serviceClient.BeginGetAll( (asyncResult) =>
            //    {
            //        try
            //        {
            //            this.Departments = serviceClient.EndGetAll(asyncResult);

            //        }
            //        catch (TimeoutException e)
            //        {
            //            this.MessageBoxService.Show("The service operation timed out. " + e.Message);
            //            serviceClient.Abort();
            //        }
            //        catch (FaultException<Inflexion2.Application.ValidationException> e)
            //        {
            //            this.MessageBoxService.Show("Validation Exception. Message: {0}", e.Message);
            //            serviceClient.Abort();
            //        }
            //        catch (FaultException<Inflexion2.Application.InternalException> e)
            //        {
            //            this.MessageBoxService.Show("Internal Exception. Message: {0}", e.Message);
            //            serviceClient.Abort();
            //        }
            //        // Catch unrecognized faults.This handler receives exceptions thrown by WCF
            //        //services when ServiceDebugBehavior.IncludeExceptionDetailInFaults
            //        //is set to true or when un - typed FaultExceptions raised.
            //        catch (FaultException fe)
            //        {
            //            this.MessageBoxService.Show("Unhalded fault exception. Message:" + fe.Message);
            //            serviceClient.Abort();
            //        }
            //        catch (Exception e)
            //        {
            //            this.MessageBoxService.Show("Unexpected exception" + e.Message);
            //            serviceClient.Abort();
            //            throw;
            //        }
            //        //finally
            //        //{

            //        //}
            //    },
            //    null);
            //}
            //catch (Exception e)
            //{
            //    this.MessageBoxService.Show("error on UserViewModel.Departments collection." + e.Message);
            //    serviceClient.Abort();
            //    throw;
            //}

        }


        /// <summary>
        /// example to execute validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.propiedad,
            //                   () => RuleResult.Assert(
            //                                           this.propiedad != null,
            //                                           "mensaje"));

        }

        /// <summary>
        /// .en Here is possible to override the actions to execute when there is a navigation request
        /// </summary>
        /// <remarks>
        /// .en Here is where to call to the methods to load the related entities (children and parents).
        /// .es aqui es donde se invoca a los métodos de carga de las entidades adicionales.
        /// </remarks>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            base.OnNavigatedTo(navigationContext);
            //.en load parent entities
            //.es cargar aqui las entidades padre

            // this logic applys when you came from the collection of users through double click
            // load parent entities and populate the related combobox with unique value

            // el parametro navigationContext se utiliza para filtrar la información que cargamos
            KeyValuePair<string, string> filterKeyValue = default(KeyValuePair<string, string>);
            string[] filterOperation;

            filterKeyValue = navigationContext.Parameters.FirstOrDefault(c => c.Key.StartsWith("filter;Department"));
            if (!filterKeyValue.Equals(default(KeyValuePair<string, string>)) && filterKeyValue.Key.EndsWith("Id"))
            {
                filterOperation = filterKeyValue.Value.Split(';');
                //var specification = Inflexion2.Extensions.SpecificationsLinqExtensions.CreateSpecification<DepartmentDto>(filterProperty, filterOperation.First(), filterOperation.Last());
                Int32 id = Int32.Parse(filterOperation.Last());

                // populate the combobox with only one value
                PopulateDepartments(id);
            }
            else
            {
                // populate the combobox with all values
                PopulateDepartments(default(Int32));
            }
            //.en load children entities
            //.es cargar aqui los agregados relacionados

            //if(!this.IsTransient)
            //{
                this.addressesQueryVM = new AddressQueryViewModel(this.ObjectElement.Addresses);
            //}
            //else
            //{
                this.address1VM = new AddressViewModel();
            //}
            

            this.Rebind();
        }

        /// <summary>. en Action to execute when there is a call to update the view.</summary>
        /// <param name="message"></param>
        public override void OnReceiveCompositeViewUpdateEvent(string message)
        {
            this.AddressesQueryVM.OnGetRecords("from UserViewModel");			
        }
        internal void RefreshRelatedEntities()
        {
            this.RaisePropertyChanged(() => this.Departments);
            this.RaisePropertyChanged(() => this.SelectedDepartment);
        }

        #endregion
    }
} //  Needel.Common.FrontEnd.WpfModule
