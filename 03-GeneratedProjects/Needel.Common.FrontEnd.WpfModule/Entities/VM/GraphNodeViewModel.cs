
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="GraphNode" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityViewModelCT.tt" with "public class WpfEntityViewModelCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityViewModelCT.tt" con "public class WpfEntityViewModelCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.FrontEnd.WpfModule
{

    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.ServiceModel;
    using System.Windows;
    using System.Windows.Input;

    using MvvmValidation;
    using Needel.Common.Domain.Data;
    using Needel.Common.Application;
    using Needel.Common.Application.Dtos;
    using Needel.Common.Infrastructure.Resources;
    using Needel.Common.Application.WcfClient.GraphNodeReference;

    using Inflexion2.Domain.Data;
    using Inflexion2.Application;
    using Inflexion2.Resources;
    using Inflexion2.UX.WPF.MVVM;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    #endregion

    /// <summary>
    /// .en Interaction logic for GraphNodeViewModel.xaml
    /// .es Logica de interación para la vista GraphNodeViewModel.xaml
    /// </summary>
    public partial class GraphNodeViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<GraphNodeDto, Int32>, IEditableObject
    {
        #region Fields

        /// <summary>
        /// Campo para indicar que el viewmodel esta embevido en un viewmodel parental con el objeto de 
        /// de asegurar que se añade al menos un registro en esta entidad cuando se crea el padre de esta.
        /// </summary>
        bool from1VM;

        private GraphNodeQueryViewModel rightNodesQueryVM;
        private GraphNodeQueryViewModel leftNodesQueryVM;
        private ObservableCollection<GraphNodeDto> graphNodesCombo;//**# es reflexiva es Many 2 Many
        private GraphNodeQueryViewModel allGraphNodesQueryVM;//**#
        bool leftNodesVisible = false;//**#
        private bool graphNodeComboVisible = false;//**#
        #endregion

        #region Constructors
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:GraphNodeViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:GraphNodeViewModel"/>.
        /// </summary>
        public GraphNodeViewModel() : base()
        {
            Initialization();
        } // GraphNodeViewModel Constructor

        public override void Initialization(GraphNodeDto element = null)
        {
            // .en https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the class GraphNodeControl what is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(GraphNodeQueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("GraphNodeAlias");
            locBinding.SetBinding(this, targetProperty);
            this.CurrentViewName = "GraphNodeView";
            // .en after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };

            if ((this.ObjectElement != null && element != null && !this.ObjectElement.Equals(element)) || (this.ObjectElement == null && element != null))
            {
                this.ObjectElement = element;
            }

        } // GraphNodeViewModel initialization

        /// <summary>
        /// .en Child composed constructor <see cref="T:GraphNodeViewModel"/>.
        /// This constructor is used to be the viewmodel of a nested viemodel in a hierchahy.
        /// </summary>
        /// <param name="element">
        /// .en Parameter of type <see cref="GraphNodeDto"/> with all the related data.</param>
        /// <param name="first">first element in the current paged collection</param>
        /// <param name="previous">last element in the current paged collection</param>
        /// <param name="next">next element in the current paged collection</param>
        /// <param name="last">last element in the current paged collection</param>
        /// <remarks>
        /// .en these initialization are to allow navigation betwen pages and not only next record. TODO: test this.
        /// </remarks>
        public GraphNodeViewModel(GraphNodeDto element, GraphNodeDto first, GraphNodeDto previous, GraphNodeDto next, GraphNodeDto last)
            : base(element)
        {
            this.firstEntityId = first != null ? first.Id: default(Int32);
            this.nextEntityId = next != null ? next.Id : default(Int32);
            this.lastEntityId = last != null ? last.Id : default(Int32);
            this.previousEntityId = previous != null ? previous.Id : default(Int32);
            
            Initialization(element);

        } // GraphNodeViewModel Parametrized Constructor


        /// <summary>
        /// .es Inicializa una nueva instancia de la clase <see cref="T:UserViewModel"/>.
        /// Este constructor se invoca desde el QueryViewModel ya que para cada 
        /// linea que se visualiza en la lista de Usuarios se crea el Viewmodel de dicho usuario.
        /// Esta lista se almacena en una observable collection en el query view model con la que se hace el binding 
        /// de la pantalla query.
        /// Por esta razon las entidades relacionadas no se cargan si no se navega hasta esta entidad.
        /// </summary>
        /// <param name="element">
        /// Parámetro de tipo <see cref="GraphNodeDto"/> que contiene la información necesaria.
        /// </param>
        public GraphNodeViewModel(GraphNodeDto element, bool simpleViewModel = true)
            :  base(element)
        {
            if (!simpleViewModel)
            {
                Initialization(element);
            }
        } // GraphNodeViewModel Parametrized Constructor

        #endregion

        #region Properties

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get
            {
                return this.ObjectElement.Name;
            }
            set
            {
                if (this.ObjectElement.Name != value)
                {
                    this.ObjectElement.Name  = value;
                    this.RaisePropertyChanged(() => this.Name);
                }
            }
        } // Name

        #endregion

        #region Properties from Parents

        // .en wrappers to help the managment of parent entities and their collections


    #region UI controls visibility to manage parent properties in the view 
    #endregion


        /// <summary>
        /// Wraper property to help binding  
        /// </summary>
        public System.Collections.Generic.List<GraphNodeDto> LeftNodes
        {
            get
            {
                return this.ObjectElement.LeftNodes;
            }
            set
            {
                if (this.ObjectElement.LeftNodes != value)
                {
                    if (value == null )
                    {
                        this.ObjectElement.LeftNodes = null;
                    }
                    else
                    {
                        this.ObjectElement.LeftNodes = value;
                    }

                    this.RaisePropertyChanged(() => this.LeftNodes);
                }
            }
        } // LeftNodes

        /// <summary>
        /// .en Collection where to chose one parent from combobox for collections smaller than 50
        /// </summary>
        public ObservableCollection<GraphNodeDto> GraphNodesCombo
        {
            get
            {
                return this.graphNodesCombo;
            }
            set
            {
                if (this.graphNodesCombo != value)
                {
                    this.graphNodesCombo = value;
                }
            }
        }

        #endregion

        #region Properties from Children

        /// <summary>
        /// Property helper to allow easy access to the children properties
        /// </summary>
        public System.Collections.Generic.List<GraphNodeDto> RightNodes
        {
            get
            {
                return this.ObjectElement.RightNodes;
            }
            set
            {
                if (this.ObjectElement.RightNodes != value)
                {
                    if (value == null )
                    {
                        this.ObjectElement.RightNodes = null;
                    }
                    else
                    {
                        this.ObjectElement.RightNodes = value;
                    }

                    this.RaisePropertyChanged(() => this.RightNodes);
                }
            }
        } // RightNodes

        /// <summary>
        /// 
        /// </summary>
        public GraphNodeQueryViewModel RightNodesQueryVM
        {
            get
            {
                return rightNodesQueryVM;
            }
            set
            {
                if (this.rightNodesQueryVM != value)
                {
                    this.rightNodesQueryVM = value;
                    this.rightNodesQueryVM.ParentViewName = this.CurrentViewName;
                    this.rightNodesQueryVM.Title = "RightNodesQueryVM";
                    this.RaisePropertyChanged(() => this.RightNodesQueryVM);
                }
            }
        } // RightNodesQueryViewModel

        /// <summary>
        /// collection with all free items for drag and drop
        /// </summary>
        public GraphNodeQueryViewModel AllGraphNodesQueryVM
        {
            get
            {
                return allGraphNodesQueryVM;
            }
            set
            {
                if (this.allGraphNodesQueryVM != value)
                {
                    this.allGraphNodesQueryVM = value;
                    this.allGraphNodesQueryVM.Title = "AllGraphNodesQueryVM"; //mark the viewmodel to facilitate the drag&drop
                    this.allGraphNodesQueryVM.ParentViewName = this.CurrentViewName;
                    // todo: add a reference to parentviewmodel = this;
                    this.RaisePropertyChanged(() => this.AllGraphNodesQueryVM);
                }
            }
        } // AllGraphNodesQueryVM

        /// <summary>
        /// 
        /// </summary>
        public GraphNodeQueryViewModel LeftNodesQueryVM
        {
            get
            {
                return leftNodesQueryVM;
            }
            set
            {
                if (this.leftNodesQueryVM != value)
                {
                    this.leftNodesQueryVM = value;
                    this.leftNodesQueryVM.ParentViewName = this.CurrentViewName;
                    this.leftNodesQueryVM.Title = "LeftNodesQueryVM";
                    this.RaisePropertyChanged(() => this.LeftNodesQueryVM);
                }
            }
        } // LeftNodesQueryVM

        #endregion

        #region Methods
        /// <summary>.es Obtener el dto de la entidad GraphNode por su identificador.</summary>
        /// <param name="identifier">.es Parámetro que indica el identificador de la entidad que se va a recuperar.</param>
        /// <returns>.es Devuelve el objeto Dto <see cref="GraphNodeDto"/> correspondiente.</returns>
        public override GraphNodeDto GetById(Int32 identifier)
        {
            GraphNodeServiceClient serviceClient = new GraphNodeServiceClient();
            // .en consume the service and get the data // .es Consumimos el servicio y obtenemos los datos.
            var graphNodeDto = serviceClient.GetById(identifier );

            return graphNodeDto;
        } // GetById

        /// <summary>.es Crear o actualizar una entidad de tipo GraphNode.</summary>
        /// <param name="parameter">data to update.</param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive && this.ObjectElement != null)
            {
                GraphNodeServiceClient serviceClient = new GraphNodeServiceClient();
                if (this.ObjectElement.Id == default(Int32) )
                {
                    serviceClient.Create(this.ObjectElement);
                    this.MessageBoxService.Show(FrameworkResource.AddedSuccessfullyEntity);
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement);
                    this.MessageBoxService.Show(FrameworkResource.UpdatedSuccessfullyEntity);
                }

                UpdateParentView();
            }
        }

        /// <summary>.en Create a new GraphNode</summary>
        /// <param name="parameter">.en Data to create the new GraphNode</param>
        public override void OnNewRecord(object parameter)
        {
            var views = this.RegionManager.Regions[Inflexion2.UX.WPF.MVVM.RegionNames.WorkspaceRegion].ActiveViews;
            base.OnNewRecord(parameter);
            this.Initialization();
            GraphNodeView currentView = (GraphNodeView)views.FirstOrDefault(c => c as GraphNodeView != null);

            // .en Nested Query view models for the controls of children properties or Many to Many.
            // .es View models anidados para los controles de colecciones de propiedades correspondientes a los hijos.
            (currentView.RightNodesQueryView).DataContext = new GraphNodeQueryViewModel();
            ((GraphNodeQueryViewModel)(currentView.RightNodesQueryView).DataContext).RefreshItems();//*

            (currentView.LeftNodesQueryView).DataContext = new GraphNodeQueryViewModel();
            ((GraphNodeQueryViewModel)(currentView.LeftNodesQueryView).DataContext).RefreshItems();//**

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="dataContextTarget"></param>
        /// <param name="data"></param>
        public void AttachGraphNode(GraphNodeQueryViewModel dataContextTarget, GraphNodeDto data)//*
        {
            if (dataContextTarget.Title == "LeftNodesQueryVM")
            {
                this.ObjectElement.LeftNodes.Add(data);
                LeftNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.LeftNodes, this.CurrentViewName);

                this.LeftNodesQueryVM.Rebind();
            }

            if (dataContextTarget.Title == "RightNodesQueryVM")
            {
                this.ObjectElement.RightNodes.Add(data);
                RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);
                this.RightNodesQueryVM.Rebind();
            }

                var vm = AllGraphNodesQueryVM.Items.First(c => c.Id == data.Id);
                AllGraphNodesQueryVM.Items.Remove(vm);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="sourceTittle"></param>
        /// <param name="dataContextTarget"></param>
        /// <param name="data"></param>
        public void RemoveGraphNode(string sourceTittle, GraphNodeQueryViewModel dataContextTarget, GraphNodeDto data)
        {
            GraphNodeViewModel vm = null;

            if (dataContextTarget.Title == "AllLeftNodes")
            {
                if (sourceTittle == "LeftNodesQueryVM")
                {
                    vm = LeftNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.LeftNodesQueryVM.Items.Remove(vm);
                    this.ObjectElement.LeftNodes.Remove(data);
                    //LeftNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.LeftNodes, this.CurrentViewName);
                }

                if (sourceTittle == "RightNodesQueryVM")//else
                {
                    vm = LeftNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.LeftNodesQueryVM.Items.Remove(vm);
                    this.ObjectElement.LeftNodes.Remove(data);
                    //RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);
                }

                AllGraphNodesQueryVM.Items.Add(vm);
                //AllGraphNodesQueryVM.Rebind();
                //this.LeftNodesQueryVM.Rebind();
            }

            if (dataContextTarget.Title == "LeftNodesQueryVM")
            {
                if (sourceTittle == "RightNodesQueryVM")
                {
                    vm = this.RightNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.RightNodesQueryVM.Items.Remove(vm);
                    this.ObjectElement.RightNodes.Remove(data);
                }
                else
                {
                    vm = LeftNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.AllGraphNodesQueryVM.Items.Remove(vm);
                }

                this.LeftNodesQueryVM.Items.Add(vm);
                this.ObjectElement.LeftNodes.Add(data);
                //this.LeftNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.LeftNodes, this.CurrentViewName);

            }

            if (dataContextTarget.Title == "RightNodesQueryVM")
            {
                if (sourceTittle == "LeftNodesQueryVM")
                {
                    vm = this.LeftNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.LeftNodesQueryVM.Items.Remove(vm);
                    this.ObjectElement.LeftNodes.Remove(data);
                }
                else
                {
                    vm = this.RightNodesQueryVM.Items.FirstOrDefault(c => c.Id == data.Id);
                    this.AllGraphNodesQueryVM.Items.Remove(vm);
                }

                this.RightNodesQueryVM.Items.Add(vm);
                this.ObjectElement.RightNodes.Add(data);
                //this.RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);
            }

            this.LeftNodesQueryVM.Rebind();
            this.RightNodesQueryVM.Rebind();
            this.AllGraphNodesQueryVM.Rebind();
        //}//1@
        }//2@

        public void AttachGraphNode(GraphNodeDto data)//**bis
        {
            this.ObjectElement.RightNodes.Add(data);
            RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);
        
            var vm = AllGraphNodesQueryVM.Items.First(c => c.Id == data.Id);
            AllGraphNodesQueryVM.Items.Remove(vm);
            this.RightNodesQueryVM.Rebind();
        }
        
        public void RemoveGraphNode(GraphNodeDto data)
        {
            var vm = AllGraphNodesQueryVM.Items.First(c => c.Id == data.Id);
            AllGraphNodesQueryVM.Items.Add(vm);
            this.ObjectElement.RightNodes.Remove(data);
            RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);
        
            AllGraphNodesQueryVM.Rebind();
            this.RightNodesQueryVM.Rebind();
        }
        #endregion

        #region Protected Methods
        // .en implement here the loading of related entities or value objects.
        // .es implementar aqui los metodos de carga  de entidades u objetos valor relacionadas al root aggregate.

        /// <summary>
        /// example to execute validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.propiedad,
            //                   () => RuleResult.Assert(
            //                                           this.propiedad != null,
            //                                           "mensaje"));
        }

        /// <summary>
        /// .en Here is possible to override the actions to execute when there is a navigation request
        /// </summary>
        /// <remarks>
        ///  this logic applys when you came from the collection of users through double click
        ///  load parent entities and populate the related combobox with unique value
        /// .en Here is where to call to the methods to load the related entities (children and parents).
        /// .es aqui es donde se invoca a los métodos de carga de las entidades adicionales.
        /// </remarks>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            base.OnNavigatedTo(navigationContext);
            if (navigationContext.Parameters["Id"] != default(Int32).ToString())//*
            {
                // only in this case there is a need of subscription to update a parent view
                if (!CompositeViewUpdateEvent.Contains(this.OnReceiveCompositeViewUpdateEvent))
                {
                    CompositeViewUpdateEvent.Subscribe(this.OnReceiveCompositeViewUpdateEvent, ThreadOption.UIThread);
                }
            }

            this.LeftNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.LeftNodes, this.CurrentViewName);//*-
            this.LeftNodesQueryVM.Rebind();
            GraphNodeServiceClient serviceClient = new GraphNodeServiceClient();
            var usedLeftNodes = this.ObjectElement.LeftNodes.Select(c =>c.Id).ToList();
            //usedLeftNodes.Add(this.Id);
            var usedIds = new ObservableCollection<Int32>(usedLeftNodes);
            
            //var allLeftNodes = serviceClient.GetAllExceptThese(usedIds).ToList();
            //AllLeftNodesQueryVM = new GraphNodeQueryViewModel(allLeftNodes, this.CurrentViewName);
            //this.LeftNodesQueryVM.Rebind();
            this.RightNodesQueryVM = new GraphNodeQueryViewModel(this.ObjectElement.RightNodes, this.CurrentViewName);//*---
            this.RightNodesQueryVM.Rebind();
            var usedRightNodes = this.ObjectElement.RightNodes.Select(c =>c.Id).ToList();
            foreach (var id in usedRightNodes)
            {
                usedIds.Add(id);
            }
            
            usedIds.Add(this.Id);
            var allGraphNodes = serviceClient.GetAllExceptThese(usedIds).ToList();
            this.AllGraphNodesQueryVM = new GraphNodeQueryViewModel(allGraphNodes, this.CurrentViewName);
            this.AllGraphNodesQueryVM.Rebind();

            this.Rebind(); //*]
            //.en load children entities
            //.es cargar aqui los agregados relacionados

            this.RightNodesQueryVM.Rebind();
            this.Rebind();
        }

        /// <summary>. en Action to execute when there is a call to update the view.</summary>
        /// <param name="message"></param>
        public override void OnReceiveCompositeViewUpdateEvent(string message)
        {
            this.RightNodesQueryVM.OnGetRecords("from GraphNodeViewModel");			
            this.LeftNodesQueryVM.OnGetRecords("from GraphNodeViewModel");			
        }

        internal void RefreshRelatedEntities()
        {
        }

        /// <summary>
        /// override of Generic BeginEdit to avoid the edition in the blank line of query viewmodel with double click
        /// </summary>
        public override void BeginEdit()
        {
            if (!this.inTxn && this.IsNotTransient)
            {
                this.inTxn = true;
                if (this.backupEntity == null)
                    this.backupEntity = (GraphNodeDto)this.ObjectElement.Clone();
            }
            else
            {
                // this event comes from a double clik in a query view 
                //Dictionary<string, string> parameters = new Dictionary<string, string>();
                //parameters.Add("GraphNode; LeftNodes.Id", this.Id.ToString());
                //this.NavigationService.NavigateTo(RegionNames.WorkspaceRegion, typeof(GraphNodeView).FullName, parameters);
                this.CancelEdit();
                this.NavigationService.NavigateToWorkSpace(typeof(GraphNodeView).FullName, this.Id);
            }
        }
        #endregion
    }
} //  Needel.Common.FrontEnd.WpfModule
