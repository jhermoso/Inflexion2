
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="AppSetting" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityViewModelCT.tt" with "public class WpfEntityViewModelCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityViewModelCT.tt" con "public class WpfEntityViewModelCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.FrontEnd.WpfModule
{

    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.ServiceModel;
    using System.Windows;
    using System.Windows.Input;

    using MvvmValidation;
    using Needel.Common.Domain.Data;
    using Needel.Common.Application;
    using Needel.Common.Application.Dtos;
    using Needel.Common.Infrastructure.Resources;
    using Needel.Common.Application.WcfClient.AppSettingReference;

    using Inflexion2.Domain.Data;
    using Inflexion2.Application;
    using Inflexion2.Resources;
    using Inflexion2.UX.WPF.MVVM;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Microsoft.Practices.Prism.Commands;
    using Microsoft.Practices.Prism.Events;
    #endregion

    /// <summary>
    /// .en Interaction logic for AppSettingViewModel.xaml
    /// .es Logica de interación para la vista AppSettingViewModel.xaml
    /// </summary>
    public partial class AppSettingViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<AppSettingDto, Int32>, IEditableObject
    {
        #region Fields

        /// <summary>
        /// Campo para indicar que el viewmodel esta embevido en un viewmodel parental con el objeto de 
        /// de asegurar que se añade al menos un registro en esta entidad cuando se crea el padre de esta.
        /// </summary>
        bool from1VM;

        #endregion

        #region Constructors
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:AppSettingViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:AppSettingViewModel"/>.
        /// </summary>
        public AppSettingViewModel() : base()
        {
            Initialization();
        } // AppSettingViewModel Constructor

        public override void Initialization(AppSettingDto element = null)
        {
            // .en https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the class AppSettingControl what is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(AppSettingQueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("AppSettingAlias");
            locBinding.SetBinding(this, targetProperty);
            this.CurrentViewName = "AppSettingView";
            // .en after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };

            if ((this.ObjectElement != null && element != null && !this.ObjectElement.Equals(element)) || (this.ObjectElement == null && element != null))
            {
                this.ObjectElement = element;
            }

        } // AppSettingViewModel initialization

        /// <summary>
        /// .es Inicializa una nueva instancia de la clase <see cref="T:UserViewModel"/>.
        /// Este constructor se invoca desde el QueryViewModel ya que para cada 
        /// linea que se visualiza en la lista de Usuarios se crea el Viewmodel de dicho usuario.
        /// Esta lista se almacena en una observable collection en el query view model con la que se hace el binding 
        /// de la pantalla query.
        /// Por esta razon las entidades relacionadas no se cargan si no se navega hasta esta entidad.
        /// </summary>
        /// <param name="element">
        /// Parámetro de tipo <see cref="AppSettingDto"/> que contiene la información necesaria.
        /// </param>
        public AppSettingViewModel(AppSettingDto element, bool simpleViewModel = true)
            :  base(element)
        {
            if (!simpleViewModel)
            {
                Initialization(element);
            }
        } // AppSettingViewModel Parametrized Constructor

        #endregion

        #region Properties

        /// <summary>
        /// App setting identity
        /// </summary>
        public string Key
        {
            get
            {
                return this.ObjectElement.Key;
            }
            set
            {
                if (this.ObjectElement.Key != value)
                {
                    this.ObjectElement.Key  = value;
                    this.RaisePropertyChanged(() => this.Key);
                }
            }
        } // Key
        /// <summary>
        /// 
        /// </summary>
        public string Value
        {
            get
            {
                return this.ObjectElement.Value;
            }
            set
            {
                if (this.ObjectElement.Value != value)
                {
                    this.ObjectElement.Value  = value;
                    this.RaisePropertyChanged(() => this.Value);
                }
            }
        } // Value
        /// <summary>
        /// Explanation of the meaning or use of this  key value par.
        /// </summary>
        public string Remark
        {
            get
            {
                return this.ObjectElement.Remark;
            }
            set
            {
                if (this.ObjectElement.Remark != value)
                {
                    this.ObjectElement.Remark  = value;
                    this.RaisePropertyChanged(() => this.Remark);
                }
            }
        } // Remark

        #endregion

        #region Properties from Parents

        // .en wrappers to help the managment of parent entities and their collections


    #region UI controls visibility to manage parent properties in the view 
    #endregion

        public Domain.Data.AppSettingType? AppSettingType
        {
            get
            {
                return this.ObjectElement.AppSettingType;
            }
            set
            {
                if (this.ObjectElement.AppSettingType != value)
                {
                    this.ObjectElement.AppSettingType = value;
                    this.RaisePropertyChanged(() => this.AppSettingType);
                }
            }
        } // AppSettingType

        #endregion

        #region Properties from Children
        #endregion

        #region Methods
        /// <summary>.es Obtener el dto de la entidad AppSetting por su identificador.</summary>
        /// <param name="identifier">.es Parámetro que indica el identificador de la entidad que se va a recuperar.</param>
        /// <returns>.es Devuelve el objeto Dto <see cref="AppSettingDto"/> correspondiente.</returns>
        public override AppSettingDto GetById(Int32 identifier)
        {
            AppSettingServiceClient serviceClient = new AppSettingServiceClient();
            // .en consume the service and get the data // .es Consumimos el servicio y obtenemos los datos.
            var appSettingDto = serviceClient.GetById(identifier );

            return appSettingDto;
        } // GetById

        /// <summary>.es Crear o actualizar una entidad de tipo AppSetting.</summary>
        /// <param name="parameter">data to update.</param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive && this.ObjectElement != null)
            {
                AppSettingServiceClient serviceClient = new AppSettingServiceClient();
                if (this.ObjectElement.Id == default(Int32) )
                {
                    serviceClient.Create(this.ObjectElement);
                    this.MessageBoxService.Show(FrameworkResource.AddedSuccessfullyEntity);
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement);
                    this.MessageBoxService.Show(FrameworkResource.UpdatedSuccessfullyEntity);
                }

                UpdateParentView();
            }
        }

        /// <summary>.en Create a new AppSetting</summary>
        /// <param name="parameter">.en Data to create the new AppSetting</param>
        public override void OnNewRecord(object parameter)
        {
            var views = this.RegionManager.Regions[Inflexion2.UX.WPF.MVVM.RegionNames.WorkspaceRegion].ActiveViews;
            base.OnNewRecord(parameter);
            this.Initialization();
        }

        #endregion

        #region Protected Methods
        // .en implement here the loading of related entities or value objects.
        // .es implementar aqui los metodos de carga  de entidades u objetos valor relacionadas al root aggregate.

        /// <summary>
        /// example to execute validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.propiedad,
            //                   () => RuleResult.Assert(
            //                                           this.propiedad != null,
            //                                           "mensaje"));
        }

        /// <summary>
        /// .en Here is possible to override the actions to execute when there is a navigation request
        /// </summary>
        /// <remarks>
        ///  this logic applys when you came from the collection of users through double click
        ///  load parent entities and populate the related combobox with unique value
        /// .en Here is where to call to the methods to load the related entities (children and parents).
        /// .es aqui es donde se invoca a los métodos de carga de las entidades adicionales.
        /// </remarks>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            base.OnNavigatedTo(navigationContext);
            Int32 parentAppSettingTypeId = default(Int32);

            if (navigationContext.Parameters["Id"] != default(Int32).ToString())//#
            {
                var parameter = navigationContext.Parameters["Id"];
                if (parameter != null)
                {
                    parentAppSettingTypeId = Int32.Parse(parameter.Split(';').Last());
                }
            }
            this.Rebind();
        }


        /// <summary>
        /// override of Generic BeginEdit to avoid the edition in the blank line of query viewmodel with double click
        /// </summary>
        public override void BeginEdit()
        {
            if (!this.inTxn && this.IsNotTransient)
            {
                this.inTxn = true;
                if (this.backupEntity == null)
                    this.backupEntity = (AppSettingDto)this.ObjectElement.Clone();
            }
            else
            {
                this.CancelEdit();
                this.NavigationService.NavigateToWorkSpace(typeof(AppSettingView).FullName, this.Id);
            }
        }
        #endregion
    }
} //  Needel.Common.FrontEnd.WpfModule
