#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationIocRepositoryLayer.tt" with "public class ApplicationIocRepositoryLayer : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationIocRepositoryLayer.tt" con "public class ApplicationIocRepositoryLayer : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application.WcfService
{
    #region usings
    using System;
    using System.Data.Entity;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Configuration;

    using Microsoft.Practices.Unity;
    using Inflexion2;
    using Inflexion2.Domain;
    using Inflexion2.Data;
    using Inflexion2.Application;

    using Needel.Common.Domain;
    using Needel.Common.Domain.Data;
    using Needel.Common.Infrastructure;
    #endregion
    /// <summary>
    /// Registra en el contenedor de Ioc de la capa de aplicacion las clases de acceso al repositorio
    /// </summary>
    public static class CommonRepositoryLayer
    {
        private static string ConnString = null;

        /// <summary>
        /// 
        /// </summary>
        public static Needel.Common.Infrastructure.SetupCommonAppSettings CommonAppSettings;
        
        /// <summary>
        /// UoW instance
        /// </summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2211:NonConstantFieldsShouldNotBeVisible")]
        public static EfUnitOfWorkFactory<Needel.Common.Infrastructure.BootstrapUnitOfWork> CtxFactory = null;
        
        /// <summary>
        /// Register in IoC container the repository
        /// </summary>
        public static void IocRegistry()
        {
            // Context Factory
            CommonAppSettings = new Needel.Common.Infrastructure.SetupCommonAppSettings();
            ConnString = ConnectionString();
            CtxFactory = new EfUnitOfWorkFactory<Needel.Common.Infrastructure.BootstrapUnitOfWork>(ConnString);//1

            //ctxFactory.ValidateDatabaseSchema();//1
            if (!CtxFactory.DatabaseExists())
            {
                CtxFactory.CreateDatabase();
            }

            ApplicationLayer.IocContainer.RegisterInstance<IDatabaseManager>(CtxFactory);
            ApplicationLayer.IocContainer.RegisterType<IUnitOfWork, EfUnitOfWork>(ApplicationLayer.UnitOfWorkPerTestLifeTimeManager);
            ApplicationLayer.IocContainer.RegisterType<DbContext, BootstrapUnitOfWork>(ApplicationLayer.ContextPerTestLifeTimeManager, new InjectionConstructor(ConnString));
            RegisterRepositoryTypes();
        }
        private static void RegisterRepositoryTypes()
        {
            // registramos el repositorio de cada uno de las entidades que son rootaggregates
            ApplicationLayer.IocContainer.RegisterType<IUserRepository, UserRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IAppSettingRepository, AppSettingRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IDepartmentRepository, DepartmentRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IAddressRepository, AddressRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IComponentRepository, ComponentRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<ITeacherRepository, TeacherRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IStudentRepository, StudentRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IGraphNodeRepository, GraphNodeRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IEntityMRepository, EntityMRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IMNZRepository, MNZRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IEntityNRepository, EntityNRepository>(new PerResolveLifetimeManager());
            ApplicationLayer.IocContainer.RegisterType<IEntityZRepository, EntityZRepository>(new PerResolveLifetimeManager());
// bloque de cierre
}

        /// <summary>
        /// Get the conection string from the App.config or web config file asociated to the project on execution.
        /// </summary>
        /// <returns>The database connection string </returns>
        static private string ConnectionString()
        {

            System.Diagnostics.Contracts.Contract.Requires<ConfigurationErrorsException>(ConfigurationManager.AppSettings != null, "The configuration file don't exist or is not in the executed project");
            //System.Diagnostics.Contracts.Contract.Requires<ConfigurationErrorsException>(AppConfigHasTheSection("Suite.Connection"), "The configuration file has not a 'Suite.Connection' name for a connection string ");
            string result;
            try
            {
                result = ConfigurationManager.ConnectionStrings["Needel.Connection"].ConnectionString;
            }
            catch (ConfigurationErrorsException)
            {
                throw;
            }

            return result;
        }
    }
}
