#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="AppSetting" company="Company">
//     Copyright (c) 2019. Company. All Rights Reserved.
//     Copyright (c) 2019. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationRemoteFacadeBaseSvcCsCT.tt" with "public class ApplicationRemoteFacadeBaseSvcCsCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationRemoteFacadeBaseSvcCsCT.tt" con "public class ApplicationRemoteFacadeBaseSvcCsCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application.WcfService
{
    #region sharedKernel usings
    #endregion 

    #region general usings
    using System;
    using System.Configuration;
    using System.Collections.Generic;
    using System.ServiceModel;

    using Inflexion2.Domain;
    //using Inflexion2.Application.Security.Data.Base;
    using Needel.Common.Application.Dtos;

    using Inflexion2.Application;
    //using Inflexion2.Application.DataTransfer.Core;
    //using Inflexion2.Application.Security.RemoteFacade;
    using Inflexion2.Infrastructure;

    using Needel.Common.Application;
    using Needel.Common.Application.WcfService.Contracts;
    //using AppSrvCore = Needel.Common.Application;
    #endregion

    /// <summary>
    /// Clase pública del servicio Wcf encargada de realizar las tareas 
    /// relacionadas con la entidad AppSetting.
    /// </summary>
    [ApplicationErrorHandlerAttribute]
    public partial class AppSettingService : IAppSettingService
    {

        #region Fields

        /// <summary>
        /// Referencia a los servicios de administración de la entidad AppSetting.
        /// </summary>
        private readonly Needel.Common.Application.IAppSettingServices service;

        #endregion

        #region CONSTRUCTORS

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:AppSettingService"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:AppSettingService"/>.
        /// </remarks>
        public AppSettingService()
        {
            // HibernatingRhinos.Profiler.Appender.NHibernate.NHibernateProfiler.Initialize();
            // configuramos aqui el servicio o lo hacemos en el global asax
            // resolvemos con el ioc la interface de servicios de 
            this.service = new AppSettingServices();
        } // end AppSettingService Constructor

        #endregion

        #region Methods
        /// <summary>
        /// Función encargada de la creación de una entidad de tipo AppSetting.
        /// </summary>
        /// <param name="appSettingDto">
        /// Parámetro de tipo <see cref="AppSettingDto"/> con los datos necesarios
        /// para la creación de la entidad AppSetting.
        /// </param>
        /// <return>
        /// Devuelve el identificador único de la entidad creada.
        /// </return>
        public Int32 Create( AppSettingDto appSettingDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de creación mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<ICreateAppSetting>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // int identifier = data.Execute( appSettingDto);
            // Devolvemos la respuesta.
            // return identifier;

            //opción 2
            Int32 result = 0;
            try
            {
                result = this.service.Create(appSettingDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // end Create

        /// <summary>
        /// Función encargada de la actualziación de una entidad de tipo AppSetting.
        /// </summary>
        /// <param name="appSettingDto">
        /// Parámetro de tipo <see cref="AppSettingDto"/> con los datos necesarios
        /// para el borrado de la entidad AppSettingr.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la actualización ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        public bool Update( AppSettingDto appSettingDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de actualización mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IUpdateAppSetting>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( appSettingDto);
            // Devolvemos la respuesta.
            // return response;

            // opción 2
			bool result = false;
            try
            {
                result = this.service.Update(appSettingDto);
			}
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // end Update

        /// <summary>
        /// Función encargada del borrado de una entidad de tipo AppSetting.
        /// </summary>
        /// <remarks>
        /// Se trata de un borrado lógico.
        /// </remarks>
        /// <param name="id">
        /// Parámetro que indica el identificador único de la entidad a borrar.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la eliminación ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        //public bool Delete( AppSettingDto appSettingDto)
        public bool Delete(int id)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de borrado mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IDeleteAppSetting>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( appSettingId);
            // Devolvemos la respuesta.
            //return response;

            //opcion 2
			bool result = false;
            try
            {
                result = this.service.Delete(id);
			}
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // Delete


        /// <summary>
        /// Método encargado de obtener todas las entidades AppSetting.
        /// </summary>
        /// <returns>
        /// Devuelve listado de Dto´s de la entidad AppSetting.
        /// </returns>
        public IEnumerable<AppSettingDto> GetAll(  )
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetAllAppSetting>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //IEnumerable<AppSettingDto> result = service.Execute();
            // Devolvemos el resultado.
            //return result;
            
            // opcion 2
			IEnumerable<AppSettingDto> result = null;
            try
            {
                result = this.service.GetAll();
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // GetAll

        /// <summary>
        /// Método encargado de obtener una entidad AppSetting de acuerdo a
        /// su identificador.
        /// </summary>
        /// <param name="appSettingId">
        /// Parámetro que indica el identificador único de la entidad cuya
        /// información se desea obtener.
        /// </param>
        /// <returns>
        /// Devuelve objeto dto <see cref="AppSettingDto"/> con la información
        /// requerida.
        /// </returns>
        public AppSettingDto GetById( Int32 appSettingId )
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetByAppSettingId>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //AppSettingDto appSettingDto = service.Execute( appSettingId);
            // Devolvemos el resultado.
            //return appSettingDto;

            // opcion 2
			AppSettingDto result = null;
            try
            {
                result = this.service.GetById(appSettingId);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // GetById

        /// <summary>
        /// Recupera una lista paginada de entidades AppSetting, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades AppSetting, según la especificación indicada.
        /// </returns>
        public PagedElements<AppSettingDto> GetPaged(SpecificationDto specificationDto)
        {
			PagedElements<AppSettingDto>	result = null;
            try
            {
                result = this.service.GetPaged(specificationDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }


        #endregion

    } // end public partial class AppSettingService
} // end Needel.Common.Application.WcfService

