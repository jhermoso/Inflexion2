#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="User" company="Company">
//     Copyright (c) 2020. Company. All Rights Reserved.
//     Copyright (c) 2020. Company. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " ApplicationRemoteFacadeBaseSvcCsCT.tt" with "public class ApplicationRemoteFacadeBaseSvcCsCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "ApplicationRemoteFacadeBaseSvcCsCT.tt" con "public class ApplicationRemoteFacadeBaseSvcCsCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Needel.Common.Application.WcfService
{
    #region sharedKernel usings
    #endregion 

    #region general usings
    using System;
    using System.Configuration;
    using System.Collections.Generic;
    using System.ServiceModel;

    using Inflexion2.Domain;
    //using Inflexion2.Application.Security.Data.Base;
    using Needel.Common.Application.Dtos;
    using Needel.Common.Domain;

    using Inflexion2.Application;
    //using Inflexion2.Application.DataTransfer.Core;
    //using Inflexion2.Application.Security.RemoteFacade;
    using Inflexion2.Infrastructure;

    using Needel.Common.Application;
    using Needel.Common.Application.WcfService.Contracts;
    //using AppSrvCore = Needel.Common.Application;
    #endregion

    /// <summary>
    /// Clase pública del servicio Wcf encargada de realizar las tareas 
    /// relacionadas con la entidad User.
    /// </summary>
    [ApplicationErrorHandlerAttribute]
    public partial class UserService : IUserService
    {

        #region Configuration
     
       /// <summary>
       /// https://msdn.microsoft.com/en-us/library/hh205277(v=vs.110).aspx
       /// </summary>
       /// <param name="config"></param>
       public static void Configure(ServiceConfiguration config)
       {
            //var appConfigPath = System.IO.Directory.GetCurrentDirectory() + @"\Needel.Common.Application.WcfService.dll.config";
            //var confexe = new ExeConfigurationFileMap { ExeConfigFilename = appConfigPath };
            //var conf = ConfigurationManager.OpenMappedExeConfiguration(confexe, ConfigurationUserLevel.None);
            config.LoadFromConfiguration(/*conf*/);
            CommonRepositoryLayer.IocRegistry();
       }
     
        #endregion

        #region Fields

        /// <summary>
        /// Referencia a los servicios de administración de la entidad User.
        /// </summary>
        private readonly Needel.Common.Application.IUserServices service;

        #endregion

        #region CONSTRUCTORS

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:UserService"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:UserService"/>.
        /// </remarks>
        public UserService()
        {
            // HibernatingRhinos.Profiler.Appender.NHibernate.NHibernateProfiler.Initialize();
            // configuramos aqui el servicio o lo hacemos en el global asax
            // resolvemos con el ioc la interface de servicios de 
            this.service = new UserServices();
        } // end UserService Constructor

        #endregion

        #region Methods

        /// <summary>
        /// Función encargada de la creación de una entidad de tipo User.
        /// </summary>
        /// <param name="userDto">
        /// Parámetro de tipo <see cref="UserDto"/> con los datos necesarios
        /// para la creación de la entidad User.
        /// </param>
        /// <return>
        /// Devuelve el identificador único de la entidad creada.
        /// </return>
        public Int32 Create(UserDto userDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de creación mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<ICreateUser>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // Int32 identifier = data.Execute( userDto);
            // Devolvemos la respuesta.
            // return identifier;

            //opción 2
            Int32 result = 0;
            try
            {
                result = this.service.Create(userDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // end Create

        /// <summary>
        /// Función encargada de la actualziación de una entidad de tipo User.
        /// </summary>
        /// <param name="userDto">
        /// Parámetro de tipo <see cref="UserDto"/> con los datos necesarios
        /// para el borrado de la entidad Userr.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la actualización ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        public bool Update( UserDto userDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de actualización mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IUpdateUser>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( userDto);
            // Devolvemos la respuesta.
            // return response;

            // opción 2
            bool result = false;
            try
            {
                result = this.service.Update(userDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // end Update

        /// <summary>
        /// Función encargada del borrado de una entidad de tipo User.
        /// </summary>
        /// <param name="id">
        /// Parámetro que indica el identificador único de la entidad a borrar.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la eliminación ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        public bool Delete(Int32 id)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de borrado mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IDeleteUser>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( userId);
            // Devolvemos la respuesta.
            //return response;

            //opcion 2
            bool result = false;
            try
            {
                result = this.service.Delete(id);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // Delete

        /// <summary>
        /// Método encargado de obtener todas las entidades User.
        /// </summary>
        /// <returns>
        /// Devuelve listado de Dto´s de la entidad User.
        /// </returns>
        public IEnumerable<UserDto> GetAll()
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetAllUser>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //IEnumerable<UserDto> result = service.Execute();
            // Devolvemos el resultado.
            //return result;
            
            // opcion 2
            IEnumerable<UserDto> result = null;
            try
            {
                result = this.service.GetAll();
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // GetAll

        /// <summary>
        /// Método encargado de obtener una entidad User de acuerdo a
        /// su identificador.
        /// </summary>
        /// <param name="userId">
        /// Parámetro que indica el identificador único de la entidad cuya
        /// información se desea obtener.
        /// </param>
        /// <returns>
        /// Devuelve objeto dto <see cref="UserDto"/> con la información
        /// requerida.
        /// </returns>
        public UserDto GetById( Int32 userId )
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetByUserId>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //UserDto userDto = service.Execute( userId);
            // Devolvemos el resultado.
            //return userDto;

            // opcion 2
            UserDto result = null;
            try
            {
                result = this.service.GetById(userId);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        } // GetById

        /// <summary>
        /// Recupera una lista paginada de entidades User, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades User, según la especificación indicada.
        /// </returns>
        public PagedElements<UserDto> GetPaged(SpecificationDto specificationDto)
        {
            PagedElements<UserDto>	result = null;
            try
            {
                result = this.service.GetPaged(specificationDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public IEnumerable<Int32> DeleteAll()
        {
            IEnumerable<Int32> result = null;
            try
            {
                result = this.service.DeleteAll();
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        public IEnumerable<UserDto> GetAllExceptThis(Int32 userId)
        {
            IEnumerable<UserDto> result = null;
            try
            {
                result = this.service.GetAllExceptThis(userId);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        public IEnumerable<UserDto> GetSelectedThese(IEnumerable<Int32> userIds)
        {
            IEnumerable<UserDto> result = null;
            try
            {
                result = this.service.GetSelectedThese(userIds);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="userIds"></param>
        /// <returns></returns>
        public IEnumerable<UserDto> GetAllExceptThese(IEnumerable<Int32> userIds)
        {
            IEnumerable<UserDto> result = null;
            try
            {
                result = this.service.GetAllExceptThese(userIds);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="specificationDto"></param>
        /// <returns></returns>
        public IEnumerable<UserDto> GetFiltered(SpecificationDto specificationDto)
        {
            IEnumerable<UserDto> result = null;
            try
            {
                result = this.service.GetFiltered(specificationDto);
            }
            catch (Exception ex)
            {
                Inflexion2.Application.InternalException ie = new Inflexion2.Application.InternalException(ex);
                FaultObject.Throw<Inflexion2.Application.FaultObject>(ie);
            }

            return result;
        }

        #endregion

    } // end public partial class UserService
} // end Needel.Common.Application.WcfService

