<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion2.EF</name>
    </assembly>
    <members>
        <member name="T:Inflexion2.Domain.EntityConfiguration`2">
            <summary>
            Generic Base class for configuration classes of entities in EntityFramework.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <typeparam name="TIdentifier"></typeparam>
        </member>
        <member name="M:Inflexion2.Domain.DomainUnitOfWork.#ctor(System.String)">
            <summary>
            remember that if you don't pass any parameter to the database context which is the base class for 
            our RootAggregateContext EF will use by convention 
            </summary>
            <param name="nameOrConnectionString"></param>
        </member>
        <member name="M:Inflexion2.Domain.DomainUnitOfWork.OnModelCreating(System.Data.Entity.DbModelBuilder,System.Type)">
            <summary>
            DbModelBuilder is the main class by which you can configure domain classes. Configuration is done by using the DbModelBuilder API, which takes precedence over data annotations, which in turn takes precedence over the default conventions.
            
            Fluent API configuration is applied as EF builds the model from your domain classes You can inject the configurations by overriding the DbContext class's OnModelCreating method
            http://www.entityframeworktutorial.net/
            </summary>
            <param name="modelBuilder"></param>
            <param name="TEntity"></param>
        </member>
        <member name="T:Inflexion2.Domain.RootAggregateContext">
            <summary>
            A tipical entity framework applications uses a class wich inheritences from Dbcontext.
            the relation ship with DDD is that this class works like our unit of work and other importan aspect is 
            that all the operations over our entitys are responsibility from the rootaggregate and not from any other entity.
            </summary>
        </member>
        <member name="M:Inflexion2.Domain.RootAggregateFrameworkUnitOfWorkFactory`1.ValidateDatabaseSchema">
            <summary>
            Este metodo valida el esquema de la base de datos.
            Esta validación solo se puede realizar si el modelo de la base de datos se ha llevado a cabo 
            con entity framework code first. Si la base de datos se ha obtenido de otra manera entonces la 
            invocación generara una excepción.
            </summary>
        </member>
    </members>
</doc>
