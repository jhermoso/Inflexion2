
#region Copyright info
//-----------------------------------------------------------------------
// <copyright file="Categoria" company="Atento">
//     Copyright (c) 2017. Atento. All Rights Reserved.
//     Copyright (c) 2017. Atento. Todos los derechos reservados.
//
//     .en This code has been generated by a tool, please don't modify this file or  
//     you will lost all your modifications in the next regeneration.
//      The original t4 template to get this file is " WpfEntityViewModelCT.tt" with "public class WpfEntityViewModelCT : Template"
// 
//     .es Este código ha sido generado por una herramienta, por favor no modifique este fichero
//     o perdera las modificaciones al regenerar este fichero.
//      La plantilla con que se ha generado este fichero es "WpfEntityViewModelCT.tt" con "public class WpfEntityViewModelCT : Template"
//
// </copyright>
//-----------------------------------------------------------------------
#endregion

namespace Atento.Suite.Shared.FrontEnd.WpfModule
{

    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Windows.Input;

    using MvvmValidation;

    using Atento.Suite.Shared.Application;
    using Atento.Suite.Shared.Application.Dtos;
    using Atento.Suite.Shared.Infrastructure.Resources;
    using Atento.Suite.Shared.Application.WcfClient.CategoriaReference;
    #endregion

    /// <summary>
    /// .en Interaction logic for CategoriaViewModel.xaml
    /// .es Logica de interación para la vista CategoriaViewModel.xaml
    /// </summary>
    public partial class CategoriaViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<CategoriaDto, Int32>
    {
        #region CONSTRUCTORS
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:CategoriaViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:CategoriaViewModel"/>.
        /// </summary>
        public CategoriaViewModel() : base()
        {
        } // CategoriaViewModel Constructor

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:CategoriaViewModel"/>.
        /// </summary>
        /// <param name="element">
        /// Parámetro de tipo <see cref="CategoriaDto"/> que contiene la información necesaria.
        /// </param>
        public CategoriaViewModel(CategoriaDto element)
            : base(element)
        {
        } // CategoriaViewModel Parametrized Constructor
        #endregion

        #region PROPERTIES

        /// <summary>
        /// Propiedad para establecer el Título de la ventana cuando este view model se utiliza 
        /// en un control de usuario o ventana exclusivamente para el.
        /// cuando este view model se utiliza solo en una lista esta propiedad no se utiliza.
        /// </summary>
        public override string Title
        {
            get
            {
                return SharedResources.CategoriaAlias; 
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get
            {
                return this.ObjectElement.Name;
            }
            set
            {
                if (this.ObjectElement.Name != value)
                {
                    this.ObjectElement.Name = value;
                    this.RaisePropertyChanged(() => this.Name);
                }
            }
        } // Name

        #endregion
        
        #region Methods
        /// <summary>
        /// Método encargado de recuperar los datos de una entidad mediante su identificador.
        /// </summary>
        /// <param name="identifier">
        /// Parámetro que indica el identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// Devuelve el objeto Dto <see cref="CategoriaDto"/> correspondiente.
        /// </returns>
        public override CategoriaDto GetById(Int32 identifier)
        {
            CategoriaServiceClient serviceClient = new CategoriaServiceClient();
           // Consumimos el servicio y obtenemos los datos.
            var categoriaDto = serviceClient.GetById(identifier );
            // Devolvemos la respuesta.
            return categoriaDto;
        } // GetById

        /// <summary>
        /// Método encargado de crear o actualizar una entidad de tipo Categoria.
        /// </summary>
        /// <param name="parameter">
        /// Parámetro con información adicional.
        /// </param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive &&
                    (this.ObjectElement != null))
            {
                
                CategoriaServiceClient serviceClient = new CategoriaServiceClient();

                if (this.ObjectElement.Id == default(Int32) )
                {
                    serviceClient.Create(this.ObjectElement);
                    this.MessageBoxService.Show("Entidad agregada");
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement);
                    this.MessageBoxService.Show("Entidad actualizada");
                }
            }
        } // OnSaveRecord

        // si esta entidad necesita cargar otras entidades o colecciones es aqui donde se implementan los metodos de carga.

        #endregion

        #region Protected Methods

        /// <summary>
        /// execute the validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.HoraInicio,
            //                   () => RuleResult.Assert(
            //                                           this.HoraInicio != null,
            //                                           "La hora de inicio de emisión es requerida"));

        }

		/// <summary>
        /// int his method is possible to override to add the previus action to execute when there is a navigation request
        /// </summary>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            //es aqui donde se invoca a los metodos de carga de las entidades adicionales.

            base.OnNavigatedTo(navigationContext);
        }
        #endregion
    }

} //  Atento.Suite.Shared.FrontEnd.WpfModule
