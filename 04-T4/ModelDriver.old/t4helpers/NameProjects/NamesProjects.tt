<#+
/// <sumary>
/// al pasar el nombre de un projecto obtenemos un array de 5 elementos con sus diferentes partes.
/// el primero la empresa.          index 0.
/// el segundo el producto.         index 1.
/// tercero el bounded context.     index 2.
/// cuarto el layer.                index 3.
/// quinto el tipo de proyecto.     index 4.
/// </sumary>
public static IList<string> SplitNamesProjects(string prjName, DslContextDefinitionDiagram mainDiagram)
{
	string rootNameSpace = mainDiagram.RootNameSpace;
	string prjWithOutRootNameSpace = prjName.Substring(mainDiagram.RootNameSpace.Length, prjName.Length - mainDiagram.RootNameSpace.Length);
    string[] ReturnValue = new string[5];
    string[] prjSections = prjWithOutRootNameSpace.Split('.');
    int numSections = prjSections.Length;
    string company = ReturnValue[0] = mainDiagram.Company;
    string product = ReturnValue[1] = mainDiagram.Product;
    string ProjectName = null;
    string projectLayer = null;

    string ProjectBoundedContext = null;


    // 1º determinamos a que layer pertenece buscamos los textos correspondientes a las opciones que se 
    // han dado para las capas domain, application, ux, infrastructure y testing.
    int indexLayer = GetIndexLayerFromNameProject(prjSections, mainDiagram);
    projectLayer = ReturnValue[3] = prjSections[indexLayer];


    // construimos el nombre del contexto limitado en el que nos encontramos segun la arquitectura
    for (int i = 1; i < indexLayer; i++)
    {
        ProjectBoundedContext += prjSections[i] + ".";
    }
	ReturnValue[2] = ProjectBoundedContext.TrimEnd('.');

    // construimos el nombre del proyecto segun la arquitectura
	if (indexLayer + 1 < prjSections.Length)
	{
		for (int i = indexLayer + 1; i < prjSections.Length; i++)
		{
			ProjectName = ProjectName + prjSections[i];
			if (i < prjSections.Length-1) ProjectName = ProjectName+".";
		}
		ReturnValue[4] = ProjectName.TrimEnd('.');
	}
	else
	{
	  ReturnValue[4] = null;
	}


    return ReturnValue;
}

#>
<#+ 
///<sumary>
/// utilizamos esta clase para obtener el contexto del proyecto para el cual se genera dentro de una plantilla y una entidad concreta.
///</sumary>
public class ProjectConcepts
{
        public IList<string> sharedKernelUsings     {get;set;}
        private IList<string> NameSpaceSection      {get;set;}
        public string company                       {get;set;}
        public string product                       {get;set;}
        public string boundedContextName            {get;set;}
        public string layer                         {get;set;}
        public string kindProject                   {get;set;}
// parameters
// contexto de la clase base a interpretar
        // nombre del proyecto para el que estamos interpretando
        // shared kernel tree
    public ProjectConcepts(ClassBaseContext cbc, string projectNamespace, ITree<BoundedContextMetadata> skt)
    {

        if (skt != null)
        {
            this.sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, skt, cbc.diagram);
            this.NameSpaceSection       = SplitNamesProjects(projectNamespace, cbc.diagram);
            this.company                = NameSpaceSection[0];
            this.product                = NameSpaceSection[1];
            this.boundedContextName     = NameSpaceSection[2];
            this.layer                  = NameSpaceSection[3];
            this.kindProject            = NameSpaceSection[4];
        }
        else
        {
            sharedKernelUsings = null;
            this.company                = null;
            this.product                = null;
            this.boundedContextName     = null;
            this.layer                  = null;
            this.kindProject            = null;
        }
    }
}
#>
<#+
 public static string GetBoundedContextNameFromContext(DslContextDefinitionDiagram MainDiagram, INode<LocalizedBounded> context)
{
    string bdName = context.Data.Context.Key;
    if(context.HasChild ) // si es un contexto que alberga otros, los layer folders se anidan en un contexto comun y no quedan en la raiz de dicho contexto.
    {
        if (context.Data.Context.Value != null )
        if (context.Data.Context.Value.Elements.Count() > 0) // para añadir el nombre de carpeta que se usa para identificar los sharedkernel es necesario que el diagrama tenga algun elemento que no sea un contexto limitado
        {
            bdName = context.Data.Context.Key+System.IO.Path.DirectorySeparatorChar+MainDiagram.SolutionFolderCommon;
            if (context.Data.Context.Key.Equals(MainDiagram.Product)) bdName = MainDiagram.SolutionFolderCommon;
        }
    }
    return bdName;
}
#>
<#+
 public static string GetBoundedContextNameFromContext(DslContextDefinitionDiagram MainDiagram, INode<BoundedContextMetadata> context)
{
    string bdName = context.Data.Name;
    if(context.HasChild ) // si es un contexto que alberga otros, los layer folders se anidan en un contexto comun y no quedan en la raiz de dicho contexto.
    {
        if (context.Data != null )
        if (context.Data.IsSharedKernel) // para añadir el nombre de carpeta que se usa para identificar los sharedkernel es necesario que el diagrama tenga algun elemento que no sea un contexto limitado
        {
            bdName = context.Data.Name+System.IO.Path.DirectorySeparatorChar+MainDiagram.SolutionFolderCommon;
            if (context.Data.Name.Equals(MainDiagram.Product)) bdName = MainDiagram.SolutionFolderCommon;
        }
    }
    return bdName;
}
#>

<#+

    //http://www.iteramos.com/pregunta/3084/no-se-puede-eliminar-el-directorio-con-directorydeletecamino-verdad
public static void DeleteDirectory(string target_dir) 
{ 
    string[] files = Directory.GetFiles(target_dir); 
    string[] dirs = Directory.GetDirectories(target_dir); 
    foreach (string file in files) 
    { 
        File.SetAttributes(file, FileAttributes.Normal); 
        File.Delete(file); 
    } 
    foreach (string dir in dirs) 
    { 
        DeleteDirectory(dir); 
    } 
    Directory.Delete(target_dir, true); 
}

#>

