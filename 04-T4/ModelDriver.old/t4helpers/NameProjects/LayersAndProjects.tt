<#+
///<sumary>
/// En función del nombre del layer (capa) y de la arquitectura elegida 
/// existe una forma de establecer como carpetas de solución la estructura de los 
/// proyectos. Este método regula para una arquitectura dada y un tipo de layer
/// La estructura de carpetas que le corresponde.
/// par ello le pasamos como parametros, la información del diagrama principal.
/// y el tipo de layer. oteniendo un string con la estructura de carpetas de solución.
///</sumary>
public static string GetFolderLayerName(DslContextDefinitionDiagram mainDiagram, LayerKind layerType)
{

    // nota: para poder utilizar con diferentes arquitecturas PureDDD y HexaCore
    // identicos tipos de layer con diferentes path de carpetas de solución solo es necsario incluir un if  en cada caso del switch.
    string FolderLayerName = null;
    switch (layerType)
    {
        case LayerKind.UX:
            FolderLayerName = mainDiagram.SolutionFolderUX;
            break;
        case LayerKind.UxWpf:
            FolderLayerName = mainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Wpf";
            break;
        case LayerKind.UxSilverlight:
            FolderLayerName = mainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Sl";
            break;
        case LayerKind.UxHtml5:
            FolderLayerName = mainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Html5";
            break;
        case LayerKind.Application:
            FolderLayerName = mainDiagram.SolutionFolderApplication; // al pasar a método sustituir MainDiagram por diagram
            break;
        case LayerKind.DistributedServices:
            FolderLayerName = "WebSvc";
            break;
        case LayerKind.Domain:
            FolderLayerName = mainDiagram.SolutionFolderDomain;// al pasar a metodo sustituir MainDiagram por diagram
            break;
        case LayerKind.Infrastructure:
            FolderLayerName = mainDiagram.SolutionFolderInfraestructure;// al pasar a metodo sustituir MainDiagram por diagram
            break;
        case LayerKind.None:
            FolderLayerName = mainDiagram.SolutionFolderBoundedContext;
            break;
        case LayerKind.Testing:
            FolderLayerName = "05. Testing"; // esta opcion no se encuentra en la metadata del diagrama, se pone a fuego para corregir cuando se saque la versión en xml.
            break;
        default:
            FolderLayerName = null;
            throw new ArgumentNullException("EL TIPO DE LAYER NO ESTA CONTEMPLADO");
            break;
    } // end switch (tipo de layer)
    return FolderLayerName;
}
#>
<#+
///<sumary>
/// Metodo para obtener el nombre de un projecto en función de la arquitectura.
/// de forma similar a GetFolderLayerName obtenemos parte del nombre del proyecto en función 
/// de la arquitectura, del tipo de layer y del nombre del proyecto.
///</sumary>
public static string GetProjectName(DslContextDefinitionDiagram mainDiagram, LayerKind layerType, Architecture.ArqLayer.ArqProject project, string secureBdName)
{
	if (mainDiagram == null )
		throw new ArgumentNullException("EL PARAMETRO DIAGRAMA NO PUEDE SER NULO");
	if (mainDiagram.SolutionFolderDomain == null )
		throw new ArgumentNullException("EL PARAMETRO mainDiagram.SolutionFolderDomain NO PUEDE SER NULO");


	if (layerType == null )
		throw new ArgumentNullException("EL PARAMETRO layerType NO PUEDE SER NULO");

	if (project == null )
		throw new ArgumentNullException("EL PARAMETRO project NO PUEDE SER NULO");

	if (project.Name == null )
		throw new ArgumentNullException("EL PARAMETRO project.Name NO PUEDE SER NULO");

	if (secureBdName == null )
		throw new ArgumentNullException("EL PARAMETRO secureBdName NO PUEDE SER NULO");


    string nombreprojecto = null;
    string nombreLayer = null;
    string nombreProject = null;
    switch (layerType)
    {
        case LayerKind.Domain:
                nombreLayer = SecureName(mainDiagram.SolutionFolderDomain, true);               
            break;
        case LayerKind.Infrastructure:
                nombreLayer = SecureName(mainDiagram.SolutionFolderInfraestructure, true);
             break;
        case LayerKind.Application:
                nombreLayer = SecureName(mainDiagram.SolutionFolderApplication, true);
            break;
        case LayerKind.UxWpf:
                nombreLayer = SecureName(mainDiagram.SolutionFolderUX, true);
            break;
        case LayerKind.Testing:
                nombreLayer = "Test";
            break;
        case LayerKind.None:
                return project.Name;
            break;
        default:
            nombreprojecto = null;

            break;
    }// END switch (layer.LayerType)

	try
	{
    nombreProject = (nombreLayer.ToLower().Equals(project.Name.ToLower()))? string.Empty:"."+project.Name;
	}
	catch
	{
	 if (nombreLayer == null)
		throw new Exception("nombreLayer es nulo y project.Name ='"+project.Name+"' mainDiagram.SolutionFolderDomain: '"+ mainDiagram.SolutionFolderDomain+"' layerType: '"+layerType+"' secureBdName:'"+secureBdName+"'");
		else
		throw new Exception("project.Name es nulo y nombreLayer ='"+nombreLayer+"' ");
	}

    nombreprojecto = mainDiagram.RootNameSpace + "." + secureBdName + "." + nombreLayer + nombreProject;

   // if (okDebug) Debug.WriteLine(String.Format(" *nombreprojecto    {0}",nombreprojecto));
    return nombreprojecto;
}
#>
