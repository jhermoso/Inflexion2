<#+ 
  //// Note: You can call this method from the outside of the template,
  ////       please add parameters as needed.	
  //// To include this templaate just drag this file on another editor
  //// then call this.SecureName()
//public static string T4Help.SecureName(string arbitraryString, bool noDigits = false)
//{
    //var validIdentifier = Regex.Replace(arbitraryString, @"[^A-Za-z0-9-._]", " ");// cualquier caracter mayusculas minusculas o numero ... es substituido por 
    //if (noDigits)
        //{
            //validIdentifier = Regex.Replace(arbitraryString, @"[^A-Za-z]", String.Empty);
        //}
   //else if (Regex.IsMatch(validIdentifier, @"^\d")) 
        //{
            //validIdentifier = "_" + validIdentifier; // si comienza por digito le añadimos un underscore
        //}
    //// utilizzamos los espacios para marcar las letras a capitalizar
    //return T4Help.ToPascalCase(validIdentifier);
        ////Regex.Replace(entity.Name, @"\W","");// \w es word caracter, equivalente a [a-zA-Z0-9_] \W match any 'non word character' si no se permite el underscore la alternativa es [^a-zA-Z0-9]
//}

///<sumary>
/// obtenemos la separación de palabras desde un cadena en pascal case
/// consultar el articulo http://www.codeproject.com/Articles/108996/Splitting-Pascal-Camel-Case-with-RegEx-Enhancement
/// <sumary/>
public static string SplitPascalCase(string input)
{
    string output = System.Text.RegularExpressions.Regex.Replace(
    input,
    "(?<!^)([A-Z][a-z]|(?<=[a-z])[A-Z])",
    " $1",
    System.Text.RegularExpressions.RegexOptions.Compiled).Trim();
        return output;
}

public static string T4Help.ToPascalCase(string phrase)
{
    if (phrase.Length > 0 )
    {
        phrase = Regex.Replace(phrase, @"[^A-Za-z0-9-._]", " ");
        string[] splittedPhrase = phrase.Split(' ', '-', '.');
        var sb = new StringBuilder();

        sb = new StringBuilder();

        foreach (String s in splittedPhrase)
        {
            char[] splittedPhraseChars = s.ToCharArray();
            if (splittedPhraseChars.Length > 0)
            {
                splittedPhraseChars[0] = ((new String(splittedPhraseChars[0], 1)).ToUpper().ToCharArray())[0];
            }
            sb.Append(new String(splittedPhraseChars));
        }
        return sb.ToString();
    }
    else
    {
        throw new Exception((string.Format("Codigo posible Error en ToPascalCase: T4Helpers.ttinclude El parametro phrase no tiene longitud o es nulo"));
        return(null);
    }
}

public static string T4Help.StrCleanLfCR(string input)
{
    return Regex.Replace(input,@"[\r\n]"," ").Trim();
}      

public static string StrCleanChar(string input, string classCaracters)
{
    return Regex.Replace(input, classCaracters, " ").Trim();
}



public static string T4Help.ToCamelCase(string inputText)
{
    if (inputText.Length > 0 )
    {
        inputText = T4Help.SecureName(inputText);
        return inputText.Substring(0, 1).ToLower() + inputText.Substring(1);
    }
    else 
    {
        Debug.WriteLine(string.Format("Codigo posible Error en ToCamelCase: T4Helpers.ttinclude El parametro inputText no tiene longitud o es nulo"));
        return(null);
    }
}

// generamos un string de tantos espacios como indiquemos en el parametro
public static string HtmlIndent(int NumOfSpaces)
{
    string  tagIndent = "";
            for (int i = 0; i < NumOfSpaces*4; i++)
        {
             tagIndent = tagIndent + "&nbsp;";
        }
    return tagIndent;
}

public static string Indent(int NumOfSpaces)
{
    return "".PadLeft(NumOfSpaces);
}

public static string[] Path2Folders(string stringPath)
{
    return stringPath.Split(System.IO.Path.DirectorySeparatorChar);
}
         //-----------------------------
// construye un conjunto de carpetas a partir del contenido de un array utilizando el separador por defecto
public static string ArrayStringToString(string[] ss, int inicio)
{
    StringBuilder result = new StringBuilder();
    for (int i = inicio; i < ss.Length; i++)
    {
        result.Append(ss[i]);
        if (i < ss.Length - inicio )
            result.Append(System.IO.Path.DirectorySeparatorChar);
    }
    return result.ToString();
}

    // obtenemos un path de tal forma que al primero que es absoluto 
// desde la raiz y se le suma el segundo que puede ser relativo con 
    // respecto al primero. es decir que puede empezar por "..\\"
    // en cuyo caso eliminamos la ultima carpeta del primer path.

public static string AddRelPath2AbsPath(string absolutePath, string relativePath) 
{
    StringBuilder finalPath = new StringBuilder();
    string[] absFolders = T4Help.Path2Folders(absolutePath);
    string[] relFolders = T4Help.Path2Folders(relativePath);

    if (relFolders[0].Equals(".."))
    {
        for (int i=0; i<absFolders.Length-1; i++)
        {
            finalPath.Append(absFolders[i]);
            finalPath.Append(System.IO.Path.DirectorySeparatorChar);
        }
        for (int i=1; i<relFolders.Length; i++)
        {
            finalPath.Append(relFolders[i]);
            if (i<relFolders.Length-1)
            finalPath.Append(System.IO.Path.DirectorySeparatorChar);
        }
    }
    else
    {
        finalPath.Append(absolutePath);
        finalPath.Append(relativePath);
    }

    return finalPath.ToString();
}

// función para determinar si todos los caracteres de un string son mayusculas.
static bool AreAllCapitals(string inputString)
{
   return Regex.IsMatch(inputString, @"^[A-Z]+$");
}

static string getRightStringSlice(string stringInput, char charSplit, int position)
    {
        StringBuilder finalString = new StringBuilder();
        string[] parts = stringInput.Split(charSplit);
        if (Math.Abs(position)>parts.Length)
            return stringInput;

        if (position>0) // para extraer contamos desde el principio
        {

            for (int i=0; i<=position-1;i++)
            {
                finalString.Append(parts[i]).Append(charSplit);
            }
        }
        else // para extraer contamos desde el final si la posición es negativa.
        {
            int final = parts.Length-1 + position; // como position es negativo en realidad esta restando.
            for (int i=0; i<=final;i++)
            {
                finalString.Append(parts[i]).Append(charSplit);
            }
        }
        return finalString.ToString();
    }

static string getLeftStringSlice(string stringInput, char charSplit, int position)
    {
        StringBuilder finalString = new StringBuilder();
        string[] parts = stringInput.Split(charSplit);
        if (Math.Abs(position)>parts.Length)
            return stringInput;

        if (position>0) // para extraer contamos desde el principio
        {

            for (int i=0; i<=position-1;i++)
            {
                finalString.Insert(0, parts[parts.Length-1-i]).Insert(0, charSplit);
            }
        }
        else // para extraer contamos desde el final si la posición es negativa.
        {
            int final = parts.Length-1 + position; // como position es negativo en realidad esta restando.
            for (int i=0; i<=final;i++)
            {
                finalString.Insert(0, parts[parts.Length-1-i]).Insert(0, charSplit);
            }
        }
        return finalString.ToString();
    }


    ///<sumary>
    /// funcion que une dos cadenas de texto separandolas por comas y asegurando que no empiezan por coma ni terminan por coma.
    ///</sumary>
    public static string T4Help.joinParams(string a, string b)
    {

        if (!string.IsNullOrEmpty(a))
        {
            a = a.Trim();
            if (a.EndsWith(",")) a = a.Substring(0, a.Length-1);
            if (!string.IsNullOrEmpty(b))
            {
                b = b.Trim();
                if (b.EndsWith(",")) b = b.Substring(0, b.Length-1); 
                return a + ", "+ b;
             }
            else return a;
        }
        if (b == null ) return "";
        return b;
    }

    ///<sumary>
    /// funcion que une dos stringbuilder separandolas por comas y asegurando que no empiezan por coma ni terminan por coma.
    ///</sumary>
    public static string T4Help.joinParams(StringBuilder a, StringBuilder b)
    {
        return T4Help.joinParams(a.ToString(), b.ToString());
    }

    ///<sumary>
    /// funcion que nos dice si la cadena que pasamos corresponde al nombre de un tipo valor.
    ///</sumary>
    public static bool IsValueType(string s)
    {
    s = s.Trim().ToLower();
    return s.Equals("int") || 
            s.Equals("bool") || 
            s.Equals("Boolean") ||
            s.Equals("Int32") || 
            s.Equals("DateTime") || 
            s.Equals("float") || 
            s.Equals("double") || 
            s.Equals("Double") || 
            s.Equals("Decimal") || 
            s.Equals("decimal") || 
            s.Equals("uint") || 
            s.Equals("Int16") || 
            s.Equals("Int64") || 
            s.Equals("UInt16") || 
            s.Equals("UInt64") || 
            s.Equals("UInt32") || 
            s.Equals("byte") || 
            s.Equals("Byte") ||
            s.Equals("sbyte") || 
            s.Equals("SByte") || 
            s.Equals("char") || 
            s.Equals("Char") || 
            s.Equals("short") || 
            s.Equals("ushort") || 
            s.Equals("single");
    }

    public static bool IsKeyValuePair(string s)// pasamos el nombre de una collección del clr y nos dice si es de tipo diccionario o no.
    {
        return (s.Contains ("Dictionary") || s.Contains ("SortedList") || s.Contains ("SynchronizedKeyedCollection"));
    }
///<sumary>
/// esta función busca en el parametro de entrada una ocurrencia del substring que aparezca delimitada entre los caracteres de delimitación.
/// se remueve todo lo que aparezca entre ambos caracteres eliminando uno de los delimitadores
///</sumary>
public static string RemoveDelimitedSubstring(string inString, string subString, string delimitator)
{
    int indexofsubstring = inString.IndexOf(subString);
    string sBefore = inString.Substring(0, indexofsubstring);
    string sAfter = inString.Substring(indexofsubstring + subString.Length);
    int delimiter0 = sBefore.LastIndexOf(delimitator);
    int delimiter1 = sAfter.IndexOf(delimitator);
    sBefore = sBefore.Substring(0, delimiter0);
    sAfter = sAfter.Substring(delimiter1);
    return sBefore + sAfter;
}
#>