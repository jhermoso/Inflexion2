<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" debug="true" hostspecific="True" #>
<#@ output extension ="txt" #>
<#@ MoneyGen processor="MoneyGenDirectiveProcessor"  requires="fileName='Main.kyk'"  #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="t4helpers\T4Application\Assemblys.ttinclude" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Text" #>
<#@ import namespace ="System.Text.RegularExpressions" #>
<#@ import namespace ="System.Xml" #>
<#@ import namespace ="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace ="EnvDTE" #>
<#@ import namespace ="EnvDTE80" #>
<#@ import namespace ="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace ="System" #>
<#@ import namespace ="System.IO" #>
<#@ import namespace ="System.Diagnostics" #>
<#@ import namespace ="System.Linq" #>
<#@ import namespace ="System.Xml.Linq" #>
<#@ import namespace ="System.Collections" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Collections.ObjectModel" #>
<#@ import namespace ="System.ComponentModel" #>
<#@ import namespace ="Common" #>
<#@ import namespace = "kayak.MoneyGen" #>
<#@ import namespace = "kayak.MoneyGen.T4ModelBusAdapters" #>
<#@ include file="t4helpers\StringsFuntions\T4Helpers.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Entity.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Association.ttinclude" #>
<#@ include file="t4helpers\Initialitation\DSLContextDefinition.ttinclude" #>
<#@ include file="t4helpers\Create\IOWindows.ttinclude" #>
<#@ include file="t4helpers\Create\Solution.ttinclude" #>
<#@ include file="t4helpers\Initialitation\Constants.ttinclude" #>
<#@ include file="t4helpers\Create\ArchitectureDefinition.ttinclude" #>
<#@ include file="t4Includes\Domain\DomainCoreIEntityCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreInterfaceFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainBaseEntityCT.tt" #>
<#@ include file="t4Includes\Copyright.ttinclude" #>
<#


    // primera parte recolectamos información acerca de la solucion los diagramas y las definiciones
    // almacenandolas en estructuras de datos facilmente accesibles.
    Debug.WriteLine("          EMPEZAMOS");
    // 1º acerca del diagrama
    DslContextDefinitionDiagram MainDiagram = new DslContextDefinitionDiagram(this.Application);
    Debug.WriteLine(MainDiagram.ToString());
    // 2º acerca de la propia solución
    ActiveSolution SolutionInfo = new ActiveSolution(this.Host);
    Debug.WriteLine(SolutionInfo.ToString());
    // 3º obtenemos en la clase de maindiagram los path absolutos de las principales carpetas de la solución. 
    MainDiagram.SetAbsolutePath(SolutionInfo.DirectoryName);

    // 4º instanciamos la clases con la definición de la arquitectura
    Architecture Arq = new Architecture();

    WriteLine("El path de Proyects es '{0}'", MainDiagram.ProyectsPath);
    WriteLine("El path de la solución es '{0}'", SolutionInfo.DirectoryName);
    WriteLine("El path abs de projectos es '{0}'", MainDiagram.AbsProyectsPath);

    IList<Project> Projectos = SolutionProjects.ProjectsList(); // este es un método estático que nos permite accedeer de forma rapida a la lista de proyectos para buscar uno concreto.
        
    // Segunda parte utilizamos la información recolectada para generar los proyectos de la solución.
    
    // Comprobamos y chequeamos la existencia de las carpetas de apoyo a la solución.
    // primero con la carpeta de Documentación
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.DocumentationPath);
    // Acontinuación con la carpeta de Documentación
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.AsemblysPath);
    // Seguidamente con la carpeta de librerias de terceros
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.LibraryPath);
    // Por último con la carpeta de projectos
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.ProyectsPath);
    
     //Comprobamos y chequemos la existencia de las carpetas de solución en la raiz
     //obteniendo la referencia como projecto de cada una de ellas

    // 1º con la carpeta de contextos limitados
    MainDiagram.SFBoundedContextRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderBoundedContext);
    if (MainDiagram.SFBoundedContextRef!=null)
        WriteLine("añadimos u obtenemos la carpeta '{0}' cuyo nombre es {1}",MainDiagram.SolutionFolderBoundedContext, MainDiagram.SFBoundedContextRef.Name);


    // 3º con la carpeta de Framework 
    MainDiagram.SFFrameworkRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderFramework);
    if (MainDiagram.SFFrameworkRef!=null)
        WriteLine("añadimos u obtenemos la carpeta '{0}' cuyo nombre es {1}",MainDiagram.SolutionFolderFramework, MainDiagram.SFFrameworkRef.Name);

    // para cada bounded context añadimos a la carpeta de solución de BoundedContext 
    // el nombre del bounded Context y sus carpetas de solución por capas
    // despues añadimos en cada capa los proyectos y sus referencias 
    // y por ultimo añadimos las clases de cada capa.

    // 1º añadimos las carpetas de los contextos.
    // la carpeta de 'Common' es a todos los efectos otro Bounded Context y se trata como tal. 
    Architecture.AddBoundedContextLayers(MainDiagram.SolutionFolderCommon, MainDiagram, SolutionInfo);
    //// acontinuación vamos a recorrer los bounded context para añadir por cada una las capas de DDD en cada uno de ellos.
    foreach (BoundedContext bd in this.Application.BoundedContexts )
    {
        if (!bd.Name.StartsWith("From "))
        {
            Architecture.AddBoundedContextLayers(bd.Name, MainDiagram, SolutionInfo);
        }
    }
    // HASTA QUE EL MÉTODO DE GENERACIÓN DE CÓDIGO SE CONVIERTA EN UNA PLANTILLA MARCAMOS LOS PARAMETROS Y LAS VARIABLES INTERNAS DEL MISMO.
    // ***** PARAMETROS

    string bdName = MainDiagram.SolutionFolderCommon; // este es el parametro que junto con diagrama, solución y arq pasamos como parametros a las clases de plantillas de generación.
    string secureBdName = bdName.Replace('\\','.');
    // VARIABLES INTERNAS
    string OutputFile= null;  // nombre del fichero output donde vamos a escribir el fuente correspondiente
    string prjName= null;
    Project prj;              // proyecto donde se escribe el codigo fuente
    
    // CUERPO DEL METODO
    
    
    
    
  foreach (Entity entity in this.Application.Elements )
    {
        WriteLine("Para la entidad :{0}",entity.Name);
        WriteLine("La consulta de si todos los atributos son mandatory tiene como resultado :{0}",AreAllMandatory( entity));
        WriteLine("La consulta de si todos las relaciones tienen la misma multiplicidad tiene como resultado :{0}",AreAllTargetMinMultiplicityEqual( entity));
        WriteLine("La consulta de si todos las relaciones tienen la misma multiplicidad tiene como resultado :{0}",AreAllSourceMinMultiplicityEqual( entity));
        // cada entidad tiene un reflejo en cada capa por lo tanto para cada entidad recorremos cada una de las capas y sus proyectos asociados.
           foreach (Architecture.ArqLayer layer in Architecture.ArqLayers)
        {
            WriteLine("\n\n{0}",layer.LayerType );
            string FolderLayerName = GetFolderLayerName(diagram, layer.LayerType);
        //  switch (layer.LayerType)
        //  {
        //      case LayerKind.UX:
        //          FolderLayerName= MainDiagram.SolutionFolderUX;
        //          break;
        //      case LayerKind.UxWpf:
        //          FolderLayerName= MainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Wpf";
        //          break;
        //      case LayerKind.UxSilverlight:
        //          FolderLayerName= MainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Sl";
        //          break;
        //      case LayerKind.UxHtml5:
        //          FolderLayerName= MainDiagram.SolutionFolderUX+System.IO.Path.DirectorySeparatorChar+"Html5";
        //          break;
        //      case LayerKind.Application:
        //          FolderLayerName = MainDiagram.SolutionFolderApplication; // al pasar a metodo sustituir MainDiagram por diagram
        //          break;
        //      case LayerKind.DistributedServices:
        //          FolderLayerName= "WebSvc";
        //          break;
        //      case LayerKind.Domain:
        //          FolderLayerName = MainDiagram.SolutionFolderDomain;// al pasar a metodo sustituir MainDiagram por diagram
        //          break;
        //      case LayerKind.Infraestructure:     
        //          FolderLayerName = MainDiagram.SolutionFolderInfraestructure;// al pasar a metodo sustituir MainDiagram por diagram
        //          break;
        //      default:
        //          FolderLayerName =null;
        //          throw new ArgumentNullException("EL TIPO DE LAYER NO ESTA CONTEMPLADO");
        //            break;
        //  } // end switch (tipo de layer)

            if (FolderLayerName!=null)
            {
            // string contextPath = GetBoundedContextLayerPath(diagram.SolutionFolderBoundedContext, bdName, FolderLayerName);

                if (layer.LayerProyects != null)
                foreach (Architecture.ArqLayer.ArqProject project in layer.LayerProyects)
                {
                    Debug.WriteLine("\n  {0},\t{1}",project.Name, project.Template );
                    string nombreprojecto; 
                    
                    switch (layer.LayerType)
                    {
                        case LayerKind.Domain:
                            nombreprojecto= MainDiagram.RootNameSpace+"." + secureBdName +"."+MainDiagram.SolutionFolderDomain + "."+project.Name; // al pasar a metodo sustituir MainDiagram por diagram 2
                            break;
                        case LayerKind.Infraestructure:
                            nombreprojecto= MainDiagram.RootNameSpace+"." + secureBdName +"."+MainDiagram.SolutionFolderInfraestructure + "."+project.Name; // al pasar a metodo sustituir MainDiagram por diagram 2
                            break;
                        case LayerKind.Application:
                            nombreprojecto= MainDiagram.RootNameSpace+"." + secureBdName +"."+MainDiagram.SolutionFolderApplication + "."+project.Name; // al pasar a metodo sustituir MainDiagram por diagram 2
                            break;
                        case LayerKind.UxWpf:
                            nombreprojecto= MainDiagram.RootNameSpace+"." + secureBdName +"."+"UX.Wpf" + "."+project.Name;
                            break;
                        default:
                                nombreprojecto = null;
                                throw new ArgumentNullException("EL NOMBRE DEL PROYECTO NO PUEDE SER NULO");
                        break;

                    }// END switch (layer.LayerType)


                    //string PathProjectsolution= contextPath.ToString() + System.IO.Path.DirectorySeparatorChar + nombreprojecto;
                    string temppath = MainDiagram.AbsProyectsPath +System.IO.Path.DirectorySeparatorChar+nombreprojecto ;
                    string nombreprojectoConExtension = nombreprojecto + ".csproj";
                    
                    string superfolder = null;
                    ClassBase entitySuperClass = null;
                    var kindComposition = WhatTypeComponented(entity);
                    if(!string.IsNullOrEmpty( entity.FolderNameSpaceAggregatedName))
                        {superfolder = entity.FolderNameSpaceAggregatedName + System.IO.Path.DirectorySeparatorChar;}

                    if (IsDerived( entity))// consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
                    {
                        entitySuperClass = (Entity)GetSuperEntity((ClassBase)entity); 
                        superfolder = superfolder + GetSuperFolders(entity); // en cuyo caso obtenemos su estructura de carpetas anidadas
                        superfolder = superfolder + System.IO.Path.DirectorySeparatorChar;
                    } 
                    else if ( kindComposition.Equals(KindComponented.isOneChild) | kindComposition.Equals(KindComponented.allAreOneFather ))
                    {
                        string fatherCompouser = GetFatherCompouserFolder(entity);	
                        superfolder =  fatherCompouser + System.IO.Path.DirectorySeparatorChar ;
                    } // END if (IsDerived( entity))

                    switch (layer.LayerType)
                    {
                    
                        
                        case LayerKind.Domain:
                                switch (project.Name) // en este punto tenemos el projecto el nombre del projecto y la entidad
                                {
                                    case "Core":
   
                                        var t  = new DomainCoreIEntityCT(MainDiagram, SolutionInfo, entity);
                                        t.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+".cs";
                                        t.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                        t.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                        t.Render();

                                        var t2  = new DomainCoreInterfaceFactoryCT(MainDiagram, SolutionInfo, entity);
                                        t2.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"Factory"+".cs";
                                        t2.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                        t2.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                        t2.Render();
                                        
                                        var t3  = new DomainCoreRepositoryCT(MainDiagram, SolutionInfo, entity);
                                        t3.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"Repository"+".cs";
                                        t3.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                        t3.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                        t3.Render();
                                        
                                        var t4  = new DomainCoreRepositoryFactoryCT(MainDiagram, SolutionInfo, entity);
                                        t4.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"RepositoryFactory"+".cs";
                                        t4.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                        t4.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                        t4.Render();
                                        
                                        break;
                                    case "Base":
                                       var t5  = new DomainBaseEntityCT(MainDiagram, SolutionInfo, entity);
                                        t5.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ entity.Name+".cs";
                                        t5.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                        t5.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                        t5.Render();
                                        break;
                                } // END switch (project.Name) 
                            break;
                        case LayerKind.Infraestructure:

                            break;
                        case LayerKind.Application:
                            
                            break;
                        case LayerKind.UxWpf:
                           
                            break;
                        default:
             
                        break;

                    } // END switch (layer.LayerType)
                } // END  foreach (Architecture.ArqLayer.ArqProject project in layer )
            } //END  if (FolderLayerName!=null)
        }  // End foreach layer
    }// End foreach( entity )


//foreach(Project p in SolutionInfo.ProjectsList )
    //{
        //WriteLine("El proyecto es :{0}",p.Name);
    //}

#>
<#+
//---------------------------------------------------------------------------------------
// Obtenemos la lista de BoundeContexts
//---------------------------------------------------------------------------------------
public int GetBoundedContextList(ref Dictionary<string, int> nombres)
{
        // en estos momentos no se como obetener el campo mbr y manejarlo
        // por lo tanto vamos a obligar que el mbr y el nombre sean iguales.
    int BoundedcontextNum = this.Application.BoundedContexts.Count();
        int contador = 0;
        nombres.Clear();      

    if (BoundedcontextNum > 0)
    {

        foreach (BoundedContext bd in this.Application.BoundedContexts )
        {
                nombres.Add(bd.Name,  contador);
                //diagramas.Add(bd.MBR.ToString(),  contador++);
        }
    }

    return BoundedcontextNum;
}// -----------  fin de GetBoundedContextList            ---------------------------------



//---------------------------------------------------------------------------------------
// Obtenemos la lista de BoundeContexts
//---------------------------------------------------------------------------------------
public void AddBoundedContextProjects(Dictionary<string, int> contextos )
{
// acontinuación para cada contexto de la lista creamos la lista de proyectos 
// correspondientes asi como sus carpetas fisicas y de solución.
IServiceProvider hostServiceProvider = (IServiceProvider)Host;
var dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(SDTE)); // SDTE es una interfaz.

Solution2 soln = (Solution2)dte.Solution; // obtenemos la referencia a la solución abierta en la que nos encontramos.
string ClassLibraryTemplatePath = soln.GetProjectTemplate("ClassLibrary.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto ClassLibrary
string WCFServiceLibraryCCTemplatePath = soln.GetProjectTemplate("WcfServiceLibrary.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Library
string WCFServiceApplicationTemplatePath = soln.GetProjectTemplate("WAPService.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application

int TotalProyectos = dte.Solution.Projects.Count;
if (TotalProyectos > contextos.Count() * 13 ) // 13 es el numero de proyectos a dar de alta por contexto si no coincide es que falta alguno.
     {
            // recorremos la lista de contextos y para cada uno de ellos obtenemos el path 
     }
}



 #>