<#@ template inherits="Microsoft.VisualStudio.TextTemplating.Modeling.ModelBusEnabledTextTransformation" language="C#" debug="true" hostspecific="True" #>
<#@ output extension=".txt" #>
<#@ MoneyGen processor="MoneyGenDirectiveProcessor"  requires="fileName='Main2.kyk'"  #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="t4helpers\T4Application\Assemblys.ttinclude" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Text" #>
<#@ import namespace ="System.Text.RegularExpressions" #>
<#@ import namespace ="System.Xml" #>
<#@ import namespace ="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace ="EnvDTE" #>
<#@ import namespace ="EnvDTE80" #>
<#@ import namespace ="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace ="System" #>
<#@ import namespace ="System.IO" #>
<#@ import namespace ="System.Diagnostics" #>
<#@ import namespace ="System.Linq" #>
<#@ import namespace ="System.Xml.Linq" #>
<#@ import namespace ="System.Collections" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Collections.ObjectModel" #>
<#@ import namespace ="System.ComponentModel" #>
<#@ import namespace ="Common" #>
<#@ import namespace = "kayak.MoneyGen" #>
<#@ import namespace = "kayak.MoneyGen.T4ModelBusAdapters" #>
<#@ import namespace = "Microsoft.VisualStudio.Modeling.Integration" #>
<#@ import namespace = "Microsoft.VisualStudio.Modeling.Integration.Shell" #>
<#@ include file="t4helpers\StringsFuntions\T4Helpers.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Entity.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Association.ttinclude" #>
<#@ include file="t4helpers\Initialitation\DSLContextDefinition.ttinclude" #>
<#@ include file="t4helpers\Create\IOWindows.ttinclude" #>
<#@ include file="t4helpers\Create\Solution.ttinclude" #>
<#@ include file="t4helpers\Initialitation\Constants.ttinclude" #>
<#@ include file="t4helpers\Create\ArchitectureDefinition.ttinclude" #>
<#@ include file="t4Includes\Domain\DomainCoreIEntityCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreInterfaceFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainBaseEntityCT.tt" #>
<#@ include file="t4Includes\Copyright.ttinclude" #>
<#
    Debug.WriteLine("          EMPEZAMOS con la transformación de TEMPLATE 1");
  var source = this.Application; // Usual access to source model.
  // In the source DSL Definition, the root element has a model reference:
  //  Microsoft.VisualStudio.Modeling.Integration.ModelBusAdapter.IModelBus adapter = null;
    foreach (BoundedContext element in this.Application.BoundedContexts )
    {
        Debug.Write("  CONTEXTO ");Debug.WriteLine(element.Name);
        // In the source DSL Definition, each SourceElement has a MBR property:
        Microsoft.VisualStudio.Modeling.Integration.ModelBusReference elementReference = element.MBR;
  #>
El diagrama tiene un bounded context cuyo nombre es <#= element.Name #>
El tipo del campo MBR es        :<#= elementReference #>
SU ElementDisplayName           :<#= elementReference.ElementDisplayName #>
SU ReferenceContext             :<#= elementReference.ReferenceContext #>
SU SerializedAdapterReference   :<#= elementReference.SerializedAdapterReference #>
SU AdapterReference             :<#= elementReference.AdapterReference #>
SU IsAdapterReferenceResolved   :<#= elementReference.IsAdapterReferenceResolved #>
SU LastStatus                   :<#= elementReference.LastStatus #>
SU LogicalAdapterId             :<#= elementReference.LogicalAdapterId #>
SU ModelBus                     :<#= elementReference.ModelBus #>



  <#
      //  var nuevoDiagrama = adapter.ResolveElementReference(elementReference) as BoundedContext;
  if (element.MBR != null)
      using (Microsoft.VisualStudio.Modeling.Integration.ModelBusAdapter adapter = this.ModelBus.CreateAdapter(elementReference) as ModelBusAdapter)
  { 
                Debug.Write("  EL MBR NO ES NULO Y SU VALOR ES  ");Debug.WriteLine(element.MBR);
      ModelBusAdapterManager manager = this.ModelBus.FindAdapterManagers(this.Host.ResolvePath(elementReference.SerializedAdapterReference)).FirstOrDefault();
      ModelBusReference modelReference = manager.CreateReference(this.Host.ResolvePath(elementReference.SerializedAdapterReference));
               
       // If we allowed multiple types or DSLs in the MBR, discover type here.   SerializedAdapterReference
       var nuevoDiagrama = adapter.ResolveElementReference(elementReference);
   
#>
        <#= element.Name #> is linked to diagram: <#= nuevoDiagrama==null ? "RESULTADO NULO" : nuevoDiagrama.ToString() #>
        <#= adapter #>
        <#= adapter.DisplayName #>
>
<#
      using(MoneyGenAdapter adaptador = this.ModelBus.CreateAdapter(modelReference) as MoneyGenAdapter )
        {
                    
                    Application root = adaptador.ModelRoot;
                    Debug.Write("  OBTENEMOS EL ADAPTADOR Y SU VALOR ES   ");Debug.WriteLine(root.Company);
                    #>
[[<#= root.ToString() #>]]
[[<#= root.Company #>]]
<#

        }

      }

  }

#>
