<#+ 
    // el objeto de esta clase es almacenar en una serie de propiedades
    // los elementos definidos en los diagramas del DSL
    // empezando por las propiedades del diagrama
    // y continuando por los elementos que componene cada diagrama.
    // Es posible instanciar una clase por cada diagrama de la solución.
    // se tendra una instancia por cada diagrama
    //La clase incorpora un metodo para leer los datos del digrama.

    public class DslContextDefinitionDiagram
    {
        public kayak.MoneyGen.Application App        {get; set;}
        public ArchitectureOptions Architecture      {get; set;}
        public string SGDB                           {get; set;}
        public string UX                             {get; set;}
        public string ProgramingLanguage             {get; set;}
        public string ISO2Country                    {get; set;}
        public string Culture                        {get; set;}
        public string ReaderFlowDirection            {get; set;}
        public string RootNameSpace                  {get; set;}
        public string Company                        {get; set;}
        public string Product                        {get; set;}
        public string Copyright                      {get; set;}
        public string Branding                       {get; set;}
        public string Version                        {get; set;}
        public string IdGeneration                   {get; set;}
        public string IdKind                         {get; set;}

        public string SolutionFolderUX               {get; set;}
        public string SolutionFolderApplication      {get; set;}
        public string SolutionFolderDomain           {get; set;}
        public string ServicesSolutionFolder         {get; set;}
        public string SolutionFolderInfraestructure  {get; set;}

        public string  SolutionFolderBoundedContext  {get; set;}
        public Project SFBoundedContextRef           {get; set;}
        public string  SolutionFolderCommon          {get; set;}
        public Project SFCommonRef                   {get; set;}
        public string  SolutionFolderFramework       {get; set;}
        public Project SFFrameworkRef                {get; set;}

        public string DocumentationPath              {get; set;} // relative path
        public string AsemblysPath                   {get; set;} // relative path
        public string LibraryPath                    {get; set;} // relative path
        public string ProyectsPath                   {get; set;} // relative path
        public string NugetPath                      {get; set;} // relative path

        public string AbsNugetPath                   {get; set;} // relative path
        public string AbsDocumentationPath           {get; set;} // Correspondence absolutute path
        public string AbsAsemblysPath                {get; set;} // Correspondence absolute path
        public string AbsLibraryPath                 {get; set;} // Correspondence absolute path
        public string AbsProyectsPath                {get; set;} // Correspondence absolute path
        public ITree<LocalizedBounded> TreeApp       {get; set;} // Arbol de los contextos limitados de la aplicación.

        public string ORM                            {get; set;} // opción seleccionada de tecnologia de ORM
        public bool   GenerateTest                   {get; set;} // Indicamos si se generan los projectos de test o no.
        public string Security                       {get; set;} // opciones de seguridad
        public string ValidationContracts            {get; set;} // opciones tecnológicas para contratos y validaciones.
        public MapperTechnology Mapper               {get; set;} // indicamos que tipo tecnologia de mapeado vamos a incluir.
        public bool GetCodeTree             {get; set;} // indicamos como queremos organizar el código.
        public GenerationPolicy GenerateCode         {get; set;} // indicamos si queremos generar o no el código correspondiente al diagrama en cuestión.
        public bool IfContracts                      {get; set;} // si no utilizamos code contracts indicamos si queremos usar if (true) o guard(false)

        public string BCConnectionString               {get; set;} // Almacenamos para cada contexto limitado el connection string de la base de datos. Los que esten vacios utilizan el del contexto principal.
        public string BCDataBaseSchemaName             {get; set;} // el nombre de la base de datos que corresponde al connection string.
        public string BCDataBaseServerName             {get; set;} // el nombre del servidor o la ip en el que se encuentra la base de datos.


        public kayak.MoneyGen.ImplementationOptions ImplementDomainInterfaces{get; set;} // Proporcionan 3 opciones para decir si se implementan o no y donde las interfaces 
                                                                                         //de dominio. Y donde, es decir si : no se implementan nunca. si se implementan siempre o si lo indica la propia clase.
        public kayak.MoneyGen.ImplementationOptions ReferencedEntitysId{get; set;} // Indica si las referencias entre entidades se implementan  con ids o como objetos.  

        //public ITree<ClassBase> ClassesHierarchie    {get; set;} // almacenamos la estructura de todas las clases bases que estan anidadas.

        public Dictionary<string, int> BoundedContextListNames {get; set;} 
          
        ///<sumary>
        /// constructor
        ///<sumary/>
        public DslContextDefinitionDiagram (kayak.MoneyGen.Application diagrama, ITree<LocalizedBounded> treeApp)
        {
            ReadInfoDiagram( diagrama, treeApp);
        }
        // constructor vacio
        public DslContextDefinitionDiagram()
        {} // end constructor

        // metodo por el cual realizamos la inzialización de la información sobre el diagrama
        // esto nos permite acceder de forma más simplificada a los elementos del modelo.
        public void ReadInfoDiagram(kayak.MoneyGen.Application diagrama, ITree<LocalizedBounded> treeApp)
        {
            // leemos desde la referencia del diagrama de DSL que se pasa como parametro
            // las diferentes propiedades del diagrama.


             this.Architecture                    = diagrama.Architecture;
             this.SGDB                            = diagrama.SGDB.ToString();
             this.UX                              = diagrama.UX.ToString();
             this.ProgramingLanguage              = diagrama.ProgramingLanguage.ToString();
             this.ISO2Country                     = diagrama.ISO2Country.ToString();
             this.Culture                         = diagrama.Culture.ToString();
             this.ReaderFlowDirection             = diagrama.ReaderFlowDirection.ToString();
             this.RootNameSpace                   = diagrama.RootNameSpace.ToString();
             this.Company                         = diagrama.Company.ToString();
             this.Product                         = diagrama.Product.ToString();
             this.Copyright                       = diagrama.Copyright.ToString();
             this.Branding                        = diagrama.Branding.ToString();
             this.Version                         = diagrama.Version.ToString();
             this.IdGeneration                    = diagrama.IdGeneration.ToString();
             this.IdKind                          = diagrama.IdKind.ToString();

             this.SolutionFolderUX                = diagrama.SolutionFolderUX.ToString();
             this.SolutionFolderApplication       = diagrama.SolutionFolderApplication.ToString();
             this.SolutionFolderDomain            = diagrama.SolutionFolderDomain.ToString();
             this.SolutionFolderInfraestructure   = diagrama.SolutionFolderInfraestructure.ToString();
             this.SolutionFolderBoundedContext    = diagrama.SolutionFolderBoundedContext.ToString();
             this.SolutionFolderCommon            = diagrama.SolutionFolderCommon.ToString();
             this.SolutionFolderFramework         = diagrama.SolutionFolderFramework.ToString();
             this.ServicesSolutionFolder          = diagrama.ServicesSolutionFolder.ToString();

             this.ORM                             = diagrama.ORM.ToString();
             this.GenerateTest                    = diagrama.GenerateTestProjects;
             this.Security                        = diagrama.Security.ToString();
             this.ValidationContracts             = diagrama.ValidationContracts.ToString();
             this.Mapper                          = diagrama.Mapper;
             this.GetCodeTree            = diagrama.GetCodeTree;
             this.GenerateCode                    = diagrama.GenerateCode;
             this.IfContracts                     = diagrama.IfContracts;

             this.DocumentationPath               = diagrama.DocumentationPath.ToString();
             this.AsemblysPath                    = diagrama.AsemblysPath.ToString();
             this.LibraryPath                     = diagrama.LibraryPath.ToString();
             this.ProyectsPath                    = diagrama.ProyectsPath.ToString();
             this.NugetPath                       = "\\packages";
           //this.ClassesHierarchie               = ReadClassesHierarchie(diagrama);
             this.ImplementDomainInterfaces       = diagrama.ImplementDomainInterfaces;
             this.ReferencedEntitysId             = diagrama.ReferencedEntitysId;

            this.BCConnectionString              = diagrama.ConectionString;
            this.BCDataBaseSchemaName            = diagrama.SchemaName;
            this.BCDataBaseServerName            = diagrama.DataBaseServer;

            // guardamos los parametros que hemos pasado
             this.TreeApp                         = treeApp;
             this.App                             = diagrama;

        }

        // Este metodo asigna a la varibles de path absoluto el path obtenido de añadir al path absoluto de 
        // de donde se encuentra la solución en curso los valores del path relativo
        // el path absoluto que se le pasa lo podemos extraer del campo de la clase activeSolution.DirectoryName
        // por tanto no debemos llamar a esta función antes de haber llamado al constructor de ActiveSolution.
        // dentro del paquete de la carpeta de nuget generamos un xml 
        public void SetAbsolutePath (string localReferencePath)
        {
            this.AbsDocumentationPath               =  T4Help.AddRelPath2AbsPath( localReferencePath, this.DocumentationPath);
            this.AbsAsemblysPath                    =  T4Help.AddRelPath2AbsPath( localReferencePath, this.AsemblysPath);
            this.AbsLibraryPath                     =  T4Help.AddRelPath2AbsPath( localReferencePath, this.LibraryPath);
            this.AbsProyectsPath                    =  T4Help.AddRelPath2AbsPath( localReferencePath, this.ProyectsPath);
            this.AbsNugetPath                       =  T4Help.AddRelPath2AbsPath( localReferencePath, this.NugetPath);
        }
             //this.BoundedContextListNames = new Dictionary<string, int>();
    }
#>