<#+
// <copyright file="DomainCoreRepositoryCT.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class DomainCoreRepositoryCT : Template
{
        // parametros de la plantilla
        public ClassBaseContext  cbc ;
        public string projectNamespace;
        public ITree<BoundedContextMetadata> Skt;
        // constructor de la plantilla
    public DomainCoreRepositoryCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
        }
        
        // metodo de generación de la plantilla
        public override string TransformText()
        {
            // uso de interfaces en las propiedades y por tanto en metodos
            //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
            string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

            IList<string> sharedKernelUsings = null;
            if (Skt != null)
            {
                sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
            }
            var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
            string cpyrigthText = cpyrigth.TransformText();
#>
<#=cpyrigthText #>
namespace <#= projectNamespace #>
{

    #region Usings
<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using System.Linq.Expressions;
    using <#= cbc.company #>.Framework.Domain.Core;
    using <#= cbc.company #>.Framework.Domain.Core.Specification;
    #endregion

    /// <summary>
    /// Interfaz repositorio para persistir y obtener información a partir
    /// de entidades <see cref="<#= I #><#= cbc.pascalSecureEntityName #>"/>.
    /// </summary>
    public interface I<#= cbc.pascalSecureEntityName #>Repository : <#= cbc.entityCoreRepository #>
    {

    } // <#= I #><#= cbc.pascalSecureEntityName #>Repository

} // <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>