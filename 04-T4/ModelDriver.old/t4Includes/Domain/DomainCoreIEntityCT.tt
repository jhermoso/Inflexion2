<#+

public class DomainCoreIEntityCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
    // constructor de la plantilla
    public DomainCoreIEntityCT(ClassBaseContext  classBaseContext, string nombreProjecto , ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios de la clase
        string baseRoot= null;
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        IList<string> sharedKernelUsings = null;
        if (Skt != null)
        {
            sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        }
        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        var usingTemplate  = new usings( cbc, projectNamespace, Skt);   string usingTxt   = usingTemplate.TransformText(); //solo los shared kernel

        string cpyrigthText = cpyrigth.TransformText();
        // si es root agregate establecemos de cual proviene
        if(cbc.IsRoot)
        {
            if (cbc.Sterotype)
                baseRoot = String.Format("Inflexion2.Domain.AggregateRoot<{0}, {1}>{2}",cbc.pascalSecureEntityName,cbc.diagram.IdKind.Equals("Autonumerical")?"int":"guid", (cbc.isDerivedFromOneEntity)?",":"");
        }
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>

    #region General Usings
    using System;
<#+ if (cbc.OwnBoundedContextHasEnums) {#>
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data;
<#+            } #>
    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Domain.Core.ValueObjects;
    using Inflexion.Framework.Core;
    <#= (cbc.targetLinksCounter>0)? "using System.Collections.Generic;":"" #>
    #endregion

    /// <summary>
    /// Interfaz que identifica un<#= (cbc.IsEntity)?"a":"" #> <#= cbc.ClassBaseTypeName.ToLower() #> de tipo <#= I #><#= cbc.pascalSecureEntityName #> de la aplicación.
    /// <#= cbc.entity.Remarks #>
    /// </summary>
    /// <remarks>
    /// Identifica un<#= (cbc.IsEntity)?"a":"" #> <#= cbc.ClassBaseTypeName.ToLower() #> de la aplicación.
    /// </remarks>
    public interface I<#= cbc.pascalSecureEntityName #> :<#= baseRoot #> <#= (cbc.isDerivedFromOneEntity)? "I"+cbc.parentEntityName:cbc.entityCore #>
    {

        #region PROPERTIES
<#+
            // solo las propiedades que provienen de atributos que son de tipo valor pueden ser nullables.
            // igualmente todas las propiedades que se basan en structs pueden ser get o set 
            // mientras que aquellas que no son structs no pueden tener un set público.
            foreach (var property in cbc.propertyObjects)
            {
                cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
#>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) ) { // || property.LiveCycleAtributte.Equals(LiveCycleAtributte.Derivado) no incluimos los derivados porque no pueden ser públicos. #>
        /// <summary>
        /// Propiedad que permite establecer y obtener <#= T4Help.SecureName(property.AtributteName) #>.
        /// </summary>
        /// <remarks>
        /// <#= property.ProgramerRemarks #>
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener <#= T4Help.SecureName(property.AtributteName) #>.
        /// </value>
        <#= property.AtributteType #><#= (property.IsNullable & cbc.propertyIsValueType )?"?":"" #> <#= T4Help.ToPascalCase(property.AtributteName) #> { <#= (property.OnlyGetProperty)?"get;":"get; set;" #> }
<#+        }#>
<#+        }#>
<#+
            foreach (var property in cbc.propertyAssociationSources)
            {
                //if (okDebug)  Debug.WriteLine("composition target link encontrado",property.ToString() );
                // string propertyType= property.Target.Name;
                if(string.IsNullOrEmpty(property.TargetRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
                {
                    continue;
                }
#>
        // (SOURCE)Esta propiedad proviene de una relación de tipo <#= (property is Aggregation)?"Agregación":"" #><#= (property is Composition)?"Composición":"" #> y <#= (property is Association)?"Asociación":"" #>
        /// <summary>
        /// Propiedad pública que permite establecer y obtener <#= T4Help.SecureName(property.TargetRolName) #>.
        /// </summary>
        /// <remarks>
        /// Nos permite establecer y obtener <#= T4Help.SecureName(property.TargetRolName) #>.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener <#= T4Help.SecureName(property.TargetRolName) #>.
        /// </value>
        <#= (property.Source is Enumeration )?"":"I" #><#= T4Help.SecureName(property.Source.Name) #> <#= T4Help.SecureName(property.TargetRolName) #> { get; }

<#+
            }
#>

<#+
            foreach (var property in cbc.propertyAssociationTargets)
            {
                //if (okDebug)  Debug.WriteLine("camposition target link encontrado",property.ToString() );
                // string propertyType= property.Target.Name;
                // para que sea una colección es necesario que la multiplicidad sea many
                if(string.IsNullOrEmpty(property.SourceRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
                {
                    continue;
                }
#>
        // (TARGET)Esta propiedad proviene de una relación de tipo <#= (property is Aggregation)?"Agregación":"" #><#= (property is Composition)?"Composición":"" #> y <#= (property is Association)?"Asociación":"" #>
        /// <summary>
        /// Propiedad pública que permite establecer y obtener la colleción de valores <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </summary>
        /// <remarks>
        /// Nos permite establecer y obtener <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </value>
        <#= GetTypeFromAssociationLink(property, (I=="I"), cbc.idtype, false) #> <#= T4Help.SecureName(property.SourceRolName) #> { get; }

<#+            }
#>
        #endregion

        #region Métodos
<#+

            // Acontinuación vamos a escribir los métodos que corresponden al set privado de las propiedades que solo tienen un get.
            // Solo escribimos estos métodos si la propiedad en cuestion esta marcada como que solo tiene 'get'
            // tambien devolvemos la propia entidad en cada metodo para permitir la utilización de interfaces fluidas.
            foreach (var property in cbc.propertyObjects)
            {

                if (property.OnlyGetProperty)
                {
                    cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
#>

        /// <summary>
        /// Método encargado de establecer un nuevo valor para la propiedad <#= T4Help.SecureName(property.AtributteName) #>.
        /// </summary>
        /// <remarks>
        /// <#= property.ProgramerRemarks #>
        /// </remarks>
        /// <value>
        /// Parametro con el que establecemos el nuevo valor de <#= T4Help.SecureName(property.AtributteName) #>.
        /// </value>
        <#= I #><#= cbc.secureEntityName #> Set<#= T4Help.SecureName(property.AtributteName) #> ( <#= property.AtributteType #><#= (property.IsNullable & cbc.propertyIsValueType )?"?":"" #> <#= T4Help.ToCamelCase(property.AtributteName) #> ); 

<#+                } // end del  if (property.OnlyGetProperty)
            }// end del foreach (var property in propertyObjects)
#>

<#+
            // continuamos escribiendo los métodos  para realizar los private set correspondientes a los padres de las asociaciones *-*-*-*-*-*
            // tambien devolvemos la propia entidad en cada metodo para permitir la utilización de interfaces fluidas.
            foreach (var property in cbc.propertyAssociationSources)
            {
                //if (property.OnlyGetProperty) // comentamos esta linea mientras dejemos fijo que toda propiedar deducida de un relación o link tiene un set privado.
                //{
                //if (!property.Target.Equals(property.Source) ) // si no es una relación reflexiva generamos la misma pareja de metodos para los roles de target y source
                //{
                if(string.IsNullOrEmpty(property.TargetRolName)) 
                {
                    continue;
                }

#>

        /// <summary>
        /// Método encargado de establecer un nuevo valor para la propiedad <#= T4Help.SecureName(property.TargetRolName) #>.
        /// </summary>
        /// <value>
        /// Parametro con el que establecemos el nuevo valor de <#= T4Help.SecureName(property.TargetRolName) #>.
        /// </value>
        <#= I #><#= cbc.pascalSecureEntityName #> Set<#= T4Help.SecureName(property.TargetRolName) #> ( <#= (property.Source is Enumeration)?"": I #><#= T4Help.SecureName(property.Source.Name) #> <#= T4Help.ToCamelCase(property.Source.Name) #> );

<#+
                //}
                //  } // end del  if (property.OnlyGetProperty)
            }// end del foreach (var property in propertyObjects)
#>

<#+
            // continuamos escribiendo los métodos  para realizar los private set correspondientes a los padres de las asociaciones *-*-*-*-*-*
            // tambien devolvemos la propia entidad en cada metodo para permitir la utilización de interfaces fluidas.
            // Para construir los nombres de los métodos utilizamos los nombres de los roles y no de las entidades con objeto de poder 
            // tirar relaciones dobles entre dos entidades.
            foreach (var property in cbc.propertyAssociationTargets)
            {
                if(string.IsNullOrEmpty(property.SourceRolName)) // si no tiene rol no genera propiedad.
                {
                    continue;
                }

                // NOTA: el método set de las propiedaes TARGET se crea EXCLUSIVAMENTE cuando la multiplicidad maxima del TARGET ES UNO Y GENERA UNA PROPIEDAD SIMPLE Y NO UNA COLLECTION.
                if ( IsMaxMultiplicityOne( property.TargetMultiplicity ) ) // toda propiedad deducida de un relación o link tiene un set privado.
                {
#>
        // proviene de target con multiplicidad mínima 'Many' es colección y añadimos set, add y remove.
        /// <summary>
        /// Método encargado de establecer la propiedad de tipo collection <#= T4Help.SecureName(property.SourceRolName) #> en la entidad <#= T4Help.SecureName(property.Target.Name) #>.
        /// El <#= T4Help.SecureName(property.Target.Name) #> ha de existir previamente.
        /// </summary>
        /// <value>
        /// Parametro con el que se proporciona la colección <#= T4Help.SecureName(property.Target.Name) #> a asociar. El valor de este paramentro puede ser null para borrar la relación.
        /// </value>
        <#= I #><#= cbc.pascalSecureEntityName #> Set<#= T4Help.SecureName(property.SourceRolName) #> ( <#= GetTypeFromAssociationLink(property, (I=="I"), cbc.idtype, false) #> <#= T4Help.ToCamelCase(property.Target.Name) #>Collection );

<#+                } // end if( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) #>
<#+ 
                // para que sea una colección es necesario que la multiplicidad sea many
                if ( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) // toda propiedar deducida de un relación o link tiene un set privado.
                {
#>
        /// <summary>
        /// Método encargado de añadir un elemento a la collección <#= T4Help.SecureName(property.SourceRolName) #> en la entidad <#= T4Help.SecureName(property.Target.Name) #>.
        /// El <#= T4Help.SecureName(property.Target.Name) #> ha de existir previamente.
        /// </summary>
        /// <value>
        /// Parametro con el que se proporciona la colección <#= T4Help.SecureName(property.Target.Name) #> a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </value>
        <#= I #><#= cbc.pascalSecureEntityName #> Add<#= T4Help.SecureName(property.Target.Name) #>To<#= T4Help.SecureName(property.SourceRolName) #> ( <#= I #><#= T4Help.SecureName(property.Target.Name) #> <#= T4Help.ToCamelCase(property.Target.Name) #> );

        /// <summary>
        /// Método encargado de eliminar un elemento de la collección <#= T4Help.SecureName(property.SourceRolName) #> en la entidad <#= T4Help.SecureName(property.Target.Name) #>.
        /// El <#= T4Help.SecureName(property.Target.Name) #> ha de existir previamente.
        /// </summary>
        /// <value>
        /// identificador a borrar <#= T4Help.SecureName(property.Target.Name) #> a asociar. El valor de este paramentro puede ser null para borrar la relación si es de agregación o asociación.
        /// </value>
        <#= I #><#= cbc.pascalSecureEntityName #> Remove<#= T4Help.SecureName(property.Target.Name) #>From<#= T4Help.SecureName(property.SourceRolName) #> ( <#= I #><#= T4Help.SecureName(property.Target.Name) #> <#= T4Help.ToCamelCase(property.Target.Name) #> );

<#+                } /* end del  if (la multiplicida minima es many)*/#>
<#+            }/* end del foreach (var property in cbc.propertyAssociationTargets)*/#>
<#+
    foreach (var method in cbc.ClassMethods )
    {
       if (T4Help.SecureName(method.Name).Equals(cbc.pascalSecureEntityName) || !T4Help.SecureName(method.ServiceVisibility.ToString().ToLower()).Equals("public")) continue; // si el nombre del metodo es identico al de la clase el metodo es un cosntructor y las interfaces no permiten ni siquiera para la firma.
                                                                                                                                                                              // y si el método no es publico no lo incluimos en la interface
       string MethodParametersDefinition =  GetMethodParametersString( method , true); // incluimos la definición
#>

        /// <summary>
        /// <#= method.ProgramRemarks.Trim() #>
        /// </summary>
<#+
        // para la documetación de los parametro lo hacemos en dos veces, 1º par los no opcionales y 2º para los opcionales que han de tener un valor por defecto
        global::Microsoft.VisualStudio.Modeling.LinkedElementCollection<Parameter> ParametersList = kayak.MoneyGen.OperationHasParameters.GetParameters ( method );
        foreach (var parameter in ParametersList.Where(p => p.DefaultValue.Length==0))
        {
 #>
        /// <param >
        /// name="<#= parameter.Name #>" (Parametro no opcional)
        /// <#= parameter.ProgramRemarks.Trim() #>
        /// </param>
<#+     } /* end for each parameters */ #>
<#+
        // segunda pasada para valores por defecto que han de aparecer en último lugar.
        foreach (var parameter in ParametersList.Where(p => p.DefaultValue.Length>0))
        {
 #>
        /// <param>
        /// name="<#= parameter.Name #>" (Parametro opcional cuyo valor por defecto es: <#= parameter.DefaultValue #>)
        /// <#= parameter.ProgramRemarks.Trim() #>
        /// </param>
<#+     } /* end for each parameters */ #>
        /// <returns>
        /// Devuelve un objeto de tipo <see cref="<#= method.DevolutionType #>"/>
        /// </returns>
        <#= (method.DevolutionType.Equals("this"))? "I"+cbc.pascalSecureEntityName : method.DevolutionType #> <#= method.Name #>( <#= MethodParametersDefinition #> );
<#+ } //end foreach #>
        #endregion

    } // <#= cbc.pascalSecureEntityName #>

} // <#= projectNamespace #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>