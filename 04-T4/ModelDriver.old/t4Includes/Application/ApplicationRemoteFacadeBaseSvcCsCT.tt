<#+

public class ApplicationRemoteFacadeBaseSvcCsCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
    public ApplicationRemoteFacadeBaseSvcCsCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        string cpyrigthText = cpyrigth.TransformText();

#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    #region sharedKernel usings
<#+
if (sharedKernelUsings != null & false)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    #endregion 

    #region general usings
    using System;
    using System.Collections.Generic;
    using System.ServiceModel;

    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Application.Security.Data.Base;
    using <#= cbc.diagram.RootNameSpace #>.<#= boundedContextName #>.<#= layer #>.Data.Base;

    using Inflexion.Framework.Application.Base;
    using Inflexion.Framework.Application.DataTransfer.Core;
    using Inflexion.Framework.Application.Security.RemoteFacade.Core;
    using Inflexion.Framework.Infrastructure.IoC;

    using <#= cbc.diagram.RootNameSpace #>.<#= boundedContextName #>.Application.Data.Base;
    using AppSrvCore = <#= company #>.<#= product #>.<#= boundedContextName #>.Application.Services.Core;
    #endregion

    /// <summary>
    /// Clase pública del servicio Wcf encargada de realizar las tareas 
    /// relacionadas con la entidad <#= I #><#= cbc.secureEntityName #>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    [ApplicationErrorHandlerAttribute]
    public partial class <#= cbc.secureEntityName #>Service : <#= I #><#= cbc.secureEntityName #>Service
    {
        #region Fields

        /// <summary>
        /// Referencia a los servicios de administración de la entidad <#= cbc.secureEntityName #>.
        /// </summary>
        private readonly AppSrvCore.<#= I #><#= cbc.secureEntityName #>Services service;

        #endregion

        #region CONSTRUCTORS

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:<#= cbc.secureEntityName #>Service"/>.
        /// </summary>
        /// <remarks>
        /// Constructor de la clase <see cref="T:<#= cbc.secureEntityName #>Service"/>.
        /// </remarks>
        public <#= cbc.secureEntityName #>Service()
        {
            // Configuramos el servicio.
            //Configurator.Configure();
            this.service = ManagerIoC.Container.Resolve<AppSrvCore.<#= I #><#= cbc.secureEntityName #>Services>();
        } // end <#= cbc.secureEntityName #>Service Constructor

        #endregion

        #region Methods

        /// <summary>
        /// Activa una determinada entidad <#= cbc.secureEntityName #>.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a activar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la activación ha sido correcta, en caso contrario <b>false</b>.
        /// </returns>
        public bool Activate(int id, UserContextDto userContextDto)
        {
            return this.service.Activate(id, userContextDto);
        }

        /// <summary>
        /// Función encargada de la creación de una entidad de tipo <#= cbc.secureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.secureEntityName #>Dto"/> con los datos necesarios
        /// para la creación de la entidad <#= cbc.secureEntityName #>.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <return>
        /// Devuelve el identificador único de la entidad creada.
        /// </return>
        public int Create( <#= cbc.secureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de creación mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<ICreate<#= cbc.secureEntityName #>>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // int identifier = data.Execute( <#= cbc.camelSecureEntityName #>Dto, userContextDto);
            // Devolvemos la respuesta.
            // return identifier;

            //opción 2
            return this.service.Create(<#= cbc.camelSecureEntityName #>Dto, userContextDto);

        } // end Create


        /// <summary>
        /// Función encargada de la actualziación de una entidad de tipo <#= cbc.secureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.secureEntityName #>Dto"/> con los datos necesarios
        /// para el borrado de la entidad <#= cbc.secureEntityName #>r.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la actualización ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        public bool Update( <#= cbc.secureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de actualización mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IUpdate<#= cbc.secureEntityName #>>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( <#= cbc.camelSecureEntityName #>Dto, userContextDto);
            // Devolvemos la respuesta.
            // return response;

            // opción 2
            return this.service.Update(<#= cbc.camelSecureEntityName #>Dto, userContextDto);
        } // end Update

        /// <summary>
        /// Función encargada del borrado de una entidad de tipo <#= cbc.secureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Se trata de un borrado lógico.
        /// </remarks>
        /// <param name="<#= cbc.secureEntityName #>Id">
        /// Parámetro que indica el identificador único de la entidad a borrar.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la eliminación ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        //public bool Delete( <#= cbc.secureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        public bool Delete(int id, UserContextDto userContextDto)
        {
            // opción 1
            // Instanciamos el servicio de aplicación de borrado mediante el contenedor de IoC.
            // var data = ManagerIoC.Container.Resolve<IDelete<#= cbc.secureEntityName #>>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            // bool response = data.Execute( <#= cbc.camelSecureEntityName #>Id, userContextDto);
            // Devolvemos la respuesta.
            //return response;

            //opcion 2
            return this.service.Delete(id, userContextDto);

        } // Delete


        /// <summary>
        /// Método encargado de obtener todas las entidades <#= cbc.secureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa
        /// el contexto del usuario de la parte cliente.
        /// </param>
        /// <returns>
        /// Devuelve listado de Dto´s de la entidad <#= cbc.secureEntityName #>.
        /// </returns>
        public IEnumerable<<#= cbc.secureEntityName #>Dto> GetAll( UserContextDto userContextDto )
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetAll<#= cbc.secureEntityName #>>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //IEnumerable<<#= cbc.secureEntityName #>Dto> result = service.Execute(userContextDto);
            // Devolvemos el resultado.
            //return result;
            
            // opcion 2
            return this.service.GetAll(userContextDto);
        } // GetAll

        /// <summary>
        /// Método encargado de obtener una entidad <#= I #><#= cbc.secureEntityName #> de acuerdo a
        /// su identificador.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Id">
        /// Parámetro que indica el identificador único de la entidad cuya
        /// información se desea obtener.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa
        /// el contexto del usuario de la parte cliente.
        /// </param>
        /// <returns>
        /// Devuelve objeto dto <see cref="<#= cbc.secureEntityName #>Dto"/> con la información
        /// requerida.
        /// </returns>
        public <#= cbc.secureEntityName #>Dto GetById( <#= cbc.idtype #> <#= cbc.camelSecureEntityName #>Id, UserContextDto userContextDto)
        {
            // opcion 1
            // Instanciamos el servicio de aplicación correspondiente mediante el contenedor de IoC.
            //var service = ManagerIoC.Container.Resolve<IGetBy<#= cbc.secureEntityName #>Id>();
            // Ejecutamos el servicio y obtenemos la respuesta.
            //<#= cbc.secureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto = service.Execute( <#= cbc.camelSecureEntityName #>Id, userContextDto);
            // Devolvemos el resultado.
            //return <#= cbc.camelSecureEntityName #>Dto;

            // opcion 2
            return this.service.GetById(<#= cbc.camelSecureEntityName #>Id, userContextDto);
        } // GetById

        /// <summary>
        /// Recupera todas las entidades <#= cbc.pascalSecureEntityName #> activas.
        /// </summary>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// Todas las entidades <#= cbc.pascalSecureEntityName #> activas.
        /// </returns>
        public IEnumerable<<#= cbc.pascalSecureEntityName #>Dto> GetEnabled(UserContextDto userContextDto)
        {
            return this.service.GetEnabled(userContextDto);
        }

        /// <summary>
        /// Recupera una lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </returns>
        public PagedElements<<#= cbc.pascalSecureEntityName #>Dto> GetPaged(SpecificationDto specificationDto, UserContextDto userContextDto)
        {
            return this.service.GetPaged(specificationDto, userContextDto);
        }


        #endregion

    } // end public partial interface <#= I #><#= cbc.secureEntityName #>Service
} // end <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>