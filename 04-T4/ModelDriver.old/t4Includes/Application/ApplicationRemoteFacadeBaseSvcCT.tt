<#+

public class ApplicationRemoteFacadeBaseSvcCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
    public ApplicationRemoteFacadeBaseSvcCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        string cpyrigthText = cpyrigth.TransformText();

#>
<%@ ServiceHost Language="C#" Debug="true" Service="<#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.RemoteFacade.WCF.<#= cbc.secureEntityName #>Service" CodeBehind="<#= cbc.secureEntityName #>Service.svc.cs" %>
<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>