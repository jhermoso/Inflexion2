<#+
public class ServiceUpdateMethod : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceUpdateMethod(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Neutral"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.

#>
        #region update
        /// <summary>
        /// Actualiza una determinada entidad <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        public bool Update(<#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        {
            // Variable de respuesta.
            bool response = false;

            try
            {
                // Comprobar el DTO de entrada. 
                Guard.ArgumentIsNotNull(
                                        <#= cbc.camelSecureEntityName #>Dto,
                                        string.Format(
                                                      CoreResources.Neutral.DataTransferObjectIsNull,
                                                      <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>Alias)); 
                // comprobamos los campos mandatory
<#+
   foreach(var property in cbc.mandatoryPropertyObjects)
            {
                cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
                if (!cbc.propertyIsValueType | (cbc.propertyIsValueType & property.IsNullable) ) /* solo escribimos la condición del invariante en caso de que la propiedad sea nullable*/
                    {
#>
                Guard.<#=(property.AtributteType.ToLower().Equals("string"))?"ArgumentNotNullOrEmpty":"ArgumentIsNotNull" #>(
                                                <#= cbc.camelSecureEntityName #>Dto.<#=property.AtributteName #>,
                                                string.Format(
                                                            CoreResources.Neutral.CampoObligatorio,
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#=property.AtributteName #>Alias));

<#+                 }#>
<#+         }#>
                // Comprobar contexto de usuario y obtener la conexión por defecto.
                var serverContext = base.Execute(this.GetFullyQualifiedMethodName(MethodBase.GetCurrentMethod()), userContextDto);
                using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional(serverContext.Connection.ProviderName, serverContext.ConnectionString))
                {
                    // Obtener y comprobar validez de la inserción a modificar.
                    var entityRepository = this.<#= cbc.pascalSecureEntityName #>RepositoryFactory.Create(unitOfWork);
                    var entity = entityRepository.GetById( <#= cbc.camelSecureEntityName #>Dto.Id );
                    Guard.ArgumentIsNotNull(
                                            entity,
                                            string.Format(
                                                          CoreResources.Neutral.NoHayDatosPorId,
                                                          <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>Alias));
                    Guard.Against(
                                  !entity.IsActive,
                                  new InvalidOperationException(string.Format(
                                                                              CoreResources.Neutral.EntidadNoActiva,
                                                                              <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>Alias)));

                    // Comprobar duplicidades;
<#+
   foreach(var property in cbc.mandatoryPropertyObjects) // las propiedades que no se pueden repetir no permiten valores nulos.
            {
                if (!property.AllowRepeatedValues) // si no permite valores repetidos 
                    {                           // comprobamos que no existe previamente en la base de datos
                                                // TODO: SI ES CASE SENSITIVE SE IMPLEMENTA COMO CONDICIÓN INVARIANTE.
                    if (property.AtributteType.ToString().ToLower() == "string") // si es una cadena previamente la pasamos a minusculas para hacer la comprobación.
                        {
#>
                    //string <#= cbc.camelSecureEntityName #>Dto<#= T4Help.ToPascalCase(property.AtributteName) #>ToLower = <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>.Trim().ToLower();
                    //DuplicateData = <#= cbc.pascalSecureEntityName #>Repository.GetFiltered(c => c.<#= T4Help.ToPascalCase(property.AtributteName) #>.ToLower() == <#= cbc.camelSecureEntityName #>Dto<#= T4Help.ToPascalCase(property.AtributteName) #>ToLower && c.IsActive);
                    bool isEquals<#= cbc.pascalSecureEntityName #> = string.Equals(
                                                      (entity.<#= T4Help.ToPascalCase(property.AtributteName) #> ?? string.Empty).Trim(),
                                                      (<#= cbc.camelSecureEntityName #>Dto.Nombre ?? string.Empty).Trim(),
                                                      StringComparison.InvariantCultureIgnoreCase);
<#+                     
}
                    else // si la propiedad no es string simplemente comparamos los valores.
                        {
#>
                    // TODO: DuplicateData = <#= cbc.pascalSecureEntityName #>Repository.GetFiltered(c => c.<#= T4Help.ToPascalCase(property.AtributteName) #> == <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #> && c.IsActive);
<#+
                        }
#>
                    // Comprobamos los datos.
                    if (!isEquals<#= cbc.pascalSecureEntityName #> && this.Exists<#= T4Help.ToPascalCase(property.AtributteName) #>(<#= cbc.camelSecureEntityName #>Dto.Nombre.Trim(), entity.Id, serverContext))
                    {
                        string errorMessage = string.Format(
                                                            CoreResources.Neutral.ErrorEnEntidadCampoDuplicado, 
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#= T4Help.ToPascalCase(property.AtributteName) #>Alias,
                                                            <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>);
                        throw new InvalidOperationException(errorMessage);
                    }
                    //if (DuplicateData.Any() )
                    //{
                        //// Error, ya existe una entidad <#= cbc.pascalSecureEntityName #> con el campo <#= T4Help.ToPascalCase(property.AtributteName) #> con el valor repetido .
                        //string errorMessage = string.Format(
                                                            //CoreResources.Neutral.ErrorEnEntidadNombreDuplicado,
                                                            //<#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#= T4Help.ToPascalCase(property.AtributteName) #>Alias,
                                                            //<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>);
                        //// Lanzamos la excepción.
                        //throw new System.InvalidOperationException(errorMessage);
                    //}
<#+
                    }
            }
#>

                    // Actualización de la entidad.
                    // Datos mandatory
<#+ foreach(var property in cbc.propertyObjects.Where(c=>c.RequestUponCreation==RequestUponCreation.yes)){ #>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) /*|| property.LiveCycleAtributte.Equals(LiveCycleAtributte.Derivado)*/) {#>
<#+         if (property.AutoProperty || !property.OnlyGetProperty)     { #>
                    entity.<#= T4Help.ToPascalCase(property.AtributteName) #> = <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>;
<#+         } #>
<#+         if ( !property.AutoProperty  &&  property.OnlyGetProperty)     { #>
                    entity.Set<#= T4Help.ToPascalCase(property.AtributteName) #> ( <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #> ); // property.AutoProperty = <#= property.AutoProperty #>; property.OnlyGetProperty = <#= property.OnlyGetProperty #>
<#+         } #>
<#+     } #>
<#+ } #>

                    // asignación de Datos no mandatory con ciclo de vida variable, no se incluyen aquellas propiedaes constantes o derivadas
<#+ foreach(var property in cbc.propertyObjects.Where(c=>c.RequestUponCreation==RequestUponCreation.no)){ #>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) /*|| property.LiveCycleAtributte.Equals(LiveCycleAtributte.Derivado)*/) {#>
<#+         if (property.AutoProperty || !property.OnlyGetProperty)     { #>
                    entity.<#= T4Help.ToPascalCase(property.AtributteName) #> = <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>; // property.AutoProperty = <#= property.AutoProperty #>; property.OnlyGetProperty = <#= property.OnlyGetProperty #>
<#+         } #>
<#+         if ( !property.AutoProperty  &&  property.OnlyGetProperty)     { #>
                    Set<#= T4Help.ToPascalCase(property.AtributteName) #> ( <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #> ); // property.AutoProperty = <#= property.AutoProperty #>; property.OnlyGetProperty = <#= property.OnlyGetProperty #>
<#+         } #>
<#+     } #>
<#+ } #>

                    // Validación de la entidad.
                    entity.AssertValidation();

                    // Persistir los datos y confirmar la transacción.
                    entityRepository.Modify(entity, userContextDto.UserId.ToString());
                    unitOfWork.CommitTransaction();
                    response = true;
                }
            }
            catch (Exception ex)
            {
                // Escribimos en el Log.
                logger.Error(ex.Message, ex);
                throw ex;
            }

            // Devolvemos el resultado.
            return response;
        }
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
