<#+
public class ServiceRegionPropertiesFromSources : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceRegionPropertiesFromSources(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>
        #region Propiedades procedentes de los roles de tipo 'source' en una asociación
<#+
    foreach (var property in cbc.propertyAssociationSources)
    {
#>
<#+     if (property.Source is Entity){ #>
        /// <summary>
        /// Obtiene la referencia a la factoría de repositorios de la entidad <#= T4Help.SecureName(property.Source.Name) #>.
        /// </summary>
        private <#= I #><#= T4Help.SecureName(property.Source.Name) #>RepositoryFactory <#= T4Help.SecureName(property.TargetRolName) #>RepositoryFactory 
            {
                    get 
                {
                    return <#= cbc.pascalSecureEntityName #>Services.<#= T4Help.ToCamelCase(property.TargetRolName) #>RepositoryFactory ?? (<#= cbc.pascalSecureEntityName #>Services.<#= T4Help.ToCamelCase(property.TargetRolName) #>RepositoryFactory = ManagerIoC.Container.Resolve<<#= I #><#= T4Help.ToPascalCase(property.Source.Name) #>RepositoryFactory>() );
                }
            }
<#+                }// is entity#>

<#+ 
        } /*end foreach*/ 
#>
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
