<#+
public class ServiceGetPaged : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceGetPaged(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>
        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades '<#= cbc.pascalSecureEntityName #>', según la especificación indicada.
        /// </returns>
        public PagedElements<<#= cbc.pascalSecureEntityName #>Dto> GetPaged(SpecificationDto specificationDto, UserContextDto userContextDto)
        {
            List<<#= cbc.pascalSecureEntityName #>Dto> result = new List<<#= cbc.pascalSecureEntityName #>Dto>(0);
            int totalElements = 0;

            try
            {
                // Comprobamos el contexto de usuario y obtenemos la conexión por defecto.
                var serverContext = base.Execute(this.GetFullyQualifiedMethodName(MethodBase.GetCurrentMethod()), userContextDto);
                using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional(serverContext.Connection.ProviderName, serverContext.ConnectionString))
                {
                    // Creamos el repositorio de la entidad.
                    var entityRepository = this.<#= cbc.camelSecureEntityName #>RepositoryFactory.Create(unitOfWork);

                    // Obtenemos las entidades aplicando la especificación.
                    ISpecification<<#= I #><#= cbc.pascalSecureEntityName #>> filter =
                        specificationDto.ToSpecification<<#= I #><#= cbc.pascalSecureEntityName #>>();

                    PagedElements<<#= I #><#= cbc.pascalSecureEntityName #>> entities =
                        entityRepository.GetFilteredPaged(
                                                          filter.IsSatisfiedBy(),
                                                          specificationDto.PageIndex,
                                                          specificationDto.PageSize,
<#+  if ( cbc.propertyObjects.Where(c => c.DefaultSortingOrder>0).Any() )
{ 
// si tenemos campos de ordenación introducimos el primero.
                string DefaultSortingOrderFieldName = cbc.propertyObjects.Where(c => c.DefaultSortingOrder>0).OrderBy(c => c.DefaultSortingOrder ).FirstOrDefault().AtributteName;
#> 
                                                          entity => entity.<#= DefaultSortingOrderFieldName #>,
<#+   } else {#>
                                                          entity => entity.Id,
<#+    } #>
                                                          true);
                    totalElements = entities.TotalElements;

                    // Mapeamos los datos.
                    entities.ToList()
                            .ForEach(entity =>
                                {
                                    var entityDto = this.<#= cbc.camelSecureEntityName #>Mapper.EntityMapping(entity);
                                    result.Add(entityDto);
                                });

                    // Confirmamos la transacción.
                    unitOfWork.CommitTransaction();
                }
            }
            catch (Exception ex)
            {
                // Escribir en el Log.
                logger.Error(ex.Message, ex);
                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<<#= cbc.pascalSecureEntityName #>Dto>(result, totalElements);
        }
#endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
