<#+

public class ApplicationRemoteFacadeCoreServiceCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
    public ApplicationRemoteFacadeCoreServiceCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        string cpyrigthText = cpyrigth.TransformText();
 
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{


    #region sharedKernel usings
<#+
if (sharedKernelUsings != null & false)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    #endregion 

    #region general usings
    using System;
    using System.Collections.Generic;
    using System.ServiceModel;

    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Application.DataTransfer.Core;
    using Inflexion.Framework.Application.Security.Data.Base;
    using <#= cbc.diagram.RootNameSpace #>.<#= boundedContextName #>.<#= layer #>.Data.Base;
    #endregion

    /// <summary>
    /// Interfaz que permite definir el contrato de servicio para las acciones
    /// relacionadas con la entidad <#= cbc.secureEntityName #>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    [ServiceContract, ServiceFaultContracts]
    public partial interface <#= I #><#= cbc.pascalSecureEntityName #>Service
    {

        #region Methods

        /// <summary>
        /// Activa una determinada entidad <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a activar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la activación ha sido correcta, en caso contrario <b>false</b>.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        bool Activate(int id, UserContextDto userContextDto);

        /// <summary>
        /// Función encargada de la creación de una entidad de tipo <#= I #><#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> con los datos necesarios
        /// para la creación de la entidad <#= I #><#= cbc.pascalSecureEntityName #>.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <return>
        /// Devuelve el identificador único de la entidad creada.
        /// </return>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        int Create(
                    <#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, 
                    UserContextDto userContextDto);

        /// <summary>
        /// Función encargada de la actualziación de una entidad de tipo <#= I #><#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> con los datos necesarios
        /// para el borrado de la entidad <#= I #><#= cbc.pascalSecureEntityName #>r.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si la actualización ha sido correcta y
        /// <b>false</b> en caso contrario.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        bool Update(
                    <#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, 
                    UserContextDto userContextDto);

        /// <summary>
        /// Elimina una determinada entidad <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a eliminar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// Es <b>true</b> si la eliminación ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        bool Delete(int id, UserContextDto userContextDto);

        // <summary>
        // Función encargada del borrado de una entidad de tipo <#= I #><#= cbc.pascalSecureEntityName #>.
        // </summary>
        // <remarks>
        // Se trata de un borrado lógico.
        // </remarks>
        // <param name="<#= cbc.pascalSecureEntityName #>Id">
        // Parámetro que indica el identificador único de la entidad a borrar.
        // </param>
        // <param name="userContextDto">
        // Parámetro de tipo <see cref="UserContextDto"/> 
        // que representa el contexto del usuario.
        // </param>
        // <returns>
        // Devuelve <b>true</b> si la eliminación ha sido correcta y
        // <b>false</b> en caso contrario.
        // </returns>
        //[OperationContract]
        //[FaultContract(typeof(FaultObject))]
        //bool Delete(
                    //<#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, 
                    //UserContextDto userContextDto);

        /// <summary>
        /// Método encargado de obtener todas las entidades <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa
        /// el contexto del usuario de la parte cliente.
        /// </param>
        /// <returns>
        /// Devuelve listado de Dto´s de la entidad <#= I #><#= cbc.pascalSecureEntityName #>.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        IEnumerable<<#= cbc.pascalSecureEntityName #>Dto> GetAll( UserContextDto userContextDto );


        /// <summary>
        /// Método encargado de obtener una entidad <#= I #><#= cbc.secureEntityName #> de acuerdo a
        /// su identificador.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.camelSecureEntityName #>Id">
        /// Parámetro que indica el identificador único de la entidad cuya
        /// información se desea obtener.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa
        /// el contexto del usuario de la parte cliente.
        /// </param>
        /// <returns>
        /// Devuelve objeto dto <see cref="<#= cbc.secureEntityName #>Dto"/> con la información
        /// requerida.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        <#= cbc.secureEntityName #>Dto GetById(
                            <#= cbc.idtype #> <#= cbc.camelSecureEntityName #>Id,
                            UserContextDto userContextDto);

        /// <summary>
        /// Recupera una lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// La lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </returns>
        [OperationContract]
        [FaultContract(typeof(FaultObject))]
        PagedElements<<#= cbc.secureEntityName #>Dto> GetPaged(SpecificationDto specificationDto, UserContextDto userContextDto);




        #endregion

    } // end public partial interface <#= I #><#= cbc.secureEntityName #>Service
} // end <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>