<#@ include file="Sections\Intro\DocAboutBoundedContextTree.tt" #>
<#@ include file="Sections\Intro\DocAboutArchitecture.tt" #>
<#@ include file="Sections\Intro\DocAboutSharedKernels.tt" #>
<#@ include file="Sections\Intro\DocAboutBoundedContext.tt" #>
<#@ include file="Sections\Intro\DocAboutClassBase.tt" #>
<#+
///<sumary>
///Este método actua como conductor de la generación de la documentación.
///</sumary>
public void GetGeneralDocumentation(DslContextDefinitionDiagram MainDiagram, ActiveSolution SolutionInfo,  ITree<LocalizedBounded> TreeApp, ITree<BoundedContextMetadata> SharedKernelTree)
{
    bool okDebug = true;

    string bdName = null; // este es el parametro que junto con diagrama, solución y arq pasamos como parametros a las clases de plantillas de generación.
    string secureBdName = null; 

    var DocAboutBcTree  = new DocAboutBoundedContextTree(MainDiagram, SolutionInfo, TreeApp, SharedKernelTree);
    DocAboutBcTree.Output.File = "Documentacion"+System.IO.Path.DirectorySeparatorChar+ "Intro.html";
    DocAboutBcTree.Render();

    var DocAboutArq  = new DocAboutArchitecture(MainDiagram, SolutionInfo, TreeApp, SharedKernelTree);
    DocAboutArq.Output.File = "Documentacion"+System.IO.Path.DirectorySeparatorChar+ "Architecture.html";
    DocAboutArq.Render();

    var DocAboutSK  = new DocAboutSharedKernels(MainDiagram, SolutionInfo, TreeApp, SharedKernelTree);
    DocAboutSK.Output.File = "Documentacion"+System.IO.Path.DirectorySeparatorChar+ "SharedKernels.html";
    DocAboutSK.Render();

    // CUERPO DEL METODO
    ITree<ClassBase> boundedContextElements = null;
    kayak.MoneyGen.Application boundedContext = null; 
    foreach( INode<LocalizedBounded> context in TreeApp.All.Nodes )
        {
            bdName = context.Data.Context.Key;
            //if(context.HasChild ) // si es un contexto que alberga otros, los layer folders se anidan en un contexto comun y no quedan en la raiz de dicho contexto.
            //{
                //if (context.Data.Context.Value != null )
                //if (context.Data.Context.Value.Elements.Count() > 0) // para añadir el nombre de carpeta que se usa para identificar los sharedkernel es necesario que el diagrama tenga algun elemento que no sea un contexto limitado
                //{
                    //bdName = context.Data.Context.Key+System.IO.Path.DirectorySeparatorChar+MainDiagram.SolutionFolderCommon;
                    //if (context.Data.Context.Key.Equals(MainDiagram.Product)) bdName = MainDiagram.SolutionFolderCommon;
                //}
            //}
            secureBdName = bdName.Replace('\\','.');

            var DocAboutBC  = new DocAboutBoundedContext(context, MainDiagram, SolutionInfo, TreeApp, SharedKernelTree, secureBdName);
            DocAboutBC.Output.File = "Documentacion"+System.IO.Path.DirectorySeparatorChar+ secureBdName +".html";//context.Data.Context.Key.Replace('\\','.')+".html";
            DocAboutBC.Render();

            boundedContext = context.Data.Context.Value;
            boundedContextElements = ReadClassesHierarchie(boundedContext);
            int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) & p.Data.ReferencedRootEntity == null).Count();
            ClassBaseContext CBC;
            foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) )
            {
                if (item.Data.ReferencedRootEntity != null) continue;

                if (okDebug) Debug.WriteLine( string.Format(" Entity ='{0}'",item.Data.Name)); 
                ClassBase entity = item.Data;
                CBC = new ClassBaseContext(MainDiagram, SolutionInfo, entity, secureBdName);
                var DocAboutElement  = new DocAboutClassBase(MainDiagram, CBC, TreeApp, SharedKernelTree);
                DocAboutElement.Output.File = "Documentacion"+System.IO.Path.DirectorySeparatorChar+ secureBdName +"."+T4Help.ToPascalCase(CBC.entity.Name)+".html";
                DocAboutElement.Render();
            }
        }
}
#>

<#+
///<sumary>
///Este método actua como conductor de la generación de las imagenes de documentación.
///</sumary>
public void GetGeneralDocumentationIMG(DslContextDefinitionDiagram MainDiagram, ActiveSolution SolutionInfo, ITree<LocalizedBounded> TreeApp, ITree<BoundedContextMetadata> SharedKernelTree)
{
    bool okDebug = true;

    string bdName = null; // este es el parametro que junto con diagrama, solución y arq pasamos como parametros a las clases de plantillas de generación.
    string secureBdName = null; 
    // CUERPO DEL METODO
    ITree<ClassBase> boundedContextElements = null;
    kayak.MoneyGen.Application boundedContext = null; 
    ClassBase entity;
    foreach( INode<LocalizedBounded> context in TreeApp.All.Nodes )
        {

            bdName = context.Data.Context.Key;
            boundedContext = context.Data.Context.Value;
            boundedContextElements = ReadClassesHierarchie(boundedContext);
            int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) & p.Data.ReferencedRootEntity == null).Count();
            ClassBaseContext CBC;
            foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) )
            {
                
                if (item.Data.ReferencedRootEntity != null) 
                {
                    //continue;
                    entity = GetClassBaseFromReferencedClassBase(TreeApp, item.Data.ReferencedRootEntity);

                }
                else
                {
                    entity = item.Data;
                }

                CBC = new ClassBaseContext(MainDiagram, SolutionInfo, entity, secureBdName);
                string YumlDefinition  = GetYumlDefinition( CBC, bdName, TreeApp, SharedKernelTree, false);

                 var yumlBytes = YumlService.CreateYuml(YumlDefinition);
                
                // TODO: añadir la carpeta correspondiente a la localización del model driver a una opcion del grafico principal en la gramatica.
                // o en su defecto averiguar cual es la localización absoluta del proyecto model driver
                string relativePathfinder =  "..\\04-T4\\ModelDriver"+ System.IO.Path.DirectorySeparatorChar +"Documentacion\\Images\\"+CBC.secureEntityName+".png";
                string absolutePathfinder = T4Help.AddRelPath2AbsPath(SolutionInfo.DirectoryName,  relativePathfinder);


                 YumlService.CreateYuml(YumlDefinition, absolutePathfinder);

            }
        }
}
#>

<#+
///<sumary>
/// Este método actua como conductor de la generación de las imagenes de documentación.
/// siguiendo las pautas de este ejemplo
/// StringBuilder dsl = new StringBuilder();
/// dsl.Append("[Cliente]-^[Player],");
/// dsl.Append("[Anunciante]-^[Cliente],");
/// dsl.Append("[Cliente]++->[Address]");
/// var yumlBytes = YumlService.CreateYuml(dsl.ToString());
/// YumlService.CreateYuml(dsl.ToString(), "D:\\Dev\\t4\\G\\T4toNewProject\\ModelDriver\\Documentacion\\Images\\image.png");
///</sumary>
public static string GetYumlDefinition(ClassBaseContext  cbc, string projectNamespace, ITree<LocalizedBounded> TreeApp, ITree<BoundedContextMetadata> Skt, bool fromSk) // cuando llamamos a este método para obtener la definición dde una clase no directa sino proveninente de otro contexto limitado lomarcamos con fromSk = true. Esto hace que pintemos la clase principal en verde y no recorremos las herencias para no repetir las relaciones.
{
        // conceptos propios del projecto en curso
    //ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
    //string secureBCName = T4Help.SecureName(prjCon.boundedContextName);

    // 1 dibujamos la clase que estamos documentando
    StringBuilder dsl = new StringBuilder();
    string resultado;

    // 2 dibujamos los padres que obtenemos por herencia o por composición
    dsl.Append("["+cbc.secureEntityName+"{bg:blue}],");
    if ( cbc.ParentsStack != null )
    foreach (var item in cbc.ParentsStack)
    {

        dsl.Append("["+item.Child.Name+"]");
        if (item.FromComposition)
            dsl.Append("++->"); // flecha de composición
        else
            dsl.Append("-^");   // flecha de herencia

        if (!fromSk) 
            dsl.Append("["+item.Father.Name+"{bg:skyblue}],"); // si no proviene de un sk el color es azul. Los colores se han de escribir en minusculas
        else 
            dsl.Append("["+item.Father.Name+"],");// en caso contrario es verde

        if (item.Father.ReferencedRootEntity != null & !fromSk & false) 
        {
            var entity = GetClassBaseFromReferencedClassBase(TreeApp, item.Father.ReferencedRootEntity);
            var CBC = new ClassBaseContext(cbc.diagram, cbc.solutionInfo, entity, cbc.secureBdName); // este nombre del contexto limitado que pasamos no es el correcto. deberiamos pasar null u obtener el correcto
            string YumlDefinition  = GetYumlDefinition( CBC, cbc.secureBdName, TreeApp, Skt, true);
            dsl.Append(YumlDefinition);
        }
    }



    // dibujamos las relaciones de Composición en las que la clase interviene como destino.
      // solo si estamos en una clase que no pertenece a un sk recorremos sus composiciones pues ya estan incluidas en la lista de padres.
    foreach (var item in cbc.mandatoryPropertyFromTargets)
    {
        dsl.Append("["+item.Source.Name+"]");

            dsl.Append("++->");

        dsl.Append("["+item.Target.Name+"{bg:red}],");
    }

    // dibujamos las relaciones de agregación en las que la clase interviene como fuente.
    foreach (var item in cbc.nonMandatoryPropertyFromSources)
    {
        dsl.Append("["+item.Source.Name+"]");

            dsl.Append("<>->");

        dsl.Append("["+item.Target.Name+"],");
    }

    // dibujamos las relaciones de agregación en las que la clase interviene como destino.
    foreach (var item in cbc.nonMandatoryPropertyFromTargets)
    {
        dsl.Append("["+item.Source.Name+"]");

            dsl.Append("<>->");

        dsl.Append("["+item.Target.Name+"],");
    }

    
    if ( cbc.entityHasChildren )
    {
        foreach (var item in cbc.entityChildren.All.Nodes)
        {
            if (item.HasParent)
            {

                dsl.Append("["+item.Data.Name+"]");
                    dsl.Append("-^");
                dsl.Append("["+item.Parent.Data.Name+"],");

            }
        }
    }

    
    
    if ( cbc.isDerivedFromOneEntity )
    {
        ClassBase anterior = cbc.entity;
        foreach (var item in cbc.SimpleInherintaceParentsStack)
        {

            dsl.Append("["+anterior.Name+"],");

                dsl.Append("-^");

            dsl.Append("["+item.Name+"]");

            anterior = item;
        }
    }
    if (cbc.AgregateList != null)
    foreach (var item in cbc.AgregateList )
    {
        if (!item.Father.Name.Equals(cbc.entity.Name))
        {
            int numReflexive = HasReflexive(item.Father);
            for (int i = 0; i < numReflexive; i++)
            {
                dsl.Append("["+item.Father.Name+"]");

                    dsl.Append("<>->");

                dsl.Append("["+item.Father.Name+"],");
            }
        }
    }

    resultado = dsl.ToString();

    if (resultado.EndsWith(",")) resultado = resultado.Substring(0, resultado.Length-1);

    return resultado;
}

#>
