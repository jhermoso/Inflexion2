<#@ template inherits="Microsoft.VisualStudio.TextTemplating.Modeling.ModelBusEnabledTextTransformation" language="C#" debug="true" hostspecific="True" #>
<#@ output extension=".txt" #>
<#@ MoneyGen processor="MoneyGenDirectiveProcessor"  requires="fileName='Main2.kyk'"  #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="t4helpers\T4Application\Assemblys.tt" #>
<#@ include file="t4helpers\T4Application\Imports.ttinclude" #>
<!-- #@ include file="t4helpers\T4Application\T4SourceCode.ttinclude" # -->
<#@ include file="t4helpers\T4Application\Inflexion2T4SourceCode.ttinclude" #>
<!-- #@ include file="t4helpers\T4Application\HexacCoreIncludes.ttinclude" #-->
<!--#@ include file="t4helpers\Create\ControlCodeGeneration.ttinclude" #-->
<#@ include file="t4helpers\Create\Inflexion2WPFControlCodeGeneration.ttinclude" #>
<# 
   // System.Diagnostics.Debugger.Launch();
  kayak.MoneyGen.Application source = this.Application; // Usual access to source model.
  // In the source DSL Definition, the root element has a model reference:

    // inicialización del arbol de contextos
    //A partir de la raiz de un modelo obtenemos la jerarquia de constextos que cuelgan del mismo
    ITree<LocalizedBounded> TreeApp = GetSolutionContextTree( source );

    // primera parte: recolectamos información acerca de la solucion los diagramas y las definiciones.

    // 1º acerca del diagrama
    DslContextDefinitionDiagram MainDiagram = new DslContextDefinitionDiagram(this.Application, TreeApp);

    // 2º acerca de la propia solución
    ActiveSolution SolutionInfo = new ActiveSolution(this.Host);

    // 3º obtenemos en la clase de maindiagram y los path absolutos de las principales carpetas de la solución. 
    MainDiagram.SetAbsolutePath(SolutionInfo.DirectoryName);
    IList<Project> Projectos = SolutionProjects.ProjectsList(); // este es un método estático que nos permite acceder de forma rapida a la lista de proyectos para buscar uno concreto.

     //Comprobamos y chequemos la existencia de las carpetas de solución en la raiz
     //obteniendo la referencia como projecto de cada una de ellas

    // 1º con la carpeta de contextos limitados
    MainDiagram.SFBoundedContextRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderBoundedContext);

    // 3º con la carpeta de Framework 
    MainDiagram.SFFrameworkRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderFramework);

    foreach( INode<LocalizedBounded> context in TreeApp.All.Nodes )
    {
        kayak.MoneyGen.Application boundedContext = context.Data.Context.Value;
        string boundedContextProjectName = GetBoundedContextNameFromTreeAppAndDeep( context.Depth,  context,  MainDiagram);
        string bdName = GetBoundedContextNameFromTreeAppAndDeep( context.Depth,  context,  MainDiagram);

        if (boundedContext != null && bdName != null && context.Data.Context.Value.Elements.Count() >0 ) // si el contexto limitado tiene asociado un diagrama y un nombre lo procesamos.
        {
            string secureBdName = bdName.Replace('\\','.');

            /* Si estamos en hexacore solo tenemos realmente un bounded context que utilizamos despues para hacer las carpetas */
            /*  Por esta razón las saltamos*/
            if( MainDiagram.Architecture == ArchitectureOptions.HexaCore & secureBdName.Equals(MainDiagram.SolutionFolderCommon) ||
                MainDiagram.Architecture == ArchitectureOptions.PureDDD )
            {
                ICollection<Architecture.ArqLayer> layersList= null;
                if (MainDiagram.Architecture == ArchitectureOptions.Inflexion2)
                    layersList = Architecture.Inflexion2WPFLayers;
                else if (MainDiagram.Architecture == ArchitectureOptions.HexaCore)
                    layersList = Architecture.HexaCoreMVCLayers;
                else
                    layersList = Architecture.ArqLayers;

                foreach (Architecture.ArqLayer layer in layersList)
                {
                    foreach (Architecture.ArqLayer.ArqProject project in layer.LayerProyects)
                    {
                        if( project.References.Where( p => p.ReferenceType == ReferenceKind.Nuget).Any() )
                        {
                            string FolderLayerName = GetFolderLayerName( MainDiagram, layer.LayerType);
                            string nombreprojecto = GetProjectName( MainDiagram, layer.LayerType, project, secureBdName);
                            string temppath = MainDiagram.AbsProyectsPath +System.IO.Path.DirectorySeparatorChar+nombreprojecto ;
                            string nombreprojectoConExtension = nombreprojecto + ".csproj";
                            var tPackageConfig  = new PackageConfig(MainDiagram, project);
                            tPackageConfig.Output.File = "packages.config";
                            tPackageConfig.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                            tPackageConfig.Output.ItemType = ItemType.None;
                            tPackageConfig.Render();
                        }
                    }
                }
            }
        }
    }

    ITree<BoundedContextMetadata> SharedKernelTree = GetSharedKernelProjects(  MainDiagram,  SolutionInfo,  TreeApp);
    if (MainDiagram.Architecture == ArchitectureOptions.Inflexion2)
    {
            // acontinuación invocamos el control de generación del codigo de inflexion2
            Inflexion2WPFControlCodeGeneration(  MainDiagram,  SolutionInfo, TreeApp, SharedKernelTree);
    }
#>
