<#+

public class ApplicationEntityServicesCoreCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
    public ApplicationEntityServicesCoreCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1) );
        string cpyrigthText = cpyrigth.TransformText();
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización
        bool Trazable = cbc.MainEntityStereotype.Contains("Bussiness") || cbc.MainEntityStereotype.Contains("Auditable"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    using System.Collections.Generic;
    using System;
	using Inflexion2.Domain;
    using Inflexion2.Application;

    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.<#= prjCon.layer #>.Dtos;

    /// <summary>
	///  .en Define the contract for the entity's administration services.
    ///  .es Define el contrato para los servicios de administración de la entidad.
    /// de tipo <see cref="<#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.<#= prjCon.layer #>.I<#= cbc.secureEntityName #>Services"/>.
    /// </summary>
    public interface I<#= cbc.secureEntityName #>Services 
    {
        #region Methods
<#+ if (cbc.LogicDelete) {   #>
        /// <summary>
        /// Activa una determinada entidad <#= cbc.secureEntityName #>.
        /// </summary>
        /// <param name="id"/>
        /// Identificador de la entidad que se va a activar.
        /// </param>
<#+ if (Secured) {    #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Es <b>true</b> si la activación ha sido correcta, en caso contrario <b>false</b>.
        /// </returns>
        bool Activate(int id<#= (Secured)?", UserContextDto userContextDto":""#>);
<#+ }#>
        /// <summary>
		/// .en Create an entity of type I<#= cbc.secureEntityName #>.
        /// .es Función encargada de la creación de una entidad de tipo I<#= cbc.secureEntityName #>.
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(cbc.secureEntityName) #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.secureEntityName #>Dto"/> con los datos necesarios
        /// para la creación de la entidad <#= cbc.secureEntityName #>.
        /// </param><#+if (Secured){ #>
		/// <param name="userContextDto">
		/// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
		/// </param><#+ }#>
        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor de alguno de los argumentos de entrada es <b>null</b>.
        /// </exception>
        /// <returns>
        /// Devuelve el identificador único de la entidad creada.
        /// </returns>
        <#= cbc.idtype #> Create( <#= cbc.secureEntityName #>Dto <#= T4Help.ToCamelCase(cbc.secureEntityName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Función encargada del borrado de una entidad de tipo <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Se trata de un borrado lógico.
        /// </remarks>
        /// <param name="<#= cbc.pascalSecureEntityName #>Id">
        /// Parámetro que indica el identificador único de la entidad.
        /// </param><#+if (Secured){ #>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
        /// </param><#+ }#>
        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor del argumento de entrada <c>userContextDto</c> es <b>null</b>.
        /// </exception>
        /// <returns>
        /// Devuelve <b>True</b> si la eliminación ha sido correcta y
        /// <b>False</b> en caso contrario.
        /// </returns>
        bool Delete( <#= cbc.idtype #> <#= cbc.pascalSecureEntityName #>Id<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Función encargada de obtener todas las entidades de tipo <#= I #><#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <remarks>
        /// Devuelve la totalidad de las entidades.
        /// </remarks><#+if (Secured){ #>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
        /// </param><#+ }#>
        /// <returns>
        /// Devuelve listado de Dto´s de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/>.
        /// </returns>
        IEnumerable<<#= cbc.pascalSecureEntityName #>Dto> GetAll( <#= (Secured)?", UserContextDto userContextDto":""#>);

<#+ if (cbc.LogicDelete) {   #>
        /// <summary>
        /// Función encargada de obtener todas las entidades de tipo <#= I #><#= cbc.pascalSecureEntityName #> activas.
        /// </summary>
        /// <remarks>
        /// Devuelve la totalidad de las entidades activas.
        /// </remarks><#+if (Secured){ #>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
        /// </param><#+ }#>
        /// <returns>
        /// Devuelve listado de Dto´s de tipo <see cref="<#=  cbc.pascalSecureEntityName #>Dto"/>.
        /// </returns>
        IEnumerable<<#= cbc.pascalSecureEntityName #>Dto> GetEnabled( <#=(Secured)?", UserContextDto userContextDto":""#>);

<#+ }#>
        /// <summary>
        /// Recupera una lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param><#+if (Secured){ #>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param><#+ }#>
        /// <returns>
        /// La lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </returns>
        PagedElements<<#= cbc.pascalSecureEntityName #>Dto> GetPaged(SpecificationDto specificationDto<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Función encargada de obtener una entidad <#= I #><#= cbc.pascalSecureEntityName #> de acuerdo a
        /// su identificador.
        /// </summary>
        /// <param name="<#= cbc.camelSecureEntityName #>Id">
        /// Parámetro que indica el identificador único de la entidad.
        /// </param>
<#+ if (Secured){#>        /// <param name="userContextDto"> Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve objeto Dto <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> con la información requerida.
        /// </returns>
        <#= cbc.pascalSecureEntityName #>Dto GetById( <#= cbc.idtype #> <#= cbc.camelSecureEntityName #>Id<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Actualiza una determinada entidad <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="<#= cbc.camelSecureEntityName #>Dto">
        /// DTO que contiene la información de la entidad que se va a actualizar.
        /// </param><#+ if (Secured){#>
        /// <param name="userContextDto">
        /// Información de contexto del usuario.
        /// </param><#+ }#>
        /// <returns>
        /// Es <b>true</b> si la actualización ha sido correcta; en caso contrario <b>false</b>.
        /// </returns>
        bool Update(<#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>);

        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.
<#+
    foreach (var property in cbc.propertyAssociationTargets)
    {
        // para que sea una colección es necesario que la multiplicidad sea many
        if(string.IsNullOrEmpty(property.SourceRolName)) continue;// Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
#>
<#+
        // estos metodos se añaden solo si la multiplicidad de la relación es CeroMany o OneMany en caso contrario 
        // se trata como una propiedad normal 
        if ( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) // toda propiedad deducida de un relación o link tiene un set privado.
        {
#>
        /// <summary>
        /// Función encargada de la añadir a la entidad <#= cbc.secureEntityName #> una instancia de la propiedad <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Target.Name) #></param>
<#+ if (Secured){#>        /// <param name="userContextDto"> Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        bool Add<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Función encargada de borrar de la entidad <#= cbc.secureEntityName #> una instancia de la colección <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #></param>
<#+ if (Secured){#>        /// <param name="userContextDto"> Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        bool Remove<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>);

        /// <summary>
        /// Función encargada de actualizar de la entidad <#= cbc.secureEntityName #> una instancia de la colección <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #></param>
<#+ if (Secured){#>        /// <param name="userContextDto"> Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        bool Update<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>);

<#+     } // end if ( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) #>
<#+ } // end foreach (var property in cbc.propertyAssociationTargets) #>

        #endregion

    } // end class ICreate<#= cbc.secureEntityName #>
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>
