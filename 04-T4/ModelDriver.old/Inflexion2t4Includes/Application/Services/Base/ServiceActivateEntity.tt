<#+
public class ServiceActivateEntity : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceActivateEntity(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        if (cbc.LogicDelete)
        {                       
#>
        #region Activate Entity Service
        /// <summary>
        /// Activa una determinada entidad <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="id">
        /// Identificador de la entidad que se va a activar.
        /// </param>
<#+ if (Secured){ #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+                }#>
        /// <returns>
        /// Es <b>true</b> si la activación ha sido correcta, en caso contrario <b>false</b>.
        /// </returns>
        public bool Activate(<#= cbc.idtype #> id<#=(Secured)?", UserContextDto userContextDto":"" #>)
        {
            // Crear la acción de activar.
            Action<<#=I #><#= cbc.pascalSecureEntityName #>> activateEntity = (entity) => entity.Enable();

            // Ejecutar la acción de activar.
            return this.DeleteActivateWrapper(id<#=(Secured)?", userContextDto":"" #>, activateEntity);
        }
        #endregion
<#+
            return this.GenerationEnvironment.ToString();
        }
        else
        {
            return string.Empty;
        }
    } // end de TransformText
}// end template
#>
