<#+

public class ApplicationEntityMapperCT : Template
{
    // parametros de la plantilla
    public DslContextDefinitionDiagram  diagram ;
    public ActiveSolution               solutionInfo ;
    public Entity                       entity ;
    public string                       projectNamespace;
        
    public ApplicationEntityMapperCT(DslContextDefinitionDiagram  d, ActiveSolution s, Entity e)
    {
        diagram = d;
        solutionInfo = s;
        entity = e;
    }
        
    public override string TransformText()
    {

        string company = SecureName(this.diagram.Company.ToString());
        string idtype = (diagram.IdKind.Equals("Autonumerical"))  ? "int" : "Guid";
        string secureEntityName = SecureName(entity.Name);
        
        LinkedElementCollection<Atributte> propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 
        var mandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes);
        int numEntityFieldsMandatory= propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes).Count();
        int numEntityFields= propertyObjects.Count;

        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationTargets = Association.GetLinksToTargets(entity); // lista de propiedades obtenidas de las relaciones de destino
        var mandatoryPropertyFromTargets = propertyAssociationTargets.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany); // subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationSources = Association.GetLinksToSources(entity); // lista de propiedades provenientes de las relaciones de origen
        var mandatoryPropertyFromSources = propertyAssociationSources.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany);// subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno 

        int spaceformatcounter= secureEntityName.ToString().Length;
        int counter = 0;
        System.Type t;
        bool propertyIsValueType = false;

        KindComponented kindComponent = WhatTypeComponented(entity);
        string superfolder;
        string MandatoryConstructorParamns = GetConstructorParametersString( entity, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, true);//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. 
        string MadatoryEntityBaseConstructorParamans = "";
        string MadatoryEntityBaseConstructorParamansDefinition = "";

        bool isDerivedFromOneEntity= IsDerived( entity); // consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
        Entity entitySuperClass = null;
        string entityCore =null;
        if (isDerivedFromOneEntity)
        {
            entitySuperClass = GetSuperEntity(entity);
            superfolder = GetSuperFolders(entity);
            MadatoryEntityBaseConstructorParamansDefinition = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, false);
            MadatoryEntityBaseConstructorParamans = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, false);
        }
        if(entity.Auditable)
        {
            entityCore = "AuditableEntityBase<"+idtype +">";
        }
        else
        {
            entityCore = "EntityBase<"+idtype +">";
        }


        var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 5)/*le quitamos el '.Base' y lo sustituimos por '.Core'*/ #>.Core;                               
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 13)/*le quitamos el '.Mapper.Base' y lo sustituimos por '.Data.Base' */ #>.Data.Base;
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 25)/*le quitamos el '.Application.Mapper.Base' y lo sustituimos por '.Domain.Core' */ #>.Domain.Core;

    using I3TV.Framework.Infrastructure.DataAccess.UoW;
    using I3TV.Framework.Infrastructure.IoC;

    /// <summary>
    /// Clase pública encargada de mapear los datos de una entidad <see cref="I<#= secureEntityName #>Mapper"/>.
    /// </summary>
    /// <remarks>
    /// Mapea los datos del Dto <see cref="<#= secureEntityName #>Dto"/> con una entidad <see cref="I<#= secureEntityName #>Mapper"/>.
    /// </remarks>
    public class <#= secureEntityName #>Mapper : I<#= secureEntityName #>Mapper
    {
        #region CONSTRUCTORS

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:<#= secureEntityName #>Mapper"/>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios especiales.
        /// </remarks>
        public <#= secureEntityName #>Mapper()
        {
        } // <#= secureEntityName #>Mapper Constructor

        #endregion

        #region FUNCTIONS

          /// <summary>
          /// Función pública que mapea los datos para devolver
          /// la correspondiente entidad.
          /// </summary>
          /// <remarks>
          /// Se encarga de mapear objetos <see cref="<#= secureEntityName #>Dto"/> 
          /// devolviendo un objeto <see cref="I<#= secureEntityName #>"/>.
          /// </remarks>
          /// <param name="dataTransferObject">
          /// Objeto dto con los datos de la persona.
          /// </param>
          /// <exception cref="System.ArgumentNullException">
          /// Lanzada cuando el valor del argumento de entrada <c>dataTransferObject</c> es null.
          /// </exception>
          /// <returns>
          /// Devuelve un objeto de tipo <see cref="I<#= secureEntityName #>"/>. 
          /// </returns>
          public I<#= secureEntityName #> DataMapping(<#= secureEntityName #>Dto dataTransferObject)
          {
            // Comprobamos el valor del argumento de entrada.
            if (dataTransferObject == null)
            {
                // Error, lanzamos la excepción.
                throw new System.ArgumentNullException("dataTransferObject");
            }
            else
            {
                // Objeto de respuesta.
                I<#= secureEntityName #> entity = null;
                // Creamos la unidad de trabajo para el repositorio.
                using (IAdapter workUnit = Manager.DefaultController.CreateTransactional())
                {
                    // Creamos una factoría para el repositorio de la nueva entidad IPersona.
                    var factory= ManagerIoC.Container.Resolve<I<#= secureEntityName #>RepositoryFactory>();
                    // Creamos el repositorio para la nueva entidad IPersona.
                    var repository = factory.Create(workUnit);
                    // Recuperamos la entidad Ipersona especificada, si existe.
                    entity = repository.GetById(dataTransferObject.id);
                    // Comprobamos el resultado.
                    if (entity == null)
                    {
                        // La entidad no existe. Indicamos el error.
                        throw new System.ArgumentException("dataTransferObject.id");
                    }
                    else
                    {
                        // Mapeamos los datos de cada propiedad. Las propiedades son "Protected Set"
                        // TODO
                    }
                    // Confirmamos la transaccion.
                    workUnit.CommitTransaction();
                }
                // Devolvemos la respuesta.
                return entity;
            }
          } // DataMapping

          /// <summary>
          /// Función pública que mapea las entidades para devolver el
          /// correspondiente Dto.
          /// </summary>
          /// <remarks>
          /// Se encarga de mapear objetos <see cref="I<#= secureEntityName #>"/> 
          /// devolviendo un objeto <see cref="<#= secureEntityName #>Dto"/>.
          /// </remarks>
          /// <param name="entity">
          /// Objeto de la entidad <see cref="I<#= secureEntityName #>"/>.
          /// </param>
          /// <exception cref="System.ArgumentNullException">
          /// Lanzada cuando el valor de <c>entity</c> es null.
          /// </exception>
          /// <returns>
          /// Devuelve un objeto de tipo <see cref="<#= secureEntityName #>Dto"/> 
          /// con los datos mapeados.
          /// </returns>
          public <#= secureEntityName #>Dto EntityMapping(I<#= secureEntityName #> entity)
          {
            // Comprobamos el valor del argumento de entrada.
            if (entity == null)
            {
                // Error, lanzamos la excepción.
                throw new System.ArgumentNullException("entity");
            }
            else
            {
                // Objeto de respuesta.
                <#= secureEntityName #>Dto dto = new <#= secureEntityName #>Dto();
                // Mapeamos cada propiedad.
                <#+
                  foreach (var property in propertyObjects)
                {
                #>
                dto.<#= ConvertToPascalCase(property.AtributteName) #> = entity.<#= ConvertToPascalCase(property.AtributteName) #>;
                <#+  
                }
                #>
                // Devolvemos el resultado.
                return dto;
            }
          } // EntityMapping
        
        #endregion


    } // end class <#= secureEntityName #>Mapper
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityMapperCT
#>