<#+
public class BootstrapUnitOfWorkCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public BootstrapUnitOfWorkCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region Usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Inflexion2.Domain;
    #endregion

    /// <summary>
    /// .en Class to implement unit of work and give the assemblys where are the configuration clases to Entity Framework
    /// </summary>
     public class BootstrapUnitOfWork : DomainUnitOfWork
    {
        /// <summary>
        /// constructor BootstrapUnitOfWork
        /// </summary>
        /// <param name="nameOrConnectionString"></param>
        public BootstrapUnitOfWork(string nameOrConnectionString)
            :base(nameOrConnectionString)
        {
        }
        /// <summary>
        /// .en add all configuration files from the assembly where is located the entity in the second parameter.
        /// .es añadimos todos los ficheros de configuración del ensamblado de la entidad que pasamos.
        /// </summary>
        /// <param name="modelBuilder"></param>
        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
             base.OnModelCreating(modelBuilder, typeof(<#= cbc.pascalSecureEntityName #>Configuration));
        }
    } // end class 

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
