<#+
public class WpfEntityViewModelCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public WpfEntityViewModelCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {
			this.cbc= cbc; 
			this.projectNamespace = projectNamespace;  
			this.Skt = Skt;
		}

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings   
    using System;
    using System.Collections.ObjectModel;
	using System.Collections.Generic;
    using System.Linq;
    using System.Windows.Input;

    using MvvmValidation;
	using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application.Dtos;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application.WcfClient.<#= cbc.secureEntityName #>Reference;
    #endregion

    /// <summary>
    /// .en Interaction logic for <#= cbc.pascalSecureEntityName #>ViewModel.xaml
    /// .es Logica de interación para la vista <#= cbc.pascalSecureEntityName #>ViewModel.xaml
    /// </summary>
    public partial class <#= cbc.pascalSecureEntityName #>ViewModel : Inflexion2.UX.WPF.MVVM.CRUD.CrudViewModel<<#= cbc.pascalSecureEntityName #>Dto, <#= cbc.idtype #>>
    {
        #region CONSTRUCTORS
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:<#= cbc.pascalSecureEntityName #>ViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:<#= cbc.pascalSecureEntityName #>ViewModel"/>.
        /// </summary>
        public <#= cbc.pascalSecureEntityName #>ViewModel() : base()
        {
            // https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the clas UserControl who is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(<#= cbc.pascalSecureEntityName #>QueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("<#= cbc.pascalSecureEntityName #>Alias");
            locBinding.SetBinding(this, targetProperty);

            // after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };
        } // <#= cbc.pascalSecureEntityName #>ViewModel Constructor

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:<#= cbc.pascalSecureEntityName #>ViewModel"/>.
        /// </summary>
        /// <param name="element">
        /// Parámetro de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> que contiene la información necesaria.
        /// </param>
        public <#= cbc.pascalSecureEntityName #>ViewModel(<#= cbc.pascalSecureEntityName #>Dto element)
            : base(element)
        {
        } // <#= cbc.pascalSecureEntityName #>ViewModel Parametrized Constructor
        #endregion

        #region PROPERTIES

        /// <summary>
        /// Propiedad para establecer el Título de la ventana cuando este view model se utiliza 
        /// en un control de usuario o ventana exclusivamente para el.
        /// cuando este view model se utiliza solo en una lista esta propiedad no se utiliza.
        /// </summary>
        public override string Title{ get; set; }

<#+    foreach (var property in cbc.propertyObjects) {#>
        /// <summary>
        /// <#= property.ProgramerRemarks #>
        /// </summary>
<#+ 
 bool propertyIsOwnType = cbc.AccessibleClassBaseTree.All.Nodes.Where(c => property.AtributteType == T4Help.SecureName(c.Data.Name) ).Any();
 if (propertyIsOwnType)
 {
	var cbcProperty = cbc.AccessibleClassBaseTree.All.Nodes.First(c => property.AtributteType == T4Help.SecureName(c.Data.Name) );
#>
        public Application.WcfClient.<#= cbc.secureEntityName #>Reference.<#= property.AtributteType #> <#= T4Help.SecureName(property.AtributteName) #>
        {
            get
            {
                return (Application.WcfClient.<#= cbc.secureEntityName #>Reference.<#= property.AtributteType #>) this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #>;
            }
            set
            {
                if (this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #> != (Domain.Data.<#= property.AtributteType #>) value)
                {
                    this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #>  = (Domain.Data.<#= property.AtributteType #>) value;
                    this.RaisePropertyChanged(() => this.<#= T4Help.SecureName(property.AtributteName) #>);
                }
            }
        } // <#= T4Help.SecureName(property.AtributteName) #>
<#+	
	if (((kayak.MoneyGen.Enumeration) cbcProperty.Data).EnumValue.Count() > 0) /* es enum*/
	{
	// System.Diagnostics.Debugger.Launch(); 
#>
        public int <#= T4Help.SecureName(property.AtributteName) #>Index
        {
            get
            {
                var i = Array.IndexOf(Enum.GetValues(<#= T4Help.SecureName(property.AtributteName) #>.GetType()), <#= T4Help.SecureName(property.AtributteName) #>);//  this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #>; //
                return i;
            }

            set
            {
                var selectedEnum = (Domain.Data.<#= cbcProperty.Data.Name #>)(Enum.GetValues(<#= T4Help.SecureName(property.AtributteName) #>.GetType())).GetValue(value);
                if (this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #> != selectedEnum)
                {
                    this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #> = selectedEnum;
                    this.RaisePropertyChanged(() => this.<#= T4Help.SecureName(property.AtributteName) #>);
                }
            }
        }

<#+
	}
	}
	else
	{
#>
        public <#= property.AtributteType #> <#= T4Help.SecureName(property.AtributteName) #>
        {
            get
            {
                return this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #>;
            }
            set
            {
                if (this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #> != value)
                {
                    this.ObjectElement.<#= T4Help.SecureName(property.AtributteName) #>  = value;
                    this.RaisePropertyChanged(() => this.<#= T4Help.SecureName(property.AtributteName) #>);
                }
            }
        } // <#= T4Help.SecureName(property.AtributteName) #>

<#+	
	}
  }
#>
        #endregion
        
        #region Methods
        /// <summary>
        /// Método encargado de recuperar los datos de una entidad mediante su identificador.
        /// </summary>
        /// <param name="identifier">
        /// Parámetro que indica el identificador de la entidad que se va a recuperar.
        /// </param>
        /// <returns>
        /// Devuelve el objeto Dto <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> correspondiente.
        /// </returns>
        public override <#= cbc.pascalSecureEntityName #>Dto GetById(<#= cbc.idtype #> identifier)
        {
<#+ if (Secured){#>            UserContextDto userContext = ApplicationContext.UserContext;<#+} #>
            <#= cbc.pascalSecureEntityName #>ServiceClient serviceClient = new <#= cbc.pascalSecureEntityName #>ServiceClient();
           // Consumimos el servicio y obtenemos los datos.
            var <#= cbc.camelSecureEntityName #>Dto = serviceClient.GetById(identifier <#=(Secured)?", userContext":"" #>);
            // Devolvemos la respuesta.
            return <#= cbc.camelSecureEntityName #>Dto;
        } // GetById

        /// <summary>
        /// Método encargado de crear o actualizar una entidad de tipo <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="parameter">
        /// Parámetro con información adicional.
        /// </param>
        public override void OnSaveRecord(object parameter)
        {
            if (this.IsActive &&
                    (this.ObjectElement != null))
            {
<#+ if (Secured){#>            UserContextDto userContext = ApplicationContext.UserContext;<#+} #>                
                <#= cbc.pascalSecureEntityName #>ServiceClient serviceClient = new <#= cbc.pascalSecureEntityName #>ServiceClient();

                if (this.ObjectElement.Id == default(<#= cbc.idtype #>) )
                {
                    serviceClient.Create(this.ObjectElement<#=(Secured)?", userContext":"" #>);
                    this.MessageBoxService.Show("Entidad agregada");
                }
                else
                {
                    bool response = serviceClient.Update(this.ObjectElement<#=(Secured)?", userContext":"" #>);
                    this.MessageBoxService.Show("Entidad actualizada");
                }
            }
        } // OnSaveRecord

        // si esta entidad necesita cargar otras entidades o colecciones es aqui donde se implementan los metodos de carga.

        #endregion

        #region Protected Methods

        /// <summary>
        /// execute the validation rules
        /// </summary>
        /// <param name="validation"></param>
        protected override void SetupValidation(MvvmValidation.ValidationHelper validation)
        {
            //ejemplo de validacion
            //// Validación de hora de Inicio
            //validation.AddRule(
            //                   () => this.HoraInicio,
            //                   () => RuleResult.Assert(
            //                                           this.HoraInicio != null,
            //                                           "La hora de inicio de emisión es requerida"));

        }

		/// <summary>
        /// int his method is possible to override to add the previus action to execute when there is a navigation request
        /// </summary>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            //es aqui donde se invoca a los metodos de carga de las entidades adicionales.

            base.OnNavigatedTo(navigationContext);
        }
        #endregion
    }

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
