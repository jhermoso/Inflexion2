<#+

public class ModuleNavigationVMCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
        
    public ModuleNavigationVMCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
        KindTimeCall = kindTimeCall;
    }
        
    public override string TransformText()
    {
            // uso de interfaces en las propiedades y por tanto en metodos
            //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
            string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

  // conceptos propios de la clase
  string baseEntity= null;
  // conceptos propios del projecto en curso
  ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

  IList<string> sharedKernelUsings = null;
  if (Skt != null)
  {
      sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
  }
  var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1) );
  var usingTemplate  = new usings( cbc, projectNamespace, Skt);   string usingTxt = usingTemplate.TransformText(); //solo los shared kernel

        string cpyrigthText = cpyrigth.TransformText(); 
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    #region usings
    using System.Windows.Input;
    using Inflexion2.UX.WPF.MVVM;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Inflexion2.UX.WPF.MVVM.ViewModels;
    #endregion

    /// <summary>
    /// navigation viewmodel for the bounded context <#= T4Help.SecureName(prjCon.boundedContextName) #> .
    /// </summary>
    public partial class <#= T4Help.SecureName(prjCon.boundedContextName) #>ModuleNavigationViewModel : NavigationViewModel
    {
        #region Constructor
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="T:<#= T4Help.SecureName(prjCon.boundedContextName) #>ModuleNavigationViewModel"/>.
        /// </summary>
        public <#= T4Help.SecureName(prjCon.boundedContextName) #>ModuleNavigationViewModel()
        {
            this.Initialize();
        }
        #endregion

        #region Command Properties
<#+
            }
            // en el siguiente bloque viene le codigo que se repite para cada entidad
#>
<#+ if (cbc.IsRoot && !cbc.isAbstract){#>
        /// <summary>
		/// .en Gets or Sets the command to load the view of the entity <#= cbc.pascalSecureEntityName #>.
        /// .es Obtiene o establece el comando de carga de la vista de <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <value>
		/// .en Tells to load the view of the entity <#= cbc.pascalSecureEntityName #>.
        /// .es Indica el comando de carga de la vista <#= cbc.pascalSecureEntityName #>.
        /// </value>
        public ICommand Show<#= cbc.pascalSecureEntityName #>View { get; set; }
<#+ }#>
<#+
    // bloque de cierre
    if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
        #endregion

    }// end class
}// end namespace
<#+         } #>
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>