<#+
public class PrismModuleCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public PrismModuleCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    using Microsoft.Practices.Prism.Regions;
    using Microsoft.Practices.Unity;

    using Inflexion2.UX.WPF.MVVM;
    using Inflexion2.UX.WPF.Services;

    using Inflexion2.Resources;
<#+ if (cbc.OwnBoundedContextHasEnums) {#>
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data;
<#+ } #>
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources;
    #endregion

    /// <summary>
    /// .en module.
    /// .es modulo.
    /// </summary>
    internal sealed class <#= prjCon.boundedContextName #>Module : Inflexion2.UX.WPF.MVVM.BaseModule
    {
        #region Imodule & Basemodule Implementation
        /// <summary>
        /// Inicializa el módulo.
        /// </summary>
        /// <remarks>
        /// Registramos los controles que han de estar siempre disponibles
        /// con el gestor de regiones Prism (IRegionManager), y los controles que
        /// han de solicitarse (bajo demanda) con el contenedor de inyección de
        /// dependencias Unity.  Los controles bajo demanda serán cargados cuando
        /// se invoque el método "IregionManager.RequestNavigate()".
        /// </remarks>
        public override void Initialize()
        {  
            // Registramos servicios de uso visual. 
            //this.UnityContainer.RegisterInstance<IEntitySelectedService>("EntityB", new EntityBSelectedService(), new ContainerControlledLifetimeManager());


            // Registro de controles que han de estar siempre disponibles.
            this.RegionManager.RegisterViewWithRegion(RegionNames.TaskbarRegion, typeof(EFExampleModuleTaskbarView));

        }
        #endregion
    } // end class 

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
