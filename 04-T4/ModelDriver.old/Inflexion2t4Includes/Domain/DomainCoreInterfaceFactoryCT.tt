<#+

public class DomainCoreInterfaceFactoryCT : Template
{
        // parametros de la plantilla
        public ClassBaseContext  cbc ;
        public string projectNamespace;
        public ITree<BoundedContextMetadata> Skt;

        // constructor de la plantilla
    public DomainCoreInterfaceFactoryCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings = null;
        if (Skt != null)
        {
            sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        }
        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));
        string cpyrigthText = cpyrigth.TransformText();
#>
<#=cpyrigthText #>

namespace <#= projectNamespace #>
{

    #region Usings
<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using System;
    <#= (cbc.propertyAssociationTargets.Count()>0)? "using System.Collections.Generic;":"" #>
    #endregion

    /// <summary>
    /// Interfaz factoría para la creación de un<#= (cbc.IsEntity)?"a":"" #> <#= cbc.ClassBaseTypeName.ToLower() #> de tipo <#= I #><#= cbc.pascalSecureEntityName #>Factory
    /// </summary>
    public partial interface <#= I #><#= cbc.pascalSecureEntityName #>Factory <#=(cbc.IsEntity)?": "+ cbc.entityCoreFactory :"" #> <#=(cbc.IsEntity & cbc.isDerivedFromOneEntity & !cbc.isSuperEntityAbstract)? ",I"+ cbc.entitySuperClass.Name+"Factory" :"" #> 
    {

        #region FUNCTIONS

<#+ 
    // acontinuación vamos a crear un metodo create solo para aquellos campos que son mandatory o aquellas relaciones (Asoc. Agreg. Compo.) cuya multiplicidad minima es 1
    // para ello es necesario que comprobemos primero si todas y cada una de los atributos son mandatory y si es asi si todas y cada una de las relaciones coinciden con su multiplicidad minima.
    // en caso de que la multiplicidad minima conincida en todas (ya sea cero o uno) y todos los campos sean mandatory no es necesario hacer mas creates de los que hemos hecho.
    // esta situación es común en los discriminantes y en los typos.
    // Nota: si fuera necesario tener un metod creat con todos los campos se puede obtener de la copia de este fichero.
//if (!((AreAllMandatory(entity)| AreAnyMandatory(entity))& AreAllTargetMinMultiplicityEqual(entity) & AreAllSourceMinMultiplicityEqual(entity) ))
    //{
#>
        /// <summary>
        /// Función para crear una entidad dentro de la factoría a partir 
        /// de los argumentos especificados.
        /// </summary>
        /// <remarks>
        /// Crea una entidad de tipo <see cref="<#= I #><#= cbc.pascalSecureEntityName #>Factory"/>
        /// </remarks>
<#+                // bucle 1º es para escribir la lista de propiedades de la documentación que son mandatorys
                foreach (var property in cbc.propertyObjects.Where( p=> p.RequestUponCreation==RequestUponCreation.yes ) )
                {
#>
        /// <param name="<#= T4Help.ToCamelCase(property.AtributteName) #>"> 
        /// <#= property.ProgramerRemarks #>
        /// </param>
<#+
                } 
#>
<#+                // bucle 2º es para escribir la lista de propiedades de la documentación que provienen de los roles de tipo source en las relaciones de esta entidad con otra.
                foreach ( var property in cbc.propertyAssociationSources.Where( p=> p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneMany ) )
                {
#>
        /// <param name="<#= T4Help.ToCamelCase(property.TargetRolName) #>"> 
        /// referencia al rol source de la relación.
        /// </param>
<#+
                } // a continuación escribimos el tipo de devolución del create que ha de coincidir con el tipo.
#>
<#+                // bucle 3º es para escribir la lista de propiedades de la documentación que provienen de los roles de tipo target en las relaciones de esta entidad con otra.
                foreach ( var property in cbc.propertyAssociationTargets.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany ) )
                {
                if(string.IsNullOrEmpty(property.SourceRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
                    if(property.TargetMultiplicity == kayak.MoneyGen.Multiplicity.CeroMany | property.TargetMultiplicity == kayak.MoneyGen.Multiplicity.CeroOne )
                    {
                        continue;
                    }
                    else throw new ArgumentNullException(string.Format("La entidad '{0}' tiene una relación con la entidad '{1}' en la que falta el nombre del SourceRol. ", cbc.entity.Name, property.Source.Name));

#>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>"> 
        /// referencia al rol target de la relación.
        /// </param>
<#+
                } // a continuación escribimos el tipo de devolución del create que ha de coincidir con el tipo.
#>

        /// <returns>
        /// Devuelve una entidad de tipo <see cref="<#= I #><#= cbc.pascalSecureEntityName #>Factory"/>
        /// </returns>
        <#= I #><#= cbc.pascalSecureEntityName #> Create( <#= (cbc.isDerivedFromOneEntity)? cbc.MandatoryEntityBaseConstructorParamansDefinition : cbc.MandatoryConstructorParamns #> );
<#+ 
    //}
#>

        #endregion
        
    } // <#= I #><#= cbc.pascalSecureEntityName #>Factory

} // <#= projectNamespace #>.Core

<#+

        return this.GenerationEnvironment.ToString();
    }
}
#>
