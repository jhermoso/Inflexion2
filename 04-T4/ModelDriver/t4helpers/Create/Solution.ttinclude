<#+ 
    ///
    /// guardamos la estructura de proyectos y descripción de la solución
    ///
    public class ActiveSolution
    {

        #region Properties

        /// Nombre de la solución activa con el path completo 
        public string                          FullName            {get; set;}
        /// Path completo del directorio donde esta la solución
        public string                          DirectoryName       {get; set;}
        /// Referencia DTE de la solución para poder dar de alta dinamicamente los proyectos y carpetas donde despues incluiremos el codigo generado.
        public EnvDTE.DTE                      Dte                 {get; set;}
        /// Referencia 
        public IServiceProvider HostServiceProvider                {get; set;}
        /// referencia a la propia solución
        public Solution2                       OwnSolution         {get; set;}
        /// lista de plantillas del proyecto
        public IDictionary<string , string>    TemplateProjects    {get; set;}
        /// Arbol con los projectos y carpetas de solución 
        public ITree<Project>                  SolutionTree        {get; set;}
        /// Lista de los projectos y carpetas de la solución 
        public IList<Project>                  ProjectsList        {get; set;}
        /// dicionario de los projectos y carpetas de la solución, la clave es el path de acceso
        public IDictionary<string ,Project>    ProjectsTree        {get; set;}

        #endregion

        public ActiveSolution()
        {

        }

        public ActiveSolution(ITextTemplatingEngineHost host) 
        {
            this.TemplateProjects    = new Dictionary<string , string>();
            this.SolutionTree        = SolutionProjects.ProjectsTree();
            this.ProjectsList        = SolutionProjects.ProjectsList();
            ReadSolutionContext(host);
        }

        public void ReadSolutionContext(ITextTemplatingEngineHost host)
        {

            this.Dte                = (EnvDTE.DTE)SolutionProjects.GetActiveIDE();//GetIdeService(host);
            this.FullName           = this.Dte.Solution.FullName;
            this.DirectoryName      = System.IO.Path.GetDirectoryName(this.FullName);
            this.OwnSolution        = (Solution2)this.Dte.Solution;

            this.TemplateProjects   = ReadTemplateProjects(this.OwnSolution);
            this.ProjectsTree       = GetProjectsTreeDictionary();

        }

        // Obtenemos una referencia al hostServiceProvider del IDE
        // TODO: mejorar estos comentarios.
        public static EnvDTE.DTE GetIdeService(ITextTemplatingEngineHost host )
        {
            IServiceProvider hostServiceProvider = (IServiceProvider)host;
            if (hostServiceProvider == null)
                throw new Exception("Host property returned unexpected value (null)");

            EnvDTE.DTE Dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(SDTE)); // SDTE es una interfaz.
            if (Dte == null)
            {
                throw new ArgumentNullException("Could not obtain DTE from host");
            }
            return Dte;
        }
        
        public static IDictionary<string , string>  ReadTemplateProjects(Solution2 solution)
        {

            string ClassLibraryTemplatePath = solution.GetProjectTemplate("ClassLibrary.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto ClassLibrary
            string ClassLibraryCCTemplatePath = solution.GetProjectTemplate("ClassLibraryCC.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto ClassLibrary
            string WCFServiceLibraryTemplatePath = solution.GetProjectTemplate("WcfServiceLibrary.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Library
            string WCFServiceApplicationTemplatePath = solution.GetProjectTemplate("WAPService.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string WCFServiceApplicationCCTemplatePath = solution.GetProjectTemplate("WAPServiceCC.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string WpfUserControlLibraryCCTemplatePath = solution.GetProjectTemplate("WpfUserControlLibraryCC.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            //string SharedCore_Infrastructure_ResourcesCCTemplatePath = solution.GetProjectTemplate("SharedCore.Infrastructure.ResourcesCC.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            //string HexaCoreProjectTemplatePath = solution.GetProjectTemplate("Hexa.Core.ProjectTemplate.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string WPFApplicationTemplatePath = solution.GetProjectTemplate("WPFApplication.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string WpfApplicationCCTemplatePath = solution.GetProjectTemplate("WpfApplicationFramework4CC.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string TestProjectTemplatePath = solution.GetProjectTemplate("TestProject.zip", "CSharp"); // obtenemos la localización de la plantilla de proyecto WCF Service Application
            string WPFControlProjectTemplatePath = solution.GetProjectTemplate("WPFControlLibrary.zip", "CSharp");
//if (okDebug) Debug.WriteLine(WCFServiceLibraryTemplatePath);
//if (okDebug) Debug.WriteLine(WCFServiceApplicationTemplatePath);

            //ClassLibraryTemplatePath = @"D:\Projects\t4\Gen\1033\ClassLibrary.zip\csClassLibrary.vstemplate";
            //WCFServiceLibraryTemplatePath = @"D:\Projects\t4\Gen\1033\WcfServiceLibrary.zip\WcfServiceLibrary.vstemplate";
            //WCFServiceApplicationTemplatePath = @"D:\Projects\t4\Gen\1033\WAPService.zip\WCFServiceProject.vstemplate";

            IDictionary<string , string> ProjectTemplatesList= new Dictionary<string , string>();

            ProjectTemplatesList.Add("ClassLibrary.zip", ClassLibraryTemplatePath);
            ProjectTemplatesList.Add("WcfServiceLibrary.zip", WCFServiceLibraryTemplatePath);
            ProjectTemplatesList.Add("WAPService.zip", WCFServiceApplicationTemplatePath);
            ProjectTemplatesList.Add("ClassLibraryCC.zip", ClassLibraryCCTemplatePath);
            ProjectTemplatesList.Add("WAPServiceCC.zip", WCFServiceApplicationCCTemplatePath);
            ProjectTemplatesList.Add("WpfUserControlLibraryCC.zip", WpfUserControlLibraryCCTemplatePath);
            //ProjectTemplatesList.Add("SharedCore.Infrastructure.ResourcesCC.zip", SharedCore_Infrastructure_ResourcesCCTemplatePath);
            //ProjectTemplatesList.Add("Hexa.Core.ProjectTemplate.zip", HexaCoreProjectTemplatePath);
            ProjectTemplatesList.Add("WPFApplication.zip", WPFApplicationTemplatePath);
            ProjectTemplatesList.Add("WpfApplicationCC.zip", WpfApplicationCCTemplatePath);
             ProjectTemplatesList.Add("TestProject.zip", TestProjectTemplatePath);
            ProjectTemplatesList.Add("WPFControlLibrary.zip", WPFControlProjectTemplatePath);
            return ProjectTemplatesList;
        }
        
        // añadimos las carpetas de solución del primer nivel
        public  Project AddSolutionFolderPath( string solutionFolderName )
        {
            bool okDebug = false;

if (okDebug) {Debug.Write(" Entramos em AddSolutionFolderPath y recibimos de parametro: ");Debug.WriteLine(solutionFolderName);}

            // primero comprobamos si las carpetas de solución existen y si no existen las añadimos.
            // para cada una de las carpetas  de solución que se han definido en el diagrama.
            string[] folders= T4Help.Path2Folders(solutionFolderName);
if (okDebug) {Debug.Write(" El numero de carpetas es : ");Debug.WriteLine(folders.Count());}
            NodeTree<Project> tp ;
            IEnumerableCollectionPair<Project> nodo;
            Project prj = (Project)this.SolutionTree.All.Nodes.First().Data;
            SolutionFolder SF;

            StringBuilder folderPath = new StringBuilder();
if (okDebug) Debug.WriteLine(" Comprobamos si existe ");
            if (!this.ExistSolutionFolderName(solutionFolderName, this.SolutionTree))
            {  
if (okDebug) Debug.WriteLine(" NO existe por tanto la añadimos");
                // si no existe la añadimos
                //comprobamos si existe cada carpeta y si no, la añadimos.
                for(int i=0; i<folders.Length; i++ )
                {
                    if (i>0)// si no es el raiz para construir el path tenemos que añadir previamente el separador de carpetas
                        folderPath.Append(System.IO.Path.DirectorySeparatorChar);

                    folderPath.Append(folders[i]);

                    if (i==0 ) //falta comprobar que es una carpeta de solución
                    { // work around para anidar carpetas de solución desde la raiz
                        // antes de añadir una carpeta de solución en este o cualquier nivel 
                        // es necesario comprobar que no existe.

                       if (!this.ExistSolutionFolderName(folders[i], this.SolutionTree))
                        {
                            prj = this.OwnSolution.AddSolutionFolder(folders[i]);
                            this.SolutionTree = SolutionProjects.ProjectsTree();
                            this.ProjectsList = SolutionProjects.ProjectsList();
                        }
                        else
                        { // si existe tenemos que obtener la referencia a dicho proyecto.
                            tp = (NodeTree<Project>)this.GetSolutionProject(folderPath.ToString(), this.SolutionTree);
                            nodo = (INode<Project>)tp;
                            prj = nodo.Nodes.First().Data;
                        }
                    }
                    else
                    {
                        if (!this.ExistSolutionFolderName(folderPath.ToString(), this.SolutionTree))
                        {
                            // si no existe la añadimos. guardamos en prj la referencia 
                            SF= (SolutionFolder)prj.Object;
                            //SF = (SolutionFolder)this.OwnSolution;
							try
							{
								prj = SF.AddSolutionFolder(folders[i]);
							}
							catch
							{}
                            this.SolutionTree = SolutionProjects.ProjectsTree(); // leemos el arbol de projectos existentes en forma de arbol
                            this.ProjectsList = SolutionProjects.ProjectsList(); // lista de projectos existentes (no esta en uso)
                        }
                        else
                        {
                            // si existe tenemos que obtener la referencia a dicho proyecto.
                            tp = (NodeTree<Project>)this.GetSolutionProject(folderPath.ToString(), this.SolutionTree);
                            nodo = (INode<Project>)tp;
                            prj = nodo.Nodes.First().Data;

                        }
                    }
                }
                // antes de devolver el control actualizamos las lista internas de projectos
                this.SolutionTree        = SolutionProjects.ProjectsTree();
                this.ProjectsList        = SolutionProjects.ProjectsList(); 
            }
            else
            { // si existe devolvemos la referencia del proyecto 
//if (okDebug)  Debug.WriteLine(" SI existe Y salimos de AddSolutionFolderPath devolviendo la referencia");
                tp = (NodeTree<Project>)this.GetSolutionProject(solutionFolderName.ToString(), this.SolutionTree);
                nodo = (INode<Project>)tp;
                prj = nodo.Nodes.First().Data;
            }
            return prj;

        }
        // buscamos una carpeta de solución en el primer nivel
        // devolvemos true si existe y false si no existe 
        ///<sumary>
        ///Esta función nos dice si el path por el que se le pregunta existe por completo o no.
        ///<sumary/>
        public bool ExistSolutionFolderName(string SolutionFolderName, ITree<Project> mytree)
        {
            string[] folderList = T4Help.Path2Folders(SolutionFolderName); // obtenemos los nodos del path en un array
            var children = mytree.DirectChildren; // obtenemos un arbol con los hijos directos sobre los que iterar
            ITree<Project> subtree; // creamos arboles podados los que buscar de forma recursiva
            int indice = 0;         // indice de las carpetas que vamos comprobando
            string resto;           // composición del resto de carpetas que nos queda por comprobar si existe en la busqueda recursiva
            bool coincideParcial = false; // vamos acumulando el nivel de coincidencia a medida que avanzamos en el arbol

            foreach (var n in children.Nodes) // iteramos sobre el arbol en el que hay que buscar
            {
                if (n.Data.Name.Equals(folderList[indice], StringComparison.CurrentCultureIgnoreCase)) // si entre los hijos inmediatos del nodo raiz encontramos una coincidencia con el valor apuntado por el indice 
                {                                      // entonces hemos encontrado una coincidencia // segun que arboles podria haber más 
                    coincideParcial = true;             
                    if (n.HasChild && (indice < (folderList.Length - 1)) ) // si el nodo que coincide tiene hijos y no hemos terminado de comprobar el path tenemos que seguir buscando de forma anidada
                    {
                        indice++; // incrementamos el valor del indice avanzando en la carpeta de nuestro path a comprobar
                        resto = T4Help.ArrayStringToString(folderList, indice); // creamos el path restante que nos queda
                        subtree = (ITree<Project>)n; // podamos el arbol desde el nodo en el que nos encontramos
                        coincideParcial = coincideParcial && ExistSolutionFolderName(resto, subtree); // anidamos la busqueda acumulando el resultado de la busqueda
                    }// TODO: falta comprobar si funciona con parte del path repetido
                    if (!n.HasChild && (indice < (folderList.Length - 1)) )
                    { // si el numero de carpetas a buscar es mayor que el numero de nodos la carpeta buscada no existe en esta rama.
                        coincideParcial = false;
                    }
                }
            }

            return coincideParcial;
        }

        ///<sumary>
        ///  con esta función obtenemos la referencia del projecto cuyo nombre con path pasamos como parametro
        ///  realizando una busqueda recursiva por el arbol de nodos
        ///<sumary/>
       public ITree<Project> GetSolutionProject(string SolutionFolderName, ITree<Project> mytree)
        {
            string[] folderList = T4Help.Path2Folders(SolutionFolderName); // obtenemos los nodos del path en un array
            var children = mytree.DirectChildren; // obtenemos un arbol con los hijos directos sobre los que iterar
            ITree<Project> subtree; // creamos arboles podados los que buscar de forma recursiva
            ITree<Project> centinela = null; // creamos arboles podados los que buscar de forma recursiva
            int indice = 0;         // indice de las carpetas que vamos comprobando
            string resto;           // composición del resto de carpetas que nos queda por comprobar si existe en la busqueda recursiva
            bool coincideParcial = false; // vamos acumulando el nivel de coincidencia a medida que avanzamos en el arbol

            foreach (var n in children.Nodes) // iteramos sobre el arbol en el que hay que buscar
            {
                if (n.Data.Name.Equals(folderList[indice], StringComparison.CurrentCultureIgnoreCase)) // si entre los hijos inmediatos del nodo raiz encontramos una coincidencia con el valor apuntado por el indice 
                {                                      // entonces hemos encontrado una coincidencia // segun que arboles podria haber más 
                    coincideParcial = true;             
                    if (n.HasChild && (indice < (folderList.Length - 1)) ) // si el nodo que coincide tiene hijos y no hemos terminado de comprobar el path tenemos que seguir buscando de forma anidada
                    {
                        indice++; // incrementamos el valor del indice avanzando en la carpeta de nuestro path a comprobar
                        resto = T4Help.ArrayStringToString(folderList, indice); // creamos el path restante que nos queda
                        subtree = (ITree<Project>)n; // podamos el arbol desde el nodo en el que nos encontramos
                        centinela = GetSolutionProject(resto, subtree);
                        coincideParcial = coincideParcial && centinela!= null; // anidamos la busqueda acumulando el resultado de la busqueda
                    }// TODO: falta comprobar si funciona con parte del path repetido
                    if (!n.HasChild && (indice < (folderList.Length - 1)) )
                    { // si el numero de carpetas a buscar es mayor que el numero de nodos la carpeta buscada no existe en esta rama.
                        coincideParcial = false;
                        centinela = null;
                    }
                    
                    if (coincideParcial && (indice == 0)) // si hemos alcanzado el final del camino en SolutionFolderName y la coincidencia parcial se mantiene entonces el centinela guarda la referencia
                        { 
                            coincideParcial = false;
                            centinela = (ITree<Project>)n; 
                        }
                }
            }
            if (centinela!=null)
                return centinela;
            else 
                return null;
        }

  
        // leemos la lista de proyectos de la solución de forma recursiva y la metemos en una lista
        public IDictionary<string, Project> GetProjectsTreeDictionary()
        {
           // Projects projects = GetActiveIDE().Solution.Projects;
            IDictionary<string, Project> list = new Dictionary<string, Project>();
            //StringBuilder pathProject;
             
            //foreach(NodeTree<Project> node in this.SolutionTree.All.Nodes)
            //{
                //foreach(NodeTree<Project> parentNode in node.DirectChildrenInReverse)
                //{
                    //pathProject.Insert(0, parentNode.Name );
                    //if (parentNode.HasParent)
                    //{pathProject.Insert(0, System.IO.Path.DirectorySeparatorChar );}
                //}
                //list.Add(pathProject, node);
                //pathProject.Clear();
            //}
            

            return list;
        }

		public void SetProjectsProperty( string projectName, string itemType, string itemValue)
		{
			//var projitems = SolutionInfo.ProjectsList.Cast<Project>().Where(p=> p.CodeModel!=null && p.Name.Equals(projectName) ).First().ProjectItems;
			//pitem.Properties.Item(itemType).Value = itemValue;

			//foreach (var pitem in projitems.ProjectItems)
			//{
			//	//var fitem = pitem.FileNames.Where(p => p.);
			//	pitem.Properties.Item(itemType).Value = itemValue;
			//}
		}

    }




public static class SolutionProjects
    {

        public static DTE2 GetActiveIDE()
        {
            // Get an instance of the currently running Visual Studio IDE.
            DTE2 dte2;
            dte2 = (DTE2)System.Runtime.InteropServices.Marshal.GetActiveObject("VisualStudio.DTE.14.0");
            return dte2;
        }

        // leemos la lista de proyectos de la solución de forma recursiva y la metemos en una lista
        public static IList<Project> ProjectsList()
        {
            Projects projects = GetActiveIDE().Solution.Projects;
            List<Project> list = new List<Project>();
            var item = projects.GetEnumerator();
            while (item.MoveNext())
            {
                var project = item.Current as Project;
                if (project == null)
                {
                    continue;
                }

                if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
                {
                    list.Add(project);
                    list.AddRange(GetSolutionFolderListProjects(project));
                }
                else
                {
                    list.Add(project);
                }
            }

            return list;
        }
        
        // lectura recursiva de la operación public static IList<Project> ProjectsList()
        private static IEnumerable<Project> GetSolutionFolderListProjects(Project solutionFolder)
        {
            List<Project> list = new List<Project>();
            for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
            {
                var subProject = solutionFolder.ProjectItems.Item(i).SubProject;
                if (subProject != null)
                {
                    // If this is another solution folder, do a recursive call, otherwise add
                    if (subProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
                    {
                        list.Add(subProject);
                        list.AddRange(GetSolutionFolderListProjects(subProject));
                    }
                    else
                    {
                        list.Add(subProject);
                    }
                }
            }

            return list;
        }






        // leemos la lista de proyectos de la solución de forma recursiva y la metemos en una árbol
        public static ITree<Project> ProjectsTree()
        {
            Projects projects = GetActiveIDE().Solution.Projects;
            ITree<Project> treeProjects = NodeTree<Project>.NewTree();
            
            var item = projects.GetEnumerator();
            while (item.MoveNext())
            {
                var project = item.Current as Project;
                if (project != null)
                {
                    if (project.Kind == ProjectKinds.vsProjectKindSolutionFolder)
                    {
                        //treeProjects.AddChild(project); // añadimos un nodo al arbol
                        treeProjects.AddChild(GetSolutionFolderTreeProjects(project)); // añadimos un arbol al nodo. la funcion GetSolutionFolderProjects al devolver un arbol  hace que addchild añada un arbol
                    }
                    else
                    {
                        treeProjects.AddChild(project); // añadimos un nodo al arbol
                    }
                }
            }

            return treeProjects;
        }
        
        // lectura recursiva de la operación public static IList<Project> ProjectsList()
        private static ITree<Project> GetSolutionFolderTreeProjects(Project solutionFolder)
        {
            ITree<Project> treeProjects = NodeTree<Project>.NewTree();
            var t = treeProjects.AddChild(solutionFolder);
            for (var i = 1; i <= solutionFolder.ProjectItems.Count; i++)
            {
                var subProject = solutionFolder.ProjectItems.Item(i).SubProject;
                if (subProject == null)
                {
                    continue;
                }

                // If this is another solution folder, do a recursive call, otherwise add
                if (subProject.Kind == ProjectKinds.vsProjectKindSolutionFolder)
                {
                    //treeProjects.AddChild(subProject); // añadimos un nodo al arbol
                    t.AddChild(GetSolutionFolderTreeProjects(subProject)); // añadimos un arbol al nodo. la funcion GetSolutionFolderProjects al devolver un arbol  hace que addchild añada un arbol

                }
                else
                {
                    t.AddChild(subProject); // añadimos un nodo al arbol
                }
            }

            return treeProjects;
        }


    }// fin de la clase estatica public static class SolutionProjects
#>