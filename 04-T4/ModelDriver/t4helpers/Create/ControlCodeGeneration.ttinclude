<#+ 

public void ControlCodeGeneration(DslContextDefinitionDiagram MainDiagram, ActiveSolution SolutionInfo,  ITree<LocalizedBounded> TreeApp, ITree<BoundedContextMetadata> SharedKernelTree)
{
    bool okDebug = false;

    string bdName = null; // este es el parametro que junto con diagrama, solución y arq pasamos como parametros a las clases de plantillas de generación.
    string secureBdName = null; 

    // CUERPO DEL METODO
    ITree<ClassBase> boundedContextElements = null;
    // recorremos los contextos limitados
    foreach( INode<LocalizedBounded> context in TreeApp.All.Nodes )
        {
         kayak.MoneyGen.Application boundedContext = context.Data.Context.Value; //comentamos esta linea para cambiar el recorrido por los elementos del modelo por el recorrido del arbol de jerarquias.
            //bdName = GetBoundedContextName( MainDiagram,  context); // el código comentado acontinuaciónes es sustituido por esta llamada.
            bdName = GetBoundedContextNameFromTreeAppAndDeep( context.Depth,  context,  MainDiagram);
         //bdName = context.Data.Context.Key;
            //if(context.HasChild ) // si es un contexto que alberga otros, los layer folders se anidan en un contexto comun y no quedan en la raiz de dicho contexto.
            //{
                //if (context.Data.Context.Value != null )
                //if (context.Data.Context.Value.Elements.Count() > 0) // para añadir el nombre de carpeta que se usa para identificar los sharedkernel es necesario que el diagrama tenga algun elemento que no sea un contexto limitado
                //{
                    //bdName = context.Data.Context.Key+System.IO.Path.DirectorySeparatorChar+MainDiagram.SolutionFolderCommon;
                    //if (context.Data.Context.Key.Equals(MainDiagram.Product)) bdName = MainDiagram.SolutionFolderCommon;
                //}
            //}
                                                     // si añadimos esta condición no generara código pero ademas borra el existente && !context.Data.Context.Value.GenerateCode.Equals(GenerationPolicy.Never)
         if (boundedContext != null && bdName != null  ) // si el contexto limitado tiene asociado un diagrama y un nombre lo procesamos.
            {
            boundedContextElements = ReadClassesHierarchie(boundedContext);
            secureBdName = bdName.Replace('\\','.');
                if (okDebug) Debug.WriteLine(String.Format("El nombre del proyecto es'{0}'",secureBdName));
                if (okDebug) Debug.WriteLine(String.Format("Este proyecto tiene '{0}' hijos",context.DirectChildCount ));
                int contadorDeEntidades = 0;
                //bool ResxWriteInit = false; // el contador de entidades no se puede usar para saber el comienzo pues las entidades de los shared kernel cuentan pero no se procesan.
                int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) & p.Data.ReferencedRootEntity == null).Count();
                //int kindOfClass = 0; /* tipo de clase entidad, objeto valor , enumerado, servicio,  operación invariante etc.*/
                ClassBaseContext CBC;
                foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) )
                {
                    //bool okDebug = item.Data.Name.Equals("Empleado");
                    if (item.Data.ReferencedRootEntity != null ) continue; // Si la entidad u objeto valor es una entidad de referencia o cuyo estereotipo es "ExternalContext" entonces la ignoramos.
                    contadorDeEntidades++; // este contador se utiliza para generar de forma incremental los ficheros de recursos de un contexto dado por lo que tenemos que incluir todas las entidaes que aprezcan, incluso las referenciadas.
                    ClassBase entity = item.Data;
                    bool EntidadNoAbstracta = (( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &
                                             ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ); // si la clase es abstracta no tiene factorias

                    CBC = new ClassBaseContext(MainDiagram, SolutionInfo, entity, secureBdName);
                    if (okDebug) Debug.WriteLine("Para la entidad :{0}", item.Data.Name);
                    if (okDebug) CBC.DebugContext();

                    if (item.Data is Entity)
                    {  if (okDebug) Debug.WriteLine(" la entidad :{0} es ENTITY", item.Data.Name); }
                    else { if (okDebug) Debug.WriteLine(" la entidad :{0} es OBJETOVALOR", item.Data.Name); }
                    if (okDebug) Debug.WriteLine("Para la entidad :{0}", item.Data.Name);
                    if (okDebug) Debug.WriteLine("La consulta de si todos los atributos son mandatory tiene como resultado :{0}", AreAllMandatory( item.Data));
                    if (okDebug) Debug.WriteLine("La consulta de si todos las relaciones tienen la misma multiplicidad tiene como resultado :{0}", AreAllTargetMinMultiplicityEqual( item.Data));
                    if (okDebug) Debug.WriteLine("La consulta de si todos las relaciones tienen la misma multiplicidad tiene como resultado :{0}", AreAllSourceMinMultiplicityEqual( item.Data));

                    // cada entidad tiene un reflejo en cada capa por lo tanto para cada entidad recorremos cada una de las capas y sus proyectos asociados.
                    foreach (Architecture.ArqLayer layer in Architecture.ArqLayers) // La arquitectura tiene 4 layers
                    {
                        if (okDebug) Debug.WriteLine("\n\n{0}",layer.LayerType );
                        string FolderLayerName = GetFolderLayerName(MainDiagram, layer.LayerType);

                        if (FolderLayerName != null)
                        {
                            //string contextPath = GetBoundedContextLayerPath(diagram.SolutionFolderBoundedContext, bdName, FolderLayerName);
                            if (okDebug) Debug.WriteLine(String.Format("El nombre del FolderLayerName es'{0}'",FolderLayerName));

                            if (layer.LayerProyects != null)
                                foreach (Architecture.ArqLayer.ArqProject project in layer.LayerProyects)
                                {
                                    if (okDebug) Debug.WriteLine(string.Format("Nombre de projecto  {0}, plantilla de projecto{1}",project.Name, project.Template ));
                                    string nombreprojecto = GetProjectName( MainDiagram, layer.LayerType, project, secureBdName);
                    
                                    if (okDebug) Debug.WriteLine(string.Format("MainDiagram.RootNameSpace = '{0}', secureBdName = '{1}' project.Name = '{2}'",MainDiagram.RootNameSpace , secureBdName ,project.Name ));

                                    string temppath = MainDiagram.AbsProyectsPath +System.IO.Path.DirectorySeparatorChar+nombreprojecto ;
                                    string nombreprojectoConExtension = nombreprojecto + ".csproj";

                                    string superfolder = null;
                                    ClassBase entitySuperClass = null;
                                    var kindComposition = WhatTypeComponented(item.Data);
                          if (okDebug) Debug.WriteLine(string.Format("0superfolder = '{0}' of entity '{1}' ",superfolder, entity.Name ));
                                    if(!string.IsNullOrEmpty( item.Data.FolderNameSpaceAggregatedName))
                                        {superfolder = item.Data.FolderNameSpaceAggregatedName + System.IO.Path.DirectorySeparatorChar;}
                          if (okDebug) Debug.WriteLine(string.Format("1superfolder = '{0}' of entity '{1}' ",superfolder, entity.Name ));
                                    if (entity is Entity & (IsDerived( item.Data) || item.Data.SourceClassBase != null))// consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
                                    {
                                        if (item.Data.SourceClassBase != null)
                                        {
                                            entitySuperClass = GetSuperEntity(item.Data); 
                                        }
                                        else
                                        {
                                            entitySuperClass = entity.SourceClassBase; // Tambien puede obtenerse por (Entity)item.Parent.Data 
                                        }
                          if (okDebug) Debug.WriteLine(string.Format("2superfolder = '{0}' of entity '{1}' ",superfolder, entity.Name ));
                                        superfolder = superfolder + GetSuperFolders(entity); // en cuyo caso obtenemos su estructura de carpetas anidadas

                          if (okDebug) Debug.WriteLine(string.Format("3superfolder = '{0}' of entity '{1}' ",superfolder, entity.Name ));
                                        superfolder = superfolder + System.IO.Path.DirectorySeparatorChar;
                                    } 
                                    else if (entity is  Entity & ( kindComposition.Equals(KindComponented.isOneChild) | kindComposition.Equals(KindComponented.allAreOneFather )))
                                    {
                                        string fatherCompouser = GetFatherCompouserFolder(entity);
                                        if (!string.IsNullOrEmpty(fatherCompouser))
                                            superfolder =  fatherCompouser + System.IO.Path.DirectorySeparatorChar ;
                                    } // END if (IsDerived( entity))

                                    if (!MainDiagram.GetCodeTree)
                                    {
                                        if(!string.IsNullOrEmpty( item.Data.FolderNameSpaceAggregatedName))
                                        {
                                            superfolder = item.Data.FolderNameSpaceAggregatedName + System.IO.Path.DirectorySeparatorChar;
                                        }
                                        else
                                        {
                                            superfolder = null;
                                        }
                                    }

                          if (okDebug) Debug.WriteLine(string.Format("4superfolder = '{0}' of entity '{1}' ",superfolder, entity.Name ));

                                    switch (layer.LayerType)
                                    {
                    
                                        case LayerKind.Domain:
                                            switch (project.Name) // en este punto tenemos el projecto el nombre del projecto y la entidad
                                            {
                                               case "Resources":
                                                    
                                                    // La generación del fichero de recursos es acumulativa por tanto es necesario controlar la tres fases del mismo.
                                                    // es decir en la primera fase inicializamos la cabecera  y la primera entidad que recorremos, en la segunda introducimos el contenido 
                                                    // y en la tercera cerramos el fichero despues de meter la info de la ultima entidad recorrida.
                                                    string estadoDeDesarrollo = "desarrollo";
                                                    if(contadorDeEntidades == 1) estadoDeDesarrollo = "inicio"; 
                                                    if(contadorDeEntidades == totalDeEntidades ) estadoDeDesarrollo = "fin";
                                                    if(contadorDeEntidades == 1 & totalDeEntidades == 1) estadoDeDesarrollo = "soloUna";

                                                    if (okDebug) Debug.WriteLine(string.Format("entidad ='{0}', estado = '{1}'",entity.Name, estadoDeDesarrollo));
                                                    var t20   = new InfraestructureResourcesCT(CBC, nombreprojecto, SharedKernelTree, estadoDeDesarrollo);
                                                    t20.Output.File = T4Help.SecureName(secureBdName)+"Neutral.resx";
                                                    if (okDebug) Debug.WriteLine(string.Format("el t20.Output.File  ='{0}'",t20.Output.File ));
                                                    t20.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                    t20.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                    t20.Output.BuildAction = BuildAction.EmbeddedResource;
                                                    t20.Output.CustomTool = "PublicResXFileCodeGenerator";
                                                    //t20.Output.CustomToolNamespace = secureBdName;
                                                    t20.Output.Encoding = Encoding.UTF8;
                                                    t20.Render();
                                                    break;

                                                case "Data":
                                                    
                                                    
                                                        if (CBC.IsEnumeration)
                                                        {
                                                            var tenum  = new DomainEnumerationCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tenum.Output.File = "Enums" + System.IO.Path.DirectorySeparatorChar+entity.Name+".cs";
                                                            tenum.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tenum.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tenum.Render();
                                                        }
                                                    
                                                    break;
                                                case "Core":
                                                    if (item.Data.Stereotype != EntityStereotypes.ExternalContext)
                                                    {
                                                        if (CBC.IsEntity || CBC.IsObjectValue)
                                                        {
                                                            var t  = new DomainCoreIEntityCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+".cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t.Output.File  ='{0}'",t.Output.File ));
                                                            //t.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            if (okDebug) Debug.WriteLine(string.Format("el temppath ='{0}', el nombreprojectoConExtension = '{1}'",temppath, nombreprojectoConExtension));
                                                            t.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t.Render();

                                                            if (CBC.MainEntityStereotype.Contains("Validetable")||CBC.MainEntityStereotype.Contains("Auditable")||CBC.MainEntityStereotype.Contains("Bussines"))
                                                            {
                                                                var tbis  = new DomainCoreIEntityValidatorCT(CBC, nombreprojecto, SharedKernelTree);
                                                                tbis.Output.PreserveExistingFile = true;
                                                                tbis.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ "Validator"+System.IO.Path.DirectorySeparatorChar+"I"+entity.Name+"Validator.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el tbis.Output.File  ='{0}'",tbis.Output.File ));
                                                                //t.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                tbis.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                tbis.Render();
                                                            }
                                                            //if (( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract ) // si la clase es abstracta no tiene factorias
                                                            //{

                                                            //var t2  = new DomainCoreInterfaceFactoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t2.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"Factory"+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t2.Output.File  ='{0}'",t2.Output.File ));
                                                            //t2.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t2.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t2.Render();
                                                            //if (CBC.IsEntity & CBC.mandatorySourceLinksCounter == 0) // Solo hacemos repositorios si es una entidad y si esta no es target de una origen de composición (su colección denbiera ser IList)
                                                            //{
                                                            if (CBC.IsEntity )
                                                            {
                                                                var t3  = new DomainCoreRepositoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                                t3.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"Repository"+".cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el t3.Output.File  ='{0}'",t3.Output.File ));
                                                                //t3.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                t3.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                t3.Render();

                                                                var t4  = new DomainCoreRepositoryFactoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                                t4.Output.File = superfolder +entity.Name+System.IO.Path.DirectorySeparatorChar+ "I"+entity.Name+"RepositoryFactory"+".cs";
                                                                t4.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                t4.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                t4.Render();


                                                            }
                                                            //}
                                                            //}
                                                        }
                                                    }
                                                    break;
                                                case "Base":
                                                    if (item.Data.Stereotype != EntityStereotypes.ExternalContext)
                                                    {
                                                        if (CBC.IsEntity || CBC.IsObjectValue)
                                                        {
                                                            var t5  = new DomainBaseEntityCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t5.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ entity.Name+".cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t5.Output.File  ='{0}'",t5.Output.File ));
                                                            if (okDebug) Debug.WriteLine(string.Format("el temppath ='{0}', el nombreprojectoConExtension = '{1}'",temppath, nombreprojectoConExtension));
                                                            //t5.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t5.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar   + nombreprojectoConExtension;
                                                            t5.Render();

                                                            if (CBC.IsEntity)
                                                            {
                                                                var specification  = new DomainBaseEntitySpecificationsCT(CBC, nombreprojecto, SharedKernelTree);
                                                                specification.Output.PreserveExistingFile = false;
                                                                specification.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ entity.Name+"Specifications.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el specification.Output.File  ='{0}'",specification.Output.File ));
                                                                if (okDebug) Debug.WriteLine(string.Format("el temppath ='{0}', el nombreprojectoConExtension = '{1}'",temppath, nombreprojectoConExtension));
                                                                //specification.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                specification.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                specification.Render();
                                                            }
                                                            if (( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract ) // si la clase es abstracta no tiene factorias
                                                            {
                                                                var t6  = new DomainBaseEntityFactoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                                t6.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+ entity.Name+"Factory.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el t6.Output.File  ='{0}'",t6.Output.File ));
                                                                t6.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                t6.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                t6.Render();
                                                            }
                                                            // foreach (var method in CBC.ClassMethods )
                                                            foreach (var method in CBC.ClassMethods.Where(m => m.MethodStereotype.Equals(MethodStereotype.Any)) )
                                                            {
                                                                var PartialMethod  = new DomainBaseEntityPartialMethodsCT(CBC, nombreprojecto, SharedKernelTree, method);
                                                                PartialMethod.Output.PreserveExistingFile = true;
                                                                PartialMethod.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+method.Name+"Partial.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el PartialMethod.Output.File  ='{0}'",PartialMethod.Output.File ));
                                                                // PartialMethod.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                PartialMethod.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                PartialMethod.Render();
                                                            }
                                                            foreach (var method in CBC.ClassMethods.Where(m => m.MethodStereotype.Equals(MethodStereotype.Constructor)) )
                                                            {
                                                                var PartialConstructor  = new DomainBaseEntityPartialConstructorCT(CBC, nombreprojecto, SharedKernelTree, method);
                                                                PartialConstructor.Output.PreserveExistingFile = true;
                                                                PartialConstructor.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"."+method.PartialFileName+"."+"Partial.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el PartialConstructor.Output.File  ='{0}'",PartialConstructor.Output.File ));
                                                                // PartialConstructor.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                PartialConstructor.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                PartialConstructor.Render();
                                                            }
                                                            foreach (var method in CBC.ClassMethods.Where(m => m.MethodStereotype.Equals(MethodStereotype.Destructor)) )
                                                            {
                                                                var PartialDestructor  = new DomainBaseEntityPartialDestructorCT(CBC, nombreprojecto, SharedKernelTree, method);
                                                                PartialDestructor.Output.PreserveExistingFile = true;
                                                                PartialDestructor.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"."+method.PartialFileName+"."+"Partial.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el PartialConstructor.Output.File  ='{0}'",PartialDestructor.Output.File ));
                                                                // PartialConstructor.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                PartialDestructor.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                PartialDestructor.Render();
                                                            }
                                                            foreach (var method in CBC.ClassMethods.Where(m => m.MethodStereotype.Equals(MethodStereotype.Update)) )
                                                            {                           //DomainBaseEntityPartialUpdateCT
                                                                var PartialUpdater  = new DomainBaseEntityPartialUpdateCT(CBC, nombreprojecto, SharedKernelTree, method);
                                                                PartialUpdater.Output.PreserveExistingFile = true;
                                                                PartialUpdater.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"."+method.PartialFileName+"."+"Partial.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el PartialConstructor.Output.File  ='{0}'",PartialUpdater.Output.File ));
                                                                // PartialConstructor.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                PartialUpdater.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                PartialUpdater.Render();
                                                            }
                                                        }
                                                    }
                                                    break;

                                            } // END switch (project.Name) 
                                            break;
                                        case LayerKind.Infrastructure:
                                            switch (project.Name) // en este punto tenemos el projecto el nombre del projecto y la entidad
                                            {
                                                case "Data.Repositories":
                                                    if (item.Data.Stereotype != EntityStereotypes.ExternalContext)
                                                    {
                                                        if ( entity is Entity & 
                                                            /*( CBC.mandatorySourceLinksCounter == 0 ) &*/ // Solo hacemos repositorios si es una entidad y si esta no es target de un origen de composición (su colección denbiera ser IList)
                                                            /*( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &*/
                                                            ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ) // si la clase es abstracta no tiene factorias
                                                        {
                                                            var t17  = new InfraestructureEntityRepositoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t17.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Repository.cs";
                                                            t17.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t17.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t17.Render();

                                                            //var t18  = new InfraestructureEntityRepositoryFactoryCT(MainDiagram, SolutionInfo, entity, secureBdName);
                                                            var t18  = new InfraestructureEntityRepositoryFactoryCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t18.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Repositoryfactory.cs";
                                                            t18.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t18.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t18.Render();
                                                        }
                                                    }
                                                    break;
                                                case "Maps.nHibernate31.Oracle":
                                                    if (item.Data.Stereotype != EntityStereotypes.ExternalContext && MainDiagram.SGDB.Contains("Oracle"))
                                                    {
                                                        if ( entity is Entity &
                                                            /*( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &*/
                                                            ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ) // si la clase es abstracta no tiene repositorios
                                                        {
                                                            if (MainDiagram.ORM.Equals("NHibernateXML"))
                                                            {
                                                                //var t19  = new InfraestructureEntityOracleHbmCT(MainDiagram, SolutionInfo, entity, secureBdName);
                                                                var t19  = new InfraestructureEntityOracleHbmCT(CBC, nombreprojecto, SharedKernelTree);
                                                                t19.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+".hbm.xml";
                                                                if (okDebug) Debug.WriteLine(string.Format("el t19.Output.File  ='{0}'",t19.Output.File ));
                                                                t19.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                t19.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                t19.Output.BuildAction = BuildAction.EmbeddedResource;
                                                                t19.Render();
                                                            }
                                                            else if (MainDiagram.ORM.Equals("FluentNhibernate"))
                                                            {
                                                                var t19  = new InfraestructureEntityFluentCT(CBC, nombreprojecto, SharedKernelTree);
                                                                t19.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Map.cs";
                                                                if (okDebug) Debug.WriteLine(string.Format("el t19.Output.File  ='{0}'",t19.Output.File ));
                                                                t19.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                t19.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                
                                                                t19.Render();
                                                            }
                                                        }
                                                    }
                                                    break;
                                                //case "Resources":
                                                    //
                                                    //// La generación del fichero de recursos es acumulativa por tanto es necesario controlar la tres fases del mismo.
                                                    //// es decir en la primera fase inicializamos la cabecera  y la primera entidad que recorremos, en la segunda introducimos el contenido 
                                                    //// y en la tercera cerramos el fichero despues de meter la info de la ultima entidad recorrida.
                                                    //string estadoDeDesarrollo = "desarrollo";
                                                    //if(contadorDeEntidades == 1) estadoDeDesarrollo = "inicio"; 
                                                    //if(contadorDeEntidades == totalDeEntidades ) estadoDeDesarrollo = "fin";
                                                    //if(contadorDeEntidades == 1 & totalDeEntidades == 1) estadoDeDesarrollo = "soloUna";
//
                                                    //if (okDebug) Debug.WriteLine(string.Format("entidad ='{0}', estado = '{1}'",entity.Name, estadoDeDesarrollo));
                                                    //var t20   = new InfraestructureResourcesCT(CBC, nombreprojecto, SharedKernelTree, estadoDeDesarrollo);
                                                    //t20.Output.File = T4Help.SecureName(secureBdName)+"Neutral.resx";
                                                    //if (okDebug) Debug.WriteLine(string.Format("el t20.Output.File  ='{0}'",t20.Output.File ));
                                                    //t20.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                    //t20.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                    //t20.Output.BuildAction = BuildAction.EmbeddedResource;
                                                    //t20.Output.CustomTool = "PublicResXFileCodeGenerator";
                                                    ////t20.Output.CustomToolNamespace = secureBdName;
                                                    //t20.Output.Encoding = Encoding.UTF8;
                                                    //t20.Render();
                                                    //break;
                                                 case "Maps.nHibernate31.SqlServer":
                                                            if (item.Data.Stereotype != EntityStereotypes.ExternalContext && MainDiagram.SGDB.Contains("MsSql"))
                                                            {
                                                                if ( entity is Entity &
                                                                    /*( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &*/
                                                                    ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ) // si la clase es abstracta no tiene repositorios
                                                                {
                                                                    if (MainDiagram.ORM.Equals("NHibernateXML"))
                                                                    {
                                                                    }
                                                                    else if (MainDiagram.ORM.Equals("FluentNhibernate"))
                                                                    {
                                                                        var t19  = new InfraestructureEntityFluentCT(CBC, nombreprojecto, SharedKernelTree);
                                                                        t19.Output.File = "CreateDataBase" + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"CreateSQLServerDataBaseTest.cs";
                                                                        if (okDebug) Debug.WriteLine(string.Format("el t19.Output.File  ='{0}'",t19.Output.File ));
                                                                        t19.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                                        t19.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                                        t19.Render();
                                                                    }
                                                                }
                                                            }

                                                    break;
                                            }
                                            break;
                                        case LayerKind.Application:
                                                    if (item.Data.Stereotype != EntityStereotypes.ExternalContext)
                                            {
                                                switch (project.Name) // en este punto tenemos el projecto el nombre del projecto y la entidad
                                                {
                                                    case "Data.Base":
                                                    
                                                        if (CBC.IsEntity || CBC.IsObjectValue)
                                                        {
                                                            var t9  = new ApplicationEntityDtoCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t9.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Dto.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t9.Output.File  ='{0}'",t9.Output.File ));
                                                            if (okDebug) Debug.WriteLine(string.Format("el t9.Output.File  ='{0}'",t9.Output.File ));
                                                            t9.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t9.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t9.Render();
                                                        }
                                                        //if (CBC.IsEnumeration)
                                                        //{
                                                            //var tenumdto  = new ApplicationEnumerationDtoCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //tenumdto.Output.File = "Enums" + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Dto.cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el tenumdto.Output.File  ='{0}'",tenumdto.Output.File ));
                                                            //if (okDebug) Debug.WriteLine(string.Format("el tenumdto.Output.File  ='{0}'",tenumdto.Output.File ));
                                                            //tenumdto.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //tenumdto.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //tenumdto.Render();
                                                        //}
                                                        break;

                                                    case "Mappers.Core":
                                                    
                                                        if ( entity is Entity && EntidadNoAbstracta ) // && MainDiagram.Mapper.Equals(MapperTechnology.Manual)
                                                        {
                                                            //var t10  = new ApplicationEntityMapperInterfaceCT(MainDiagram, SolutionInfo, entity);
                                                            var t10  = new ApplicationEntityMapperInterfaceCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t10.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"I"+entity.Name+"Mapper.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t10.Output.File  ='{0}'",t10.Output.File ));
                                                            t10.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t10.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t10.Render();
                                                        }
                                                        break;

                                                    case "Mappers.Base":
                                                    
                                                        if ( entity is Entity && EntidadNoAbstracta && MainDiagram.Mapper.Equals(MapperTechnology.Manual))
                                                        {
                                                            var t11  = new ApplicationEntityMapperCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t11.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Mapper.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t11.Output.File  ='{0}'",t11.Output.File ));
                                                            t11.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t11.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t11.Render();
                                                        }

                                                        if ( entity is Entity && EntidadNoAbstracta && MainDiagram.Mapper.Equals(MapperTechnology.AutoMapper))
                                                        {
                                                            var t11  = new ApplicationEntityAutoMapperCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t11.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Mapper.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t11.Output.File  ='{0}'",t11.Output.File ));
                                                            t11.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t11.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t11.Render();
                                                        }

                                                        break;

                                                    case "Services.Core":
                                                    
                                                        if ( 
                                                            entity is Entity &
                                                            /*CBC.mandatorySourceLinksCounter == 0 &*/
                                                            EntidadNoAbstracta
                                                            )
                                                        {
                                                            var ServicesCoreT  = new ApplicationEntityServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            ServicesCoreT.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"I"+entity.Name+"Services.cs";
                                                            ServicesCoreT.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            ServicesCoreT.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            ServicesCoreT.Render();

                                                            //var t11bis  = new ApplicationEntityCreateServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t11bis.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"ICreate"+entity.Name+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t11bis.Output.File  ='{0}'",t11bis.Output.File ));
                                                            //t11bis.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t11bis.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t11bis.Render();
//
                                                            //var t12  = new ApplicationEntityDeleteServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t12.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"IDelete"+entity.Name+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t12.Output.File  ='{0}'",t12.Output.File ));
                                                            //t12.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t12.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t12.Render();
//
                                                            //var t13  = new ApplicationEntityGetAllServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t13.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"IGetAll"+entity.Name+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t13.Output.File  ='{0}'",t13.Output.File ));
                                                            //t13.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t13.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t13.Render();
//
                                                            //var t14  = new ApplicationEntityGetAllPagedServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t14.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"IGetAllPaged"+entity.Name+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t14.Output.File  ='{0}'",t14.Output.File ));
                                                            //t14.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t14.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t14.Render();
//
                                                            //var t15  = new ApplicationEntityGetByServicesCoreIdCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t15.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"IGetBy"+entity.Name+"Id.cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t15.Output.File  ='{0}'",t15.Output.File ));
                                                            //t15.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t15.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
//
                                                            //t15.Render();
//
                                                            //var t15bis  = new ApplicationEntityUpdateServicesCoreCT(CBC, nombreprojecto, SharedKernelTree);
                                                            //t15bis.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"IUpdate"+entity.Name+".cs";
                                                            //if (okDebug) Debug.WriteLine(string.Format("el t15bis.Output.File  ='{0}'",t15bis.Output.File ));
                                                            //t15bis.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            //t15bis.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            //t15bis.Render();
                                                        }
                                                        break;

                                                    case "Services.Base":
                                                    
                                                        if ( 
                                                            entity is Entity &&
                                                            /*CBC.mandatorySourceLinksCounter == 0 &*/
                                                            EntidadNoAbstracta 
                                                            )
                                                        {
                                                            var t16  = new ApplicationEntityServicesBaseCT(CBC, nombreprojecto, SharedKernelTree);
                                                            t16.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Services.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el t16.Output.File  ='{0}'",t16.Output.File ));
                                                            t16.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            t16.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            t16.Render();
                                                        }
                                                        break;

                                                    case "RemoteFacade.WCF":
                                                        
                                                        if( contadorDeEntidades == 1 )
                                                        {
                                                            var tWebConfig  = new WebConfigCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tWebConfig.Output.File = "Web.config";
                                                            tWebConfig.Output.BuildAction = BuildAction.Content;
                                                            tWebConfig.Output.Encoding = Encoding.UTF8;
                                                            tWebConfig.Output.CopyToOutputDirectory = CopyToOutputDirectory.CopyAlways; 
                                                            tWebConfig.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tWebConfig.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tWebConfig.Render();

                                                            var tUnityFrameworkConfig  = new ApplicationRemoteFrameworkUnityConfigCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tUnityFrameworkConfig.Output.File = CBC.company+"Framework.Unity.config";
                                                            tUnityFrameworkConfig.Output.BuildAction = BuildAction.Content;
                                                            tUnityFrameworkConfig.Output.Encoding = Encoding.UTF8;
                                                            tUnityFrameworkConfig.Output.CopyToOutputDirectory = CopyToOutputDirectory.CopyAlways; 
                                                            tUnityFrameworkConfig.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tUnityFrameworkConfig.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tUnityFrameworkConfig.Render();
                                                        }

                                                        if ( entity is Entity & EntidadNoAbstracta  )
                                                        {
                                                            var tCoreService  = new ApplicationRemoteFacadeCoreServiceCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tCoreService.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+"I"+entity.Name+"Service.cs";
                                                            if (okDebug) Debug.WriteLine(string.Format("el tCoreService.Output.File  ='{0}'",tCoreService.Output.File ));
                                                            tCoreService.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tCoreService.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tCoreService.Render();

                                                            var tBaseSvc  = new ApplicationRemoteFacadeBaseSvcCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tBaseSvc.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Service.svc";
                                                            if (okDebug) Debug.WriteLine(string.Format("el tBaseSvc.Output.File  ='{0}'",tBaseSvc.Output.File ));
                                                            tBaseSvc.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tBaseSvc.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tBaseSvc.Render();

                                                            var tBaseSvcCs  = new ApplicationRemoteFacadeBaseSvcCsCT(CBC, nombreprojecto, SharedKernelTree);
                                                            tBaseSvcCs.Output.File = superfolder + entity.Name+System.IO.Path.DirectorySeparatorChar+entity.Name+"Service.svc.cs";
                                                            tBaseSvcCs.Output.BuildProperties["DependentUpon"] = entity.Name+"Service.svc";
                                                            tBaseSvcCs.Output.BuildProperties["SubType"] = "Code";
                                                            if (okDebug) Debug.WriteLine(string.Format("el tBaseSvcCs.Output.File  ='{0}'",tBaseSvcCs.Output.File ));
                                                            tBaseSvcCs.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                            tBaseSvcCs.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension;
                                                            tBaseSvcCs.Render();

                                                        }
                                                        // La generación del fichero de configuración de unity es acumulativa (Al igual que los recursos) por tanto es necesario controlar las tres fases del mismo.
                                                        // es decir en la primera fase inicializamos la cabecera en la segunda introducimos el contenido 
                                                        // y en la tercera cerramos el fichero
                                                        string estadoDeDesarrollo = "desarrollo";
                                                        if(contadorDeEntidades == 1) estadoDeDesarrollo = "inicio"; 
                                                        if(contadorDeEntidades == totalDeEntidades ) estadoDeDesarrollo = "fin";
                                                        if(contadorDeEntidades == 1 & totalDeEntidades == 1) estadoDeDesarrollo = "soloUna";

                                                        if (okDebug) Debug.WriteLine(string.Format("entidad ='{0}', estado = '{1}'",entity.Name, estadoDeDesarrollo));
                                                        var tUnityConfig   = new ApplicationRemoteBoundedContextUnityConfigCT(CBC, nombreprojecto, SharedKernelTree, estadoDeDesarrollo);
                                                        tUnityConfig.Output.File = secureBdName+"Unity21.config";
                                                        if (okDebug) Debug.WriteLine(string.Format("el tUnityConfig.Output.File  ='{0}'",tUnityConfig.Output.File ));
                                                        tUnityConfig.projectNamespace = nombreprojecto; // el namespace del proyecto coincide con el nombre del mismo.
                                                        tUnityConfig.Output.Project = temppath + System.IO.Path.DirectorySeparatorChar  + System.IO.Path.DirectorySeparatorChar + nombreprojectoConExtension; // + "DistributedServices"+ System.IO.Path.DirectorySeparatorChar
                                                        tUnityConfig.Output.BuildAction = BuildAction.Content;
                                                        tUnityConfig.Output.Encoding = Encoding.UTF8;
                                                        tUnityConfig.Output.CopyToOutputDirectory = CopyToOutputDirectory.CopyAlways; 
                                                    
                                                        //t20.Output.CustomToolNamespace = secureBdName;
                                                        tUnityConfig.Output.Encoding = Encoding.UTF8;
                                                        tUnityConfig.Render();

                                                        break;

                                                }
                                            } // end if (item.Data.Stereotype != EntityStereotypes.ExternalContext)
                                                    
                                            break;
                                        case LayerKind.UxWpf:
                                            
                                            break;
                                        default:
                                            break;
                                    } // END switch (layer.LayerType)
                                } // END  foreach (Architecture.ArqLayer.ArqProject project in layer )
                        } //END  if (FolderLayerName!=null)
                    }  // End foreach layer
                }// End foreach( entity )
            }
        }// end foreach (context)
}
#>
