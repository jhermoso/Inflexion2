<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" debug="true" hostspecific="True" #>
<#@ output extension ="txt" #>
<#@ MoneyGen processor="MoneyGenDirectiveProcessor"  requires="fileName='Main.kyk'"  #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="t4helpers\T4Application\Assemblys.ttinclude" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Text" #>
<#@ import namespace ="System.Text.RegularExpressions" #>
<#@ import namespace ="System.Xml" #>
<#@ import namespace ="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace ="EnvDTE" #>
<#@ import namespace ="EnvDTE80" #>
<#@ import namespace ="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace ="System" #>
<#@ import namespace ="System.IO" #>
<#@ import namespace ="System.Diagnostics" #>
<#@ import namespace ="System.Linq" #>
<#@ import namespace ="System.Xml.Linq" #>
<#@ import namespace ="System.Collections" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Collections.ObjectModel" #>
<#@ import namespace ="System.ComponentModel" #>
<#@ import namespace ="Common" #>
<#@ import namespace = "kayak.MoneyGen" #>
<#@ import namespace = "kayak.MoneyGen.T4ModelBusAdapters" #>
<#@ include file="t4helpers\StringsFuntions\T4Helpers.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Entity.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\Association.ttinclude" #>
<#@ include file="t4helpers\FeatureQuerys\ClassBase.ttinclude" #>
<#@ include file="t4helpers\Initialitation\DSLContextDefinition.ttinclude" #>
<#@ include file="t4helpers\Create\IOWindows.ttinclude" #>
<#@ include file="t4helpers\Create\Solution.ttinclude" #>
<#@ include file="t4helpers\Initialitation\Constants.ttinclude" #>
<#@ include file="t4helpers\Create\ArchitectureDefinition.ttinclude" #>
<#@ include file="t4Includes\Domain\DomainCoreIEntityCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreInterfaceFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainCoreRepositoryFactoryCT.tt" #>
<#@ include file="t4Includes\Domain\DomainBaseEntityCT.tt" #>
<#@ include file="t4Includes\Copyright.ttinclude" #>
<#

    // primera parte recolectamos información acerca de la solucion los diagramas y las definiciones
    // almacenandolas en estructuras de datos facilmente accesibles.
    Debug.WriteLine("          EMPEZAMOS");
    // 1º acerca del diagrama
    DslContextDefinitionDiagram MainDiagram = new DslContextDefinitionDiagram(this.Application);
    Debug.WriteLine(MainDiagram.ToString());
    // 2º acerca de la propia solución
    ActiveSolution SolutionInfo = new ActiveSolution(this.Host);
    Debug.WriteLine(SolutionInfo.ToString());
    // 3º obtenemos en la clase de maindiagram los path absolutos de las principales carpetas de la solución. 
    MainDiagram.SetAbsolutePath(SolutionInfo.DirectoryName);

    // 4º instanciamos la clases con la definición de la arquitectura
    Architecture Arq = new Architecture();

    WriteLine("El path de Proyects es '{0}'", MainDiagram.ProyectsPath);
    WriteLine("El path de la solución es '{0}'", SolutionInfo.DirectoryName);
    WriteLine("El path abs de projectos es '{0}'", MainDiagram.AbsProyectsPath);

    IList<Project> Projectos = SolutionProjects.ProjectsList(); // este es un método estático que nos permite accedeer de forma rapida a la lista de proyectos para buscar uno concreto.
        
    // Segunda parte utilizamos la información recolectada para generar los proyectos de la solución.
    
    // Comprobamos y chequeamos la existencia de las carpetas de apoyo a la solución.
    // primero con la carpeta de Documentación
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.DocumentationPath);
    // Acontinuación con la carpeta de Documentación
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.AsemblysPath);
    // Seguidamente con la carpeta de librerias de terceros
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.LibraryPath);
    // Por último con la carpeta de projectos
    IOWindows.NewChequedFolder(SolutionInfo.DirectoryName+System.IO.Path.DirectorySeparatorChar+MainDiagram.ProyectsPath);
    
     //Comprobamos y chequemos la existencia de las carpetas de solución en la raiz
     //obteniendo la referencia como projecto de cada una de ellas

    // 1º con la carpeta de contextos limitados
    MainDiagram.SFBoundedContextRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderBoundedContext);
    if (MainDiagram.SFBoundedContextRef!=null)
        WriteLine("añadimos u obtenemos la carpeta '{0}' cuyo nombre es {1}",MainDiagram.SolutionFolderBoundedContext, MainDiagram.SFBoundedContextRef.Name);


    // 3º con la carpeta de Framework 
    MainDiagram.SFFrameworkRef = SolutionInfo.AddSolutionFolderPath(MainDiagram.SolutionFolderFramework);
    if (MainDiagram.SFFrameworkRef!=null)
        WriteLine("añadimos u obtenemos la carpeta '{0}' cuyo nombre es {1}",MainDiagram.SolutionFolderFramework, MainDiagram.SFFrameworkRef.Name);

    // para cada bounded context añadimos a la carpeta de solución de BoundedContext 
    // el nombre del bounded Context y sus carpetas de solución por capas
    // despues añadimos en cada capa los proyectos y sus referencias 
    // y por ultimo añadimos las clases de cada capa.

    // 1º añadimos las carpetas de los contextos.
    // la carpeta de 'Common' es a todos los efectos otro Bounded Context y se trata como tal. 
    Architecture.AddBoundedContextLayers(MainDiagram.SolutionFolderCommon, MainDiagram, SolutionInfo);
    //// acontinuación vamos a recorrer los bounded context para añadir por cada una las capas de DDD en cada uno de ellos.
    foreach (BoundedContext bd in this.Application.BoundedContexts )
    {
        if (!bd.Name.StartsWith("From "))
        {
            Architecture.AddBoundedContextLayers(bd.Name, MainDiagram, SolutionInfo);
        }
    }
    // HASTA QUE EL MÉTODO DE GENERACIÓN DE CÓDIGO SE CONVIERTA EN UNA PLANTILLA MARCAMOS LOS PARAMETROS Y LAS VARIABLES INTERNAS DEL MISMO.
    // ***** PARAMETROS

    string bdName = MainDiagram.SolutionFolderCommon; // este es el parametro que junto con diagrama, solución y arq pasamos como parametros a las clases de plantillas de generación.
    string secureBdName = bdName.Replace('\\','.');
    // VARIABLES INTERNAS
    string OutputFile= null;  // nombre del fichero output donde vamos a escribir el fuente correspondiente
    string prjName= null;
    Project prj;              // proyecto donde se escribe el codigo fuente
    
    // CUERPO DEL METODO
    
    
    
  string s;
  foreach (Entity entity in this.Application.Elements.Where(p=> p is Entity ))
    {
        WriteLine("Parametros del constructor para la entidad {0} ",entity.Name );
        WriteLine("el tipo es :'{0}' ",entity.ToString() );
        // Comentario de parametros       ( Entity entity, bool autonumerico ,                         SelectionCriteriaAttributes flag,      int limiteSalto, bool incluirTipo,  int spaceIndent,    bool incluirDefaultValues,  bool incluirId, bool incluirTargetAssociations, bool incluirSourceAssociations, bool pascalCase=false,  string prefijo=null,    string sufijo=null)
        s=  GetConstructorParametersString( entity,          MainDiagram.IdKind.Equals("Autonumerical"), SelectionCriteriaAttributes.Mandatory, 10,              true,              20,                 false,                      true,           true,                           true ,                          false,                  null,                   null);
        WriteLine("{0} ",s );
        WriteLine("------");
    }// End foreach( entity )

WriteLine("test metodo secureName {0} ",SecureName("45 esta es una?¿_Prueba*+^^!|2340oWCF") );

WriteLine("test metodo ToPascalCase {0} ",ToPascalCase("45 esta es una?¿_Prueba*+^^!|2340oWCF") );

WriteLine("test metodo ToPascalCase {0} ",StrCleanLfCR("45 \r\n esta es una?\n\r\n¿_Prueba*+^^!|\r\n2340oWCF") );
    
WriteLine("test metodo ToPascalCase {0} ","45 \r\n esta es una?\n\r\n¿_Prueba*+^^!|\r\n2340oWCF");
foreach(Project p in SolutionInfo.ProjectsList )
    {
        WriteLine("El proyecto es :{0}",p.Name);
    }



// comprobamos la obtención de propiedades que tienen un valor por defecto mediante una expresión lambda
  LinkedElementCollection<Atributte> propertyObjects;
  foreach (var entity in this.Application.Elements ) // esto funciona por que entity es realmente ClassBase
    {
        WriteLine("Atributos con valor por defecto de la entidad {0} ",entity.Name );
        propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 

    foreach (var property in propertyObjects.Where(p => !String.IsNullOrEmpty(p.DefaultValue)))
        {
            WriteLine("el atributo {0} = '{1}' ",property.AtributteName, property.DefaultValue );
        }
        WriteLine("------");
    }// End foreach( entity )

  foreach (Entity entity in this.Application.Elements.Where(p => p.TargetClassBases != null & ( p is Entity )) )
    {
        WriteLine("La clase {0} es superclass de las siguientes clases:",entity.Name );
        ITree<ClassBase> t = GetDerivedClassBaseTree(entity);
    
        WriteLine("------");
    }// End foreach( entity )

    ITree<ClassBase> boundedContextElements = null;
             Debug.WriteLine("recorremos el arbol");
    boundedContextElements = ReadClassesHierarchie(this.Application);
        WriteLine("RECORREMOS EL ARBOL");

    foreach (INode<ClassBase> c in boundedContextElements.All.Nodes )
    {
        WriteLine("{0} {1} {2}      {3} {4} {5}",Indent(c.Depth *4 )  , c.Data.Name, Indent(+40 -c.Data.Name.Length - c.Depth *4) ,(entityHasAttributesOrAssociations(c.Data))?"*":"#" ,  c.Data.GetType().ToString(),(c.Depth>0)? "Es hija de "+c.Parent.Data.Name:"" );
    }
        WriteLine("RECORREMOS EL ARBOL solo entidades");
    foreach (INode<ClassBase> c in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
    {
        WriteLine("{0} {1}              {2} {3}",Indent(c.Depth *4), c.Data.Name , c.Data.GetType().ToString(),(c.Depth>0)? "Es hija de "+c.Parent.Data.Name:"" );
    }
//
        WriteLine("COMPROBAMOS LA OBTENCIÓN DE CARPETAS DE LAS CLASES ANIDADAS");
        foreach (INode<ClassBase> c in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
    {
        WriteLine("{0} {1}              {2} {3} superfolder :{4}",Indent(c.Depth *4), c.Data.Name , c.Data.GetType().ToString(),(c.Depth>0)? "Es hija de "+c.Parent.Data.Name:"",GetSuperFolders((Entity)c.Data) );
    }
  
    string inherintaceClassModifier = null;    
    ClassBase e;
    foreach (INode<ClassBase> c in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
    {
        Write("{0} {1} {2} ",Indent(c.Depth *4), GetStringAccesModifier(c.Data.InheritanceClassModifier ), c.Data.Name  );
        if (IsDerived((Entity)c.Data))
        {
            e = GetSuperEntity(c.Data);
            Write(" y Deriva de :'{0}'", e.Name);
        }
        WriteLine("");
    }


    WriteLine(" -/* COMPROBAMOS la obtención de parametros mandatory para cada entidad ");
    string derivedParams="";

    foreach (INode<ClassBase> c in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
    {
        
        derivedParams="";
        string temporal;
        string coma;
        if (IsDerived(c.Data)  )
        {
            WriteLine("{0} {1} ({2}) '{3}'",Indent(c.Depth *4), c.Data.Name , GetConstructorParametersString( (Entity)c.Data, true ,SelectionCriteriaAttributes.Mandatory, 80, false, 0 , false, true, true, true) , (c.Data.SourceClassBase != null)?c.Data.SourceClassBase.Name: "no esta anidada");
            e = (Entity)c.Data;
            derivedParams = GetConstructorParametersString( (Entity)e, true ,SelectionCriteriaAttributes.Mandatory, 80, false, 0 , false, true, true, true);
            while (IsDerived(e))
            {
                e = GetSuperEntity(e);
                temporal = GetConstructorParametersString( (Entity)e, true ,SelectionCriteriaAttributes.Mandatory, 80, false, 0 , false, false, true, true);
                coma = (temporal.Length>0)?",":"";
                derivedParams = derivedParams +coma+ temporal;

            }
        WriteLine("{0} {1} ({2}) {3}",Indent(c.Depth *4), c.Data.Name , derivedParams, kayak.MoneyGen.ClassBaseHasNestedClassBases.GetLinksToTargetClassBases(c.Data).Count);
        WriteLine("{0} {1} ({2} {3})",Indent(c.Depth *4), c.Data.Name , GetConstructorParametersString( (Entity)e, true ,SelectionCriteriaAttributes.Mandatory, 80, false, 0 , false, true, true, true), GetConstructorParametersStringSuperClasess( (Entity)e, true ,SelectionCriteriaAttributes.Mandatory, 80, false, 0 , false, false, true, true));

        }
       
    }

string stringInput ="primera.Segunda.Tercera.cuarta.quinta";

WriteLine( getRightStringSlice(stringInput, '.', 1));
WriteLine( getRightStringSlice(stringInput, '.', 2));
WriteLine( getRightStringSlice(stringInput, '.', -1));
WriteLine( getRightStringSlice(stringInput, '.', -2));
WriteLine( getRightStringSlice(stringInput, '.', 4));


WriteLine( getLeftStringSlice(stringInput, '.', 1));
WriteLine( getLeftStringSlice(stringInput, '.', 2));
WriteLine( getLeftStringSlice(stringInput, '.', -1));
WriteLine( getLeftStringSlice(stringInput, '.', -2));
WriteLine( getLeftStringSlice(stringInput, '.', 4));

WriteLine( StrCleanChar( getLeftStringSlice(stringInput, '.', 1),@"[\.]" ));
WriteLine( StrCleanChar( getLeftStringSlice("Idictionary", '.', 1),@"[\.]" ));

#>