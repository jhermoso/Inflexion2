<#+

public class DocAboutClassBase : Template
{
    // parametros de la plantilla
    DslContextDefinitionDiagram MainDiagram;
    public ClassBaseContext  cbc ;
    public ITree<BoundedContextMetadata> Skt;
    public ITree<LocalizedBounded> TreeApp;

    // constructor de la plantilla
    public DocAboutClassBase(DslContextDefinitionDiagram mainDiagram, ClassBaseContext  classBaseContext, ITree<LocalizedBounded> treeApp, ITree<BoundedContextMetadata> skt )
    {
        MainDiagram = mainDiagram;
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        Skt = skt;                          // shared kernel tree
        TreeApp = treeApp;
    }

    // metodo de generación de la plantilla
    public override string TransformText()
    {
        string YumlDefinition  = GetYumlDefinition( cbc, cbc.secureBdName, TreeApp, Skt, false);
        ITree<ClassBase> ChildrenTaxonomyTree;
        System.Collections.Generic.IEnumerable<kayak.MoneyGen.Association> mandatoryPropertyFromSources;
        System.Collections.Generic.IEnumerable<kayak.MoneyGen.Association> mandatoryPropertyFromFathers;
        System.Collections.Generic.IEnumerable<kayak.MoneyGen.Association> mandatoryPropertyFromTargets;
        if (cbc != null)
        {
#>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title><#= MainDiagram.Product #> Documentation </title>
</head>
<body>
    <h2>Caracteristicas de la <#= (cbc.IsEntity)?"Entidad":(cbc.IsObjectValue)?"Objeto Valor":(cbc.IsEnumeration)?"Enumerado":"Error tipo no contemplado" #> '<#= cbc.secureEntityName #>'  </h2>
    <img src="Images\\<#= cbc.secureEntityName #>.png">
    <table>

        <tr><td> Contexto Limitado </td><td> <#= cbc.secureBdName #> </td></tr>
        <tr><td> comentarios programador </td><td> <#= cbc.entity.ProgramRemarks #> </td></tr>
        <tr><td> comentarios usuario </td><td> <#= cbc.entity.Remarks #> </td></tr>
        <tr><td> tooltip </td><td> <#= cbc.entity.Tooltip #> </td></tr>
        <tr><td> &nbsp; </td><td>  </td></tr>
        <tr><td> tipo de composición en el que interviene </td><td>  <#=cbc.kindComponent.ToString()#> </td></tr>
        <tr><td> superfolder </td><td> <#= (cbc.superfolder!=null)? cbc.superfolder:"" #> </td></tr>
        <tr><td> entityHasChildren </td><td> <#= cbc.entityHasChildren #> </td></tr>
        <tr><td> isAbstract </td><td> <#= cbc.isAbstract #> </td></tr>
        <tr><td> Modificadores de acceso </td><td> <#= cbc.accesModifier #> </td></tr>
        <tr><td> idtype </td><td> <#= cbc.idtype #> </td></tr>
        <tr><td> Es auditable </td><td> <#= cbc.entity.Auditable.ToString() #> </td></tr>
        <tr><td> Forzada a ser root </td><td> <#= cbc.IsRoot.ToString() #> </td></tr>

        <tr><td> idtype </td><td> <#= cbc.idtype #> </td></tr>
        <tr><td> valor nulo del id </td><td> <#= cbc.nullidtype #> </td></tr>
        <tr><td> secureEntityName </td><td> <#= cbc.secureEntityName #> </td></tr>
        <tr><td> pascalSecureEntityName </td><td> <#= cbc.pascalSecureEntityName #> </td></tr>
        <tr><td> camelSecureEntityName </td><td> <#= cbc.camelSecureEntityName #> </td></tr>

        <tr><td> entityHasChildren </td><td> <#= cbc.entityHasChildren.ToString() #> </td></tr>
        <tr><td> numEntityFields </td><td> <#= cbc.numEntityFields #> </td></tr>
        <tr><td> numEntityFieldsMandatory </td><td> <#= cbc.numEntityFieldsMandatory #> </td></tr>

        <tr><td> isDerivedFromOneEntity </td><td> <#= cbc.isDerivedFromOneEntity.ToString() #> </td></tr>
        <tr><td> entitySuperClass </td><td> <#= (cbc.entitySuperClass!=null)? cbc.entitySuperClass.Name:""#> </td></tr>
        <tr><td> entityCore </td><td> <#= (cbc.entityCore!=null)? cbc.entityCore :"" #> </td></tr>
        <tr><td> entityCoreFactory </td><td> <#= (cbc.entityCoreFactory!=null)? cbc.entityCoreFactory :"" #> </td></tr>
        <tr><td> entityCoreRepository </td><td> <#= (cbc.entityCoreRepository!=null)? cbc.entityCoreRepository :"" #> </td></tr>
        <tr><td> entityBaseRepository </td><td> <#= (cbc.entityBaseRepository!=null)? cbc.entityBaseRepository :"" #> </td></tr>



        <tr><td> MandatoryConstructorParamnsSimple </td><td> <#= cbc.MandatoryConstructorParamnsSimple #> </td></tr>
        <tr><td> MandatoryConstructorParamns </td><td> <#= cbc.MandatoryConstructorParamns #> </td></tr>
        <tr><td> MandatoryConstructorParamnsWithAll </td><td> <#= cbc.MandatoryConstructorParamnsWithAll #> </td></tr>
        <tr><td> MandatoryConstructorParamnsWithAllnoId </td><td> <#= cbc.MandatoryConstructorParamnsWithAllnoId #> </td></tr>
        <tr><td> MandatoryConstructorParamnsWithOutDefaultValues </td><td> <#= cbc.MandatoryConstructorParamnsWithOutDefaultValues #> </td></tr>
        <tr><td> MandatoryConstructorParamnsCall </td><td> <#= cbc.MandatoryConstructorParamnsCall #> </td></tr>
        <tr><td> MandatoryConstructorParamnsCallnoID </td><td> <#= cbc.MandatoryConstructorParamnsCallnoID #> </td></tr>
        <tr><td> MandatoryConstructorParamnsCallnoIDForDto </td><td> <#= cbc.MandatoryConstructorParamnsCallnoIDForDto #> </td></tr>

        <tr><td> MandatoryEntityBaseConstructorParamans </td><td> <#= cbc.MandatoryEntityBaseConstructorParamans #> </td></tr>
        <tr><td> MandatoryEntityBaseConstructorParamansDefinition </td><td> <#= cbc.MandatoryEntityBaseConstructorParamansDefinition #> </td></tr>
        <tr><td> MandatoryEntityBaseConstructorParamansCall </td><td> <#= cbc.MandatoryEntityBaseConstructorParamansCall #> </td></tr>
        <tr><td> MandatoryConstructorParamnsDTO </td><td> <#= cbc.MandatoryConstructorParamnsDTO #> </td></tr>
        <tr><td> MandatoryEntityBaseConstructorParamansDTO </td><td> <#= cbc.MandatoryEntityBaseConstructorParamansDTO #> </td></tr>
        <tr><td> MandatoryEntityBaseConstructorParamansDefinitionDTO </td><td> <#= cbc.MandatoryEntityBaseConstructorParamansDefinitionDTO #> </td></tr>

    </table>

    <h3>Lista de atributos mandatory</h3>
    <table>
<#+ 
    foreach (var property in cbc.mandatoryPropertyObjects)
        {
#>
        <tr><td> <#= property.AccesKeywords.ToString() #> </td><td> <#= property.AtributteType #> </td><td> <strong><#= T4Help.ToPascalCase(property.AtributteName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (Estereotipo='<#= property.Stereotype.ToString() #>')</td></tr>
        <tr><td> <#= (property.AllowRepeatedValues)?"Permite valor nulo":"no permite valor nulo" #> </td><td> <#=(property.OnlyGetProperty)?"Set privado":"Get set automático" #> </td><td> alias = '<#= property.AtributteAlias #>' </td></tr>
        <tr><td> <#= (property.IsFilter)?"Es filtro":"No es filtro" #> </td><td> <#=(property.IsGrouping)?"Es agrupador":"No es agrupador" #> </td><td>  <#= ( string.IsNullOrEmpty(property.DefaultValue))?"el valor por defecto es: " + property.DefaultValue:"" #> </td></tr>
        <tr><td colspan = 2> <#= property.ProgramerRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>

    <h3>Lista de atributos no mandatory</h3>
    <table>
<#+ 
    foreach (var property in cbc.nonMandatoryPropertyObjects)
        {
#>
        <tr><td> <#= property.AccesKeywords.ToString() #> </td><td> <#= property.AtributteType #> </td><td> <strong><#= T4Help.ToPascalCase(property.AtributteName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (Estereotipo='<#= property.Stereotype.ToString() #>')</td></tr>
        <tr><td> <#= (property.AllowRepeatedValues)?"Permite valor nulo":"no permite valor nulo" #> </td><td> <#=(property.OnlyGetProperty)?"Set privado":"Get set automático" #> </td><td> alias = '<#= property.AtributteAlias #>' </td></tr>
        <tr><td> <#= (property.IsFilter)?"Es filtro":"No es filtro" #> </td><td> <#=(property.IsGrouping)?"Es agrupador":"No es agrupador" #> </td><td>  <#= ( string.IsNullOrEmpty(property.DefaultValue))?"el valor por defecto es: " + property.DefaultValue:"" #> </td></tr>
        <tr><td colspan = 2> <#= property.ProgramerRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>

    <h3>Lista de atributos mandatory from sources (composición)</h3>
    <table>
<#+ 
    foreach (var property in cbc.mandatoryPropertyFromSources)
        {
#>
        <tr><td> (Multiplicidad=<#= property.SourceMultiplicity.ToString() #>) </td><td> <#= property.Source #> </td><td> <strong><#= T4Help.ToPascalCase(property.TargetRolName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (XorRelation='<#= property.XorRelation #>')</td></tr>
        <tr><td colspan = 2> <#= property.ProgramRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>

    <h3>Lista de atributos non mandatory from sources(agregación)</h3>
    <table>
<#+ 
    foreach (var property in cbc.propertyAssociationSources.Where( p=> IsMinMultiplicityCero(p.SourceMultiplicity)))
        {
#>
        <tr><td> (Multiplicidad=<#= property.SourceMultiplicity.ToString() #>) </td><td> <#= property.Source #> </td><td> <strong><#= T4Help.ToPascalCase(property.TargetRolName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (XorRelation='<#= property.XorRelation #>')</td></tr>
        <tr><td colspan = 2> <#= property.ProgramRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>
    total de asociaciones source = <#= cbc.sourceLinksCounter #>

    <h3>Lista de atributos mandatory from Targets (composición)</h3>
    <table>
<#+ 
    foreach (var property in cbc.mandatoryPropertyFromTargets)
        {
#>
        <tr><td> (Multiplicidad=<#= property.SourceMultiplicity.ToString() #>) </td><td> <#= property.Target #> </td><td> <strong><#= T4Help.ToPascalCase(property.SourceRolName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (XorRelation='<#= property.XorRelation #>')</td></tr>
        <tr><td colspan = 2> <#= property.ProgramRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>

    <h3>Lista de atributos non mandatory from targets (agregación)</h3>
    <table>
<#+ 
    foreach (var property in cbc.propertyAssociationTargets)
        {
#>
        <tr><td> (Multiplicidad=<#= property.SourceMultiplicity.ToString() #>) </td><td> <#= property.Target #> </td><td> <strong><#= T4Help.ToPascalCase(property.SourceRolName) #></strong>  <#+ /*(property.IsIdentification)?"(Es identificador)":""*/ #> (XorRelation='<#= property.XorRelation #>')</td></tr>
        <tr><td colspan = 2> <#= property.ProgramRemarks #> </td><tr> 
        <tr><td colspan = 2> <#= property.UserRemarks #> </td><tr> 
<#+     }#>
    </table>
<#+ 
    if (cbc.entityHasChildren)
    { 
        //ChildrenTaxonomyTree = GetDerivedClassBaseTree(cbc.entity);
#>
    <h3>Arbol de clases derivadas</h3>
    <table>
<#+ 
    foreach (var classbase in cbc.entityChildren.All.Nodes)
    //foreach (var classbase in ChildrenTaxonomyTree.All.Nodes)
        {
#>
        <#= T4Help.HtmlIndent(classbase.Depth) #><#= classbase.Data.Name #>
<#+     }#>
    </table>
<#+
    } //if (cbc.entityHasChildren)
#>
<#+
    //List<FatherNode> StackElements = new List<FatherNode>();
    //if(cbc.isDerivedFromOneEntity)
    //{ // si no deriva de nada hay que ver solo sus componentes
        
    //} //end if(cbc.isDerivedFromOneEntity)
#>
    <h3>árbol de superclasesclases </h3>
<#+
    System.Collections.ObjectModel.ReadOnlyCollection<global::kayak.MoneyGen.Association> LinksSourceTarget = null;
    foreach (var item in cbc.ParentsStack )
    {
        LinksSourceTarget = kayak.MoneyGen.AssociationBase.GetLinks( item.Child, item.Father );
 #>
 <#= T4Help.HtmlIndent(item.FatherLevel) #>(<#= item.FatherLevel #>)[<#= item.Father.Name #>] <#= (item.FromComposition)? "por composición con ":"por herencia de " #> [<#= item.Child.Name #>] SourceRol = '<#= string.IsNullOrEmpty(item.SourceRolName)? "": item.SourceRolName #>' TargetRol = '<#=  string.IsNullOrEmpty(item.TargetRolName)? "": item.TargetRolName #>' total father compositions = <#=item.FatherTotalCounter #>/ <#=LinksSourceTarget.Count() #></br>
<#+ 
    }
 #>
    <h3>Lista de clases del agregado </h3>
<#+
    if ( cbc.AgregateList != null)
    foreach (var item in cbc.AgregateList )
    {
 #>
  [<#= item.Father.Name #>] (<#= (item.DtoRoad!=null)?item.DtoRoad:"" #>) </br>
<#+ 
    }
 #>

     <h3>Lista de clases padre </h3>
<#+
    if ( cbc.PathsFromFatherToClass != null)
    foreach (var item in cbc.PathsFromFatherToClass )
    {
 #>
 clase = [<#= item.Clase.Name #>] SourceRolName = /<#= (string.IsNullOrEmpty(item.SourceRolName))?"":item.SourceRolName #>/ TargetRolName = /<#= (string.IsNullOrEmpty(item.TargetRolName))?"":item.TargetRolName #>/
        </br>
<#+     } #>

     <h3>Instrucciones de construcción desde el root agregate </h3>
<#+
    if (cbc.ReverseParentsStack != null )
    {
        foreach (var item in cbc.ReverseParentsStack )
        {
            if (item.FromComposition)
            {
 #>
<#= T4Help.HtmlIndent(item.FatherLevel) #>(<#= item.FatherLevel #>)(num hijos=<#= item.FatherPosition #>/<#= item.FatherTotalCounter #>)(<#= (item.AllChildrenAreLeaves)?"TODOS SON HOJAS":"ALGUNA ES BRIDGE" #>)[<#= item.Father.Name #>(<#= (item.FatherIsEntity)?"entity": (item.FatherIsObjectValue)?"VO":"Enum"#><#= (item.FatherReflexions>0)?", reflexivas "+item.FatherReflexions.ToString():"" #><#= (item.IsXorComposition)?", Es XOR":"" #>)] "se compone de " [<#= item.Child.Name #>(<#= (item.ChildIsEntity)?"entity": (item.ChildIsObjectValue)?"Value Object":"Enum"#><#= (item.ChildReflexions>0)?", reflexivas "+item.ChildReflexions.ToString():"" #><#= (item.IsXorComposition)?", Es XOR":"" #><#= (item.ChildIsLeaf)?", Es hoja":" Es rama" #>)]</br>
 <#+
            }
            else
            {
 #>
(<#= item.FatherLevel #>)(num hijos=<#= item.FatherPosition #>/<#= item.FatherTotalCounter #>)(<#= (item.AllChildrenAreLeaves)?"TODOS SON HOJAS":"ALGUNA ES BRIDGE" #>)[<#= item.Child.Name #>(<#= (item.ChildIsEntity)?"entity": (item.ChildIsObjectValue)?"VO":"Enum"#><#= (item.ChildReflexions>0)?", reflexivas "+item.ChildReflexions.ToString():"" #><#= (item.IsXorComposition)?", Es XOR":"" #>)] "por herencia  de  " [<#= item.Father.Name #>(<#= (item.FatherIsEntity)?"entity": (item.FatherIsObjectValue)?"VO":"Enum"#><#= (item.FatherReflexions>0)?", reflexivas "+item.FatherReflexions.ToString():"" #><#= (item.IsXorComposition)?", Es XOR":"" #><#= (item.ChildIsLeaf)?", Es hoja":", Es rama" #>)]</br>
<#+ 
            }
        }
    }
 #>

     <h3>Lista de clases accesibles </h3>
<#+
    foreach (var classbase in cbc.AccessibleClassBaseTree.All.Nodes)
    {
 #>
<#= T4Help.HtmlIndent(classbase.Depth) #><#=classbase.Data.Name #> </br>
<#+
    }
 #>

 </br>
 </br>
 YumlDefinition =/<#= YumlDefinition #>/
<table>
<tr><td></td><td> <a href="Intro.html"> Intro </a>  </td></tr>

<tr><td></td><td> <a href="Architecture.html"> Architecture </a>  </td></tr>
</table>
</body>
</html>
<#+
            }// end if (AppTree != null)
            return this.GenerationEnvironment.ToString();
        }// end method TransformText()
    }// end public class DocAboutBoundedContextTree
#>



