<#+

    public class DocAboutBoundedContext : Template
    {
        // parametros de la plantilla
        public INode<LocalizedBounded> NodeBC;
        public DslContextDefinitionDiagram MainDiagram;
        public ActiveSolution SolutionInfo;
        public ITree<LocalizedBounded> AppTree;
        public ITree<BoundedContextMetadata> SharedKernelTree;
        string secureBdName;
        
        // constructor de la plantilla
        public DocAboutBoundedContext(INode<LocalizedBounded> nodeBC, DslContextDefinitionDiagram mainDiagram, ActiveSolution solutionInfo,  ITree<LocalizedBounded> appTree, ITree<BoundedContextMetadata> sharedKernelTree, string secBdName)
        {
            MainDiagram = mainDiagram;
            SolutionInfo = solutionInfo;
            AppTree = appTree;
            SharedKernelTree = sharedKernelTree;
            NodeBC = nodeBC;
            secureBdName = secBdName;
        }

        // metodo de generación de la plantilla
        public override string TransformText()
        {
            kayak.MoneyGen.Application boundedContext = NodeBC.Data.Context.Value;
            ITree<ClassBase> boundedContextElements = ReadClassesHierarchie(boundedContext);

            string bdName = NodeBC.Data.Context.Key;
            string secureBdName = bdName.Replace('\\','.');

            if (NodeBC != null)
            {
#>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
<head>
    <title><#= MainDiagram.Product #> Documentation </title>
</head>
<body>
    <h2>Modelo de <#= secureBdName #></h2>

    <table>
<#+
                int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) & p.Data.ReferencedRootEntity == null).Count();
                //int kindOfClass = 0; /* tipo de clase entidad, objeto valor , enumerado, servicio,  operación invariante etc.*/
                ClassBaseContext CBC;
                foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity || p.Data is ObjectValue || p.Data is Enumeration) )
                {
                    if (item.Data.ReferencedRootEntity != null) continue;
                    {
                        ClassBase entity = item.Data;
#>
        <tr><td><#= ( entity is Entity )?"Entidad ": ( entity is ObjectValue )? "Objeto valor":( entity is Enumeration )?"Enumerado ":"Tipo inesperado"#> </td><td> <strong>'<a href="<#= secureBdName #>.<#= T4Help.ToPascalCase(entity.Name) #>.html"><#= T4Help.ToPascalCase(entity.Name) #></a>'</strong> </td></tr>
        <tr><td> comentarios programador </td><td> <#= entity.ProgramRemarks #> </td></tr>
        <tr><td> comentarios usuario </td><td> <#= entity.Remarks #> </td></tr>
        <tr><td> tooltip </td><td> <#= entity.Tooltip #> </td></tr>
        <tr><td> &nbsp; </td><td>  </td></tr>
<#+
                    } // end if (totalDeEntidades > 0)
                } // end foreach(INode<ClassBase> item in boundedContextElements
#>
    </table>



<table>
<tr><td></td><td> <a href="Intro.html"> Intro </a>  </td></tr>
<tr><td></td><td> <a href="Architecture.html"> Architecture </a>  </td></tr>
</table>
</body>
</html>
<#+
            }// end if (AppTree != null)
            return this.GenerationEnvironment.ToString();
        }// end method TransformText()
    }// end public class DocAboutBoundedContextTree
#>