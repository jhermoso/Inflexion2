<#+
public class HxModelCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; 
    public string projectNamespace; 
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
    public Enumeration enumeracion = null;
    // constructor de la plantilla con parametros
    public HxModelCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt, string kindTimeCall)
        {
            this.cbc= cbc; 
            this.projectNamespace = projectNamespace;  
            this.Skt = Skt; 
            this.KindTimeCall=kindTimeCall;

        }

    public override string TransformText()
    {
                       
        // conceptos propios del projecto en curso
        //ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        if (cbc.IsEnumeration) {enumeracion = (Enumeration)cbc.entity;}
#>
<#+
    if(KindTimeCall.Equals("inicioTotal") )
    {
                
#>
<?xml version="1.0"?>
<Model Name="Hexa.Core.Dsl.Sample" TargetUIType="Mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
<Entities>
<#+
    }
#>
<#+ if (cbc.IsEntity) 
    {
#>
    <Entity Name="<#= cbc.secureEntityName #>" IsRoot="<#= cbc.IsRoot.ToString().ToLower() #>">
<#+
    if ( cbc.propertyAssociationSources.Any() || cbc.propertyAssociationTargets.Any() )
        {
#>
      <Associations>
<#+
            foreach (var property in cbc.propertyAssociationSources)
            {
    /* <!-- sources property.SourceRolName < #= (property.SourceRolName != null)? property.SourceRolName:""# > < #= property.SourceMultiplicity # > --> */
    /* <!-- sources property.TargetRolName < #= (property.TargetRolName != null)? property.TargetRolName:""# > < #= property.TargetMultiplicity # > --> */
#>
<#+
                if( property.SourceRolName != null && property.Source is Entity ) 
                {
                    if (IsMaxMultiplicityMany(property.TargetMultiplicity))
                    {
#>
            <Association Type="<#= property.Source.Name #>" AssociationType="<#= (IsMaxMultiplicityMany(property.SourceMultiplicity))?"ManyToMany":"ManyToOne" #>"/>
<#+
                    }
                    if (IsMaxMultiplicityOne(property.TargetMultiplicity))
                    {
#>
            <Association Type="<#= property.Source.Name #>" AssociationType="<#= (IsMaxMultiplicityMany(property.SourceMultiplicity))?"HasMany":"HasOne" #>"/>
<#+
                    }
                }
            }
#>
<#+
            foreach (var property in cbc.propertyAssociationTargets)
            {
    /* < !--Targets property.SourceRolName < #= (property.SourceRolName != null)? property.SourceRolName:""# > < #= property.SourceMultiplicity # > -- > */
    /* < !--Targets property.TargetRolName < #= (property.TargetRolName != null)? property.TargetRolName:""# > < #= property.TargetMultiplicity # > -- > */
#>
<#+
                if(property.TargetRolName != null && property.Target is Entity ) //
                {
                    if (IsMaxMultiplicityMany(property.SourceMultiplicity))
                    {
#>
            <Association Type="<#= property.Target.Name #>" AssociationType="<#= (IsMaxMultiplicityMany(property.TargetMultiplicity))?"ManyToMany":"ManyToOne" #>"/>
<#+
                    }
                    if(IsMaxMultiplicityOne(property.SourceMultiplicity))
                    {
#>
            <Association Type="<#= property.Target.Name #>" AssociationType="<#= (IsMaxMultiplicityMany(property.TargetMultiplicity))?"HasMany":"HasOne" #>"/>
<#+
                    }
                }
            }
#>
      </Associations>
<#+
        }// has associations
#>
<#+
    if (cbc.propertyObjects.Any())
        {
#>
      <Properties>
<#+
            foreach (var property in cbc.propertyObjects)
            {
                int num; 
                string lenghtfield = ""; 
                if (property.AtributteType.Equals("string") && int.TryParse(property.Size, out num))
                    lenghtfield = "Length=\""+num.ToString()+"\"";
#>
            <Property IsRequired = "<#= (property.RequestUponCreation==RequestUponCreation.yes)?"true":"false" #>" <#= lenghtfield #> Name="<#= T4Help.SecureName(property.AtributteName) #>" Type="<#= property.AtributteType #>" />
<#+
            }
#>
<#+
            foreach (var property in cbc.propertyAssociationSources)
            {
    /* <!-- sources property.SourceRolName < #= (property.SourceRolName != null)? property.SourceRolName:""# > < #= property.SourceMultiplicity # > --> */
    /* <!-- sources property.TargetRolName < #= (property.TargetRolName != null)? property.TargetRolName:""# > < #= property.TargetMultiplicity # > --> */
#>
<#+
                if( property.SourceRolName != null && (property.Source is ObjectValue || property.Source is Enumeration ) )
                {
                    if (IsMaxMultiplicityMany(property.TargetMultiplicity))
                    {
#>
            <Property IsRequired = "<#= (IsMinMultiplicityOne(property.SourceMultiplicity))?"true":"false" #>" Name="<#= property.TargetRolName.Trim() #>" Type="IEnumerable<<#= property.Source.Name #>>" />
<#+
                    }
                    if (IsMaxMultiplicityOne(property.TargetMultiplicity))
                    {
#>
            <Property IsRequired = "<#= (IsMinMultiplicityOne(property.SourceMultiplicity))?"true":"false" #>" Name="<#= property.TargetRolName.Trim() #>" Type="<#= property.Source.Name #>" />
<#+
                    }
                }
            }
#>
      </Properties>
<#+
        }// has propeties
#>
    </Entity>
<#+
    } // is entity
    else 
            {
#>
    <Entity Name="<#= cbc.secureEntityName #>" IsRoot="<#= cbc.IsRoot.ToString().ToLower() #>" Type="<#= (cbc.IsObjectValue)?"ValueObject":"Enum" #>">
        <Properties>
<#+
                foreach (var property in cbc.propertyObjects)
                {
                    int num; 
                    string lenghtfield = ""; 
                    if (property.AtributteType.Equals("string") && int.TryParse(property.Size, out num))
                        lenghtfield = "Length=\""+num.ToString()+"\"";
#>
            <Property IsRequired = "<#= (property.RequestUponCreation==RequestUponCreation.yes)?"true":"false" #>" <#= lenghtfield #> Name="<#= T4Help.SecureName(property.AtributteName) #>" Type="<#= property.AtributteType #>" />
<#+
                }
#>
<#+
if (cbc.IsEnumeration && enumeracion != null )
    {
        foreach (var enumerado in enumeracion.EnumValue.OrderBy(e => e.Sorting))
        {
#>
            <Property Name="<#= T4Help.ToPascalCase(enumerado.Value) #>" />
<#+
        }
    }
#>
        </Properties>
    </Entity>
<#+
    }
#>

<#+
 if(KindTimeCall.Equals("finTotal") )
            {
#>
</Entities>
</Model>
<#+          } #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
