<#+

public class DomainBaseEntityCT : Template
{
    // parametros de la plantilla
    public DslContextDefinitionDiagram  diagram ;
    public ActiveSolution               solutionInfo ;
    public Entity                       entity ;
    public string                       projectNamespace;
        
    public DomainBaseEntityCT(DslContextDefinitionDiagram  d, ActiveSolution s, Entity e)
    {
        diagram = d;
        solutionInfo = s;
        entity = e;
    }
        
    public override string TransformText()
    {

        string company = this.diagram.Company.ToString();
        string idtype = (diagram.IdKind.Equals("Autonumerical"))  ? "int" : "Guid";
        LinkedElementCollection<Atributte> propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationTargets = Association.GetLinksToTargets(entity);
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationSources = Association.GetLinksToSources(entity);
        int spaceformatcounter= entity.Name.ToString().Length;
        int counter = 0;
            System.Type t;
            bool propertyIsValueType = false;

            KindComponented kindComponent = WhatTypeComponented(entity);
  
            string superfolder;
            bool isDerivedFromOneEntity= IsDerived( entity); // consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
            Entity entitySuperClass = null;
            string entityCore =null;
            if (isDerivedFromOneEntity)
            {
                entitySuperClass = GetSuperEntity(entity);
                superfolder = GetSuperFolders(entity);
            }
            if(entity.Auditable)
            {
                entityCore = "AuditableEntityBase<"+idtype +">";
            }
            else
            {
                entityCore = "EntityBase<"+idtype +">";
            }

            var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            string cpyrigthText = cpyrigth.TransformText();
#>
<#=cpyrigthText #>

namespace <#= projectNamespace #>
{
    using System;
    <#= (propertyAssociationTargets.Count()>0)? "using System.Collections.Generic;":"" #>

    using <#= projectNamespace.Substring(0, projectNamespace.Length - 5)/*le quitamos el 'base' y lo sustituimos por core*/ #>.Core;
    using <#= company #>.Framework.Domain.Base;
    
    /// <summary>
    /// Clase que representa a la entidad <see cref="T:<#= entity.Name #>"/>.
    /// </summary>
    /// <remarks>
    /// Crea un objeto <see cref="T:<#= entity.Name #>"/>.
    /// </remarks>
    public class <#= entity.Name #> : <#= (isDerivedFromOneEntity)? entitySuperClass.Name : entityCore #>, I<#=entity.Name #>
    {
        
        #region FIELDS
<#+
    foreach (var property in propertyObjects)
    {
#>
            /// <summary>
            /// Variable privada que identifica <#= property.AtributteName #>.
            /// </summary>
            /// <remarks>
            /// <#= property.ProgramerRemarks #>
            /// </remarks>
            private <#= property.AtributteType.ToString() #> <#= PascalCase2CamelCase(property.AtributteName) #>;

<#+
    }
#>
        #endregion

        #region CONSTRUCTORS
        
            /// <summary>
            /// Inicializa una nueva instancia de la clase <see cref="T:<#= entity.Name #>"/>.
            /// </summary>
            /// <remarks>
            /// Constructor de la clase <see cref="T:<#= entity.Name #>"/>.
            /// </remarks>
            internal <#= entity.Name #>() : base(NullId)
            {
            } // <#= entity.Name #> Constructor

            /// <summary>
            /// Inicializa una nueva instancia de la clase <see cref="T:<#= entity.Name #>"/>.
            /// </summary>
            /// <remarks>
            /// Constructor de la clase <see cref="T:<#= entity.Name #>"/>.
            /// </remarks>
            /// <param name="id">
            /// Parámetro que indica el identificador raiz de la entidad.
            /// </param>
<#+// Este primer bucle es para escribir la lista de propiedades de la documentación.
    foreach (var property in propertyObjects)
    {
#>
            /// <param name="<#= PascalCase2CamelCase(property.AtributteName) #>">
            /// <#= property.ProgramerRemarks #>.
            /// </param>
<#+  
    }
#>
<#+// Este segundo bucle es para escribir la lista de propiedades de la documentación que provienen de los roles de tipo source en las relaciones de esta entidad con otra.
    foreach (var property in propertyAssociationSources)
    {
#>
            /// <param name="<#= PascalCase2CamelCase(property.TargetRolName) #>"> /* bucle 2*/
            /// referencia al rol de tipo source de la relación.
            /// </param>
<#+
    } // a continuación esccribimos el tipo de devolución del create que ha de coincidir con el tipo.
#>
<#+// Este tercer bucle es para escribir la lista de propiedades de la documentación que provienen de los roles de tipo target en las relaciones de esta entidad con otra.
    foreach (var property in propertyAssociationTargets)
    {
#>
            /// <param name="<#= PascalCase2CamelCase(property.SourceRoleName) #>"> /* bucle 3*/
            /// referencia al rol de tipo target de la relación.
            /// </param>
<#+
    } // a continuación escribimos el constructor propiamente dicho.
#>
            internal <#= entity.Name #>(
                        <#= Indent(spaceformatcounter) #><#= idtype #> id,
<#+// Este cuarto bucle es para crear la lista de parametros del constructor create que provienen de la lista de atributos
    counter = 0;
    foreach (var property in propertyObjects)
    {
     counter++;
#>
                        <#= Indent(spaceformatcounter) #><#= property.AtributteType.ToString() #> <#= PascalCase2CamelCase(property.AtributteName) #><#= (counter < propertyObjects.Count() | propertyAssociationSources.Count() > 0 | propertyAssociationTargets.Count() > 0)? ",":"" #> /* bucle 4*/
<#+
    }
#>
<#+// Este quinto bucle es para crear la lista de parametros del primer create que provienen de los roles tipo source en las relaciones de esta entidad con otras.
    counter = 0;
    foreach (var property in propertyAssociationSources)
    {
     counter++;
#>
                        <#= Indent(spaceformatcounter) #><#= property.Source.Name #> <#= PascalCase2CamelCase(property.TargetRolName) #><#= ((counter < propertyAssociationSources.Count()) | (propertyAssociationTargets.Count() > 0 ))? ",":"" #> /* bucle 5*/
<#+
    }
#>
<#+// Este sexto bucle es para crear la lista de parametros del primer create que provienen de los roles tipo target en las relaciones de esta entidad con otras.
    counter = 0;
    foreach (var property in propertyAssociationTargets)
    {
     counter++;
#>
                        <#= Indent(spaceformatcounter) #><#= GetTypeFromAssociationLink(property, true) #> <#= PascalCase2CamelCase(property.SourceRoleName) #><#= (counter < propertyAssociationTargets.Count() )? ",":"" #> /* bucle 6*/
<#+
    }
#>
                    <#= Indent(spaceformatcounter) #>) : base(id)
                                                     {}
        #endregion
    } // I<#= entity.Name #>RepositoryFactory

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>