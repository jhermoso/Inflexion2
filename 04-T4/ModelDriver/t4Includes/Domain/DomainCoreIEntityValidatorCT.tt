<#+

    public class DomainCoreIEntityValidatorCT : Template
    {
        // parametros de la plantilla
        public ClassBaseContext  cbc ;
        public string projectNamespace;
        public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
        public DomainCoreIEntityValidatorCT(ClassBaseContext  classBaseContext, string nombreProjecto , ITree<BoundedContextMetadata> skt)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
        }
        
        // metodo de generación de la plantilla
        public override string TransformText()
        {
            IList<string> sharedKernelUsings = null;
            if (Skt != null)
            {
                sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
            }
            var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
            string cpyrigthText = cpyrigth.TransformText();
#>
<#=cpyrigthText #>
/************************************************************************************************************/
/* NOTA: para regenerar este fichero es necesario eliminarlo ya que solo se genera si no existe previamente */
/*       Si se elimina se recomienda realizar copia de seguridad previa ya que no se mantendra ningun       */
/*       contenido previo del fichero dentro del modelo.                                                    */
/************************************************************************************************************/
namespace <#= projectNamespace #>
{

<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using Inflexion.Framework.Domain.Core;

    /// <summary>
    /// Interfaz que expone las acciones para las validaciones sobre <#= (cbc.IsEntity)?"la":"el" #> <#= cbc.ClassBaseTypeName.ToLower() #> I<#= cbc.pascalSecureEntityName #> de la aplicación.
    /// <#= cbc.entity.Remarks #>
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    public interface I<#= cbc.pascalSecureEntityName #>Validator
    {

    } //fin de I<#= cbc.pascalSecureEntityName #>Validator

} // <#= projectNamespace #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>