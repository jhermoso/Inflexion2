<#+
public class RegionPropertiesFromTargets : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public RegionPropertiesFromTargets(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>
        #region Propiedades procedentes de los roles de tipo 'target' en una asociación
<#+
    foreach (var property in cbc.propertyAssociationTargets)
    {
        if(string.IsNullOrEmpty(property.SourceRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
            {
                continue;
            }
#>

        /// <summary>
        /// Propiedad pública que provine de una relación (Target) y permite establecer y obtener la coleción de valores <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </summary>
        /// <remarks>
        /// Nos permite establecer y obtener <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </remarks>
        /// <value>
        /// Valor que es utilizado para establecer y obtener <#= T4Help.SecureName(property.SourceRolName) #>.
        /// </value>
        public <#=(cbc.diagram.ORM.Length >0)?"virtual":"" #> <#= GetTypeFromAssociationLink(property, (I=="I"), cbc.idtype, false) #> <#= T4Help.SecureName(property.SourceRolName) #> 
        { 
            get
            {
                // Si es null, lo instanciamos y devolvemos, sino, solo lo devolvemos
                return this.<#= T4Help.ToCamelCase(property.SourceRolName) #> ?? (this.<#= T4Help.ToCamelCase(property.SourceRolName) #> = new <#= GetTypeFromAssociationLink(property, (I=="I"), cbc.idtype, false, true) #>() );
            }
<#+
            if (!cbc.diagram.ValidationContracts.Equals("DataAnotations")) // cuando utilizamos DataAnnotations Las propiedades de las listas no publican un set. TODO es probable que esto sea comun en cualquier situación.
                {
#>
            <#=(cbc.diagram.ORM.Contains("ibernate"))?"protected":"private" #> set
            {
<#+
            if ( IsMinMultiplicityOne(property.TargetMultiplicity) )
                { // comprobamos si la propiedad es mandatory en cuyo caso su valor no puede ser nulo
#>
            Contract.Requires<System.ArgumentNullException>(value != null, "La propiedad <#= T4Help.SecureName(property.SourceRolName) #> no puede ser nula"); // Esta propiedad proviene de una relación de composición y es mandatory.
<#+             }#>
                this.<#= T4Help.ToCamelCase(property.SourceRolName) #> = value;
            }
<#+         } // end if DataAnotations#>
        }
<#+ } /*end foreach */#>
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
