<#+
public class DomainBaseEntityPartialUpdateCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt; kayak.MoneyGen.Operation method ;
    // constructor de la plantilla con parametros
    public DomainBaseEntityPartialUpdateCT(
                                                ClassBaseContext               cbc, 
                                                string                         projectNamespace, 
                                                ITree<BoundedContextMetadata>  Skt, 
                                                kayak.MoneyGen.Operation       m 
                                               )
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; this.method = m; }

    // metodo de ClassBaseContext cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt de la plantilla
    public override string TransformText()
        {
            // conceptos propios del projecto en curso
            ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

            bool isSharedKernel = this.projectNamespace.Contains(cbc.diagram.SolutionFolderCommon);
            // subplantillas generales
            var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);  string cpyrigthText = cpyrigthTemplate.TransformText();
            // subplantillas particulares
            var usingTemplate                   = new usings( cbc, projectNamespace, Skt);                      string usingTxt                         = usingTemplate.TransformText(); //solo los shared kernel
            var headerClass                     = new HeaderClass( cbc, projectNamespace, Skt);                 string HeaderClassTxt                   = headerClass.TransformText();
            var bodyMethod    = new BodyMethod( cbc, projectNamespace, Skt, method); string BodyMethodTxt  = bodyMethod.TransformText();

#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

<#= usingTxt #>

    #region usings
    // en una clase parcial los using solo son necesarios una vez pero se dejan por si sirven de ayuda.
<#+
            if(cbc.diagram.Architecture == ArchitectureOptions.PureDDD)
            {
#>
    using System;
    using System.Linq;
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.<#= prjCon.layer #>.Core;
    using Inflexion.Framework.Domain.Base;
    using Inflexion.Framework.Core;
<#+
            }
#>
<#+            if (cbc.diagram.ValidationContracts.Equals("CodeContracts")) {#>
    using System.Diagnostics.Contracts;
<#+            } #>
<#+            if (cbc.diagram.ValidationContracts.Equals("DataAnotations")) {#>
    using System.ComponentModel.DataAnnotations;
<#+            } #>
<#+            if (cbc.sourceLinksCounter>0)    {#>
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
<#+            }#>
    #endregion

<#= HeaderClassTxt.TrimEnd(' ') /* TENER EN CUENTA QUE LA CABECERA DE LA CLASE SE CIERRA A BAJO Y POR ESO EL RESTO DE LA T4 ESTA INDENTADA */ #>
        #region transformation & update 
        /// <summary>
        /// <#= method.ProgramRemarks.Trim() #>
        /// </summary>
<#+
            // para la documentación de los parametros lo hacemos en dos fases, 1º para los no opcionales y 2º para los opcionales que han de tener un valor por defecto
            global::Microsoft.VisualStudio.Modeling.LinkedElementCollection<Parameter> ParametersList = kayak.MoneyGen.OperationHasParameters.GetParameters ( method );
            foreach (var parameter in ParametersList.Where(p => p.DefaultValue.Length==0))
            {
 #>
        /// <param >
        /// name="<#= parameter.Name #>" (Parametro no opcional)
        /// <#= parameter.ProgramRemarks.Trim() #>
        /// </param>
<#+            } /* end for each parameters */ #>
<#+
            // segunda pasada para valores por defecto que han de aparecer en último lugar.
            foreach (var parameter in ParametersList.Where(p => p.DefaultValue.Length>0))
            {
 #>
        /// <param>
        /// name="<#= parameter.Name #>" (Parametro opcional cuyo valor por defecto es: <#= parameter.DefaultValue #>)
        /// <#= parameter.ProgramRemarks.Trim() #>
        /// </param>
<#+            } /* end for each parameters */ #>
        <#= method.ServiceVisibility.ToString().ToLower() #> <#= (cbc.diagram.ORM.Length >0)?"virtual":"" #> <#= (method.DevolutionType.Equals("this"))? "I"+cbc.pascalSecureEntityName : method.DevolutionType #> <#= method.Name #>( <#= GetMethodParametersString( method , true) #> )
        {
<#+ 
    foreach (var pre in method.Preconditions.OrderBy(c => c.SortOrder)) //ejemplo para ordenar por varios campos. 
        {
#>
<#+
            // primero comprobamos que son precondiciones y no validaciones (Las validaciones no lanzan excepciones)
            if (pre.Exception !=null && pre.Exception.Trim().Length>0 && pre.LogicExpresion != null && pre.LogicExpresion.Trim().Length>0 && pre.ExceptionMenssage != null && pre.ExceptionMenssage.Trim().Length>0)
            {
                if (cbc.diagram.ValidationContracts.Equals("CodeContracts")) 
                {
#>
            Contract.Requires<<#= pre.Exception.Trim() #>>(<#= pre.LogicExpresion.Trim() #>, "<#= pre.ExceptionMenssage.Trim() #>");
<#+
                }// end if code contracts
                else
                {
#>
            if(!(<#= pre.LogicExpresion.Trim() #>)) // las precondiciones se evaluan siempre a true
            {
                // si la precondición no se cumple lanzamos la excepción correspondiente.
                throw new <#= pre.Exception.Trim() #>("<#= pre.ExceptionMenssage.Trim() #>");
            }
<#+             } #>
<#+         } // en if es una precondición y no una validación #>
<#+ } // end foreach preconditions #>
            // introducir en este punto el codigo correspondiente al método.
            // si es necesario modificar los parametros o tipo de devolución sera necesario 
            // actualizar el módelo igualmente.

            <#= (method.DevolutionType.Equals("this"))? "I"+cbc.pascalSecureEntityName + " result":(method.DevolutionType.Equals("void") )? "": method.DevolutionType + " result" #> <#= (method.DevolutionType == null || method.DevolutionType.Equals("void"))? "" : (T4Help.IsValueType(method.DevolutionType))?"":"= null" #> <#= (method.DevolutionType == null || method.DevolutionType.Equals("void"))? "" : ";" #>

            // inicio del cuerpo del metodo

<#= BodyMethodTxt #>

            // final del cuerpo del metodo

<#=( method.DevolutionType == null || method.DevolutionType.Equals("void"))? "" : "            return result;" #>
        }
        #endregion

    } // class <#= cbc.pascalSecureEntityName #>

} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class DomainBaseEntity
#>