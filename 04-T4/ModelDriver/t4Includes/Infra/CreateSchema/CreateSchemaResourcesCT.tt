<#+

public class CreateSchemaResourcesCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
    public string isoCode2LanguageTarget; /* el valor nulo es para el lenguaje por defecto con el valor original, para cualquier otro se traduce */
    public string SplitTag;
    public string ValueCommentRex;
    public string[] ResxTriplesArray;
    public string XmlCacheFile;
        
    public CreateSchemaResourcesCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall, string language, string[] resxTriplesArray, string xmlCacheFile)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
            KindTimeCall = kindTimeCall;
            isoCode2LanguageTarget = language; // Iso code de 2 letras para la la lengua a traducir indica si se coloca le texto original o si se ha de traducir a la lengua indicada
            ResxTriplesArray = resxTriplesArray;
            XmlCacheFile = xmlCacheFile; // nombre del fichero xml que almacena las traducciones y el codigo de personalización.
        }

    public override string TransformText()
        {
            //IList<string> sharedKernelUsings = null;
            //if (Skt != null)
            //{
                //sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
            //}
            //IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
            //string company              = NameSpaceSection[0];
            //string product              = NameSpaceSection[1];
            //string boundedContextName   = NameSpaceSection[2];
            //string layer                = NameSpaceSection[3];
            //string kindProject          = NameSpaceSection[4];

            //var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            // string cpyrigthText = cpyrigth.TransformText(); // en principio esta linea se comenta pues no tenemos un texto de copywrigth para los fichero
            // =proyecto = namespace = Company.Boundecontext1.BoundeDContex2....BoundeDContexN.Infraestructure.Maps.nHibernate31.Oracle
            // la estrategia de generación es de un fichero por clase debido a que podemos tener varias formas de mapear la herencia en una misma taxonomia 
            // y nhibernate nos exige que si en una misma taxonomia hay varias formas de herencia entonces se han de utilizar ficheros separados
            // 2ª las clases base son Class
            // Las clases que heredan de otra son 
            
            
            if (!(isoCode2LanguageTarget.Length == 2 || isoCode2LanguageTarget.Length == 5)) throw new Exception(string.Format("El lenguaje pasado '{0}' no es un iso code ", isoCode2LanguageTarget));

            string RexValueTranslated  = "";
            string RexRemarkTranslated = "Opción de idioma de la aplicación";
            
            string isoCode2LanguageOrigin = cbc.diagram.Culture ;
            XElement Translations = Translator.GetTranslationsNode( XmlCacheFile );
            
            if ( !isoCode2LanguageTarget.Equals(isoCode2LanguageOrigin))
               // GetTranslate(string OriginalTxt, string OriginalLanguage, string TargetLanguage, XElement Translations)
            RexRemarkTranslated = Translator.GetTranslate( 
                                                            RexRemarkTranslated, 
                                                            isoCode2LanguageOrigin, 
                                                            isoCode2LanguageTarget,
                                                            Translations,
                                                            XmlCacheFile
                                                        ); //cbc.diagram.Culture, Language
            
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<?xml version="1.0" ?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>

<#+                // recorremos el array con la la lista de key valor y comentario
            int key= 0; //indice posición del key de resx
            int rem= 0; //indice posición del remark de resx
            string RexNewValue =null;
            string RexNewKey =null;
            string RexNewRem =null;

            string AlternateOriginalLanguage = null;
                string isoCode2LanguageFrom = isoCode2LanguageOrigin;
                
            for( int i=1 ; i<ResxTriplesArray.Length; i=i+3)
            {
                key = i-1;
                rem = i+1;
                RexNewKey   = ResxHelp.RemoveSplitCopyProcessTags(ResxTriplesArray[key]);

                AlternateOriginalLanguage = Translator.GetCultureLanguajeTxt(ResxTriplesArray[i]);
                if ( AlternateOriginalLanguage != null) // si el texto empieza especificando un lenguage de origen lo utilizamos 
                    {
                        // si encontramos un lenguaje lo almacenamos y lo borramos.
                        isoCode2LanguageFrom = AlternateOriginalLanguage.Trim(new char[]{'(',')'});
                        ResxTriplesArray[i] = ResxTriplesArray[i].Replace(AlternateOriginalLanguage, string.Empty);
                    }
                   
                //  comprobamos si tenemos un tag de copy o de proceso
                RexNewValue = ResxHelp.GetValueFromProcecsOrCopyTag(ResxTriplesArray[key], ResxTriplesArray[i], isoCode2LanguageFrom, isoCode2LanguageTarget, XmlCacheFile);
                RexNewValue = ResxHelp.RemoveSplitCopyProcessTags(RexNewValue);

                RexNewRem   = ResxHelp.RemoveSplitCopyProcessTags(ResxTriplesArray[rem]);

                //RexNewValue = Translator.GetTranslate(string txt2Translate, string isoCode2LanguageOrigin, string isoCode2LanguageTarget);


#>
  <data name="<#= RexNewKey.Trim() #>" xml:space="preserve">
    <value><#= RexNewValue.Trim() #></value>
    <comment><#= RexNewRem.Trim() #></comment>
  </data>
<#+            } #>
<#+
            }// fin del inicio
#>

<#+
 if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
</root>
<#+         } #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>



