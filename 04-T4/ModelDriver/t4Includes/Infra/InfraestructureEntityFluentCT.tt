<#+
public class InfraestructureEntityFluentCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public InfraestructureEntityFluentCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings de arquitectura
<#+
    if(cbc.diagram.Architecture == ArchitectureOptions.PureDDD)
    {
#>
<#+ if (cbc.OwnBoundedContextHasEnums) {#>
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.Data;
<#+            } #>
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.Base;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW.NHibernate31;
    using Inflexion.Framework.Domain.Base.ValueObjects;
<#+
    }
#>
#endregion

    /// <summary>
    /// inizializa una nueva instancia de <#= (cbc.IsEntity)?" una entidad":"un objeto valor" #> <#= cbc.pascalSecureEntityName #>/>.
    /// </summary>
    /// <remarks>
    /// Mapea un objeto <see cref="<#= I #><#= cbc.pascalSecureEntityName #>".
    /// </remarks>
     public class <#= cbc.pascalSecureEntityName #>Map : AuditableEntityBaseMap<<#= cbc.pascalSecureEntityName #>>
    {
        #region Constructors

        /// <summary>
        /// inicializa una nueva instancia de <see cref="<#= cbc.pascalSecureEntityName #>Map"/>.
        /// </summary>
        public <#= cbc.pascalSecureEntityName #>Map()
        {
            Table("<#= cbc.pascalSecureEntityName #>");
            Id(c => c.Id);
<#+
    // solo las propiedades que provienen de atributos que son de tipo valor pueden ser nullables.
    // igualmente todas las propiedades que se basan en estructs pueden ser get o set 
    // mientras que aquellas que no son structs no pueden tener un set público.
    foreach (var property in cbc.propertyObjects)
    {
#>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) || property.LiveCycleAtributte.Equals(LiveCycleAtributte.Derivado)) {#>

            Map(e => e.<#= T4Help.SecureName(property.AtributteName) #>)<#= (property.RequestUponCreation==RequestUponCreation.yes || !property.IsNullable )?".Not.Nullable()":(property.IsNullable)?".Nullable()":""#><#= (!property.AtributteType.ToLower().Equals("string")? "":(string.IsNullOrEmpty(property.Size))?"":".Length("+ property.Size.ToString()+")" ) #>;
<#+ } // end LiveCycleAtributte #>
<#+ } // end foreach propertyObjects #>
<#+
    foreach (var property in cbc.propertyAssociationSources)
            {
                // este mapeado supone que 
                // inverse significa que la responsabilidad de salvar esta en la otra entidad.
                // Acces.camelCaseField() el aceso se ahce a traves del campo privado que publica las operaciones por que la propiedad es solo un enumerable.
                // CAscadeAllDeleteOrphan significa que cuando se salva/borra la entidad se salvan/borran todos sus hijos.
#>
<#+ if ( property.Source is Enumeration ) {#>
            Map(e => e.<#= T4Help.SecureName(property.TargetRolName) #>)<#=(property is Composition)?".Not.Nullable()":"" #>.CustomType<<#= property.Source.Name #>>();
<#+            } #>
<#+ if ( property.Source is Entity ) {#>

            References<<#= T4Help.ToPascalCase(property.Source.Name) #>>(x => x.<#= T4Help.ToPascalCase(property.TargetRolName) #>)<#=(property is Composition)?".Not.Nullable()":"" #>.Column("Id<#= T4Help.ToPascalCase(property.Source.Name) #>");
<#+            } #>
<#+ if ( property.Source is ObjectValue) {#>

            Component<<#= T4Help.ToPascalCase(property.Source.Name) #>>(x => x.<#= T4Help.ToPascalCase(property.TargetRolName) #>, (c) =>
                {
<#+
        var propertiesCollection = ClassBaseHasAtributtes.GetAtributtes(property.Source);
                    foreach(var atribute in propertiesCollection){#>
                    c.Map(e => e.<#=T4Help.SecureName(atribute.AtributteName) #>)<#=(property is Composition)?".Not.Nullable()":"" #>;
<#+                    }#>
                });

<#+            } #>
<#+ } // end foreach propertyAssociationSources #>
<#+
    foreach (var property in cbc.propertyAssociationTargets)
    {
#>

            HasMany<<#= T4Help.ToPascalCase(property.Target.Name) #>>(x => x.<#= T4Help.ToPascalCase(property.SourceRolName) #>)
                .KeyColumn("Id<#= T4Help.ToPascalCase(property.Target.Name) #>")
                .Inverse()
                .Access.CamelCaseField()
                .AsBag()
                .Cascade.AllDeleteOrphan();
<#+ } // end foreach propertyAssociationTargets #>
        }
        #endregion
    } // 

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
