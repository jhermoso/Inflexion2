<#+

public class InfraestructureEntityOracleHbmCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
    public InfraestructureEntityOracleHbmCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];
#>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" auto-import="false" >
<#+
    if (cbc.isDerivedFromOneEntity & !entityHasAttributesOrAssociations(cbc.entity))
    { // si la entidad deriva de alguna otra y no tiene ninguna propiedad o asociación su tipo es subclass
#>
    <subclass name="<#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base.<#= cbc.entity.Name #>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base"
        proxi="<#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core.<#= I #><#= cbc.entity.Name #>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core"
        abstract="<#= (( cbc.entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract)?"true":"false" #>"
        extends="Id<#= cbc.parentEntityName #>"
        discriminator-value="<#= cbc.entity.AliasFrontEnd #>">
    </subclass> 
<#+
    }
    else
    {
#>
  <<#=(!cbc.isDerivedFromOneEntity)?"class":"joined-subclass" #> name="<#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base.<#= cbc.pascalSecureEntityName#>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base"
         proxy="<#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core.<#= I #><#= cbc.pascalSecureEntityName#>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core"
         table="<#= cbc.pascalSecureEntityName#>"
         abstract="<#= (cbc.isAbstract)?"true":"false" #>">
    <id name="Id" column="Id<#= cbc.pascalSecureEntityName#>" type="<#= cbc.idtype #>" unsaved-value="-1">
<#+
if(cbc.diagram.IdKind.Equals("Autonumerical")) // si el diagrama marca que es autonumérico le decimos a oracle como ha de generar la sequencia
{
#>
      <generator class ="sequence">
        <param name ="sequence">
          SEQ_<#= cbc.entity.Name.ToUpper() #>
        </param>
      </generator>
<#+
} // TODO: falta por decir como hacerlo para los guid
#>
    </id>
<#+
    if(!cbc.isDerivedFromOneEntity & cbc.entityHasChildren)
    {
       // en este punto sabemos que no deriva de ninguna otra entidad y que tiene hijos. Nos falta determinar si alguno de esos hijos tiene propiedades.
       // para ello recorremos el arbol.
        bool AnySubentityHasNotProperties= false;
        foreach (var subEntity in cbc.entityChildren.All.Nodes) // recorremos todos los hijos buscando alguno que tenga atributos o relaciones con otras entidades.
            {
            if (!entityHasAttributesOrAssociations(subEntity.Data) & subEntity.Depth > 0 ) // si no tiene atributos es candidato a incluir el mapeado en la clase
                    {
                        AnySubentityHasNotProperties = true;
                        break;
                    }
            }
        if(AnySubentityHasNotProperties)// no importa con que profundidad se tiene la subentidad que no tiene propiedades el discriminante se asocia a la cabecera.
        {
#>
    <discriminator column="IdTipo<#= cbc.pascalSecureEntityName #>" type="string" not-null="true" />
<#+
        }
    }
#>
<#+
    // introducimos las propiedades basicas de la entidad.
    foreach (var property in cbc.propertyObjects)
    {

#>
    <property name="<#= property.AtributteName #>" column="<#= property.AtributteName #>" type="<#= property.AtributteType #>" not-null="<#= (property.RequestUponCreation == RequestUponCreation.yes || !(property.IsNullable/* no es necesario evaluar si el tipo es TypeValue */ ) )?"true":"false" #>" />
<#+
    } // fin de la introducción de propiedades basicas de la entidad
#>
<#+
    // introducimos las propiedades derivadas de las asociaciones target
    foreach(var property in cbc.propertyAssociationTargets)
    {
#>
    <<#=kindOfCollectionMapping(property) #> name="<#= property.SourceRolName #>" table="<#= T4Help.ToPascalCase(property.Target.Name) #>" lazy="false">
      <key column="Id<#= cbc.pascalSecureEntityName /*en una reflexiva este y el posterior son iguales TODO: corregir */#>"/>
      <index column="Id<#= T4Help.ToPascalCase(property.Target.Name) #>" type="String" />
      <one-to-many class=" <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base.<#= T4Help.ToPascalCase(property.Target.Name) #>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base" />
    </<#=kindOfCollectionMapping(property) #>>
<#+
    }// Fin de la introducción de las propiedades derivadas de las asociaciones source
#>
<#+
    foreach(var property in cbc.propertyAssociationSources)
    {
#>
    <many-to-one name="<#= T4Help.ToPascalCase(property.Source.Name) #>"
                 column="Id<#= T4Help.ToPascalCase(property.Source.Name) #>"
                 not-null="<#= (property is Composition)?"true":"false" /* si la asociación es de composición entonces es true si no es false*/#>"
                 class="<#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base.<#= T4Help.ToPascalCase(property.Source.Name) #>, <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base">
    </many-to-one>
<#+ 
    }// fin de la introducción de las propiedades derivadas de las asociaciones target 
#>
    <property name="IsActive" column="Activo" type="Boolean" not-null="true" />
<#+ 
    if(cbc.entity.Auditable)
    {
#>
    <component name="AuditInfo" class="Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo, Inflexion.Framework.Domain.Base">
      <property name="CreatedBy" column="CreadoPor" not-null="true" />
      <property name="CreatedTimestamp" column="FechaCreacion" not-null="true" />
      <property name="UpdatedBy" column="ModificadoPor" />
      <property name="UpdatedTimestamp" column="FechaModificacion" />
    </component>
<#+ 
    }
#>
  </<#=(!cbc.isDerivedFromOneEntity)?"class":"joined-subclass" #>>
<#+
    }// end else 
#>
</hibernate-mapping>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>