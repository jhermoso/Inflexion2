<#+

public class InfraestructureCreateSchemaXamlCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
        public ITree<ClassBase> boundedContextElements;
        
    public InfraestructureCreateSchemaXamlCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall, ITree<ClassBase> entitiesTree)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
            KindTimeCall = kindTimeCall;
            boundedContextElements = entitiesTree;
        }
        
    public override string TransformText()
        {

            //IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
            //string company              = NameSpaceSection[0];
            //string product              = NameSpaceSection[1];
            //string boundedContextName   = NameSpaceSection[2];
            //string layer                = NameSpaceSection[3];
            //string kindProject          = NameSpaceSection[4];

            //var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            // string cpyrigthText = cpyrigth.TransformText(); // en principio esta linea se comenta pues no tenemos un texto de copywrigth para los fichero
            // =proyecto = namespace = Company.Boundecontext1.BoundeDContex2....BoundeDContexN.Infraestructure.Maps.nHibernate31.Oracle
            // la estrategia de generación es de un fichero por clase debido a que podemos tener varias formas de mapear la herencia en una misma taxonomia 
            // y nhibernate nos exige que si en una misma taxonomia hay varias formas de herencia entonces se han de utilizar ficheros separados
            // 2ª las clases base son Class
            // Las clases que heredan de otra son 

            // conceptos propios del projecto en curso
            //ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
            //
            //string ResxFileName = prjCon.boundedContextName.Replace(".","")+"Neutral"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
            //
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<Window x:Class="Create<#= cbc.diagram.Product #>DataBase.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:loc="clr-namespace:CreateProductDataBase"
        xmlns:Engine="clr-namespace:WPFLocalizeExtension.Engine;assembly=WPFLocalizeExtension"
        xmlns:Providers="clr-namespace:WPFLocalizeExtension.Providers;assembly=WPFLocalizeExtension"
        xmlns:lex="clr-namespace:WPFLocalizeExtension.Extensions;assembly=WPFLocalizeExtension"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        SizeToContent="WidthAndHeight"
        x:Name="MainScreen" MinWidth="500" MinHeight="415" Width="650" Height="415"
        xmlns:ctrl="clr-namespace:Create<#= cbc.diagram.Product #>DataBase" 
        xmlns:ISth="http://schemas.InflexionSoftware.com/xaml/presentation"
        xmlns:Inflexion="clr-namespace:Inflexion.Framework.UserInterface.Wpf.Utilities.Configuration;assembly=ConfigurationWindows2010"
        Icon="/Create<#= cbc.diagram.Product #>DataBase;component/Assets/Images/Icons/Engine.ico"
        FlowDirection="{lex:LocFlowDirection Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:flow}" 
        Title="{lex:LocText CreateProductDataBase:CreateProductDataBase:GestordeEsquemasdeBD}"
        >

    <Window.Resources>
        <!--<SolidColorBrush x:Key="WindowBackgroundBrush" ></SolidColorBrush>-->
        <!-- los temas definidos en wpf toolkit no establecen el color del background si no esta previamente asociado a un recurso de forma dinámica-->
    </Window.Resources>

    <Grid 
            Background="{DynamicResource WindowBackgroundBrush}" 
            ISth:ThemeSelector.ApplyGlobalTheme="True"
            x:Name="LayoutGrid">
        
        <Grid.RowDefinitions>
            <RowDefinition x:Name="GeneralHeader" Height="32"/>
            <RowDefinition x:Name="SpotLight" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" >
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">

                <Label  Content="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:SelectTheme}"
                        VerticalAlignment="Center" />

                <ComboBox   x:Name="cmbThemes" Margin="4" Width="150" SelectedIndex="{Binding ElementName=MainScreen, Path=WindowSkin}"
                            SelectionChanged="cmbThemes_SelectionChanged">
                            <!--WindowSkin es la propiedad en la que guardamos el setting del idioma-->

                    <ComboBoxItem Content="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:Any}" />

<#+                      
    string TempOrigin = T4Help.AddRelPath2AbsPath(cbc.solutionInfo.DirectoryName , "..\\00-ModelDriver\\ModelDriver" + System.IO.Path.DirectorySeparatorChar                                     + CDBcons.AssetsFolder + CDBcons.WpfThemesFolder + System.IO.Path.DirectorySeparatorChar);
            string extension= ".xaml";
            string searchPattern = "*"+extension;
            string[] XamlListFiles = Directory.GetFiles(TempOrigin, searchPattern); // <-- Case-insensitive
                string wpfthemeFileName = null;
            foreach(string file in XamlListFiles)
                {
                    wpfthemeFileName = System.IO.Path.GetFileName(file).Replace(extension, string.Empty);
#>
                    <ComboBoxItem Content="{lex:LocText Create<#=                    cbc.diagram.Product #>DataBase:Create<#=                    cbc.diagram.Product #>DataBase:<#= wpfthemeFileName #>}"
                         Tag="/Inflexion.Framework.UserInterface.Wpf.Utilities;component/Themes/<#= wpfthemeFileName #>.xaml" />
<#+
                }
#>

                </ComboBox>

                <Label Content="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:SelectLanguage}"  VerticalAlignment="Center"/>

                <ComboBox x:Name="LstLanguageOptions" Height="24" VerticalAlignment="Center"
                     SelectedIndex="{Binding ElementName=MainScreen, Path=WindowLanguaje}"
                     SelectionChanged="LstLanguageOptions_SelectionChanged"
                     MinWidth="134" MaxWidth="300" MaxHeight="32" MinHeight="24">

                    <!-- SelectedValue="{Binding Source={x:Static glo:CultureInfo.CurrentUICulture}}" -->

                    <ComboBoxItem Content="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:SistemaOperativo}"
                         HorizontalContentAlignment="Center" Tag="" />

<#+
                // recorremos los ficheros que nos vamos a encontrar en la carpeta de recursos y que previamente se han copiado en función 
                // de los lenguajes elegidos.
                // en el recorrido creamos los combobox items con el binding de los recursos a utilizar excepto el primero que correspond al del sistema operativo que siempre se usa.

                string CurrentPath = cbc.diagram.AbsProyectsPath + System.IO.Path.DirectorySeparatorChar  +"Create" + cbc.diagram.Product + "DataBase" + System.IO.Path.DirectorySeparatorChar + "Assets"+System.IO.Path.DirectorySeparatorChar+"Resources"+System.IO.Path.DirectorySeparatorChar;// Directory.GetCurrentDirectory(); al ejecutar esta instrucción en una t4 se obtiene el directorio de ejecución del visual estudio y no la carpeta donde se encuentra el proyecto.
                searchPattern = "*.resx";
                //string[] ResxListFiles = Directory.GetFiles(CurrentPath, searchPattern); // <-- Case-insensitive

                
                //string ResourceMainName = "Create"+ cbc.diagram.Product +"DataBase."; // utilizamos el punto porque esta es la cadena que utilizamos como marca para extraer el codigo del lenguaje.
                //string ResourceFileName = null;
                string CultureIsoCode = null;
                string LanguageName= null;
                string LanguageNameSecure = null;
                string CultureIsoCodeSecure = null;
                List<string[]> ListLanguages = ResxHelp.GetLanguagesAndIsoCodeFullList( cbc);

                foreach( var item in ListLanguages )
                {
                    CultureIsoCode = item[0];
                    CultureIsoCodeSecure = item[1];
                    LanguageNameSecure =item[2];
#>
                    <ComboBoxItem Tag="<#= CultureIsoCode #>" Height="20">
                        <StackPanel Orientation="Horizontal">
                            <Image Margin="0,0,3,0" Width="14" Height="14" Source="/Assets/Images/Flags/<#= CultureIsoCodeSecure #>24.png" />
                            <TextBlock Margin="0,2,0,0" Text="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:<#= CultureIsoCodeSecure #>}" 
                                 FontFamily="Courier New" />
                            <TextBlock Text="{lex:LocText Create<#= cbc.diagram.Product #>DataBase:Create<#= cbc.diagram.Product #>DataBase:<#= LanguageNameSecure #>, ForceCulture=<#= CultureIsoCode #>}" FontWeight="Bold" />
                        </StackPanel>
                    </ComboBoxItem>
<#+
                        //}
                    //} // end if
                } // end foreach
#>
                </ComboBox>

            </StackPanel>
        </DockPanel>

        <Grid Grid.Row="1">

        <TabControl Margin="10,10,10,10" Name="tabControl1">

<#+
            }//en fase de inicio
 #>
                <TabItem Header="{lex:LocText CreateProductDataBase:CreateProductDataBase:ContextoLimitado}"
                     Name="tabItem1">
                <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Grid Grid.Row="0" Grid.Column = "0" Grid.ColumnSpan="5" >
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:Tecnologíadelabasededatos}"
                                TextAlignment="Right"   Grid.Row="0" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:Nombredelabasededatos}"
                                TextAlignment="Right"   Grid.Row="1" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:Nombredelservidor}"
                                TextAlignment="Right"   Grid.Row="2" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:usuario}"
                                TextAlignment="Right"   Grid.Row="3" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:contraseña}"
                                TextAlignment="Right"   Grid.Row="4" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:ScriptCreación}"
                                TextAlignment="Right"   Grid.Row="5" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:ScriptActualización}"
                                TextAlignment="Right"   Grid.Row="6" Grid.Column="0" />
                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:MsSql2008}"
                                                        Grid.Row="0" Grid.Column="1" Margin="2,0,2,0" />

                    <TextBlock  Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:NH3BeginnersGuide}"
                                Grid.Row="1" Grid.Column="1" Margin="2,0,2,0" />
                    <TextBlock Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:JHERMOSOPC}"
                                Grid.Row="2" Grid.Column="1" Margin="2,0,2,0" />
                    <TextBox    Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:usuario1}"
                                Grid.Row="3" Grid.Column="1" Margin="2,0,2,0" />
                    <TextBox    Text="{lex:LocText CreateProductDataBase:CreateProductDataBase:contraseña1}"
                                Grid.Row="4" Grid.Column="1" Margin="2,0,2,0" />

                    <TextBox Name="ScriptPathCreateSchemaBD" Grid.Row="5" Grid.Column="1" Margin="2,0,2,0" />
                    <TextBox Name="ScriptPathUpdateSchemaBD" Grid.Row="6" Grid.Column="1" Margin="2,0,2,0" />

                    <Button x:Name="btnDropAndCreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>" Grid.Row="0" Grid.Column = "3" Margin="2,0,2,0" <#+ string s = "BorraryCrearEsquema"+ cbc.OwnBoundedContext.Data.ToString() ;  #>
                            Content="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:<#= (s.Length>30)?s.Substring(0,29):s #>}"
                            Click="btnDropAndCreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click" />

                    <Button x:Name="btnUpdateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>"        Grid.Row="1" Grid.Column = "3" Margin="2,0,2,0" <#+ s = "ActualizarEsquema"+ cbc.OwnBoundedContext.Data.ToString(); #>
Content="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:<#= (s.Length>30)?s.Substring(0,29):s #>}"

                            Click="btnUpdateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click" />

                    <Button x:Name="btnAddDataMock<#= cbc.OwnBoundedContext.Data.ToString() #>"         Grid.Row="2" Grid.Column = "3" Margin="2,0,2,0" <#+ s = "AñadirDatosMaqueta" +cbc.OwnBoundedContext.Data.ToString(); #>
Content="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:<#= (s.Length>30)?s.Substring(0,29):s #>}"

                            Click="btnAddDataMock<#= cbc.OwnBoundedContext.Data.ToString() #>_Click" />

                    <Button x:Name="btnDeleteDataMock<#= cbc.OwnBoundedContext.Data.ToString() #>"      Grid.Row="3" Grid.Column = "3" Margin="2,0,2,0" <#+ s = "BorrarDatosMaqueta"+cbc.OwnBoundedContext.Data.ToString(); #>
Content="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:<#= (s.Length>30)?s.Substring(0,29):s #>}"

                            Click="btnAddDataMock<#= cbc.OwnBoundedContext.Data.ToString() #>_Click"/>

                    <Button x:Name="btnGetSqlScriptDropAndCreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>" Grid.Row="5" Grid.Column = "3" Margin="2,0,2,0" <#+ s = "ScriptSqlactualizaresquema"+ cbc.OwnBoundedContext.Data.ToString(); #>
Content="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:<#= (s.Length>30)?s.Substring(0,29):s #>}"

                            Click="btnDropAndCreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click" />

                    <Button x:Name="btnGetSqlScriptUpdateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>"        Grid.Row="6" Grid.Column = "3" Margin="2,0,2,0"

                            Content="Script Sql actualizar esquema <#= cbc.OwnBoundedContext.Data.ToString() #>"
                            Click="btnUpdateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click" />
                </Grid>

                <TextBox  Name="ConexionString<#= cbc.OwnBoundedContext.Data.ToString() #>" Grid.Row="1" Grid.ColumnSpan="4"/>

                <TabControl Margin="10" Name="tabControl2" Grid.Row="4" Height="Auto" Width="Auto" Grid.ColumnSpan="5">
<#+
            int contadorDeEntidades = 0;
            int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity ) & p.Data.ReferencedRootEntity == null).Count();
            ClassBaseContext CBC;
            foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
            {
                if (item.Data.ReferencedRootEntity != null ) continue;
                contadorDeEntidades++;
                ClassBase entity = item.Data;
                bool EntidadNoAbstracta = (( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &
                    ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ); // si la clase es abstracta no tiene factorias
                CBC = new ClassBaseContext(cbc.diagram, cbc.solutionInfo, entity, null); //el secure boudedname no es necesario en este caso.

#>
                    <TabItem Header="<#= entity.AliasFrontEnd #>" Name="TabItem<#= entity.Name #>">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Button x:Name="All<#= entity.Name #>s" Grid.Row="1" Content="Show All" Click="ShowAll<#= entity.Name #>" />
                            <DataGrid AutoGenerateColumns="True" Grid.Row="2" 
                                        Margin="12" 
                                        Name="DataGrid<#= entity.Name #>" 
                                        AlternatingRowBackground="AliceBlue" 
                                        HeadersVisibility="All" 
                                        CanUserAddRows="True">
                            </DataGrid>
                            </Grid>
                        </TabItem>
<#+
            }
#>


<#+
            if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
                    </TabControl>
                </Grid>
            </TabItem>
            <TabItem Header="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Ayuda}" Name="tabAyuda">
            
                <Grid>
                    <TextBox Margin="10" 
                             TextAlignment="Justify" 
                             IsReadOnly="True"
                             MinWidth="200" MaxWidth="1200"
                             HorizontalScrollBarVisibility="Auto"
                             VerticalScrollBarVisibility="Auto"
                             TextWrapping="Wrap"
Text="{lex:LocText Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Create<#= cbc.OwnBoundedContext.Data.ToString() #>DataBase:Elobjetodeestaaplicacióneselde}" >
                        
                    </TextBox>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
    </Grid>
</Window>
<#+            } #>
<#+
            return this.GenerationEnvironment.ToString();
        }
        }
#>