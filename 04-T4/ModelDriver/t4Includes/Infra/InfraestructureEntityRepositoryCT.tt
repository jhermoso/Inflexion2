<#+ 

public class InfraestructureEntityRepositoryCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;

        // constructor de la plantilla
    public InfraestructureEntityRepositoryCT(ClassBaseContext  classBaseContext, string nombreProjecto,  ITree<BoundedContextMetadata> skt)
    {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree

    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using System;
<#+ if (cbc.targetLinksCounter>0) 
    {
#>
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
<#+ }
#>
    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Domain.Base;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core;
  
    /// <summary>
    /// Clase pública sellada repositorio para persistir y 
    /// obtener información a partir de entidades <see cref="<#= I #><#= cbc.secureEntityName #>"/>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    public partial class <#= cbc.secureEntityName #>Repository : <#= cbc.entityBaseRepository #>, <#= I #><#= cbc.secureEntityName #>Repository
    {

        #region CONSTRUCTORS
        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="<#= cbc.secureEntityName #>Repository"/>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="unitOfWork">
        /// Parámetro de tipo <see cref="IAdapter"/> que hace referencia 
        /// a la unidad de trabajo para el acceso a datos.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
        /// </exception>
        internal <#= cbc.secureEntityName #>Repository(IAdapter unitOfWork) : base(unitOfWork) 
        {
        } // <#= cbc.secureEntityName #>Repository Constructor

        #endregion

    } // <#= I #><#= cbc.secureEntityName #>

} // <#= projectNamespace #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>