<#+

public class InfraestructureCreateSchemaCbCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string NamespaceProyecto;
        public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
            public ITree<ClassBase> boundedContextElements;
        public bool okDebug= true;
        
    public InfraestructureCreateSchemaCbCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall, ITree<ClassBase> entitiesTree)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            NamespaceProyecto = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
            KindTimeCall = kindTimeCall;
            boundedContextElements = entitiesTree;
            if (okDebug) Debug.WriteLine(string.Format("*NamespaceProyecto ='{0}'", NamespaceProyecto));
        }
        
    public override string TransformText()
        {
            // ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
            if (okDebug) Debug.WriteLine(string.Format("**NamespaceProyecto  pasado como argumento='{0}'", NamespaceProyecto));
             if (okDebug) Debug.WriteLine(string.Format("**projectNamespace establecido comopropiedad de la clase ='{0}'", projectNamespace));

            IList<string> NameSpaceSection = SplitNamesProjects(NamespaceProyecto, cbc.diagram);
            string company              = NameSpaceSection[0]; if (okDebug) Debug.WriteLine(string.Format("company ='{0}'", company));
            string product              = NameSpaceSection[1]; if (okDebug) Debug.WriteLine(string.Format("product ='{0}'", product));
            string boundedContextName   = NameSpaceSection[2]; if (okDebug) Debug.WriteLine(string.Format("boundedContextName ='{0}'", boundedContextName));
            string layer                = NameSpaceSection[3]; if (okDebug) Debug.WriteLine(string.Format("layer ='{0}'", layer));
            string kindProject          = NameSpaceSection[4]; if (okDebug) Debug.WriteLine(string.Format("kindProject ='{0}'", kindProject));

            //var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            // string cpyrigthText = cpyrigth.TransformText(); // en principio esta linea se comenta pues no tenemos un texto de copywrigth para los fichero
            // =proyecto = namespace = Company.Boundecontext1.BoundeDContex2....BoundeDContexN.Infraestructure.Maps.nHibernate31.Oracle
            // la estrategia de generación es de un fichero por clase debido a que podemos tener varias formas de mapear la herencia en una misma taxonomia 
            // y nhibernate nos exige que si en una misma taxonomia hay varias formas de herencia entonces se han de utilizar ficheros separados
            // 2ª las clases base son Class
            // Las clases que heredan de otra son 

            string SgbdTechnology= null;
            if (cbc.diagram.SGDB.Contains("Oracle"))
            {
                SgbdTechnology = "Oracle"; //  estas cadenas son las que hemos utilizado para los nombres de los proyectos en la arquitectura.
            }
            else if (cbc.diagram.SGDB.ToString().Contains("MsSql"))
                {
                    SgbdTechnology = "SqlServer";
                }
            else if (cbc.diagram.SGDB.ToString().Contains("MySql"))
                {
                    SgbdTechnology = "MySql";
                }
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
namespace CreateProductDataBase
{
    using System;
    using System.IO;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Windows;
    using System.Windows.Controls;
    using System.Windows.Data;
    using System.Windows.Documents;
    using System.Windows.Input;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;
    using System.Windows.Navigation;
    using System.Windows.Shapes;

    using FluentNHibernate.Cfg;
    using FluentNHibernate.Cfg.Db;
    using NHibernate;
    using NHibernate.Cfg;
    using NHibernate.Tool.hbm2ddl;
    using Inflexion.Framework.UserInterface.Wpf.Utilities.Configuration;
    using Inflexion.Framework.UserInterface.Wpf.Utilities;

    using WPFLocalizeExtension;         // estos dos namespaces estan incluidos en el esquema xaml de  <<< xmlns:ISth="http://schemas.InflexionSoftware.com/xaml/presentation" >>>
    using WPFLocalizeExtension.Engine;

    using System.Globalization;
    using System.Diagnostics;

    using System.Threading;
    using System.Windows.Threading;

<#+
            }// tenemos que escribir los using de cada bounded context por tanto 
 #>
    using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Maps.nHibernate31.<#= SgbdTechnology #>;
    // nuevos using and references
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Data;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Resources;
    using FluentNHibernate;
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        string connString ;

        public static DependencyProperty WindowColorProperty;
        public static DependencyProperty WindowSkinProperty; // esta propiedad es para salvar en la configuración de usuario el skin elegido para la aplicación
        public static DependencyProperty WindowLanguajeProperty; // Esta propiedad es para salvar en la configuración del usuario el idioma seleccionado.

        private readonly WindowSettings windowSettings;

        private bool returnFromEventHandler = false;

        public MainWindow()
        {

            // registramos las propiedades de dependencia de para memorizar el idioma y el estilo seleccionados por el usuario de una ejecución a otra.
            // y lo hacemos de froma previa a la instaciación de la ventanacon InitializeComponent()
            windowSettings = new WindowSettings(this);
            windowSettings.SaveOnClose = true; // disable auto-save

            WindowColorProperty =
                DependencyProperty.Register(
                "WindowColor", typeof(Color), typeof(MainWindow),
                new FrameworkPropertyMetadata(Color.FromArgb(255, 200, 255, 200), FrameworkPropertyMetadataOptions.AffectsRender));

            WindowSkinProperty =
                DependencyProperty.Register(
                "WindowSkin", typeof(string), typeof(MainWindow),
                new FrameworkPropertyMetadata("0", FrameworkPropertyMetadataOptions.AffectsRender));

            WindowLanguajeProperty =
                DependencyProperty.Register(
                "WindowLanguaje", typeof(string), typeof(MainWindow),
                new FrameworkPropertyMetadata("0", FrameworkPropertyMetadataOptions.AffectsRender));

            InitializeComponent();
            // logica de presentación
            // add settings to group


            windowSettings.Settings.Add(
                new DependencyPropertySetting(this, WindowColorProperty, WindowColor));

            windowSettings.Settings.Add(
                new DependencyPropertySetting(this, WindowSkinProperty, WindowSkin));

            windowSettings.Settings.Add(
                new DependencyPropertySetting(this, WindowLanguajeProperty, WindowLanguaje));

            this.ConexionStringProduct.Text = "<#=cbc.diagram.BCConnectionString #>";
            connString = this.ConexionString<#= cbc.OwnBoundedContext.Data.ToString() #>.Text;
        }

        // ----------------------------------------------------------------------
        // members
        // ----------------------------------------------------------------------

        public Color WindowColor
        {
            get { return (Color)GetValue(WindowColorProperty); }
            set { SetValue(WindowColorProperty, value); }
        }

        // ----------------------------------------------------------------------
        public string WindowSkin
        {
            get { return (string)GetValue(WindowSkinProperty); }
            set { SetValue(WindowSkinProperty, value); }
        }
        // ----------------------------------------------------------------------
        public string WindowLanguaje
        {
            get { return (string)GetValue(WindowLanguajeProperty); }
            set { SetValue(WindowLanguajeProperty, value); }
        }
        // ----------------------------------------------------------------------

        private void cmbThemes_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (returnFromEventHandler) return;

            Uri uri = null;
            if (cmbThemes.SelectedIndex > 0)
            {
                uri = new Uri((cmbThemes.SelectedItem as ComboBoxItem).Tag.ToString(), UriKind.Relative);
            }
            returnFromEventHandler = true;
            ThemeSelector.GlobalThemeDictionary = uri;
            returnFromEventHandler = false;
        }

        private void LstLanguageOptions_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            // capturamos una excepción cuando se proporcione un identificador de cultura no valido.
            string culture = ((ComboBoxItem)this.LstLanguageOptions.SelectedValue).Tag as string;
            try
            {
                if (this.IsInitialized)
                {
                    //LocalizeDictionary.Instance.Culture = CultureInfo.GetCultureInfo(culture);
                    SwitchCulture(culture);
                }
            }
            catch (CultureNotFoundException ex)
            {

                throw new CultureNotFoundException(" El sufijo para recursos de idioma '" + culture + "' no es un identificador valido de cultura o lenguaje ", ex);
            }
        }
        private void SwitchCulture(string culture)
        {
            CultureInfo ci = CultureInfo.InvariantCulture;
            try
            {
                Thread.CurrentThread.CurrentCulture = CultureInfo.CreateSpecificCulture(culture);
                Thread.CurrentThread.CurrentUICulture = new CultureInfo(culture);
                ci = new CultureInfo(culture);

            }
            catch (CultureNotFoundException)
            {
                try
                {
                    // Try language without region
                    ci = new CultureInfo(culture.Substring(0, 2));
                }
                catch (Exception)
                {
                    ci = CultureInfo.InvariantCulture;
                }
            }
            finally
            {
                LocalizeDictionary.Instance.Culture = ci;
            }
        }
<#+
            }
 #>

        private void btnDropAndCreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click(object sender, RoutedEventArgs e)
        {
            Fluently.Configure()
            .Database(MsSqlConfiguration
                      .<#=cbc.diagram.SGDB #>
                      .ConnectionString(connString)
                      )
            .Mappings(m => m.FluentMappings.AddFromAssemblyOf<<#=cbc.secureEntityName #>Map>())
            .ExposeConfiguration(CreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>)
            .BuildConfiguration();
        }

        private static void CreateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>(Configuration cfg)
        {
            var schemaExport = new SchemaExport(cfg);
            schemaExport.Drop(false, true);
            schemaExport.Create(false, true);
        }

        private NHibernate.ISessionFactory CreateSessionFactory<#= cbc.OwnBoundedContext.Data.ToString() #>()
        {
            return FluentNHibernate.Cfg.Fluently.Configure()
                .Database(MsSqlConfiguration
                          .<#= cbc.diagram.SGDB #>
                          .ConnectionString(connString)
                         )
                         .Mappings(m => m.FluentMappings.AddFromAssemblyOf<<#= cbc.secureEntityName #>Map>())
                                  .BuildSessionFactory();
        }
        private void btnCreateSessionFactory_Click(object sender, RoutedEventArgs e)
        {
            var factory = CreateSessionFactory<#= cbc.OwnBoundedContext.Data.ToString() #>();
        }

        private void btnUpdateSchema<#= cbc.OwnBoundedContext.Data.ToString() #>_Click(object sender, RoutedEventArgs e)
        {
            Fluently.Configure()
                .Database(MsSqlConfiguration
                      .<#= cbc.diagram.SGDB #>
                      .ConnectionString(connString))
                      .Mappings(m => m.FluentMappings.AddFromAssemblyOf<CategoriaMap>())
                      .ExposeConfiguration(cfg => new SchemaUpdate(cfg).Execute(false, true))
                      .BuildSessionFactory();

        }

<#+
            int contadorDeEntidades = 0;
            int totalDeEntidades = boundedContextElements.All.Nodes.Where(p=> (p.Data is Entity ) & p.Data.ReferencedRootEntity == null).Count();
            ClassBaseContext CBC;
            foreach (INode<ClassBase> item in boundedContextElements.All.Nodes.Where(p=> p.Data is Entity ) )
            {
                if (item.Data.ReferencedRootEntity != null ) continue;
                contadorDeEntidades++;
                ClassBase entity = item.Data;
                bool EntidadNoAbstracta = (( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract) != kayak.MoneyGen.InheritClassKeywords.Abstract &
                    ( entity.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Public) == kayak.MoneyGen.InheritClassKeywords.Public     ); // si la clase es abstracta no tiene factorias
                CBC = new ClassBaseContext(cbc.diagram, cbc.solutionInfo, entity, null); //el secure boudedname no es necesario en este caso.

#>
        private void ShowAll<#= entity.Name #>(object sender, RoutedEventArgs e)
        {
            var factory = CreateSessionFactory<#= cbc.OwnBoundedContext.Data.ToString() #>();
            using (var session = factory.OpenSession())
            {
                var <#= entity.Name #>Session = session.QueryOver<<#= entity.Name #>>().List<<#= entity.Name #>>();

                DataGrid<#= entity.Name #>.ItemsSource = <#= entity.Name #>Session;
                //DataGridCategoria.DisplayMemberPath = "Nombre";
            }
        }

<#+
            }
#>


        private void btnAddDataMock<#= cbc.OwnBoundedContext.Data.ToString() #>_Click(object sender, RoutedEventArgs e)
        {

        }
<#+
 if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
    } //end class
}// end name space
<#+         } #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>