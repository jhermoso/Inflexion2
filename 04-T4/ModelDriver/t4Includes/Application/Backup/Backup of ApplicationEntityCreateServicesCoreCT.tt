<#+

public class ApplicationEntityCreateServicesCoreCT : Template
{
    // parametros de la plantilla
    public DslContextDefinitionDiagram  diagram ;
    public ActiveSolution               solutionInfo ;
    public ClassBase                       entity ;
    public string                       projectNamespace;
        
    public ApplicationEntityCreateServicesCoreCT(DslContextDefinitionDiagram  d, ActiveSolution s, ClassBase e)
    {
        diagram = d;
        solutionInfo = s;
        entity = e;
    }
        
    public override string TransformText()
    {
            bool IsEntity = entity is Entity; // ClassBase
        string company = SecureName(this.diagram.Company.ToString());
        string idtype = (diagram.IdKind.Equals("Autonumerical"))  ? "int" : "Guid";
        string secureEntityName = SecureName(entity.Name);
        
        LinkedElementCollection<Atributte> propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 
        var mandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes);
        int numEntityFieldsMandatory= propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes).Count();
        int numEntityFields= propertyObjects.Count;

        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationTargets = Association.GetLinksToTargets(entity); // lista de propiedades obtenidas de las relaciones de destino
        var mandatoryPropertyFromTargets = propertyAssociationTargets.Where( p=> p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneMany); // subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationSources = Association.GetLinksToSources(entity); // lista de propiedades provenientes de las relaciones de origen
        var mandatoryPropertyFromSources = propertyAssociationSources.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany);// subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno 

        int sourceLinksCounter= propertyAssociationSources.Count();
        int targetLinksCounter= propertyAssociationTargets.Count();
        int mandatorySourceLinksCounter= mandatoryPropertyFromSources.Count();
        int mandatoryTargetLinksCounter= mandatoryPropertyFromTargets.Count();

        int spaceformatcounter= secureEntityName.ToString().Length;
        int counter = 0;
        System.Type t;
        bool propertyIsValueType = false;

        KindComponented kindComponent = WhatTypeComponented(entity);
        string superfolder;
        string MandatoryConstructorParamns = GetConstructorParametersString( entity, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, true, false, true, true );//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. 
        string MadatoryEntityBaseConstructorParamans = "";
        string MadatoryEntityBaseConstructorParamansDefinition = "";

        bool isDerivedFromOneEntity= IsDerived( entity); // consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
        ClassBase entitySuperClass = null;
        string entityCore =null;
        if (isDerivedFromOneEntity)
        {
            entitySuperClass = GetSuperEntity(entity);
            superfolder = GetSuperFolders(entity);
            MadatoryEntityBaseConstructorParamansDefinition = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, false, false, true, true );
            MadatoryEntityBaseConstructorParamans = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, false, false, true, true );
        }
        if(entity.Auditable)
        {
            entityCore = "AuditableEntityBase<"+idtype +">";
        }
        else
        {
            entityCore = "EntityBase<"+idtype +">";
        }


        var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    using I3TV.Framework.Application.DataTransfer.Core;
    using <#= company #>.Framework.Application.Security.Data.Base;
    //using <#= projectNamespace.Substring(0, projectNamespace.Length - 5)/*le quitamos el '.Base' y lo sustituimos por '.Core'*/ #>.Core;                               
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 14)/*le quitamos el '.Mapper.Base' y lo sustituimos por '.Data.Base' */ #>.Data.Base;

    /// <summary>
    /// Interfaz que permite definir las acciones del servicio de creación de 
    /// encargado de la creación de una entidad de tipo <see cref="<#= projectNamespace.Substring(0, projectNamespace.Length - 25)#>.I<#= secureEntityName #>"/>.
    /// </summary>
    /// <remarks>a
    /// Sin comentarios adicionales.
    /// </remarks>
    public interface ICreate<#= secureEntityName #> : I3TV.Framework.Application.Core.IService
    {

        #region FUNCTIONS

            /// <summary>
            /// Función encargada de la creación de una entidad de tipo I<#= secureEntityName #>.
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="<#= PascalCase2CamelCase(secureEntityName) #>Dto">
            /// Parámetro de tipo <see cref="<#= secureEntityName #>Dto"> con los datos necesarios
            /// para la creación de la entidad <#= secureEntityName #>.
            /// </param>
            /// <param name="userContextDto"> 
            /// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
            /// </param>
            /// <exception cref="System.ArgumentNullException">
            /// Lanzada cuando el valor de alguno de los argumentos de entrada es <b>null</b>.
            /// </exception>
            /// <returns>
            /// Devuelve el identificador único de la entidad creada.
            /// </returns>
            int Execute(
                        <#= secureEntityName #>Dto <#= PascalCase2CamelCase(secureEntityName) #>Dto, 
                        UserContextDto userContextDto);

        #endregion

    } // end class ICreate<#= secureEntityName #>
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>