<#+

public class ApplicationEntityCreateServicesBaseCT : Template
{
    // parametros de la plantilla
    public DslContextDefinitionDiagram  diagram ;
    public ActiveSolution               solutionInfo ;
    public Entity                       entity ;
    public string                       projectNamespace;
        
    public ApplicationEntityCreateServicesBaseCT(DslContextDefinitionDiagram  d, ActiveSolution s, Entity e)
    {
        diagram = d;
        solutionInfo = s;
        entity = e;
    }
        
    public override string TransformText()
    {

        string company = SecureName(this.diagram.Company.ToString());
        string idtype = (diagram.IdKind.Equals("Autonumerical"))  ? "int" : "Guid";
        string secureEntityName = SecureName(entity.Name);
        string pascalSecureEntityName = ConvertToPascalCase(secureEntityName);
        string camelSecureEntityName = PascalCase2CamelCase(secureEntityName);
        
        LinkedElementCollection<Atributte> propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 
        var mandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes);
        var nonMandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation != RequestUponCreation.yes);
        int numEntityFieldsMandatory= propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes).Count();
        int numEntityFields= propertyObjects.Count;

        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationTargets = Association.GetLinksToTargets(entity); // lista de propiedades obtenidas de las relaciones de destino
        var mandatoryPropertyFromTargets = propertyAssociationTargets.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany); // subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationSources = Association.GetLinksToSources(entity); // lista de propiedades provenientes de las relaciones de origen
        var mandatoryPropertyFromSources = propertyAssociationSources.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany);// subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno 

        int spaceformatcounter= secureEntityName.ToString().Length;
        int counter = 0;
        System.Type t;
        bool propertyIsValueType = false;

        KindComponented kindComponent = WhatTypeComponented(entity);
        string superfolder;
        string MandatoryConstructorParamns = GetConstructorParametersString( entity, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, true, false, true,camelSecureEntityName+"Dto.","");//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. 
        string MadatoryEntityBaseConstructorParamans = "";
        string MadatoryEntityBaseConstructorParamansDefinition = "";

        bool isDerivedFromOneEntity= IsDerived( entity); // consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
        ClassBase entitySuperClass = null;
        string entityCore =null;
        if (isDerivedFromOneEntity)
        {
            entitySuperClass = GetSuperEntity(entity); 
            superfolder = GetSuperFolders(entity);
            MadatoryEntityBaseConstructorParamansDefinition = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, false, false);
            MadatoryEntityBaseConstructorParamans = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, false, false);
        }
        if(entity.Auditable)
        {
            entityCore = "AuditableEntityBase<"+idtype +">";
        }
        else
        {
            entityCore = "EntityBase<"+idtype +">";
        }


        var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    using System.Linq;
    using System.Diagnostics.Contracts;
    using <#= company #>.Framework.Application.Security.Data.Base;
    using <#= company #>.Framework.Application.Security.Services.Base;
    using <#= company #>.Framework.Core;
    using <#= company #>.Framework.Infrastructure.DataAccess.UoW;
    using <#= company #>.Framework.Infrastructure.IoC;

    using <#= projectNamespace.Substring(0, projectNamespace.Length - 5)/*le quitamos el '.Base' y lo sustituimos por '.Core'*/ #>.Core;                               
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 14)/*le quitamos el '.Mapper.Base' y lo sustituimos por '.Data.Base' */ #>.Data.Base;
    using <#= projectNamespace.Substring(0, projectNamespace.Length - 26)/*le quitamos el '.Application.Mapper.Base' y lo sustituimos por '.Domain.Core' */ #>.Domain.Core;

    /// <summary>
    /// Interfaz que permite definir las acciones del servicio de creación de 
    /// una entidad de tipo <see cref="<#= projectNamespace.Substring(0, projectNamespace.Length - 25)#>.I<#= secureEntityName #>"/>.
    /// </summary>
    /// <remarks>
    /// Mapea los datos del Dto <see cref="<#= secureEntityName #>Dto"/> con una entidad <see cref="I<#= secureEntityName #>Mapper"/>.
    /// </remarks>
    public class Create<#= secureEntityName #> : ApplicationServiceBase, ICreate<#= secureEntityName #>
    {
        #region CONSTRUCTORS

            /// <summary>
            /// Inicializa una nueva instancia de la clase <see cref="Create<#= secureEntityName #>"/>.
            /// </summary>
            /// <remarks>
            /// Sin comentarios especiales.
            /// </remarks>
            public Create<#= secureEntityName #>()
            {
            } // end constructor Create<#= secureEntityName #>

        #endregion

        #region PUBLIC ICreate<#= secureEntityName #> Members

            /// <summary>
            /// Función encargada de la creación de una entidad de <see cref="I<#= secureEntityName #>"/>
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="<#= PascalCase2CamelCase(secureEntityName) #>Dto">
            /// Parámetro de tipo <see cref="<#= secureEntityName #>Dto"/> con los datos necesarios
            /// para la creación de la entidad.
            /// </param>
            /// <param name="userContextDto">
            /// Parámetro de tipo <see cref="<#= company #>.Framework.Application.Security.Data.Base.UserContextDto"/> 
            /// que representa el contexto del usuario.
            /// </param>
            /// <exception cref="System.ArgumentNullException">
            /// Lanzada cuando el valor de alguno de los parámetros de 
            /// entrada es <b>null</b> y no esta permitido que lo sea.
            /// </exception>
            /// <returns>
            /// Devuelve el identificador único de la entidad creada.
            /// </returns>
            public <#= idtype #> Execute( <#= secureEntityName #>Dto <#= PascalCase2CamelCase(secureEntityName) #>Dto, UserContextDto userContextDto)
            {
                Contract.Requires<System.ArgumentNullException>(<#= PascalCase2CamelCase(secureEntityName) #>Dto != null, "el parametro '<#= PascalCase2CamelCase(secureEntityName) #>Dto' de la función 'Execute' en la clase 'Create<#= secureEntityName #>' no puede ser nulo");
<#+
   foreach(var property in mandatoryPropertyObjects)
            {
#>
                Contract.Requires<System.ArgumentNullException>(<#= PascalCase2CamelCase(secureEntityName) #>Dto.<#= SecureName(property.AtributteName) #> != null, "el campo '<#= PascalCase2CamelCase(secureEntityName) #>Dto.<#= SecureName(property.AtributteName) #>' de la función 'Execute' en la clase 'Create<#= secureEntityName #>' no puede ser nulo");
<#+ 
            }
#>
                // TODO: PREGUNTA LAS CONDICIONES QUE INCORPORAN UNA EXCEPCIÓN SE HAN DE ENCERRAR EN UN TRY CATCH
                // para cada propiedad realizamos las comprobaciones marcadas por el modelo
                // si no permiten nulos(son mandatory),  
                // si su valores deben cumplir algun tipo de expresión, estar entre un rango o cumplir una expresión regular o ser validados por un servicio externo.

                // Variable de respuesta.
                <#= idtype #> identifier = <#=(idtype.Equals("int"))?"0":"null" #>;
                try
                {
                    using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional())
                    {
                        // Creamos la factoría del repositorio de la entidad I<#= secureEntityName #>.
                        var factory = ManagerIoC.Container.Resolve<I<#= secureEntityName #>RepositoryFactory>();
                        // Creamos el repositorio de la entidad a partir de la factoría.
                        var repository = factory.Create(unitOfWork);
                        // en este punto comprobamos las propiedades cuyos valores no pueden estar repetidos en la base de datos,
                        // la razon de hacerlo aqui y no en las precondiciones es que este tipo de comprobación no se puede hacer por contrato
                        // ya que necesita acceder al repository (a noser que se obtenga como un metodo que devuelva un valor bool)
                        // el convertir esto en un metodo implica que la entidad de dominio deberia tener su metodo de tipo equal
                        // que no solo compruebe si el id es el mismo sino si ya existe por ejemplo en los strings deberiamos marcar si la igualdad es
                        // case sensitive.
<#+
   foreach(var property in mandatoryPropertyObjects) // las propiedades que no se pueden repetir no permiten valores nulos.
            {
                if (!property.AllowRepedValues) // si no permite valores repetidos 
                    {                           // comprobamos que no existe previamente en la base de datos
                                                // TODO: DEBIERAMOS PODER INCLUIR SI ES CASE SENSITIVE O NO CUANDO SE TRATA DE STRINGS.
                    if (property.AtributteType.ToString() == "String") // si es una cadena previamente la pasamos a minusculas para hacer la comprobación.
                        {
#>
                        string field = <#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.AtributteName) #>.Trim().ToLower();
                        IQueryable<I<#= secureEntityName #>> data = repository.GetFiltered(c => c.<#= ConvertToPascalCase(property.AtributteName) #>.ToLower() == field && c.IsActive);
<#+                     }
                     else
                    {
#>
                        <#= property.AtributteType #> field = <#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.AtributteName) #>;
                        IQueryable<I<#= secureEntityName #>> data = repository.GetFiltered(c => c.<#= ConvertToPascalCase(property.AtributteName) #> == field && c.IsActive);
<#+
                    }
#>
                        // Comprobamos los datos.
                        if (data.Any() )
                        {
                            // Error, ya existe una entidad <#= secureEntityName #> con el campo <#= ConvertToPascalCase(property.AtributteName) #> con el valor repetido .
                            string errorMessage = string.Format(
                                                                CoreResources.ErrorEnEntidadNombreDuplicado,
                                                                <#= secureEntityName #>Resources.<#= ConvertToPascalCase(property.AtributteName) #>,
                                                                <#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.AtributteName) #>);
                            // Lanzamos la excepción.
                            throw new System.InvalidOperationException(errorMessage);
                        }
<#+     
                    }
            }
#>
                        //hacemos la asignación de las propiedades que no son mandatory y que por tanto no son creadas en la factoria.
                        // si las propiedades son de tipo get set se puede hacer una simple asignación 
                        // en caso contrario hay que llamar al metodo set.
                        // Descripción de la entidad.

                        // Creamos la factoría de la entidad I<#= secureEntityName #>.
                        var factoryEntity = ManagerIoC.Container.Resolve<I<#= secureEntityName #>Factory>();
                        // Creamos la entidad I<#= secureEntityName #>.
                        var entity = factoryEntity.Create(<#= MandatoryConstructorParamns #>);

}
<#+
   foreach(var property in nonMandatoryPropertyObjects)
            {
                if(property.OnlyGetProperty) // si se trata de una entidad de tipo (get set) solo realizamos un asignación en caso contrario invocamos el metodo set.
                {
#>
                        entity.Set<#= SecureName(property.AtributteName) #>( <#= PascalCase2CamelCase(secureEntityName) #>Dto.<#= SecureName(property.AtributteName) #> );
<#+
                }
                else
                {
#>
                        entity.<#= SecureName(property.AtributteName) #> = <#= PascalCase2CamelCase(secureEntityName) #>Dto.<#= SecureName(property.AtributteName) #>;
<#+
                }
            }
#>
<#+
if (mandatoryPropertyFromSources.Count()>0) // comprobamos si tenemos relaciones de composición de tipo target(TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
   // si efectivamene las tenemos comprobamos si bienen en el DTO.
    foreach(var property in mandatoryPropertyFromSources)
    {
#>
                        // en este punto Comprobamos si tenemos entidades u objetos valor bajo composición o si formamos parte de un aggregate
                        if (<#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.SourceRoleName) #> != null)
                        {
                        }
<#+
    }
}
#>
<#+
if (mandatoryPropertyFromSources.Count()>0) // comprobamos si tenemos relaciones de composición de tipo target(TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
    foreach(var property in mandatoryPropertyFromTargets)
   {
#>
                       // en este punto Comprobamos si tenemos entidades u objetos valor bajo composición o si formamos parte de un aggregate
                        if (<#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.TargetRolName) #> != null && <#= camelSecureEntityName #>Dto.<#= ConvertToPascalCase(property.TargetRolName) #>.Any())
                        {
                            // Obtenemos los datos desde el Dto
                            var <#=PascalCase2CamelCase(property.TargetRolName) #> = this.Get<#= ConvertToPascalCase(property.TargetRolName) #>(unitOfWork, <#= camelSecureEntityName #>Dto.<#= SecureName(property.TargetRolName) #>);
                            // Creamos la factoría de la entidad I<#= secureEntityName #>.
                            var factoryEntity = ManagerIoC.Container.Resolve<I<#= GetTypeFromAssociationLink(property, false) #>Factory>();
                            // Creamos la entidad.
                            var entity = factoryEntity.Create( <#= GetConstructorParametersString( (Entity)property.Target, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, true, false, true,camelSecureEntityName+"Dto.","") #>, <#= camelSecureEntityName #> );
                        }
<#+
   }
}
#>
                        // Persistimos la información.
                        repository.Insert(entity, userContextDto.UserId.ToString(CultureInfo.InvariantCulture));
                        // Obtenemos el identificador de la entidad creada.
                        identifier = entity.Id;
                        // Confirmamos la transacción.
                        unitOfWork.CommitTransaction();
                    }
                }
                catch
                {
                    throw;
                }
                // Devolvemos el resultado.
                return identifier;
            } //end method Execute

        #endregion

        #region PRIVATE FUNCTIONS
        // EN LAS FUNCIONES PRIVADAS NOS TRAEMOS LAS ENTIDAES DE LOS AGREGADOS QUE CORRESPONDE A  ESTA ENTIDAD RAIZ 
        // POR EJEMPLO LAS RELACIONES DE COMPOSICIÓN
        #endregion

    } // end class Create<#= secureEntityName #>
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesBaseCT
#>