<#+
public class ServiceGetById : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceGetById(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Neutral"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
#>
        #region service GetById
        /// <summary>
		/// .en GEt the entity <#= cbc.pascalSecureEntityName #> by his Id.
        /// .es Recupera una entidad <#= cbc.pascalSecureEntityName #> mediante su identificador correspondiente.
        /// </summary>
        /// <param name="id">
		/// .en Identity of the entity to get.
        /// .es Identificador de la entidad que se va a recuperar.
        /// </param>
        /// <param name="userContextDto">
		/// .en user context info.
        /// .es Información de contexto del usuario.
        /// </param>
        /// <returns>
        /// La entidad <#= cbc.pascalSecureEntityName #> recuperada o valor nulo si no se encuentra.
        /// </returns>
        public <#= cbc.pascalSecureEntityName #>Dto GetById(int id, UserContextDto userContextDto)
        {
            // Variable de respuesta.
            <#= cbc.pascalSecureEntityName #>Dto entityDto = null;

            try
            {
			    // .en check the user's context and get the default conection.
                // .es Comprobamos el contexto de usuario y obtenemos la conexión por defecto.
                var serverContext = base.Execute(this.GetFullyQualifiedMethodName(MethodBase.GetCurrentMethod()), userContextDto);
                using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional(serverContext.Connection.ProviderName, serverContext.ConnectionString))
                {
                    // get & check the entity.
                    var entityRepository = this.<#= cbc.camelSecureEntityName #>RepositoryFactory.Create(unitOfWork);
                    var entity = entityRepository.GetById(id);
                    Guard.ArgumentIsNotNull(
                                            entity,
                                            string.Format(
                                                          CoreResources.Neutral.NoHayDatosPorId,
                                                          <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>Alias));

                    // Mapping the data.
                    entityDto = this.<#= cbc.camelSecureEntityName #>Mapper.EntityMapping(entity);

                    // confirm transaction.
                    unitOfWork.CommitTransaction();
                }
            }
            catch (Exception ex)
            {
                // write log.
                logger.Error(ex.Message, ex);
                throw ex;
            }

            // get the result.
            return entityDto;
        }
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
