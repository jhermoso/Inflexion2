<#+
public class ServiceHeaderClass : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceHeaderClass(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso.
        ProjectConcepts prjCon = new ProjectConcepts( cbc, projectNamespace, Skt );
#>
    /// <summary>
    /// Representa los servicios de administración de la entidad <#= cbc.pascalSecureEntityName #>.
    /// </summary>
    /// <remarks>
    /// Crea un objeto <see cref="<#= I #><#= cbc.pascalSecureEntityName #>".
    /// </remarks>
    <#= cbc.accesModifier #>class <#= cbc.pascalSecureEntityName #>Services : ApplicationServiceBase, <#= I #><#= cbc.pascalSecureEntityName #>Services
    {
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>