<#+
public class CreateExecutePreconditions : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public CreateExecutePreconditions(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
#>
                #region Preconditions

<#+     if (cbc.diagram.ValidationContracts.Equals("CodeContracts"))
        {#>
                // Comprobar el DTO de entrada.
                Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto != null, "el parametro '<#= cbc.pascalSecureEntityName #>Dto' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");

                // Comprobar los campos mandatory dentro del DTO.
<#+
   foreach(var property in cbc.mandatoryPropertyObjects)
            {
                cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
                if (!cbc.propertyIsValueType | (cbc.propertyIsValueType & property.IsNullable) ) /* solo escribimos la condición del invariante en caso de que la propiedad sea nullable*/
                    {
#>
                Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #> != null, "el campo '<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #>' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");
<#+                 }#>
<#+         }#>
<#+     } // end if codecontracts#>
<#+     if (cbc.diagram.ValidationContracts.Equals("DataAnotations"))
        {#>
                // Comprobar el DTO de entrada.
                Guard.ArgumentIsNotNull(
                                        <#= cbc.camelSecureEntityName #>Dto,
                                        string.Format(
                                                      CoreResources.Neutral.DataTransferObjectIsNull,
                                                      <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>Alias));
                // Comprobar los campos mandatory dentro del DTO.
<#+
   foreach(var property in cbc.mandatoryPropertyObjects)
            {
                cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
                if (!cbc.propertyIsValueType | (cbc.propertyIsValueType & property.IsNullable) ) /* solo escribimos la condición del invariante en caso de que la propiedad sea nullable*/
                    {
#>
                Guard.<#=(property.AtributteType.ToLower().Equals("string"))?"ArgumentNotNullOrEmpty":"ArgumentIsNotNull" #>(
                                                <#= cbc.camelSecureEntityName #>Dto.<#=property.AtributteName #>,
                                                string.Format(
                                                            CoreResources.Neutral.CampoObligatorio,
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#=property.AtributteName #>Alias));

<#+                 }#>
<#+         }#>
<#+     } // end if DataAnotations#>
                #endregion

<#+
if (cbc.mandatorySourceLinksCounter>0) // comprobamos si tenemos relaciones de composición de tipo target o padres que no pueden ser nulos. (TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
#>
                #region Preconditions from composition sources
<#+

   // si efectivamene las tenemos comprobamos si bienen en el DTO.
    foreach(var property in cbc.mandatoryPropertyFromSources)
    {
#>
<#+     if (cbc.diagram.ValidationContracts.Equals("CodeContracts"))
        { #>
                Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #> != null, "el campo <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #>' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");

<#+     } // end codecontracts#>
<#+     if (cbc.diagram.ValidationContracts.Equals("DataAnotations"))
        { #>
<#+ if ( property.Source is ObjectValue) { #>

<#+
        var propertiesCollection = ClassBaseHasAtributtes.GetAtributtes(property.Source);
        foreach(var atribute in propertiesCollection)
        {
            if(atribute.RequestUponCreation == RequestUponCreation.yes)
            {
#>
                Guard.<#=(atribute.AtributteType.ToLower().Equals("string"))?"ArgumentNotNullOrEmpty":"ArgumentIsNotNull" #>(
                                                <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #><#= T4Help.SecureName(atribute.AtributteName) #>,
                                                string.Format(
                                                            CoreResources.Neutral.CampoObligatorio,
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#= T4Help.ToPascalCase(property.TargetRolName) #>Alias_));

<#+         }#>
<#+     }#>
<#+} // end if is object value#>
<#+ if ( !(property.Source is ObjectValue)) { #>
                Guard.ArgumentIsNotNull(
                                                <#= cbc.camelSecureEntityName #>Dto.<#=property.TargetRolName #>,
                                                string.Format(
                                                            CoreResources.Neutral.CampoObligatorio,
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#=property.TargetRolName #>Alias_));

<#+                 } // end if is not object value#>
<#+     } // end codecontracts#>
<#+    } // end for each property from sources#>
                #endregion
<#+} // end if sourlinks >0#>

<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
