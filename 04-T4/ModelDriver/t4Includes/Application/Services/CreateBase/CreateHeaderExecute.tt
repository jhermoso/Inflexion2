<#+
public class CreateHeaderExecute : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public CreateHeaderExecute(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>

        /// <summary>
        /// Función encargada de la creación de una entidad de <see cref="<#= I #><#= cbc.pascalSecureEntityName #>"/>
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.pascalSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> con los datos necesarios
        /// para la creación de la entidad.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="Inflexion.Framework.Application.Security.Data.Base.UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor de alguno de los parámetros de 
        /// entrada es <b>null</b> y no esta permitido que lo sea.
        /// </exception>
        /// <returns>
        /// Devuelve el identificador único de la entidad creada.
        /// </returns>
        public <#= cbc.idtype #> Execute( <#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        {
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
