<#+

public class WebConfigCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;

    // constructor de la plantilla
    public WebConfigCT(ClassBaseContext  classBaseContext, string nombreProjecto , ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree

    }
        
    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

#>
<?xml version="1.0" encoding="utf-8" ?>
<configuration>

  <configSections>
    <section name="hibernate-configuration" type="NHibernate.Cfg.ConfigurationSectionHandler, NHibernate"/>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
    <sectionGroup name="applicationSettings" type="System.Configuration.ApplicationSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" >
      <section name="Inflexion.Framework.Application.Base.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
      <section name="<#= projectNamespace #>.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    </sectionGroup>
  </configSections>

  <system.web>
    <compilation debug="true" targetFramework="4.0" />
  </system.web>

<hibernate-configuration xmlns="urn:nhibernate-configuration-2.2">
  <session-factory>
<#+
if(cbc.diagram.SGDB.Equals(kayak.MoneyGen.SGDB.MsSql2008.ToString()))
{
#>
    <property name="dialect">NHibernate.Dialect.MsSql2008Dialect</property>
    <property name="connection.driver_class">NHibernate.Driver.SqlClientDriver</property>
    <property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
    <property name="connection.connection_string">Data Source=(local);initial catalog=SPE_Test;User=sa;Integrated Security=True</property>
    <property name="proxyfactory.factory_class">NHibernate.Bytecode.DefaultProxyFactoryFactory, NHibernate</property>
    <property name="show_sql">false</property>
    <property name="query.substitutions">true 1, false 0, yes 'Y', no 'N'</property>
    <mapping assembly="Inflexion.Suite.SISCO.Clientes.Infrastructure.Maps.nHibernate31.SqlServer" />
<#+
} // end if SQLServer
#>
<#+ 
if(cbc.diagram.SGDB.Equals(kayak.MoneyGen.SGDB.Oracle.ToString()))
{
#>
    <property name="dialect">NHibernate.Dialect.Oracle10gDialect</property>
    <property name="connection.driver_class">NHibernate.Driver.OracleDataClientDriver</property>
    <property name="connection.provider">NHibernate.Connection.DriverConnectionProvider</property>
    <property name="connection.connection_string">
      Data Source=(DESCRIPTION=
      (ADDRESS=
      (PROTOCOL=TCP)
      (HOST=berlin)
      (PORT=2002)
      )
      (CONNECT_DATA=
      (SID=cameron)
      )
      );
      User Id=SISCO;
      Password=SISCO;
    </property>
    <property name="proxyfactory.factory_class">NHibernate.Bytecode.DefaultProxyFactoryFactory, NHibernate</property>
    <property name="show_sql">false</property>
    <property name="query.substitutions">true 1, false 0, yes 'Y', no 'N'</property>
    <mapping assembly="Inflexion.Suite.SISCO.Clientes.Infrastructure.Maps.nHibernate31.Oracle" />
<#+
} // end if Oracle
#>
  </session-factory>
</hibernate-configuration>


  <system.serviceModel>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- To avoid disclosing metadata information, set the value below to false and remove the metadata endpoint above before deployment -->
          <serviceMetadata httpGetEnabled="true"/>
          <!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="true"/>
          <dataContractSerializer maxItemsInObjectGraph="2147483646"/>
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <bindings>
      <basicHttpBinding>
        <binding name="BasicHttpBinding_Mtom" closeTimeout="00:01:00"
                    openTimeout="00:01:00" receiveTimeout="00:10:00" sendTimeout="00:01:00"
                    allowCookies="false" bypassProxyOnLocal="false" hostNameComparisonMode="StrongWildcard"
                    maxBufferSize="2147483646" maxBufferPoolSize="2147483646" maxReceivedMessageSize="2147483646"
                    messageEncoding="Mtom" textEncoding="utf-8" transferMode="Buffered"
                    useDefaultWebProxy="true">
          <readerQuotas maxDepth="2147483646" maxStringContentLength="2147483646" maxArrayLength="2147483646"
              maxBytesPerRead="2147483646" maxNameTableCharCount="2147483646" />
        </binding>
      </basicHttpBinding>
    </bindings>

    <services>
<#+ 
foreach(INode<ClassBase> entity in cbc.OwnClassBaseTreeBoundedContext.All.Nodes.Where(p=> p.Data is Entity ))
{
    if (entity.Data.ReferencedRootEntity != null || ( entity.Data.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract ) continue;
#>
      <service name="<#= projectNamespace #>.<#= entity.Data.Name #>Service">
        <endpoint binding="basicHttpBinding"
                  contract="<#= projectNamespace #>.<#= I #><#= entity.Data.Name #>Service"
                  bindingConfiguration="BasicHttpBinding_Mtom" />
      </service>

<#+ } #>
    </services>

    <serviceHostingEnvironment multipleSiteBindingsEnabled="true" />
  </system.serviceModel>


  <log4net debug="false">
    <appender name="FileAppender" type="log4net.Appender.RollingFileAppender">
      <file value="log\Inflexion_" />
      <appendToFile value="true" />
      <datePattern value="yyyyMMdd'.txt'" />
      <rollingStyle value="Composite" />
      <maxSizeRollBackups value="10" />
      <maximumFileSize value="100KB" />
      <staticLogFileName value="false" />

      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%utcdate{yyyyMMdd HHmmss,fff} [%thread] %logger %M %level %message%newline"/>
      </layout>
    </appender>

    <root>
      <level value="ERROR"/>
      <appender-ref ref="FileAppender"/>
    </root>

  </log4net>
<applicationSettings>

    <Inflexion.Framework.Application.Base.Properties.Settings>
      <setting name="CreateDatabaseScript" serializeAs="String">
        <value>True</value>
      </setting>
    </Inflexion.Framework.Application.Base.Properties.Settings>

  </applicationSettings>

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <qualifyAssembly partialName="Oracle.DataAccess"
      fullName="Oracle.DataAccess, Version=2.102.2.20, Culture=neutral, PublicKeyToken=89b483f429c47342" />
    </assemblyBinding>
  </runtime>

  <system.data>
    <DbProviderFactories>
      <remove invariant="Oracle.DataAccess.Client" />
      <add name="Oracle Data Provider for .NET" invariant="Oracle.DataAccess.Client" description=".Net Framework Data Provider for Oracle" type="Oracle.DataAccess.Client.OracleClientFactory, Oracle.DataAccess, Version=2.102.2.20, Culture=neutral, PublicKeyToken=89b483f429c47342" />
    </DbProviderFactories>
  </system.data>

</configuration>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>