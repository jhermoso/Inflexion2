<#@ include file="CreateBase\ComposedDTOs.tt" #>
<#+

public class ApplicationEntityCreateServicesBaseCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;

    // constructor de la plantilla
    public ApplicationEntityCreateServicesBaseCT( ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt )
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }

    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        bool okDebug = false ;// cbc.entity.Name.Equals("Empresa");

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.


        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        string ResxFileName = boundedContextName.Replace(".","_") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.

         if (okDebug) Debug.WriteLine(string.Format("servico create de '{0}'",cbc.entity.Name));

        string SourceParamsReferenced; // sobre estas cadenas obtenemos las listas de parametros para los create de entidades con relaciones de composición. roles source
        //string TargetParamsReferenced; // sobre estas cadenas obtenemos las listas de parametros para los create de entidades con relaciones de composición. roles target
        string EntityParamsCreate;
        string EntityParamsCreate2 = null;
        if (cbc.isDerivedFromOneEntity)
        {
        
        EntityParamsCreate = GetConstructorParametersStringTaxonomi(
                                                                        cbc.diagram.TreeApp,                        /* Arbol de contextos limitados */
                                                                        cbc.entity,                                 /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"), /* tipo id */
                                                                        SelectionCriteriaAttributes.Mandatory,      /* Selección de criterios */
                                                                        80,                                         /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                      /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,                  /* Indentación de los parametros cuando se salta */
                                                                        false,                                      /* incluirDefaultValues */
                                                                        false,                                      /* incluirId */
                                                                        false,                                      /* incluirTargetAssociations */
                                                                        false,                                      /* incluirSourceAssociations */
                                                                        true,                                       /* pascalCase */
                                                                        cbc.camelSecureEntityName+"Dto.",           /* prefijo */
                                                                        ""                                          /* sufijo */
                                                                    );

        EntityParamsCreate2 = GetConstructorParametersStringTaxonomi(
                                                                        cbc.diagram.TreeApp,                        /* Arbol de contextos limitados */
                                                                        cbc.entity,                                 /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"), /* tipo id */
                                                                        SelectionCriteriaAttributes.Any,            /* Selección de criterios */
                                                                        200,                                        /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                      /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,                  /* Indentación de los parametros cuando se salta */
                                                                        false,                                      /* incluirDefaultValues */
                                                                        false,                                      /* incluirId */
                                                                        false,                                      /* incluirTargetAssociations */
                                                                        true,                                       /* incluirSourceAssociations */
                                                                        true,                                       /* pascalCase */
                                                                        "",                                         /* prefijo */
                                                                        "FromDto"                                   /* sufijo */
                                                                    );
            EntityParamsCreate = T4Help.joinParams( EntityParamsCreate , EntityParamsCreate2);
        }
        else
        {

             EntityParamsCreate = GetConstructorParametersString(
                                                                        cbc.entity,                                 /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"), /* tipo id */
                                                                        SelectionCriteriaAttributes.Mandatory,      /* Selección de criterios */
                                                                        80,                                         /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                      /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,                  /* Indentación de los parametros cuando se salta */
                                                                        true,                                       /* incluirDefaultValues */
                                                                        false,                                      /* incluirId */
                                                                        false,                                      /* incluirTargetAssociations */
                                                                        false,                                      /* incluirSourceAssociations */
                                                                        true,                                       /* pascalCase */
                                                                        cbc.camelSecureEntityName+"Dto.",           /* prefijo */
                                                                        ""                                          /* sufijo */
                                                                );
        }

        if (cbc.mandatorySourceLinksCounter > 0)
        {
            // cuando tenemos una relación de composición y procesamos la clase source (la que actua como colección) 
            // utilizamos una variable cuyo nombre corresponde 
            // a < # = T4Help.ToCamelCase(property.SourceRolName) # >Var ó FromDto
            // para crear la lista y pasarla como parametro a la factoria que a su vez llama al constructor.
            // por esta razón no incluimos las asociacianes source en la llamada anterior de EntityParamsCreate = GetConstructorParametersString(....);
            if (EntityParamsCreate == null) EntityParamsCreate = "";
            string s;
            foreach (var property in cbc.mandatoryPropertyFromSources)
            {
                s = T4Help.ToCamelCase(property.TargetRolName) + "Var";
                EntityParamsCreate = T4Help.joinParams( EntityParamsCreate , s); /*cbc.MandatoryConstructorParamnsCallnoIDForDto*/
                //Debug.WriteLine(string.Format("s='{0}",s));
            }
                        //Debug.WriteLine(string.Format("EntityParamsCreate='{0}",EntityParamsCreate));
            if (EntityParamsCreate == null) EntityParamsCreate = "";
        }

        for (int i = 0; i < cbc.mandatoryTargetLinksCounter; i++)
        {
            EntityParamsCreate = T4Help.joinParams( EntityParamsCreate , "null");
        }
        
        // subplantillas generales
        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity);
        string cpyrigthText = cpyrigth.TransformText();
        // subplantillas particulares
        var ComposedDTOsTemplate = new ComposedDTOs( cbc, projectNamespace, Skt); string ComposedDTOsTxt  = ComposedDTOsTemplate.TransformText();

#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

    #region sharedKernels using references
<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    #endregion

    #region general using references

    using System;
    using System.Globalization;
    using System.Linq;
    using System.Diagnostics.Contracts;
    using System.Collections.Generic;
    using Inflexion.Framework.Application.Security.Data.Base;
    using Inflexion.Framework.Application.Security.Services.Base;
    using Inflexion.Framework.Core;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW;
    using Inflexion.Framework.Infrastructure.IoC;
    using Inflexion.Framework.Logging;

   // using CoreResources /* Esta linea aparece comentada pues se utiliza el name espace en cada sitio para distinguirlo de los resources propios del contexto limitado ya que todos los ficheros de recursos generados desde la t4 tienen el nombre de neutral */
   // TODO: Esto significa que para una instalación es necesario generar los core resources en función del idioma neutral.
   // tambien podemo introducir el \<\#= T4Help.ToPascalCase(secureBdName) \#\>. como namespace corto del los ficheros de recursos
   // using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Core;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Data.Base;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Services.Core;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Base;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Infrastructure.Data.Repositories;
<#+ if (!boundedContextName.Contains(cbc.diagram.SolutionFolderCommon))   { /* El contexto es un shared kernel entonces este using ya aparece en */#>
    //using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Resources;
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.Resources;
<#+         } #>
    #endregion

    /// <summary>
    /// Interfaz que permite definir las acciones del servicio de creación de 
    /// una entidad de tipo <see cref="<#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.<#= I #><#= cbc.pascalSecureEntityName #>"/>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    public sealed class Create<#= cbc.pascalSecureEntityName #> : ApplicationServiceBase, ICreate<#= cbc.pascalSecureEntityName #>
    {
        #region FIELDS

        /// <summary>
        /// Variable privada estática que representa el logger.
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        private static ILogger <#= cbc.pascalSecureEntityName #>Logger;

        #endregion

        #region CONSTRUCTORS

        /// <summary>
        /// Inicializa una nueva instancia de la clase <see cref="Create<#= cbc.pascalSecureEntityName #>"/>.
        /// </summary>
        /// <remarks>
        /// Sin comentarios especiales.
        /// </remarks>
        public Create<#= cbc.pascalSecureEntityName #>()
        {
            if (<#= cbc.pascalSecureEntityName #>Logger == null)
            {
                // Intanciamos el logger.
                <#= cbc.pascalSecureEntityName #>Logger = ManagerIoC.Container.Resolve<ILoggerFactory>().Create(this.GetType());
            }
        } // end constructor Create<#= cbc.pascalSecureEntityName #>

        #endregion

        #region PUBLIC ICreate<#= cbc.pascalSecureEntityName #> Members

        /// <summary>
        /// Función encargada de la creación de una entidad de <see cref="<#= I #><#= cbc.pascalSecureEntityName #>"/>
        /// </summary>
        /// <remarks>
        /// Sin comentarios adicionales.
        /// </remarks>
        /// <param name="<#= cbc.pascalSecureEntityName #>Dto">
        /// Parámetro de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/> con los datos necesarios
        /// para la creación de la entidad.
        /// </param>
        /// <param name="userContextDto">
        /// Parámetro de tipo <see cref="Inflexion.Framework.Application.Security.Data.Base.UserContextDto"/> 
        /// que representa el contexto del usuario.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Lanzada cuando el valor de alguno de los parámetros de 
        /// entrada es <b>null</b> y no esta permitido que lo sea.
        /// </exception>
        /// <returns>
        /// Devuelve el identificador único de la entidad creada.
        /// </returns>
        public <#= cbc.idtype #> Execute( <#= cbc.pascalSecureEntityName #>Dto <#= cbc.camelSecureEntityName #>Dto, UserContextDto userContextDto)
        {
             #region Preconditions

            Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto != null, "el parametro '<#= cbc.pascalSecureEntityName #>Dto' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");
<#+
   foreach(var property in cbc.mandatoryPropertyObjects)
            {
                cbc.propertyIsValueType = T4Help.IsValueType(property.AtributteType);
                if (!cbc.propertyIsValueType | (cbc.propertyIsValueType & property.IsNullable) ) /* solo escribimos la condición del invariante en caso de que la propiedad sea nullable*/
                    {
#>
            Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #> != null, "el campo '<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #>' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");
<#+ 
                    }
            }
#>

             #endregion

             #region Repository Preconditions
<#+
if (cbc.mandatorySourceLinksCounter>0) // comprobamos si tenemos relaciones de composición de tipo target o padres que no pueden ser nulos. (TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
   // si efectivamene las tenemos comprobamos si bienen en el DTO.
    foreach(var property in cbc.mandatoryPropertyFromSources)
    {
#>

            // en este punto Comprobamos si tenemos entidades u objetos valor que son padres 
            Contract.Requires<System.ArgumentNullException>(<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #> != null, "el campo <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #>' de la función 'Execute' en la clase 'Create<#= cbc.pascalSecureEntityName #>' no puede ser nulo");
<#+
    }
}
#>

             #endregion

            // TODO: PREGUNTA ¿LAS CONDICIONES QUE INCORPORAN UNA EXCEPCIÓN SE HAN DE ENCERRAR EN UN TRY CATCH?
            // para cada propiedad realizamos las comprobaciones marcadas por el modelo en los invariantes.
            // si no permiten nulos(son mandatory),  
            // si su valores deben cumplir algun tipo de expresión, estar entre un rango o cumplir una expresión regular o ser validados por un servicio externo.

            // Variable de respuesta.
            <#= cbc.idtype #> identifier = <#=(cbc.idtype.ToLower().Contains("int"))?"0":"null" #>;
            try
            {
                using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional())
                {
                        
                    // Creamos el repositorio de la entidad a partir de la factoría.
                    var <#= cbc.pascalSecureEntityName #>Repository = <#= cbc.pascalSecureEntityName #>RepositoryFactory.Create(unitOfWork);
<#+ if (cbc.mandatoryPropertyObjects.Any()){ #>
                    // en este punto comprobamos las propiedades cuyos valores no pueden estar repetidos en la base de datos,
                    // la razon de hacerlo aqui y no en las precondiciones es que este tipo de comprobación no se puede hacer por contrato
                    // ya que necesita acceder al repository (a no ser que se obtenga como un método que devuelva un valor bool)
                    // el convertir esto en un método implica que la entidad de dominio debería tener su método de tipo equal
                    // que no solo compruebe si el id es el mismo sino si ya existe por ejemplo en los strings deberiamos marcar si la igualdad es
                    // case sensitive.
                    IQueryable<<#= I #><#= cbc.pascalSecureEntityName #>> DuplicateData;
<#+ } #>
<#+
   foreach(var property in cbc.mandatoryPropertyObjects) // las propiedades que no se pueden repetir no permiten valores nulos.
            {
                if (!property.AllowRepeatedValues) // si no permite valores repetidos 
                    {                           // comprobamos que no existe previamente en la base de datos
                                                // TODO: SI ES CASE SENSITIVE SE IMPLEMENTA COMO CONDICIÓN INVARIANTE.
                    if (property.AtributteType.ToString().ToLower() == "string") // si es una cadena previamente la pasamos a minusculas para hacer la comprobación.
                        {
#>
                    string <#= cbc.camelSecureEntityName #>Dto<#= T4Help.ToPascalCase(property.AtributteName) #>ToLower = <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>.Trim().ToLower();
                    DuplicateData = <#= cbc.pascalSecureEntityName #>Repository.GetFiltered(c => c.<#= T4Help.ToPascalCase(property.AtributteName) #>.ToLower() == <#= cbc.camelSecureEntityName #>Dto<#= T4Help.ToPascalCase(property.AtributteName) #>ToLower && c.IsActive);
<#+                     }
                    else // si la propiedad no es string simplemente comparamos los valores.
                        {
#>
                    DuplicateData = <#= cbc.pascalSecureEntityName #>Repository.GetFiltered(c => c.<#= T4Help.ToPascalCase(property.AtributteName) #> == <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #> && c.IsActive);
<#+
                        }
#>
                    // Comprobamos los datos.
                    if (DuplicateData.Any() )
                    {
                        // Error, ya existe una entidad <#= cbc.pascalSecureEntityName #> con el campo <#= T4Help.ToPascalCase(property.AtributteName) #> con el valor repetido .
                        string errorMessage = string.Format(
                                                            CoreResources.Neutral.ErrorEnEntidadNombreDuplicado,
                                                            <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#= T4Help.ToPascalCase(property.AtributteName) #>Alias,
                                                            <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.AtributteName) #>);
                        // Lanzamos la excepción.
                        throw new System.InvalidOperationException(errorMessage);
                    }
<#+
                    }
            }
#>
<#+
    if (cbc.mandatoryPropertyFromSources.Any())
    {
#>
                // Declaramos las variables que vamos a utilizar en el constructor y que provienen de las propiedades deducidas de los roles source en las relaciones mandatory. (Con multiplicidad mínima one).
                /*  NOTA EL RECORRIDO DE LOS PADRES A DE SER RECURSIVO  */
<#+
    }
        //extraemos las entidades que provienen de los sources de los mandatory.
    foreach(var property in cbc.mandatoryPropertyFromSources) /*  NOTA EL RECORRIDO DE LOS PADRES A DE SER RECURSIVO  */
        {
     //Debug.WriteLine(string.Format("La entidad '{0}' derivada '{1}' La entidad source es '{2}' derivada '{3}'",cbc.entity.Name, IsDerived(cbc.entity), property.Source.Name, IsDerived(property.Source)));
#>
<#+
        if (IsDerived(property.Source)) // 
        {
            SourceParamsReferenced = GetConstructorParametersStringSuperClasess(
                                                                                property.Source,                            /* entidad */
                                                                                cbc.diagram.IdKind.Equals("Autonumerical"), /* tipo id */
                                                                                SelectionCriteriaAttributes.Mandatory,      /* Selección de criterios */
                                                                                80,                                         /* Longitud máxima para activar el salto de parametros */
                                                                                false,                                      /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                                cbc.spaceformatcounter+23,                  /* Indentación de los parametros cuando se salta */
                                                                                false,                                      /* incluirDefaultValues */
                                                                                false,                                      /* incluirId */
                                                                                true,                                       /* incluirTargetAssociations */
                                                                                true,                                       /* incluirSourceAssociations */
                                                                                true,                                       /* pascalCase */
                                                                                cbc.camelSecureEntityName +"Dto."+ToPascalCase(property.TargetRolName)+".",          /* prefijo */
                                                                                ""                                          /* sufijo */
                                                                                );
                //Debug.WriteLine(string.Format("     opcion1='{0}'", SourceParamsReferenced));
           SourceParamsReferenced = cbc.MandatoryEntityBaseConstructorParamansDefinition;
                //Debug.WriteLine(string.Format("     opcion2='{0}'", SourceParamsReferenced));
        }
        else
        {
            SourceParamsReferenced = GetConstructorParametersString(
                                                                                property.Source,                            /* entidad */
                                                                                cbc.diagram.IdKind.Equals("Autonumerical"), /* tipo id */
                                                                                SelectionCriteriaAttributes.Mandatory,      /* Selección de criterios */
                                                                                80,                                         /* Longitud máxima para activar el salto de parametros */
                                                                                false,                                      /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                                cbc.spaceformatcounter+23,                  /* Indentación de los parametros cuando se salta */
                                                                                false,                                      /* incluirDefaultValues */
                                                                                false,                                      /* incluirId */
                                                                                true,                                       /* incluirTargetAssociations */
                                                                                true,                                       /* incluirSourceAssociations */
                                                                                true,                                       /* pascalCase */
                                                                                cbc.camelSecureEntityName +"Dto."+ToPascalCase(property.TargetRolName)+".",          /* prefijo */
                                                                                ""                                          /* sufijo */
                                                                    );
        }
#>
<#+
            if ( property.Source is Entity)
            {
#>
                // Creamos la factoría del repositorio de la entidad <#= I #><#= T4Help.ToCamelCase(property.Source.Name) #>.
                var <#= T4Help.ToCamelCase(property.Source.Name) #>RepositoryFactory = ManagerIoC.Container.Resolve<<#= I #><#= T4Help.ToPascalCase(property.Source.Name) #>RepositoryFactory>();
                // Creamos el repositorio de la entidad a partir de la factoría.
                var <#= T4Help.ToCamelCase(property.Source.Name) #>Repository = <#= T4Help.ToPascalCase(property.Source.Name) #>RepositoryFactory.Create(unitOfWork);
                // variable que vamos a utilizar en el constructor
                <#= I #><#= T4Help.ToPascalCase(property.Source.Name) #> <#= T4Help.ToCamelCase(property.TargetRolName) #>Var = null;

                if (<#= cbc.camelSecureEntityName #>Dto.Id != 0) // o de null en guid
                {
                    <#= T4Help.ToCamelCase(property.TargetRolName) #>Var = <#= T4Help.ToCamelCase(property.Source.Name) #>Repository.GetById(<#= cbc.camelSecureEntityName #>Dto.Id);
                }
                else
                {
                    // si la entidad relacionada '<#= T4Help.ToCamelCase(property.Source.Name) #>' no tiene id entonces llamamos a su servicio de create para que se encargue de realizar las validaciones.
                    // Creamos la factoría de la entidad <#= I #><#= T4Help.ToCamelCase(property.Source.Name) #>.
                    // var <#= T4Help.ToCamelCase(property.Source.Name) #>Factory = ManagerIoC.Container.Resolve<<#= I #><#= T4Help.ToPascalCase(property.Source.Name) #>Factory>(); // esta factoria es estatica no es necesario resolverla.
                    // Creamos la entidad <#= I #><#= T4Help.ToCamelCase(property.Source.Name) #>.
                    <#= T4Help.ToCamelCase(property.TargetRolName) #>Var = <#= T4Help.ToPascalCase(property.Source.Name) #>Factory.Create( <#= SourceParamsReferenced #> );  /* parametros procedentes del source*/
                }
<#+
            }
#>
<#+
            if (property.Source is ObjectValue)
            {
#>
                    // Llamamos la factoría del objetovalor <#= I #><#= T4Help.ToCamelCase(property.Source.Name) #>.
                    // variable que vamos a utilizar en el constructor.
                    <#= I #><#= T4Help.ToPascalCase(property.Source.Name) #> <#= T4Help.ToCamelCase(property.TargetRolName) #>Var = <#= T4Help.ToPascalCase(property.Source.Name) #>Factory.Create( <#= SourceParamsReferenced #> );  /* parametros procedentes del source*/

<#+
            }
#>
<#+
        } // foreach(var property in cbc.mandatoryPropertyFromsources)
#>

                    // hacemos la asignación de las propiedades que no son mandatory y que por tanto no son creadas en la factoria.
                    // si las propiedades son de tipo get set se puede hacer una simple asignación 
                    // en caso contrario hay que llamar al metodo set.
                    // Descripción de la entidad.
<#= ComposedDTOsTxt #>
                    // Creamos la factoría de la entidad <#= I #><#= cbc.pascalSecureEntityName #>.
                    //var <#= cbc.pascalSecureEntityName #>FactoryEntity = ManagerIoC.Container.Resolve<<#= I #><#= cbc.pascalSecureEntityName #>Factory>();
                    // Creamos la entidad <#= I #><#= cbc.pascalSecureEntityName #>.
                    <#= I #><#= cbc.pascalSecureEntityName #> <#= cbc.pascalSecureEntityName #>Var = <#= cbc.pascalSecureEntityName #>Factory.Create(<#= EntityParamsCreate  #>); //cbc.isDerivedFromOneEntity =<#= (cbc.isDerivedFromOneEntity)?"si":"no" #> cbc.mandatorySourceLinksCounter =<#= cbc.mandatorySourceLinksCounter.ToString() #> cbc.sourceLinksCounter =<#= cbc.sourceLinksCounter.ToString() #>

<#+
if (cbc.mandatorySourceLinksCounter>0) // comprobamos si tenemos relaciones de composición de tipo target(TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
    string TargetConstructorParameters = null;
    string SourceConstructorParameters = null;
    string TypeCollectionPrefix = null;
    foreach(var property in cbc.mandatoryPropertyFromSources.Where( p=> IsMaxMultiplicityMany(p.SourceMultiplicity)))
   {
#>
                    // 1º declaramos una lista de entidades '<#= T4Help.ToPascalCase(property.Target.Name) #>'.
                    //<#= GetTypeFromAssociationLink(property, true, cbc.idtype, false) #> nuevaListaEntidades<#= T4Help.ToPascalCase(property.Target.Name) #> = null;

<#+
       if (IsKeyValuePair(property.TargetICollection))
       {
           TypeCollectionPrefix = "item.Value.";
       }
       else
       {
           TypeCollectionPrefix = "item.";
       }
         TargetConstructorParameters = GetConstructorParametersString( 
                                                                        property.Target,                        /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"),                             /* tipo id */
                                                                        SelectionCriteriaAttributes.Mandatory,  /* Selección de criterios */
                                                                        200,                                     /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                  /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,              /* Indentación de los parametros cuando se salta */
                                                                        true,                                   /* incluirDefaultValues */
                                                                        false,                                  /* incluirId */
                                                                        false,                                  /* incluirTargetAssociations */
                                                                        false,                                  /* incluirSourceAssociations */
                                                                        true,                                   /* pascalCase */
                                                                        TypeCollectionPrefix,                   /* prefijo */
                                                                        ""                                      /* sufijo */
                                                                      );//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. ;
          string ParametersFromProperties = GetConstructorParametersString( 
                                                                        cbc.entity,                        /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"),                             /* tipo id */
                                                                        SelectionCriteriaAttributes.Mandatory,  /* Selección de criterios */
                                                                        200,                                     /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                  /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,              /* Indentación de los parametros cuando se salta */
                                                                        true,                                   /* incluirDefaultValues */
                                                                        false,                                  /* incluirId */
                                                                        false,                                  /* incluirTargetAssociations */
                                                                        false,                                  /* incluirSourceAssociations */
                                                                        true,                                   /* pascalCase */
                                                                        "",                   /* prefijo */
                                                                        ""                                      /* sufijo */
                                                                      );//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. ;
          string ParametersFromSources = GetConstructorParametersString( 
                                                                        cbc.entity,                        /* entidad */
                                                                        cbc.diagram.IdKind.Equals("Autonumerical"),                             /* tipo id */
                                                                        SelectionCriteriaAttributes.Mandatory,  /* Selección de criterios */
                                                                        200,                                     /* Longitud máxima para activar el salto de parametros */
                                                                        false,                                  /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                                                                        cbc.spaceformatcounter+23,              /* Indentación de los parametros cuando se salta */
                                                                        true,                                   /* incluirDefaultValues */
                                                                        false,                                  /* incluirId */
                                                                        true,                                  /* incluirTargetAssociations */
                                                                        true,                                  /* incluirSourceAssociations */
                                                                        true,                                   /* pascalCase */
                                                                        "",                   /* prefijo */
                                                                        "Var"                                      /* sufijo */
                                                                      );//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. ;

#>
                    // en este punto Comprobamos si tenemos entidades u objetos valor bajo composición o si formamos parte de un aggregate
                    if (<#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #> != null && <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #>.Any())
                    {
                        // Recorremos la colección de acciones.
                        foreach (var item in <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.ToPascalCase(property.TargetRolName) #>)
                        {
                            // entity = <#= cbc.entity.Name #> // Source = <#= property.Source.Name #> // Target = <#= property.Target.Name #> 
                            // source is referenced = <#= (property.Source.ReferencedRootEntity != null)?"true":"false" #>
                            <#= I #><#= T4Help.ToPascalCase(property.Target.Name) #> nuevo<#= T4Help.ToPascalCase(property.Target.Name) #> = <#= T4Help.ToPascalCase(property.Target.Name) #>Factory.Create(<#= cbc.MandatoryConstructorParamnsCallnoID #>);
                            //(<#= (ParametersFromSources != null)? ParametersFromSources:"no tiene parametros?" #>); 
                            // TargetConstructorParameters= '<#= TargetConstructorParameters #>'
                                
                            // Obtenemos los datos de la entidad realacionada desde el Dto
                            //var <#= T4Help.ToCamelCase(property.TargetRolName) #>Var = this.Get<#= T4Help.ToPascalCase(property.TargetRolName) #>ByKey(unitOfWork, item.Key);
                            // Añadimos la acción a la colección de acciones.
                            //<#= cbc.pascalSecureEntityName #>Var.Add<#= T4Help.SecureName(property.Target.Name) #>To<#= T4Help.SecureName(property.TargetRolName) #>(<#= T4Help.ToCamelCase(property.TargetRolName) #>Var);
                        }
                    }
<#+
   }
}
#>

<#+
   foreach(var property in cbc.nonMandatoryPropertyObjects)
            {
                if(property.OnlyGetProperty) // si se trata de una entidad de tipo (get set) solo realizamos un asignación en caso contrario invocamos el metodo set.
                {
#>
                    <#= cbc.pascalSecureEntityName #>Var.Set<#= T4Help.SecureName(property.AtributteName) #>( <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #> );
<#+
                }
                else
                {
#>
                    <#= cbc.pascalSecureEntityName #>Var.<#= T4Help.SecureName(property.AtributteName) #> = <#= cbc.camelSecureEntityName #>Dto.<#= T4Help.SecureName(property.AtributteName) #>;
<#+
                }
            }
#>

                    // Persistimos la información.
                    <#= cbc.pascalSecureEntityName #>Repository.Insert(<#= cbc.pascalSecureEntityName #>Var, userContextDto.UserId.ToString(CultureInfo.InvariantCulture));
                    // Obtenemos el identificador de la entidad creada.
                    identifier = <#= cbc.pascalSecureEntityName #>Var.Id;
                    // Confirmamos la transacción.
                    unitOfWork.CommitTransaction();
                }
            }
            catch (System.Exception ex)
            {
                // Escribimos en el Log.
                <#= cbc.pascalSecureEntityName #>Logger.Error(ex.Message, ex);
                // Propagamos la excepción
                throw ex;
            }
            // Devolvemos el resultado.
            return identifier;
        } //end method Execute

        #endregion

        #region PRIVATE FUNCTIONS
        // EN LAS FUNCIONES PRIVADAS NOS TRAEMOS LAS ENTIDADES DE LOS AGREGADOS QUE CORRESPONDE A ESTA ENTIDAD RAIZ 
        // POR EJEMPLO LAS RELACIONES DE COMPOSICIÓN
<#+
if (cbc.mandatoryTargetLinksCounter>0 & false) // comprobamos si tenemos relaciones de composición de tipo target(TODO) o si estamos dentro de un agregado y es necesario traerse el resto de los datos.
{
    foreach(var property in cbc.mandatoryPropertyFromSources)
   {
#>
        /// <summary>
        /// Función privada encargada de obtener las entidades de tipo 
        /// <see cref="<#= I #><#= T4Help.ToPascalCase(property.TargetRolName) #>"/> asociadas al tipo de bloqueo a crear.
        /// </summary>
        /// <param name="unitOfWork">
        /// Parámetro de tipo <see cref="IAdapter"/> que identifica la unidad
        /// de trabajo para el acceso a los datos persistidos.
        /// </param>
        /// <param name="<#= T4Help.ToCamelCase(property.Target.Name) #>Id">
        /// Parámetro que indica el identificador único de <#= T4Help.ToPascalCase(property.Target.Name) #> 
        /// </param>
        /// <exception cref="System.ArgumentException">
        /// Lanzada cuando no se obtienen datos de la acción 
        /// segun el identificador proporcionado.
        /// </exception>
        /// <exception cref="System.InvalidOperationException">
        /// Lanzada cuando la entidad obtenida esta inactiva.
        /// </exception>
        /// <returns>
        /// Devuelve entidad <see cref="<#= I #><#= T4Help.ToPascalCase(property.Target.Name) #>"/>.
        /// </returns>            
        private <#= I #><#= T4Help.ToPascalCase(property.Target.Name) #> Get<#= T4Help.ToPascalCase(property.TargetRolName) #>ByKey(IAdapter unitOfWork, <#= cbc.idtype #> <#= T4Help.ToCamelCase(property.Target.Name) #>Id)
        {
            // Creamos la factoría de repositorios de la entidad <#= I #><#= T4Help.ToPascalCase(property.Target.Name) #>.
            var factory = ManagerIoC.Container.Resolve<<#= I #><#= T4Help.ToPascalCase(property.Target.Name) #>RepositoryFactory>();
            // Creamos el repositorio a partir de la factoría.
            var repository = factory.Create(unitOfWork);
            // Obtenemos los datos de la entidad mediante el repositorio.
            var entity = repository.GetById(<#= T4Help.ToCamelCase(property.Target.Name) #>Id);
            // Comprobamos si hemos obtenido datos.
            Contract.EnsuresOnThrow<System.ArgumentException>(entity == null ,string.Format(CoreResources.Neutral.NoHayDatosPorId, <#= ResxFileName #>.<#= T4Help.ToPascalCase(property.Target.Name) #>Alias));
            // Validamos si la entidad está activa.
            Contract.EnsuresOnThrow<System.ArgumentException>(!entity.IsActive ,string.Format(CoreResources.Neutral.NoHayDatosPorId, <#= ResxFileName #>.<#= T4Help.ToPascalCase(property.Target.Name) #>Alias));
            // Devolvemos el resultado.
            return entity;
        } // GetAcciones

<#+
   }
}
#>
        #endregion

    } // end class Create<#= cbc.pascalSecureEntityName #>
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesBaseCT
#>