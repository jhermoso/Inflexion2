<#+

public class ApplicationEntityCreateServicesCoreCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
        // constructor de la plantilla
    public ApplicationEntityCreateServicesCoreCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));
        string cpyrigthText = cpyrigth.TransformText();

#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using Inflexion.Framework.Application.DataTransfer.Core;
    using Inflexion.Framework.Application.Security.Data.Base;
    //using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Core;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Data.Base;

    /// <summary>
    /// Interfaz que permite definir las acciones del servicio de creación de 
    /// encargado de la creación de una entidad de tipo <see cref="<#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Core.<#= I #><#= cbc.secureEntityName #>"/>.
    /// </summary>
    /// <remarks>a
    /// Sin comentarios adicionales.
    /// </remarks>
    public interface ICreate<#= cbc.secureEntityName #> : Inflexion.Framework.Application.Core.IService
    {

        #region FUNCTIONS

            /// <summary>
            /// Función encargada de la creación de una entidad de tipo <#= I #><#= cbc.secureEntityName #>.
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="<#= T4Help.ToCamelCase(cbc.secureEntityName) #>Dto">
            /// Parámetro de tipo <see cref="<#= cbc.secureEntityName #>Dto"> con los datos necesarios
            /// para la creación de la entidad <#= cbc.secureEntityName #>.
            /// </param>
            /// <param name="userContextDto"> 
            /// Parámetro de tipo <see cref="UserContextDto"/> que representa el contexto del usuario.
            /// </param>
            /// <exception cref="System.ArgumentNullException">
            /// Lanzada cuando el valor de alguno de los argumentos de entrada es <b>null</b>.
            /// </exception>
            /// <returns>
            /// Devuelve el identificador único de la entidad creada.
            /// </returns>
            int Execute(
                        <#= cbc.secureEntityName #>Dto <#= T4Help.ToCamelCase(cbc.secureEntityName) #>Dto, 
                        UserContextDto userContextDto);

        #endregion

    } // end class ICreate<#= cbc.secureEntityName #>
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityCreateServicesCoreCT
#>