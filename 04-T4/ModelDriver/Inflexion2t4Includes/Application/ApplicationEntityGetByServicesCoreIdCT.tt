<#+

public class ApplicationEntityGetByServicesCoreIdCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;

    // constructor de la plantilla
    public ApplicationEntityGetByServicesCoreIdCT( ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt )
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }

    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

#region SharedKernel references
<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
#endregion

    using System;

    using <#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.Data.Base;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core;
        
    using Inflexion.Framework.Application.Security.Data.Base;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW;
    using Inflexion.Framework.Infrastructure.IoC;
    using System.Collections.Generic;

    /// <summary>
    /// Interfaz que permite definir las acciones del obtención de las entidad por id
    /// una entidad de tipo <see cref="<#= company #>.<#= product #>.<#= boundedContextName #>.<#= layer #>.<#= I #><#= cbc.pascalSecureEntityName #>"/>.
    /// </summary>
    /// <remarks>a
    /// Devuelve la totalidad de las entidades de forma paginada
    /// </remarks> 
    /// <param name="userContextDto">
    /// Parámetro de tipo <see cref="Inflexion.Framework.Application.Security.Data.Base.UserContextDto"/> 
    /// que representa el contexto del usuario.
    /// </param>
    /// <exception cref="System.ArgumentNullException">
    /// Lanzada cuando el valor del argumento <c>userContextDto</c> es nulo.
    /// </exception>
    /// <returns>
    /// Devuelve listado de Dto´s de tipo <see cref="<#= cbc.pascalSecureEntityName #>Dto"/>.
    /// </returns>
    public interface IGetBy<#= cbc.pascalSecureEntityName #>Id : Inflexion.Framework.Application.Core.IService
    {
        <#= cbc.pascalSecureEntityName #>Dto Execute( <#= cbc.idtype #> id, UserContextDto userContextDto);
    } // end interface IGetBy<#= cbc.pascalSecureEntityName #>Id
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityGetByServicesCoreIdCT
#>