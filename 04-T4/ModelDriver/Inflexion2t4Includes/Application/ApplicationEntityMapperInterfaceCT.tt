<#+

public class ApplicationEntityMapperInterfaceCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
    // constructor de la plantilla
    public ApplicationEntityMapperInterfaceCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree

    }

    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

    using System;
    using System.Runtime.Serialization;
<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using Inflexion2.Application;//.Core;
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.<#= prjCon.layer #>.Dtos;
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain;

<#+ if (cbc.targetLinksCounter>0) 
    {
#>
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
<#+ }
#>
    /// <summary>
    /// Clase pública encargada de mapear los datos de una entidad <see cref="<#= I #><#= cbc.secureEntityName #>Mapper"/>.
    /// </summary>
    /// <remarks>
    /// Mapea los datos del Dto <see cref="<#= cbc.secureEntityName #>Dto"/> con una entidad <see cref="<#= I #><#= cbc.secureEntityName #>Mapper"/>.
    /// </remarks>
    public interface I<#= cbc.secureEntityName #>Mapper : IDataEntityMapper<<#= cbc.secureEntityName #>Dto, I<#= cbc.secureEntityName #>, <#= cbc.idtype #>>
    {

    } // end class <#= cbc.secureEntityName #>Mapper
} //  <#= projectNamespace #>

<#+
        return this.GenerationEnvironment.ToString();
    } //end method override TransformText method
} // end class ApplicationEntityMapperInterfaceCT
#>
