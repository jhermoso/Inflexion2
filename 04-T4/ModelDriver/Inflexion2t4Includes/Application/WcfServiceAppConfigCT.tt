<#+
public class WcfServiceAppConfigCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;

    // constructor de la plantilla
    public WcfServiceAppConfigCT(ClassBaseContext  classBaseContext, string nombreProjecto , ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree

    }
        
    // metodo de generación de la plantilla
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

#>
<?xml version="1.0" encoding="utf-8" ?>
<!-- Fichero generado con una herramienta template t4includes.Application.WcfServiceAppConfigCT.tt -->
<configuration>
<#+
if(cbc.diagram.SGDB.Equals(kayak.MoneyGen.SGDB.MsSql2008.ToString()))
{
#>
    <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 -->
  <configSections>
    <section name="entityFramework" 
             type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" 
             requirePermission="false" />
  </configSections>

    <!--<appSettings>
    <add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
  </appSettings>-->

  <connectionStrings>
    <add name="<#=cbc.diagram.Product #>.Connection"
    connectionString="<#=cbc.diagram.BCConnectionString #>"/>
  </connectionStrings>
<#+
if(cbc.diagram.ORM.Equals(kayak.MoneyGen.ORMoptions.EntityFramewokCodeFirst.ToString()))
{
#>  
    <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="v11.0" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
<#+
} // end if EntityFramework
#>

  <system.web>
    <compilation debug="true" />
  </system.web>
  <!-- When deploying the service library project, the content of the config file must be added to the host's 
  app.config file. System.Configuration does not support config files for libraries. -->
  <system.serviceModel>
    <services>
      <!--  name es el path correspondiente al namespace + la clase -->
      <service name="Atento.Suite.Shared.Application.WcfService.PersonaService"> 
        <host>
          <baseAddresses>
            <!-- Base addres es un path fisico que ha de incluir las carpetas -->
<#+ 
foreach(INode<ClassBase> entity in cbc.OwnClassBaseTreeBoundedContext.All.Nodes.Where(p=> p.Data is Entity ))
{
    if (entity.Data.ReferencedRootEntity != null || ( entity.Data.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract ) continue;
#>
            <add baseAddress = "http://localhost:8733/Design_Time_Addresses/<#= projectNamespace #>/<#= entity.Data.Name #>Service/" /> 
<#+ } #>          </baseAddresses>
        </host>
        <!-- Service Endpoints -->
        <!-- Unless fully qualified, address is relative to base address supplied above -->
        <!--  contract es el path correspondiente al namespace + la interface -->

        <!-- 
            Upon deployment, the following identity element should be removed or replaced to reflect the 
            identity under which the deployed service runs.  If removed, WCF will infer an appropriate identity 
            automatically.
        -->
<#+ 
foreach(INode<ClassBase> entity in cbc.OwnClassBaseTreeBoundedContext.All.Nodes.Where(p=> p.Data is Entity ))
{
    if (entity.Data.ReferencedRootEntity != null || ( entity.Data.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract ) continue;
#>
      <endpoint address="" 
				binding="basicHttpBinding" 
				contract="<#= projectNamespace #>.I<#= entity.Data.Name #>Service">
          <identity> <dns value="localhost"/> </identity>
      </endpoint>

<#+ } #>
        <!-- Metadata Endpoints -->
        <!-- The Metadata Exchange endpoint is used by the service to describe itself to clients. --> 
        <!-- This endpoint does not use a secure binding and should be secured or removed before deployment -->
        <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>
      </service>
    </services>
    <behaviors>
      <serviceBehaviors>
        <behavior>
          <!-- To avoid disclosing metadata information, 
          set the values below to false before deployment -->
          <serviceMetadata httpGetEnabled="True" httpsGetEnabled="True"/>
          <!-- To receive exception details in faults for debugging purposes, 
          set the value below to true.  Set to false before deployment 
          to avoid disclosing exception information -->
          <serviceDebug includeExceptionDetailInFaults="False" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
  </system.serviceModel>

<#+
} // end if SQLServer
#>
<#+ 
if(cbc.diagram.SGDB.Equals(kayak.MoneyGen.SGDB.Oracle.ToString()))
{
#>
<#+
} // end if Oracle
#>
</configuration>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>