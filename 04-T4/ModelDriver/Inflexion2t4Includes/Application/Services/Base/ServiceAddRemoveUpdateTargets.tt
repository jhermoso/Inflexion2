<#+
public class ServiceAddRemoveUpdateTargets : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceAddRemoveUpdateTargets(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización
        bool Trazable = cbc.MainEntityStereotype.Contains("Bussiness") || cbc.MainEntityStereotype.Contains("Auditable"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

#>
        #region Add Remove update properties from target relationships
        // Acontinuación escribimos los métodos de las propiedades que provienen de relaciones con otras entidades objetos valor o enumerados y son coleccion.

<#+
    foreach (var property in cbc.propertyAssociationTargets)
    {
        // para que sea una colección es necesario que la multiplicidad sea many
        if(string.IsNullOrEmpty(property.SourceRolName)) continue;// Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
#>
<#+
        // estos metodos se añaden solo si la multiplicidad de la relación es CeroMany o OneMany en caso contrario 
        // se trata como una propiedad normal 
        if ( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) // toda propiedad deducida de un relación o link tiene un set privado.
        {
#>
        /// <summary>
        /// Función encargada de la añadir a la entidad <#= cbc.secureEntityName #> una instancia de la propiedad <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Target.Name) #></param>
<#+ if (Secured) {    #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool Add<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de borrar de la entidad <#= cbc.secureEntityName #> una instancia de la colección <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #></param>
<#+ if (Secured) {    #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool Remove<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>)
        {
            // TODO: falta completar este metodo
            return false;
        }

        /// <summary>
        /// Función encargada de actualizar de la entidad <#= cbc.secureEntityName #> una instancia de la colección <#= T4Help.ToPascalCase(property.SourceRolName) #> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #>
        /// </summary>
        /// <param name="<#= T4Help.ToCamelCase(property.SourceRolName) #>Dto"> de tipo <#= T4Help.ToPascalCase(property.Source.Name) #></param>
<#+ if (Secured) {    #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+ }#>
        /// <returns>
        /// Devuelve <c>True</c> si se ha añadido correctamente.
        /// y <c>False</c> en caso contrario.
        /// </returns>
        public bool Update<#= T4Help.ToPascalCase(property.SourceRolName) #>(<#= T4Help.ToPascalCase(property.Target.Name) #>Dto <#= T4Help.ToCamelCase(property.SourceRolName) #>Dto<#= (Secured)?", UserContextDto userContextDto":""#>)
        {
            // TODO: falta completar este metodo
            return false;
        }

<#+     } // end if ( IsMaxMultiplicityMany( property.TargetMultiplicity ) ) #>
<#+ } // end foreach (var property in cbc.propertyAssociationTargets) #>

        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
