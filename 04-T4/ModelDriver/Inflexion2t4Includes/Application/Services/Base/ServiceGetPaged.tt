<#+
public class ServiceGetPaged : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceGetPaged(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización
        bool Trazable = cbc.MainEntityStereotype.Contains("Bussiness") || cbc.MainEntityStereotype.Contains("Auditable"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

#>
        #region Service GetPaged
        // code generated from template "ServiceGetPaged.tt"

        /// <summary>
        /// Recupera una lista paginada de entidades <#= cbc.pascalSecureEntityName #>, según la especificación indicada.
        /// </summary>
        /// <param name="specificationDto">
        /// Especificación que se va a aplicar.
        /// </param>
<#+ if (Secured){ #>        /// <param name="userContextDto"> Información de contexto del usuario. </param><#+ }#>
        /// <returns>
        /// La lista paginada de entidades '<#= cbc.pascalSecureEntityName #>', según la especificación indicada.
        /// </returns>
        public PagedElements<<#= cbc.pascalSecureEntityName #>Dto> GetPaged(SpecificationDto specificationDto<#=(Secured)?", UserContextDto userContextDto":"" #>)
        {
            #region Preconditions
            // Comprobar el DTO de entrada.
            Guard.ArgumentIsNotNull(
                                    specificationDto,
                                    string.Format(
                                                  Inflexion2.Resources.Framework.EspecificationDataTransferObjectIsNull,
                                                  "<#= cbc.entity.AliasFrontEnd #>")); 
            #endregion
            List<<#= cbc.pascalSecureEntityName #>Dto> result = new List<<#= cbc.pascalSecureEntityName #>Dto>(0);
            int totalElements = 0;

            try
            {
                // Creamos el repositorio de la entidad.
                I<#= cbc.pascalSecureEntityName #>Repository repo = this.unityContainer.Resolve<I<#= cbc.pascalSecureEntityName #>Repository>();

                // Obtenemos las entidades aplicando la especificación.
                ISpecification<<#= I #><#= cbc.pascalSecureEntityName #>> filter =
                    specificationDto.ToSpecification<<#= I #><#= cbc.pascalSecureEntityName #>>();

                PagedElements<<#= I #><#= cbc.pascalSecureEntityName #>> entities =
                    repo.GetPagedElements(
                                      specificationDto.PageIndex,
                                      specificationDto.PageSize,
                                      filter.IsSatisfiedBy(),
<#+  if ( cbc.propertyObjects.Where(c => c.DefaultSortingOrder>0).Any() )
{ 
// si tenemos campos de ordenación introducimos el primero.
                string DefaultSortingOrderFieldName = cbc.propertyObjects.Where(c => c.DefaultSortingOrder>0).OrderBy(c => c.DefaultSortingOrder ).FirstOrDefault().AtributteName;
#> 
                                                        entity => entity.<#= DefaultSortingOrderFieldName #>,
<#+   } else {#>
                                                        entity => entity.Id,
<#+    } #>
                                                        true);
                totalElements = entities.TotalElements;

                // Mapeamos los datos.
                entities.ToList()
                        .ForEach(entity =>
                            {
                                var entityDto = this.<#= cbc.camelSecureEntityName #>Mapper.EntityMapping(entity);
                                result.Add(entityDto);
                            });

                // Confirmamos la transacción.
                this.Commit();
                
            }
            catch (Exception ex)
            {
<#+ if (Trazable){ #>                // Escribir en el Log.
                logger.Error(ex.Message, ex);
<#+ }#>                throw ex;
            }

            // Devolver el resultado.
            return new PagedElements<<#= cbc.pascalSecureEntityName #>Dto>(result, totalElements);
        }
#endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
