<#+
public class CreateDuplicatedDataPrecondition : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public CreateDuplicatedDataPrecondition(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

        string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
        if( cbc.mandatoryPropertyObjects.Any( property =>property.AllowRepeatedValues.Equals(false)))  
        {
#>
<#+    #>
        #region Preconditions avoid duplicated data 
<#+   foreach(var property in cbc.mandatoryPropertyObjects)            {#>

        if (this.Exists<#=property.AtributteName #>(<#= cbc.camelSecureEntityName #>Dto.<#=property.AtributteName #>.Trim(), serverContext))
        {
            string errorMessage = string.Format(
                                                FrameworkResource.PropertyRequired, 
                                                <#= ResxFileName #>.<#= cbc.pascalSecureEntityName #>_<#=property.AtributteName #>Alias,
                                                <#= cbc.camelSecureEntityName #>Dto.<#=property.AtributteName #>);
            throw new InvalidOperationException(errorMessage);
        }
<#+     } //end if allow repeated values#>
        #endregion

<#+
            return this.GenerationEnvironment.ToString();
        }
        else
            return string.Empty;
    } // end de TransformText
}// end template
#>
