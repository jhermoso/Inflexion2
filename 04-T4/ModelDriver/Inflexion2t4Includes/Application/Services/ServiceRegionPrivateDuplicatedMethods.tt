<#+
public class ServiceRegionPrivateDuplicatedMethods : Template
{
    // variables de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public ServiceRegionPrivateDuplicatedMethods(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del proyecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        string ResxFileName = prjCon.boundedContextName.Replace(".","")+"Neutral"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.

#>
        #region Private Duplicated data for precondition methods
<#+   foreach(var property in cbc.mandatoryPropertyObjects)            {#>
<#+   if(!property.AllowRepeatedValues)  { #>

        /// <summary>
        /// Comprueba si existe duplicidad del campo <#= T4Help.ToCamelCase(property.AtributteName) #> de la entidad<see cref="<#= I #><#= cbc.pascalSecureEntityName #>".
        /// </summary>
        /// <param name="<#=T4Help.ToCamelCase(property.AtributteName) #>">
        /// valor del campo cuyo valor se comprueba que no este duplicado
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si existe duplicidad; en caso contrario, <b>false</b>.
        /// </returns>
        private bool Exists<#=T4Help.ToPascalCase(property.AtributteName) #>(<#=property.AtributteType #> <#=T4Help.ToCamelCase(property.AtributteName) #>, IServerContext serverContext)
        {
            return this.Exists<#=T4Help.ToPascalCase(property.AtributteName) #>(<#=T4Help.ToCamelCase(property.AtributteName) #>, 0, serverContext);
        }

        /// <summary>
        /// Comprueba si existe duplicidad del campo <#= T4Help.ToCamelCase(property.AtributteName) #> de la entidad<see cref="<#= I #><#= cbc.pascalSecureEntityName #>".
        /// </summary>
        /// <param name="<#=T4Help.ToCamelCase(property.AtributteName) #>">
        /// valor del campo cuyo valor se comprueba que no este duplicado.
        /// </param>
        /// <param name="<#= cbc.camelSecureEntityName #>Id">
        /// Identificador de <see cref="<#= I #><#= cbc.pascalSecureEntityName #>.
        /// </param>
        /// <returns>
        /// Devuelve <b>true</b> si existe duplicidad; en caso contrario, <b>false</b>.
        /// </returns>
        private bool Exists<#=T4Help.ToPascalCase(property.AtributteName) #>(
                                  <#=property.AtributteType #> <#=T4Help.ToCamelCase(property.AtributteName) #>,
                                  <#=cbc.idtype #> <#= cbc.camelSecureEntityName #>Id,
                                  IServerContext serverContext)
        {
            if (!string.IsNullOrEmpty(<#=T4Help.ToCamelCase(property.AtributteName) #>))
            {
                ISpecification<<#= I #><#= cbc.pascalSecureEntityName #>> specification = new DirectSpecification<<#= I #><#= cbc.pascalSecureEntityName #>>(c => c.<#=T4Help.ToPascalCase(property.AtributteName) #><#=(property.AtributteType.ToLower().Equals("string"))?".ToLower()":"" #>.Equals( <#=T4Help.ToCamelCase(property.AtributteName) #><#=(property.AtributteType.ToLower().Equals("string"))?".ToLower()":"" #>) );

                if (<#= cbc.camelSecureEntityName #>Id != <#=cbc.nullidtype #>)
                {
                    specification = specification.AndAlso(new DirectSpecification<<#= I #><#= cbc.pascalSecureEntityName #>>(c => c.Id != <#= cbc.camelSecureEntityName #>Id));
                }

                using (IAdapter unitOfWork = Manager.DefaultController.CreateTransactional(serverContext.Connection.ProviderName, serverContext.ConnectionString))
                {
                    var <#= cbc.camelSecureEntityName #>Repository = this.<#= cbc.pascalSecureEntityName #>RepositoryFactory.Create(unitOfWork);
                    IQueryable<<#= I #><#= cbc.pascalSecureEntityName #>> <#= cbc.pascalSecureEntityName #>List = <#= cbc.camelSecureEntityName #>Repository.GetFiltered(specification.IsSatisfiedBy());
                    unitOfWork.CommitTransaction();
                    return (<#= cbc.pascalSecureEntityName #>List.Any());
                }
            }

            return false;
        }
<#+     } //end if allow repeated values#>
<#+   }#>
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>