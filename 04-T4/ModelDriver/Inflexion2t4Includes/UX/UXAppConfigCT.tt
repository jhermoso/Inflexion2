<#+
public class UXAppConfigCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
        public ClassBaseContext cbc; 
		public string projectNamespace; 
		public ITree<BoundedContextMetadata> Skt; 
		public string KindTimeCall;
    // constructor de la plantilla con parametros
    public UXAppConfigCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt, string kindTimeCall)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; this.KindTimeCall = kindTimeCall;}

    public override string TransformText()
        {
            // uso de interfaces en las propiedades y por tanto en metodos
            //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
            string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

            // conceptos propios del projecto en curso
            ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
            // subplantillas generales
            var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
            // subplantillas epsecificas
            var usingTemplate       = new usings( cbc, projectNamespace, Skt);  string usingTxt  = usingTemplate.TransformText(); //solo los shared kernel
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<?xml version="1.0" encoding="utf-8"?>
<!-- Xml generated by a t4 template Inflexion2t4Includes.UX.UXAppConfigCT.tt -->
<configuration>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.2"/>
  </startup>
  <connectionStrings>
    <add name="<#=cbc.diagram.Product #>.Connection"
    connectionString="<#=cbc.diagram.BCConnectionString #>"/>
  </connectionStrings>

    <system.web>
    <compilation debug="true" />
  </system.web>    

<!-- copiar aqui del proyecto del proxy de wcfclient la sección de system.servicemodel-->
<!-- copy here from the wcfclient the section system.servicemodel-->

  <system.serviceModel>
    <bindings>
      <basicHttpBinding>
<#+ 
foreach(INode<ClassBase> entity in cbc.OwnClassBaseTreeBoundedContext.All.Nodes.Where(p=> p.Data is Entity ))
{
    if (entity.Data.ReferencedRootEntity != null || ( entity.Data.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract ) continue;
	if (cbc.IsRoot)
	{
	string entityName =  T4Help.ToPascalCase(T4Help.SecureName(entity.Data.Name));
#>
        <binding name="BasicHttpBinding_I<#= entityName #>Service" />
<#+
    }
}
 #>
      </basicHttpBinding>
    </bindings>
    <client>
<#+
            }
			//empieza el bloque repetición// en este caso no usamos el bloque de repetición sino que rrecoremos las entidades que son root
 #>
<#+ 
foreach(INode<ClassBase> entity in cbc.OwnClassBaseTreeBoundedContext.All.Nodes.Where(p=> p.Data is Entity ))
{
    if (entity.Data.ReferencedRootEntity != null || ( entity.Data.InheritanceClassModifier & kayak.MoneyGen.InheritClassKeywords.Abstract ) == kayak.MoneyGen.InheritClassKeywords.Abstract ) continue;
	if (cbc.IsRoot)
	{
	string entityName =  T4Help.ToPascalCase(T4Help.SecureName(entity.Data.Name));
#>
      <endpoint address="http://localhost:8733/Design_Time_Addresses/<#=cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application.WcfService/<#= entityName #>Service/"
          binding="basicHttpBinding" bindingConfiguration="BasicHttpBinding_I<#= entityName #>Service"
          contract="<#= entityName #>Reference.I<#= entityName #>Service" name="BasicHttpBinding_I<#= entityName #>Service" />
<#+
    }
}
 #>
<#+
 if(KindTimeCall.Equals("fin")  || KindTimeCall.Equals("soloUna") )
            {
#>
    </client>
  </system.serviceModel>

</configuration>
<#+ } #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
