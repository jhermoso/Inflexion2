<#+
public class WpfEntityViewXamlCsCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public WpfEntityViewXamlCsCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings   
    using System.Windows;
    using System.Windows.Controls;
    #endregion

    /// <summary>
    /// .en Interaction logic for <#= cbc.pascalSecureEntityName #>View.xaml
    /// .es Logica de interación para la vista <#= cbc.pascalSecureEntityName #>View.xaml
    /// </summary>
    /// <remarks>
    /// .en No coment
    /// .es Sin comentarios adicionales.
    /// </remarks>
    public partial class <#= cbc.pascalSecureEntityName #>View : UserControl
    {
        #region CONSTRUCTORS
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:<#= cbc.pascalSecureEntityName #>View"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:<#= cbc.pascalSecureEntityName #>View"/>.
        /// </summary>
        /// <remarks>
        /// .en No coment
        /// .es Sin comentarios adicionales.
        /// </remarks>
        public <#= cbc.pascalSecureEntityName #>View()
        {
            InitializeComponent();
            this.DataContext = new <#= cbc.pascalSecureEntityName #>ViewModel();
            // Here you can configure future filters.
            // Aqui puede introducir la configuración de futuros filtros.
  
        } // <#= cbc.pascalSecureEntityName #>QueryView Constructor
        #endregion

<#+ if (cbc.targetLinksCounter > 0)
    {
	 var counter = cbc.propertyObjects.Count();
	#>
	//.en managment focus events of children query controls 
	//.es Gestión de los eventos de "focus" en los controles para mostrar entidades hijas. 
<#+
    // continuamos con el mapping de las propiedades de las clases padres en las asociaciones 
    foreach (var property in cbc.propertyAssociationTargets)
    {
        // si no es una relación reflexiva generamos la misma pareja de métodos para los roles de target y source han de ser diferentes
        if(string.IsNullOrEmpty(property.SourceRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
            {
                continue;
            }
#>

        private void OnLoad<#= T4Help.ToPascalCase(property.Target.PluralName) #>QueryViewControl(object sender, RoutedEventArgs e)
        {
            <#= T4Help.ToPascalCase(property.Target.Name) #>QueryView.DataContext = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext).<#= T4Help.ToPascalCase(property.Target.PluralName) #>QueryVM;
            ((<#= T4Help.ToPascalCase(property.Target.Name) #>QueryViewModel)<#= T4Help.ToPascalCase(property.Target.Name) #>QueryView.DataContext).RefreshItems();
        }

		private void OnGotFocus<#= T4Help.ToPascalCase(property.Target.Name) #>QueryViewControl(object sender, RoutedEventArgs e)
        {
            var ownVm = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext);
            var vm = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext).<#= T4Help.ToPascalCase(property.Target.PluralName) #>QueryVM;
            ownVm.IsActive = false;
            vm.IsActive = true;
        }

        private void OnLostFocusQueryViewControl(object sender, RoutedEventArgs e)
        {
            var ownVm = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext);
            var vm = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext).<#= T4Help.ToPascalCase(property.Target.PluralName) #>QueryVM;
            vm.IsActive = false;
            ownVm.IsActive = true;
        }					
<#+
		counter++;
    }// end del foreach (var property in cbc.propertyAssociationSources)
#>
<#+ } // end  if (cbc.targetLinksCounter > 0) #>


<#+ if (cbc.targetLinksCounter + cbc.sourceLinksCounter > 0)
    {
	#>
        private void OnLoaded(object sender, RoutedEventArgs e)
        {
            var dc = ((<#= cbc.pascalSecureEntityName #>ViewModel)this.DataContext);

            dc.RefreshRelatedEntities();
        }
<#+ } // end  if (cbc.targetLinksCounter + cbc.sourceLinksCounter > 0) #>
    }
} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
