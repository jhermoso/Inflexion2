<#+
public class WpfEntityQueryViewXamlCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public WpfEntityQueryViewXamlCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>
<UserControl x:Class="<#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.FrontEnd.WpfModule.<#= cbc.pascalSecureEntityName #>QueryView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:enums ="clr-namespace:<#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data;assembly=<#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data"
             xmlns:controls="clr-namespace:Inflexion2.UX.WPF.Controls;assembly=Inflexion2.UX.WPF.Controls"
             xmlns:converter="clr-namespace:Inflexion2.UX.WPF.ValueConverters;assembly=Inflexion2.UX.WPF"
             xmlns:lex ="http://wpflocalizeextension.codeplex.com"
             lex:LocalizeDictionary.DesignCulture="en"
             lex:LocalizeDictionary.OutputMissingKeys="True"
             lex:ResxLocalizationProvider.DefaultAssembly="<#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources"
             lex:ResxLocalizationProvider.DefaultDictionary="<#= T4Help.SecureName(prjCon.boundedContextName) #>Resources"
			 FlowDirection="{Binding lex:LocFlowDirection Inflexion2.Resources:FrameworkResource:flow}" 
			 mc:Ignorable="d" 
             d:DesignHeight="600" d:DesignWidth="1050" Padding="5">
    <Grid>
		<Label Content="{Binding Title}"/>
        <Label Content="<#= cbc.pascalSecureEntityName #> Query View"/>
        <DataGrid x:Name="<#= cbc.pascalSecureEntityName #>DgData"
                  ItemsSource="{Binding Items}"
                  SelectedItem="{Binding SelectedItem}" 
                  controls:DataGridRowDoubleClickHandler.MethodName="NavigateToSelectedItem"         
                  AutoGenerateColumns="False"
                  SelectionMode="Extended"
                  SelectionUnit="FullRow"
                  CanUserAddRows="True"
                  CanUserReorderColumns="True"
                  CanUserResizeColumns="True"
                  CanUserResizeRows="True"
                  CanUserSortColumns="True"
                  ClipboardCopyMode="ExcludeHeader"
                  Margin="0">
			<DataGrid.Columns>
<#+ if (cbc.sourceLinksCounter > 0)
    {
	 var counter = cbc.propertyObjects.Count();
#>
                <!-- .en columns from parent relationships --> <!-- .es columnas de entidades padres -->
<#+
    // continuamos con las propiedades de las clases padres en las asociaciones 
    foreach (var property in cbc.propertyAssociationSources)
    {
        // si no es una relación reflexiva generamos la misma pareja de métodos para los roles de source y source han de ser diferentes
     //  if(string.IsNullOrEmpty(property.SourceRolName)) // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (Source) y no en la clase  origen (source) la multiplicidad minima del Source ha de ser cero. 
     //  {
     //      continue;
     //  }
		if (!(property.Source is Enumeration))
		{
#>
                <!-- Column from <#= T4Help.ToPascalCase(property.SourceRolName) #> -->
                <DataGridTextColumn     Header="{lex:Loc Needel.Common.Infrastructure.Resources:CommonResources:<#= T4Help.ToPascalCase(property.Source.Name) #>Alias}" Binding="{Binding <#= T4Help.ToPascalCase(property.Source.Name) #> }" />
<#+
		}
		else
		{
#>
                <DataGridTemplateColumn Header="{lex:Loc <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources:CommonResources:<#= T4Help.SecureName(property.Source.Name) #>Alias}" >
                    <!--Binding="{Binding Selected<#= T4Help.SecureName(property.Source.Name) #>}"-->
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <lex:EnumComboBox x:Name="<#= T4Help.SecureName(property.TargetRolName) #>" Grid.Row="3" Grid.Column="1" Type="{x:Type enums:<#= T4Help.ToPascalCase(property.Source.Name) #>}"
							    SelectedItem="{Binding Selected<#= T4Help.SecureName(property.Source.Name) #>}" IsSynchronizedWithCurrentItem="True">
								<lex:EnumComboBox.Style>
								    <Style TargetType="{x:Type lex:EnumComboBox}">
                                        <Setter Property="ItemTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <Grid>
                                                        <lex:LocProxy Source="{Binding}" x:Name="Proxy" PrependType="True" />
                                                        <TextBlock Text="{Binding Result, ElementName=Proxy}" Margin="2" FontWeight="Normal" />
                                                    </Grid>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </lex:EnumComboBox.Style>
                             </lex:EnumComboBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
<#+
		}
		counter++;
    }// end del foreach (var property in cbc.propertyAssociationSources)
#>
<#+ } // end  if (cbc.sourceLinksCounter>0) #>
<#+ if (cbc.propertyObjects.Count() > 0)
    {
#>
                <!-- .en columns from properties -->
<#+
    }
#>
<#+

	bool isenum = false;
    foreach (var property in cbc.propertyObjects)
    {
		 bool propertyIsOwnType = cbc.AccessibleClassBaseTree.All.Nodes.Where(c => property.AtributteType == T4Help.SecureName(c.Data.Name) ).Any();
		 if (propertyIsOwnType)
		 {
			var cbcProperty = cbc.AccessibleClassBaseTree.All.Nodes.First(c => property.AtributteType == T4Help.SecureName(c.Data.Name) );
			if (((kayak.MoneyGen.Enumeration) cbcProperty.Data).EnumValue.Count() > 0) /* es enum*/
			{
				isenum = true;
				bool isEditableQuery = false;
				if (!isEditableQuery)
				{
#>
        <DataGridTemplateColumn     Header="<#= T4Help.ToPascalCase(property.AtributteName) #>" >
            <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                    <TextBlock >
                        <lex:EnumRun PrependType="False" EnumValue="{Binding <#=cbc.pascalSecureEntityName + "_" + T4Help.ToPascalCase(property.AtributteName) #>}"  />
                    </TextBlock>
                </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
        </DataGridTemplateColumn>
<#+
               }
			   else
			   {
#>
                
<#+
			   }
			}
		 }
		 if (!isenum)
		 {
			if ( property.AtributteType == "bool")
			{
#>
                <DataGridCheckBoxColumn Header="{lex:Loc <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources:<#= T4Help.SecureName(prjCon.boundedContextName) #>Resources:<#=cbc.pascalSecureEntityName + "_" + T4Help.ToPascalCase(property.AtributteName) #>Alias}" Binding="{Binding <#= T4Help.ToPascalCase(property.AtributteName) #>}"/>
<#+
            }
			else
			{
#>
                <DataGridTextColumn     Header="{lex:Loc <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources:<#= T4Help.SecureName(prjCon.boundedContextName) #>Resources:<#=cbc.pascalSecureEntityName + "_" + T4Help.ToPascalCase(property.AtributteName) #>Alias}" Binding="{Binding <#= T4Help.ToPascalCase(property.AtributteName) #>}"/>
<#+
			}
		}
    }
#>


            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
