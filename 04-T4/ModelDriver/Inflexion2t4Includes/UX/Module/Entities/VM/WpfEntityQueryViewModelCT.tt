<#+
public class WpfEntityQueryViewModelCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public WpfEntityQueryViewModelCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en métodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";
        bool Secured = cbc.MainEntityStereotype.Contains("Bussiness"); // si es una entidad de negocio entoces esta securizada es decir necesita identificación y autorización

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings   
    using System;
    using System.Collections.ObjectModel;
    using System.Linq;
    using System.ServiceModel;
    using System.Windows;
    using System.Windows.Input;

    using Microsoft.Practices.Prism.Commands;

    using Inflexion2.Domain;
    using Inflexion2.UX.WPF;
    using Inflexion2.UX.WPF.MVVM.CRUD;

    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application.Dtos;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Application.WcfClient.<#= cbc.secureEntityName #>Reference;
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Infrastructure.Resources;
    using System.Collections.Generic;
    using Inflexion2.Application;
    using Microsoft.Practices.Prism.Events;
    #endregion

    /// <summary>
    /// .en Interaction logic for <#= cbc.pascalSecureEntityName #>QueryView.xaml
    /// .es Logica de interación para la vista <#= cbc.pascalSecureEntityName #>QueryView.xaml
    /// </summary>
    public partial class <#= cbc.pascalSecureEntityName #>QueryViewModel : Inflexion2.UX.WPF.MVVM.CRUD.QueryViewModel<<#= cbc.pascalSecureEntityName #>ViewModel, <#= cbc.pascalSecureEntityName #>View, <#= cbc.idtype #>>
    {
<#+ if (Secured){#>
        #region FIELDS
        /// <summary>
        /// .en Private variable with a reference to the security context of the user.
        /// .es Variable privada que hace referencia al contexto de seguridad del usuario.
        /// </summary>
        //private UserContextDto userContext; //TODO: descomentar al implementar seguridad     
        #endregion
<#+  } #>

        #region CONSTRUCTORS
        /// <summary>
        /// .en Initialize a new instace for the class <see cref="T:<#= cbc.pascalSecureEntityName #>QueryViewModel"/>.
        /// .es Inicializa una nueva instancia de la clase <see cref="T:<#= cbc.pascalSecureEntityName #>QueryViewModel"/>.
        /// </summary>
        public <#= cbc.pascalSecureEntityName #>QueryViewModel()
            :base()
        {
            if (!this.IsDesignTime)
            {
                this.ChangeActivateStatusCommand = new DelegateCommand(this.Reset<#= cbc.secureEntityName #>);
            }

            // https://github.com/SeriousM/WPFLocalizationExtension/issues/87#issuecomment-174510689
            // bind the property title of the VM to a dependecy property for the view. To allow the localization of the property tittle.
            // becouse this property don´t belong the clas UserControl who is the base for the view
            // but avalon dock uses this property to set the title of the dockable elements
            // if we wont tha this can be updated when the selected culture is changed we need this work arround.
            var targetProperty = this.GetType().GetProperty(nameof(<#= cbc.pascalSecureEntityName #>QueryViewModel.Title));
            var locBinding = new WPFLocalizeExtension.Extensions.LocTextExtension("<#= cbc.pascalSecureEntityName #>PluralEntity");
            locBinding.SetBinding(this, targetProperty);

            // after to bind the property with the depdendecy property watch if theres is a change of the 
            // the culture to raise an event to warning that the title property has changed
            WPFLocalizeExtension.Engine.LocalizeDictionary.Instance.PropertyChanged += (sender, e) =>
            {
                if (e.PropertyName == "Culture")
                {
                    this.RaisePropertyChanged(() => Title);
                }
            };

<#+ if (Secured){#>
            // Contexto de seguridad.
            //this.userContext = ApplicationContext.UserContext;
<#+  } #>  
        } // <#= cbc.pascalSecureEntityName #>QueryView Constructor

<#+
	if (cbc.TotalLinksSources > 0)
    {
#>
        /// <summary>
        /// Constructor for nested view models in master detail from parent entities
        /// </summary>
        /// <param name="baseFilter"></param>
        /// <param name="parentViewName"></param>
        public <#= cbc.pascalSecureEntityName #>QueryViewModel(SpecificationDto baseFilter, string parentViewName )
            : this()
        {
            this.Specification = baseFilter;
            this.ParentViewName = parentViewName;
            this.OnGetRecords("1");
            this.IsBusy = false;

            // only in this case there is a need of subscription to update a parent view
            if (!CompositeViewUpdateEvent.Contains(this.OnReceiveCompositeViewUpdateEvent))
            {
                CompositeViewUpdateEvent.Subscribe(this.OnReceiveCompositeViewUpdateEvent, ThreadOption.UIThread);
            }
        }
<#+ } // end  if (cbc.targetLinksCounter > 0) #>

        #endregion

        #region PROPERTIES
        /// <summary>
        /// .en Property to set the title of the window 
        /// .es Propiedad para establecer el Titulo de la ventana
        /// </summary>
        public override string Title { get; set; }

        /// <summary>
        /// .en Property to get the command of changing state.
        /// .es Propiedad que obtiene el comando de cambio de estado.
        /// </summary>
        /// <value>
        /// Valor utilizado para obtener el comando de cambio de estado.
        /// </value>
        public ICommand ChangeActivateStatusCommand
        {
            get;
            private set;
        }
        #endregion

        #region Methods for commands from ribbon
<#+ if (cbc.IsEntity && cbc.LogicDelete){/*si la entidad es de borrado logico añadimos una poropiedad de nombre IsActive*/#>
            // Si está activo y seleccionado.
            if (this.IsActive && this.SelectedItem != null)
            {
                try
                {
                   this.MessageBoxService.Show(
                            "Método sin implementar",
                            Application.Current.MainWindow.Title,
                            MessageBoxButton.OK,
                            MessageBoxImage.Exclamation);

                    // Instanciamos el proxy.
                    //<#= cbc.pascalSecureEntityName #>ServiceClient services = new <#= cbc.pascalSecureEntityName #>ServiceClient();

                    // ToDo :: Desarrollo - Descomentar cuando este el servicio.
                    //// Ejecutamos el servicio.
                    //bool result = services.Activate(
                    //                                this.SelectedItem.Id,
                    //                                this.userContext);
                    //bool result = false;
                    //// Comprobamos el resultado.
                    //if (result)
                    //{
                    //    // Activamos
                    //    this.SelectedItem.Activo = true;
                    //    this.MessageBoxService.Show(
                    //                                "El registro se ha activado correctamente.",
                    //                                Application.Current.MainWindow.Title,
                    //                                MessageBoxButton.OK,
                    //                                MessageBoxImage.Information);
                    //    this.RefreshCommands();

                    //}
                    //else
                    //{
                    //    this.MessageBoxService.Show(
                    //                                "¡Ha sido imposible activar el registro!",
                    //                                Application.Current.MainWindow.Title,
                    //                                MessageBoxButton.OK,
                    //                                MessageBoxImage.Exclamation);
                    //}
                }
                catch (System.Exception ex)
                {
                    // Mensaje de error.
                    this.MessageBoxService.Show(
                                                string.Format(
                                                              "¡Se ha producido un error al activar el registro!\r\n\r\n{0}",
                                                              ex.Message),
                                                Application.Current.MainWindow.Title,
                                                MessageBoxButton.OK,
                                                MessageBoxImage.Error);
                }
            }
<#+ } #>

        /// <summary>
        /// Método público encargado del borrado de una entidad .
        /// </summary>
        /// <param name="parameter">
        /// Parámetro con información adicional.
        /// </param>
        public override void OnDeleteRecord(object parameter)
        {
            try
            {
                if (this.IsActive && this.SelectedItem != null)
                {
                    // Instanciamos el proxy.

                    <#= cbc.secureEntityName #>ServiceClient serviceClient = new <#= cbc.secureEntityName #>ServiceClient();
                    // Ejecutamos el servicio.
                    bool result = serviceClient.Delete( this.SelectedItem.Id <#+ if (Secured){#>, this.userContext <#+ }#>);
                    if (result)
                    {
<#+ if (cbc.IsEntity && cbc.LogicDelete){/*si la entidad es de borrado logico añadimos una poropiedad de nombre IsActive*/#>
                        // Deactivate, Desactivamos
                        this.SelectedItem.Activo = false;
<#+ }#>
                        this.MessageBoxService.Show(
                                                    "El registro se ha borrado correctamente.", /* TODO pass to resources borrar/ deshabilitar */
                                                    Application.Current.MainWindow.Title,
                                                    MessageBoxButton.OK,
                                                    MessageBoxImage.Information);
                        UpdateParentView();

                        this.RefreshCommands();
                    }
                    else
                    {
                        this.MessageBoxService.Show(
                                                    "¡Ha sido imposible borrar el registro!",/* TODO pass to resources borrar / deshabilitar*/
                                                    Application.Current.MainWindow.Title,
                                                    MessageBoxButton.OK,
                                                    MessageBoxImage.Exclamation);
                    }

                    this.Rebind();
                }
            }
            catch (System.Exception ex)
            {
                this.MessageBoxService.Show(
                                            string.Format(
                                                          "¡Se ha producido un error al intentar borrar el registro!\r\n\r\n{0}",
                                                          ex.Message),
                                            Application.Current.MainWindow.Title,
                                            MessageBoxButton.OK,
                                            MessageBoxImage.Error);
            }
        } // OnDeleteRecord

        /// <summary>
        /// .en get records from <#= cbc.pascalSecureEntityName #>.
        /// .es Método encargado de obtener todos los registros de <#= cbc.pascalSecureEntityName #>.
        /// </summary>
        /// <param name="parameter">
        /// .en parameter with additional info
        /// .es Parámetro con información adicional.
        /// </param>
        public override void OnGetRecords(object parameter)
        {
            if (<#+if(cbc.LogicDelete){ #>this.IsActive && <#+ }#>!this.IsBusy)
            {
                this.IsBusy = true;
                // .en proxy instation // .es Instanciamos el proxy.
                <#= cbc.secureEntityName #>ServiceClient serviceClient = new <#= cbc.secureEntityName #>ServiceClient();
                try
                {
                    this.IsBusy = true;
                    PagedElements<<#= cbc.secureEntityName #>Dto> result = null;
                    //.en Asyncronous execution of the service. //.es Ejecutamos el servicio de forma asíncrona.
                    serviceClient.BeginGetPaged(this.Specification, <#+ if (Secured){#> /*this.userContext,*/<#+ }#>
                                                (asyncResult) =>
                    {
                        // Obtenemos el resultado.
                        try
                        {
                            result = serviceClient.EndGetPaged(asyncResult);
                        }
                        catch (TimeoutException e)
                        {
                            this.MessageBoxService.Show("The service operation timed out. " + e.Message);
                            serviceClient.Abort();
                        }
                        catch (FaultException<Inflexion2.Application.ValidationException> e)
                        {
                            this.MessageBoxService.Show("Validation Exception. Message: {0}", e.Message);
                            serviceClient.Abort();
                        }
                        catch (FaultException<Inflexion2.Application.InternalException> e)
                        {
                            this.MessageBoxService.Show("Internal Exception. Message: {0}", e.Message);
                            serviceClient.Abort();
                        }

                        // .en Catch unrecognized faults.This handler receives exceptions thrown by WCF
                        // services when ServiceDebugBehavior.IncludeExceptionDetailInFaults
                        // is set to true or when un - typed FaultExceptions raised.
                        catch (FaultException fe)
                        {
                            this.MessageBoxService.Show("Unhalded fault exception. Message:" + fe.Message);
                            serviceClient.Abort();
                        }
                        catch (Exception e)
                        {
                            this.MessageBoxService.Show("Unexpected exception" + e.Message);
                            serviceClient.Abort();
                            throw;
                        }

						<#+
	if (cbc.targetLinksCounter > 0)
    {
#>
                        var first = result.FirstOrDefault();
                        var last = result.LastOrDefault();

                        this.Items = new ObservableCollection<<#= cbc.secureEntityName #>ViewModel>(result.Select(i => new <#= cbc.secureEntityName #>ViewModel(i, first, result.GetPrevious(i), result.GetNext(i), last)));
<#+ }// end  if (cbc.targetLinksCounter > 0)
    else{#>
this.Items = new ObservableCollection<<#= cbc.secureEntityName #>ViewModel>(result.Select(i => new <#= cbc.secureEntityName #>ViewModel(i)));
<#+ } // else (cbc.targetLinksCounter > 0)#>
                        this.TotalRecordCount = result.TotalElements;
                        this.IsBusy = false;
                        this.RefreshPagingCommands();
                        this.Rebind();
                    },
                    null);
                }
                catch (Exception e)
                {
                    this.MessageBoxService.Show("cathed on PersonaQueryViewModel" + e.Message);
                    serviceClient.Abort();
                    throw;
                }
            }
        } // OnGetRecords

<#+
	if (cbc.targetLinksCounter > 0)
    {
#>
        /// <summary>
        /// .en Get First Page records method. 
        ///     This command answer to a call from the ribbon region tab.
        /// .es ejecutamos el servicio de ir a la primera página de la lista de registros. 
        ///     responde al command invocado desde su comando en la region del ribbon.
        /// </summary>
        /// <param name="parameter">.en aditional info to pass to this method .es informacion adicional </param>
        public override void OnGetFirstPageRecords(object parameter)
        {
            this.PageIndex = 0;            
            OnGetRecords(parameter);
        }

        /// <summary>
        /// .en Get Next Page records method. 
        ///     This command answer to a call from the ribbon region tab.
        /// .es ejecutamos el servicio de ir a la siguiente página de la lista de registros. 
        ///     responde al command invocado desde su comando en la region del ribbon.
        /// </summary>
        /// <param name="parameter">.en aditional info to pass to this method .es informacion adicional </param>
        public override void OnGetNextPageRecords(object parameter)
        {
            this.PageIndex++;
            OnGetRecords(parameter);
        }

        /// <summary>
        /// .en Get Previus Page records method. 
        ///     This command answer to a call from the ribbon region tab.
        /// .es ejecutamos el servicio de ir a la página anterior de la lista de registros. 
        ///     responde al command invocado desde su comando en la region del ribbon.
        /// </summary>
        /// <param name="parameter">.en aditional info to pass to this method .es informacion adicional </param>
        public override void OnGetPreviousPageRecords(object parameter)
        {
            this.PageIndex--;
            OnGetRecords(parameter);
        }

        /// <summary>
        /// .en Get Last Page records method. 
        ///     This command answer to a call from the ribbon region tab.
        /// .es ejecutamos el servicio de ir a la ultima página de la lista de registros. 
        ///     responde al command invocado desde su comando en la region del ribbon.
        /// </summary>
        /// <param name="parameter">.en aditional info to pass to this method .es informacion adicional </param>
        public override void OnGetLastPageRecords(object parameter)
        {
            this.PageIndex = this.TotalPagesCount;
            OnGetRecords(parameter);
        } 
<#+ } // end  if (cbc.targetLinksCounter > 0) #>
        #endregion

        #region PRIVATE METHODS

        /// <summary>
        /// .es Método privado para resetear el ViewModel.
        /// </summary>
        private void Reset<#= cbc.secureEntityName #>()
        {
<#+ if (Secured){#>
            if (CanActivateRecord(null))
            {
                OnActivateRecord(null);
            }
			else
<#+ } #>
            if (CanDeleteRecord(null))
            {
                OnDeleteRecord(null);
            }
        } // Reset<#= cbc.secureEntityName #>

<#+
	///if (cbc.sourceLinksCounter > 0 || cbc.targetLinksCounter > 0)
    //{
#>
        /// <summary>
        /// .en refresh the collection of items raising a property changed event
        /// </summary>
        /// <param name="navigationContext"></param>
        public override void OnNavigatedTo(Microsoft.Practices.Prism.Regions.NavigationContext navigationContext)
        {
            base.OnNavigatedTo(navigationContext);
        }

        internal void RefreshItems()
        {
            RaisePropertyChanged(() => this.Items);
        }
<#+ //} // end  if (cbc.sourceLinksCounter > 0) #>

        #endregion
    }// <#= cbc.secureEntityName #>QueryViewModel
} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
