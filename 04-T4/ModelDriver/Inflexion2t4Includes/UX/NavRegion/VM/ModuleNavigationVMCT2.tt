<#+

public class ModuleNavigationVMCT2 : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
        
    public ModuleNavigationVMCT2(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
        KindTimeCall = kindTimeCall;
    }
        
    public override string TransformText()
    {
            // uso de interfaces en las propiedades y por tanto en metodos
            //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
            string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

  // conceptos propios de la clase
  string baseEntity= null;
  // conceptos propios del projecto en curso
  ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);

  IList<string> sharedKernelUsings = null;
  if (Skt != null)
  {
      sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
  }
  var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1) );
  var usingTemplate  = new usings( cbc, projectNamespace, Skt);   string usingTxt = usingTemplate.TransformText(); //solo los shared kernel

        string cpyrigthText = cpyrigth.TransformText(); 
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    #region usings
    using System.Windows.Input;
    using Inflexion2.UX.WPF.MVVM;
    using Inflexion2.UX.WPF.MVVM.Commands;
    using Inflexion2.UX.WPF.MVVM.ViewModels;
    #endregion

    /// <summary>
    /// navigation viewmodel for the bounded context <#= prjCon.boundedContextName #> .
    /// </summary>
    public partial class <#= prjCon.boundedContextName #>ModuleNavigationViewModel : NavigationViewModel
    {

        #region Private Methods
        /// <summary>
        /// Inicializa el modelo de vista.
        /// </summary>
        private void Initialize()
        {
            //this.<#= prjCon.boundedContextName #>View = new NavigationCommand<<#= prjCon.boundedContextName #>ModuleNavigationViewModel>(
                //this, RegionNames.ToolbarRegion, typeof(<#= prjCon.boundedContextName #>RibbonTab).FullName);
<#+
            }
            // en el siguiente bloque viene le codigo que se repite para cada entidad
#>
<#+if (cbc.IsRoot) {#>
            this.Show<#= cbc.pascalSecureEntityName #>View = new NavigationCommand<<#= prjCon.boundedContextName #>ModuleNavigationViewModel>(
                this, RegionNames.WorkspaceRegion, typeof(<#= cbc.pascalSecureEntityName #>QueryView).FullName);

<#+ }#>
<#+
    // bloque de cierre
    if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
        }// end initialize
        #endregion
    }// end class
}// end namespace
<#+         } #>
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>