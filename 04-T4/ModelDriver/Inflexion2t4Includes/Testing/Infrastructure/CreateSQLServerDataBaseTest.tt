<#+
public class CreateSQLServerDataBaseTest : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; 
    public string projectNamespace; 
    public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public CreateSQLServerDataBaseTest(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";
        if (true) Debug.WriteLine(string.Format("cbc ='{0}'",cbc,projectNamespace, Skt ));
                                          
        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings
    using System;
    using System.Text;
    using System.Collections.Generic;
    using System.Linq;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System.Data.Entity;
    using Microsoft.Practices.Unity;
    using Inflexion2.Domain;
    using Inflexion2;
    using Inflexion2.Infrastructure;
    using Inflexion2.Data;
    using Inflexion2.Security;
    using System.Configuration;

<#+ if (cbc.OwnBoundedContextHasEnums) {#>
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.Data;
<#+ } #>
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain;
    using <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Infrastructure;
    #endregion

    // test de creación de la base de datos para sqlserver
    [TestClass]
    public class <#= prjCon.boundedContextName #>CreateDaBase 
    {
        <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.PerLifeTimeManager unitOfWorkPerTestLifeTimeManager = new <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.PerLifeTimeManager();
        <#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Domain.PerLifeTimeManager contextPerTestLifeTimeManager = new PerLifeTimeManager();
        Microsoft.Practices.Unity.UnityContainer unityContainer;
        string connString = null;

        [TestMethod]
        public void DataBaseCreateTest()
        {
            this.unityContainer = new UnityContainer();

            ServiceLocator.Initialize(
                (x, y) => this.unityContainer.RegisterType(x, y),
                (x, y) => this.unityContainer.RegisterInstance(x, y),
                (x) => { return this.unityContainer.Resolve(x); },
                (x) => { return this.unityContainer.ResolveAll(x); });

            // Context Factory
            connString = this.ConnectionString();
            RootAggregateFrameworkUnitOfWorkFactory<<#= prjCon.company #>.<#= prjCon.product #>.<#= prjCon.boundedContextName #>.Infrastructure.BootstrapUnitOfWork> ctxFactory = new RootAggregateFrameworkUnitOfWorkFactory<BootstrapUnitOfWork>(connString);

            if (!ctxFactory.DatabaseExists())
            {
                ctxFactory.CreateDatabase();
            }
            Assert.AreEqual(true, ctxFactory.DatabaseExists());
        }// end data base create

        #region Common Methods
        protected virtual string ConnectionString()
        {
            return System.Configuration.ConfigurationManager.ConnectionStrings["<#= prjCon.product #>.Connection"].ConnectionString;<#+ // TODO: en el futuro habra que sustituir este por el contexto limitado en caso de que cada uno tenga su cadena de conexión. #>
        }

        public void Commit()
        {
            IUnitOfWork unitOfWork = this.unityContainer.Resolve<IUnitOfWork>();
            unitOfWork.Commit();
        }
        #endregion
    }



} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
