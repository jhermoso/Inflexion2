<#+

public class CreateBaseToolAppXamlCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
        public ITree<ClassBase> boundedContextElements;
        
    public CreateBaseToolAppXamlCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall, ITree<ClassBase> entitiesTree)
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
            KindTimeCall = kindTimeCall;
            boundedContextElements = entitiesTree;
        }
        
    public override string TransformText()
        {

            //IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
            //string company              = NameSpaceSection[0];
            //string product              = NameSpaceSection[1];
            //string boundedContextName   = NameSpaceSection[2];
            //string layer                = NameSpaceSection[3];
            //string kindProject          = NameSpaceSection[4];

            //var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            // string cpyrigthText = cpyrigth.TransformText(); // en principio esta linea se comenta pues no tenemos un texto de copywrigth para los fichero
            // =proyecto = namespace = Company.Boundecontext1.BoundeDContex2....BoundeDContexN.Infraestructure.Maps.nHibernate31.Oracle
            // la estrategia de generación es de un fichero por clase debido a que podemos tener varias formas de mapear la herencia en una misma taxonomia 
            // y nhibernate nos exige que si en una misma taxonomia hay varias formas de herencia entonces se han de utilizar ficheros separados
            // 2ª las clases base son Class
            // Las clases que heredan de otra son 

        // conceptos propios del projecto en curso
        //ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
//
        //string ResxFileName = prjCon.boundedContextName.Replace(".","") + "Resources"; // este el nombre del fichero que contiene los recursos del contexto limitado en el que nos encontramos.
//
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<Application 
    x:Class="Create<#= cbc.diagram.Product #>DataBase.App"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="pack://application:,,,/PresentationFramework.Aero;V3.0.0.0;31bf3856ad364e35;component\themes/aero.normalcolor.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>

<#+
            }
 #>




<#+
 if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>

<#+         } #>

<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>