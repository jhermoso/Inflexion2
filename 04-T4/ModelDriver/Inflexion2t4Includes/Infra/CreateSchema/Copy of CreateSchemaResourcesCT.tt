<#+

public class CreateSchemaResourcesCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
    public string KindTimeCall ; /* Los valores posibles son "inicio", "desarrollo", "fin" y "soloUna" */
    public string Language; /* el valor nulo es para el lenguaje por defecto con el valor original, para cualquier otro se traduce */
    public string SplitTag;
    public string ValueCommentRex;
        
    public CreateSchemaResourcesCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt, string kindTimeCall, string language,  string keyValueCommentRex, string spliTag = "[%", string copyTag = "Ç*", string processTag = "&*")
        {
            cbc = classBaseContext;             // contexto de la clase base a interpretar
            projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
            Skt = skt;                          // shared kernel tree
            KindTimeCall = kindTimeCall;
            Language = language; // Iso code de 2 letras para la la lengua a traducir indica si se coloca le texto original o si se ha de traducir a la lengua indicada

        }
        
    public override string TransformText()
        {
            //IList<string> sharedKernelUsings = null;
            //if (Skt != null)
            //{
                //sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
            //}
            //IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
            //string company              = NameSpaceSection[0];
            //string product              = NameSpaceSection[1];
            //string boundedContextName   = NameSpaceSection[2];
            //string layer                = NameSpaceSection[3];
            //string kindProject          = NameSpaceSection[4];

            //var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
            // string cpyrigthText = cpyrigth.TransformText(); // en principio esta linea se comenta pues no tenemos un texto de copywrigth para los fichero
            // =proyecto = namespace = Company.Boundecontext1.BoundeDContex2....BoundeDContexN.Infraestructure.Maps.nHibernate31.Oracle
            // la estrategia de generación es de un fichero por clase debido a que podemos tener varias formas de mapear la herencia en una misma taxonomia 
            // y nhibernate nos exige que si en una misma taxonomia hay varias formas de herencia entonces se han de utilizar ficheros separados
            // 2ª las clases base son Class
            // Las clases que heredan de otra son 
            
            if (Language.Length != 2 ) throw Exception("El lenguaje pasado no es un iso code de longitud 2");

            string RexValueTranslated  = "";
            string RexRemarkTranslated = "Opción de idioma de la aplicación";
            
            string OriginalLanguage = (Language != null)?cbc.diagram.Culture : Language;



            if ( !OriginalLanguage.Equals("es"))
            RexRemarkTranslated = Translator.BingService( 
                                                            RexRemarkTranslated, 
                                                            "es", 
                                                            Language
                                                        ); //cbc.diagram.Culture, Language
            
#>
<#+
            if(KindTimeCall.Equals("inicio") | KindTimeCall.Equals("soloUna") )
            {
#>
<?xml version="1.0" ?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
<#+ // Comienza la lista de valores fijos para el fichero de recursos #>
  <data name="flow" xml:space="preserve">
    <value>LeftToRight</value>
    <comment>dirección de lectura del idioma al que pertenece el fichero de recursos</comment>
  </data>
  <data name="Ninguno" xml:space="preserve">
    <value><#= ( Language == null )? "Ninguno" : RexValueTranslated  #></value>
    <comment>ComboBoxItem.Content</comment>
  </data>
  <data name="Open" xml:space="preserve">
    <value><#= ( Language == null )? "Open" : RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="Seleccionesuidioma" xml:space="preserve">
    <value><#= ( Language == null )? "Seleccione su idioma" :                       RexValueTranslated  #></value>
    <comment>Label.Content</comment>
  </data>
  <data name="SelectTheme" xml:space="preserve">
    <value><#= ( Language == null )? "Seleccione el estilo de interface" :          RexValueTranslated  #></value>
    <comment>Label.Content</comment>
  </data>
  <data name="SistemaOperativo" xml:space="preserve">
    <value><#= ( Language == null )? "Sistema Operativo" :                          RexValueTranslated  #></value>
    <comment>ComboBoxItem.Content</comment>
  </data>
  <data name="GestordeEsquemasdeBD" xml:space="preserve">
    <value><#= ( Language == null )? "Gestor de Esquemas de BD" :                   RexValueTranslated  #></value>
    <comment>Window.Title</comment>
  </data>
  <data name="ContextoLimitado" xml:space="preserve">
    <value><#= ( Language == null )? "Contexto Limitado" :                          RexValueTranslated  #></value>
    <comment>TabItem.Header</comment>
  </data>
  <data name="Tecnologíadelabasededatos" xml:space="preserve">
    <value><#= ( Language == null )? "Tecnología de la base de datos:" :            RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="Nombredelabasededatos" xml:space="preserve">
    <value><#= ( Language == null )? "Nombre de la base de datos:" :                RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="Nombredelservidor" xml:space="preserve">
    <value><#= ( Language == null )? "Nombre del servidor:" :                       RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="usuario" xml:space="preserve">
    <value><#= ( Language == null )? "usuario:" :                                   RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="contraseña" xml:space="preserve">
    <value><#= ( Language == null )? "contraseña:" :                                RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="ScriptCreación" xml:space="preserve">
    <value><#= ( Language == null )? "Script Creación:" :                           RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="ScriptActualización" xml:space="preserve">
    <value><#= ( Language == null )? "Script Actualización:" :                      RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="MsSql2008" xml:space="preserve">
    <value><#= ( Language == null )? "MsSql2008" :                                  RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="NH3BeginnersGuide" xml:space="preserve">
    <value><#= ( Language == null )? "NH3BeginnersGuide" :                          RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="JHERMOSOPC" xml:space="preserve">
    <value><#= ( Language == null )? "JHERMOSO-PC:" :                               RexValueTranslated  #></value>
    <comment>TextBlock.Text</comment>
  </data>
  <data name="usuario1" xml:space="preserve">
    <value><#= ( Language == null )? "usuario" :                                    RexValueTranslated  #></value>
    <comment>TextBox.Text</comment>
  </data>
  <data name="contraseña1" xml:space="preserve">
    <value><#= ( Language == null )? "contraseña" :                                 RexValueTranslated  #></value>
    <comment>TextBox.Text</comment>
  </data>
  <data name="BorraryCrearEsquemaProduct" xml:space="preserve">
    <value><#= ( Language == null )? "Borrar y Crear Esquema Product" :             RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="ActualizarEsquemaProduct" xml:space="preserve">
    <value><#= ( Language == null )? "Actualizar Esquema Product" :                 RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="AñadirDatosMaquetaProduct" xml:space="preserve">
    <value><#= ( Language == null )? "Añadir Datos Maqueta Product" :               RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="BorrarDatosMaquetaProduct" xml:space="preserve">
    <value><#= ( Language == null )? "Borrar Datos Maqueta Product" :               RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="ScriptSqlBorraryCrearEsquemaPr" xml:space="preserve">
    <value><#= ( Language == null )? "Script Sql Borrar y Crear Esquema Product" :  RexValueTranslated  #></value>
    <comment>Button.Content</comment>
  </data>
  <data name="ScriptSqlactualizaresquemaProd" xml:space="preserve">
    <value><#= ( Language == null )? "" :                                           RexValueTranslated  #>Script Sql actualizar esquema Product</value>
    <comment>Button.Content</comment>
  </data>
  <data name="Ayuda" xml:space="preserve">
    <value><#= ( Language == null )? "" :                                           RexValueTranslated  #>Ayuda</value>
    <comment>TabItem.Header</comment>
  </data>
  <data name="Elobjetodeestaaplicacióneselde" xml:space="preserve">
    <value>
El objeto de esta aplicación es el de generar y actualizar las bases
de datos de cada uno de los contextos limitado o de los módulos de 
la aplicación.
Para ello se tiene una pestaña para cada uno de los contextos 
limitados que se han modelado y dentro de cada uno de estos contextos
se puede crear una estructura de base de datos. Si existe la versión 
existente se destruye previamente. Actualizar el esquema de la base 
de datos el cual no destruye la versión anterior ni borra los datos 
existentes mientras la actualización no destruya ninguan tabla en cuyo
caso si se destruiria. Y por ultimo añadir registros con contenido 
aleatorio para poder realizar pruebas.
Todas estas operaciones exigen que en el sistema de bases datos se 
haya dado de alta dicha base de datos aunque no es ncesario que dicha 
base de datos tenga ningún esquema.
                        </value>
    <comment>TextBox.Text</comment>
  </data>

<#+ // Finaliza la lista de valores fijos para el fichero de recursos #>
<#+ 
    // recorremos los lenguajes 
    //en realidad los recorremos 2 veces una por fuera de esta plantilla para generar un fichero de recursos por cada lenguaje
    // y un segunda aqui dentro para traducir a su idioma cada uno de dichos lenguajes.
    // los codigos iso tambien se incluyen por si acaso existen grafias diferentes de la standar occidental. (cirilico, hebreo, arabe etc.)
    
    string LanguagesSet1 = cbc.diagram.App.TranslationsSet1.ToString();
    string LanguagesSet2 = cbc.diagram.App.TranslationsSet2.ToString();
    string[] LanguageArray1 = LanguagesSet1.Split(',');// el split lo realiza incluyendo el espacio 
    string[] LanguageArray2 = LanguagesSet2.Split(',');
    List<string> TranslationList = new List<string>();
    TranslationList.AddRange(LanguageArray1);
    TranslationList.AddRange(LanguageArray2);

    RexRemarkTranslated = "Language";
    RexValueTranslated = "";
    string Isocode= "";
    string IsocodeFormated= "";
    string SecureIsocode= "";
    string ResKeytrimed= "";
    foreach(string ResxKeyTranslation in TranslationList)
    {
        RexValueTranslated = Translator.BingService( 
                                                    ResxKeyTranslation.Trim(), 
                                                    "en", 
                                                    Language
                                                  ); //cbc.diagram.Culture, Language
        if (string.IsNullOrEmpty(ResxKeyTranslation)) break;
                    
        ResKeytrimed = ResxKeyTranslation.Trim();
        Isocode = T4Help.GetCultureISOCode2FromEnglishLanguageName( ResKeytrimed );
        SecureIsocode = Isocode.Replace("-","");
        IsocodeFormated = String.Format( "({0})", Isocode );
                    

#>
    <data name="<#= ResKeytrimed #>" xml:space="preserve">
        <value><#= ( Language == null )? ResKeytrimed : RexValueTranslated  #></value>
        <comment><#= RexRemarkTranslated #></comment>
    </data>
    <data name="<#= Isocode #>" xml:space="preserve">
        <value><#= IsocodeFormated  #></value>
        <comment>2 chars Language-culture Iso code </comment>
    </data>
<#+
    }
#>
<#+ // recorremos los temas #>
<#+
            }// fin del inicio
#>

<#+
 if(KindTimeCall.Equals("fin")  | KindTimeCall.Equals("soloUna") )
            {
#>
</root>
<#+         } #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>



