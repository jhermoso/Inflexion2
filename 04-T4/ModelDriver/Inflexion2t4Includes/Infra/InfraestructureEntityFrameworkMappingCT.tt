<#+
public class InfraestructureEntityFrameworkMappingCT : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    public ClassBaseContext cbc; public string projectNamespace; public ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public InfraestructureEntityFrameworkMappingCT(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
        // subplantillas generales
        var cpyrigthTemplate    = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));  string cpyrigthText = cpyrigthTemplate.TransformText();
        // subplantillas epsecificas
        var usingTemplate       = new usings( cbc, projectNamespace, Skt);                         string usingTxt     = usingTemplate.TransformText(); //solo los shared kernel

		string classBaseName = "EntityConfiguration";
	//	if (cbc.MainEntityStereotype.Contains("Entity") )
	//	  {
	//		classBaseName = "BaseEntityConfiguration"; 
	//	  }
#>

<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
<#= usingTxt #>
    #region usings
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Data.Entity.ModelConfiguration.Configuration;
    using Inflexion2.Domain;

<#+ if (cbc.OwnBoundedContextHasEnums) {#>
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain.Data;
<#+            } #>
    using <#= cbc.diagram.RootNameSpace #>.<#= prjCon.boundedContextName #>.Domain;

    #endregion

    /// <summary>
    /// inicializa una nueva instancia de <#= (cbc.IsEntity)?" una entidad":"un objeto valor" #> <#= cbc.pascalSecureEntityName #>/>.
    /// </summary>
    /// <remarks>
    /// Mapea un objeto <see cref="<#= I #><#= cbc.pascalSecureEntityName #>"/>
    /// </remarks>
     public class <#= cbc.pascalSecureEntityName #>Configuration : <#= classBaseName #><<#= cbc.pascalSecureEntityName #>, <#= cbc.idtype #>>
    {
        #region Constructors

        /// <summary>
        /// inicializa una nueva instancia de <see cref="<#= cbc.pascalSecureEntityName #>Configuration"/>.
        /// </summary>
        public <#= cbc.pascalSecureEntityName #>Configuration()
        {
            // remember the "Id" property is mapped in the base class. with a default name for the database table.
            <#+if(String.IsNullOrEmpty(cbc.entity.AliasDataBase.Trim())){ #>this.ToTable("<#= cbc.pascalSecureEntityName #>");<#+}else{ #> this.ToTable("<#=cbc.entity.AliasDataBase.Trim()#>"); <#+} #>//Inflector.Underscore(typeof(<#= cbc.pascalSecureEntityName #>).Name

<#+
    // solo las propiedades que provienen de atributos que son de tipo valor pueden ser nullables.
    // igualmente todas las propiedades que se basan en estructs pueden ser get o set 
    // mientras que aquellas que no son structs no pueden tener un set público.
    foreach (var property in cbc.propertyObjects)
    {
#>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) || property.LiveCycleAtributte.Equals(LiveCycleAtributte.Derivado)) {#>

            this.Property(e => e.<#= T4Help.SecureName(property.AtributteName) #>)<#= (property.AtributteType !="DateTime" && (property.RequestUponCreation==RequestUponCreation.yes || !property.IsNullable ))?".IsRequired()":(property.IsNullable)?".IsOptional()":""#><#= (!property.AtributteType.ToLower().Equals("string")? "":(string.IsNullOrEmpty(property.Size))?"":".HasMaxLength("+ property.Size.ToString()+")" ) #>;
<#+ } // end LiveCycleAtributte #>
<#+ } // end foreach propertyObjects #>
<#+
    foreach (var property in cbc.propertyAssociationSources)
            {
                // este mapeado supone que 
                // inverse significa que la responsabilidad de salvar esta en la otra entidad.
                // Acces.camelCaseField() el aceso se hace a traves del campo privado que publica las operaciones por que la propiedad es solo un enumerable.
                // CAscadeAllDeleteOrphan significa que cuando se salva/borra la entidad se salvan/borran todos sus hijos.
#>
<#+ if ( property.Source is Enumeration ) {#>
            this.Property(e => e.<#= T4Help.SecureName(property.TargetRolName) #>)<#=(property is Composition)?".IsRequired()":"" #>;
<#+            } #>
<#+ if ( property.Source is Entity ) {#>
<#+ if ( string.IsNullOrEmpty(  property.TargetRolName.Trim())  ) {#>
            //this.Property(x => x.<#= T4Help.ToPascalCase(property.TargetRolName) #>.Id)<#=(property is Composition)?".IsRequired()":"" #>.HasColumnName(@"Id<#= T4Help.ToPascalCase(property.Source.Name) #>");
<#+     } #>
<#+ } #>
<#+ if ( property.Source is ObjectValue) {#>

            //this.Property<(x => x.<#= T4Help.ToPascalCase(property.TargetRolName) #>, (c) =>
                //{
<#+
        // TODO: es necesario cambiar esto por un recorrido recursivo de los objetos valor en composición.
        var propertiesCollection = ClassBaseHasAtributtes.GetAtributtes(property.Source);
                    foreach(var atribute in propertiesCollection){#>
                    this.Property(e => e.<#= T4Help.ToPascalCase(property.Source.Name) #>.<#=T4Help.SecureName(atribute.AtributteName) #>)<#=(property is Composition)?".IsRequired()":"" #>;
<#+                    }#>
                //});

<#+            } #>
<#+ } // end foreach propertyAssociationSources #>
<#+
    foreach (var property in cbc.propertyAssociationTargets)
    {
    // TODO: en entity framework el mapeado es asimetrico y en agrgación y composición tenemos 3 casos:
    // 1) propiedades de navegación en ambos lados: se escribe el mapeo aqui pero no en los hijos.
    // 2) propiedades de navegación aqui pero no en los hijos se escribe el mapeo aqui pero de forma diferente.
    // 3) propiedades de navegación en el lado contrario, aqui no aparecen en el recorrido. 
    //  por tanto solo es necesario recorrer en cada ladao y preguntar si tiene rol en el otro para decidir el mapeo correcto.
    // ejemplo mapeo con propiedad de navegación en ambos lados.
    if (!string.IsNullOrEmpty(  property.SourceRolName.Trim()) ){
#>

            this.HasMany<<#= T4Help.ToPascalCase(property.Target.Name) #>>(x => x.<#= T4Help.ToPascalCase(property.SourceRolName) #>)
<#+ 
		if(  IsMinMultiplicityOne(property.TargetMultiplicity))
		{
#>
				.WithRequired(y =>y.<#= T4Help.ToPascalCase(property.TargetRolName) #>)
				.WillCascadeOnDelete(<#= T4Help.ToCamelCase(property.CascadeDelete.ToString()) #>)
<#+
		}
#>
                ;
<#+ } // end foreach propertyAssociationTargets #>
<#+ } // end foreach propertyAssociationTargets #>
        }
        #endregion
    } // 

} //  <#= projectNamespace #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
