<#+ 

public class InfraestructureEntityRepositoryFactoryCT : Template
{
    // parametros de la plantilla
    public ClassBaseContext  cbc ;
    public string projectNamespace;
    public ITree<BoundedContextMetadata> Skt;
        
    public InfraestructureEntityRepositoryFactoryCT(ClassBaseContext  classBaseContext, string nombreProjecto, ITree<BoundedContextMetadata> skt)
    {
        cbc = classBaseContext;             // contexto de la clase base a interpretar
        projectNamespace = nombreProjecto;  // nombre del proyecto para el que estamos interpretando
        Skt = skt;                          // shared kernel tree
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        IList<string> sharedKernelUsings =  GetSharedKernelReferencesByProject(projectNamespace, Skt, cbc.diagram);
        IList<string> NameSpaceSection = SplitNamesProjects(projectNamespace, cbc.diagram);
        string company              = NameSpaceSection[0];
        string product              = NameSpaceSection[1];
        string boundedContextName   = NameSpaceSection[2];
        string layer                = NameSpaceSection[3];
        string kindProject          = NameSpaceSection[4];

        var cpyrigth = new CopyrightHeader(cbc.diagram, cbc.solutionInfo, cbc.entity, T4Help.getLeftStringSlice(this.ToString(), '+', -1).Substring(1));
        string cpyrigthText = cpyrigth.TransformText();
#>
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{

<#+
if (sharedKernelUsings != null)
foreach (var item in sharedKernelUsings)
    {
#>
    using <#= item #>;
<#+
    }// end foreach para los using del shared kernel
#>
    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Domain.Base;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW;
    using <#= company #>.<#= product #>.<#= boundedContextName #>.Domain.Core;
  
    /// <summary>
    /// Clase statica para obtener el repositorio con el que persistir y 
    /// obtener información a partir de entidades <see cref="<#= I #><#= cbc.pascalSecureEntityName #>"/>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    public static class <#= cbc.pascalSecureEntityName #>RepositoryFactory 
    {

        #region FUNCTIONS

            /// <summary>
            /// Método encargado de crear repositorios 
            /// de la entidad <see cref="<#= I #><#= cbc.pascalSecureEntityName #>Repository"/>.
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="unitOfWork">
            /// Parámetro de tipo <see cref="IAdapter"/> que hace referencia 
            /// a la unidad de trabajo para el acceso a datos.
            /// </param>
            /// <returns>
            /// Devuelve el repositorio <see cref="<#= I #><#= cbc.pascalSecureEntityName #>Repository"/> creado.
            /// </returns>
            public static <#= I #><#= cbc.pascalSecureEntityName #>Repository Create(IAdapter unitOfWork)
            {
                // Creamos el repositorio.
                <#= I #><#= cbc.pascalSecureEntityName #>Repository repository = new <#= cbc.pascalSecureEntityName #>Repository(unitOfWork);
                // Devolvemos el respositorio creado.
                return repository;
            } // Create

        #endregion
    } // end class <#= cbc.pascalSecureEntityName #>RepositoryFactory

} // end Namespace <#= projectNamespace #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>