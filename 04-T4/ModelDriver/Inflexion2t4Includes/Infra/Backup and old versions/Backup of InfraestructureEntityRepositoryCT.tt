<#+ 

public class InfraestructureEntityRepositoryCT : Template
{
    // parametros de la plantilla
    public DslContextDefinitionDiagram  diagram ;
    public ActiveSolution               solutionInfo ;
    public ClassBase                       entity ;
    public string                       projectNamespace;
    public string                       secureBdName;
        
    public InfraestructureEntityRepositoryCT(DslContextDefinitionDiagram  d, ActiveSolution s, ClassBase e, string bd)
    {
        diagram = d;
        solutionInfo = s;
        entity = e;
        secureBdName = bd;
    }
        
    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        bool IsEntity = entity is Entity; // ClassBase
        string company = T4Help.SecureName(this.diagram.Company.ToString());
        string idtype = (diagram.IdKind.Equals("Autonumerical"))  ? "int" : "Guid";
        string secureEntityName = T4Help.SecureName(entity.Name);
        string accesModifier = GetStringInherintaceClassModifier(entity.InheritanceClassModifier); //  GetStringAccesModifier
        string pascalSecureEntityName = T4Help.ToPascalCase(secureEntityName);
        string camelSecureEntityName = T4Help.ToCamelCase(secureEntityName);
        
        LinkedElementCollection<Atributte> propertyObjects = ClassBaseHasAtributtes.GetAtributtes(entity); // este metodo es definido en el dsl domainRealtionship public partial class ClassBaseHasAtributtes 
        var mandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes);
        var nonMandatoryPropertyObjects = propertyObjects.Where(att => att.RequestUponCreation != RequestUponCreation.yes);
        int numEntityFieldsMandatory= propertyObjects.Where(att => att.RequestUponCreation == RequestUponCreation.yes).Count();
        int numEntityFields= propertyObjects.Count;

        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationTargets = Association.GetLinksToTargets(entity); // lista de propiedades obtenidas de las relaciones de destino
        var mandatoryPropertyFromTargets = propertyAssociationTargets.Where( p=> p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.TargetMultiplicity==kayak.MoneyGen.Multiplicity.OneMany); // subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno
        System.Collections.ObjectModel.ReadOnlyCollection<kayak.MoneyGen.Association> propertyAssociationSources = Association.GetLinksToSources(entity); // lista de propiedades provenientes de las relaciones de origen
        var mandatoryPropertyFromSources = propertyAssociationSources.Where( p=> p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneOne | p.SourceMultiplicity==kayak.MoneyGen.Multiplicity.OneMany);// subconjunto de propiedades de tipo mandatory de las anteriores es decri cuya multiplicidad minima es uno 

        int sourceLinksCounter= propertyAssociationSources.Count();
        int targetLinksCounter= propertyAssociationTargets.Count();
        int mandatorySourceLinksCounter= mandatoryPropertyFromSources.Count();
        int mandatoryTargetLinksCounter= mandatoryPropertyFromTargets.Count();

        int spaceformatcounter= secureEntityName.ToString().Length;
        int counter = 0;
        System.Type t;
        bool propertyIsValueType = false;

        KindComponented kindComponent = WhatTypeComponented(entity);
        string superfolder;
        string MandatoryConstructorParamns = GetConstructorParametersString( entity, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, true, false, true, true, true,camelSecureEntityName+"Dto.","");//le sumamos 21 por que son loscaracteres que hay hasta el comienzo del texto donde utilizamos esta variable. 
        string MadatoryEntityBaseConstructorParamans = "";
        string MadatoryEntityBaseConstructorParamansDefinition = "";

        bool isDerivedFromOneEntity= IsDerived( entity); // consultamos si esta entidad hereda de alguna otra por herencia simple del lenguaje.
        ClassBase entitySuperClass = null;
        string entityCore =null;
        if (isDerivedFromOneEntity)
        {
            entitySuperClass = GetSuperEntity(entity); 
            superfolder = GetSuperFolders(entity);
            MadatoryEntityBaseConstructorParamansDefinition = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, true, spaceformatcounter+23, false, false, true, true );
            MadatoryEntityBaseConstructorParamans = GetConstructorParametersString( entitySuperClass, diagram.IdKind.Equals("Autonumerical"),SelectionCriteriaAttributes.Mandatory, 80, false, spaceformatcounter+23, false, false, true, true );
        }
        if(entity.Auditable)
        {
            entityCore = "ReadWriteAuditableRepositoryBase<I"+secureEntityName+", "+idtype +">";
        }
        else
        {
            entityCore = "ReadWriteRepositoryBase< I"+secureEntityName+", "+idtype +">";
        }


        var cpyrigth = new CopyrightHeader(diagram,solutionInfo,entity);
        string cpyrigthText = cpyrigth.TransformText();
#>	
<#= cpyrigthText #>
namespace <#= projectNamespace #>
{
    using Inflexion.Framework.Domain.Core;
    using Inflexion.Framework.Domain.Base;
    using Inflexion.Framework.Infrastructure.DataAccess.UoW;
    using <#= projectNamespace.Substring(0, projectNamespace.Length -33)/*le quitamos el 'Infraestructure.Data.Repositories' y lo sustituimos por '.Domain.Core'*/ #>.Domain.Core;
  
    /// <summary>
    /// Clase pública sellada repositorio para persistir y 
    /// obtener información a partir de entidades <see cref="T:<#= I #><#= secureEntityName #>"/>.
    /// </summary>
    /// <remarks>
    /// Sin comentarios adicionales.
    /// </remarks>
    <#= accesModifier #> class <#= secureEntityName #>Repository : <#= entityCore #>, <#= I #><#= secureEntityName #>Repository
    {

        #region CONSTRUCTORS
            /// <summary>
            /// Inicializa una nueva instancia de la clase <see cref="T:<#= secureEntityName #>Repository"/>.
            /// </summary>
            /// <remarks>
            /// Sin comentarios adicionales.
            /// </remarks>
            /// <param name="unitOfWork">
            /// Parámetro de tipo <see cref="IAdapter"/> que hace referencia 
            /// a la unidad de trabajo para el acceso a datos.
            /// </param>
            /// <exception cref="System.ArgumentNullException">
            /// Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
            /// </exception>
            internal <#= secureEntityName #>Repository(IAdapter unitOfWork) : base(unitOfWork) 
            {
            } // <#= secureEntityName #>Repository Constructor

        #endregion

    } // <#= I #><#= secureEntityName #>

} // <#= projectNamespace #>
<#+
                return this.GenerationEnvironment.ToString();
            }
        }
#>