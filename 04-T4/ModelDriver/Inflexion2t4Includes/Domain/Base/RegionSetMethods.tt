<#+
public class RegionSetMethods : Template
{
    // varibles de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public RegionSetMethods(ClassBaseContext  cbc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cbc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
    {
        // uso de interfaces en las propiedades y por tanto en metodos
        //por defecto se usan interfaces con nhibernate en cualquiera e sus modalidades y no se usan con entityFramework
        string I = (cbc.diagram.ORM.Contains("ibernate"))?"I":"";

        // conceptos propios del projecto en curso
        ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
#>
        #region Métodos Set de propiedades comunes
<#+
            // Acontinuación vamos a escribir los métodos que corresponden al set privado de las propiedades que solo tienen un get.
            // Solo escribimos estos métodos si la propiedad en cuestion esta marcada como que solo tiene 'get'
            // tambien devolvemos la propia entidad en cada metodo para permitir la utilización de interfaces fluidas.
            foreach (var property in cbc.propertyObjects)
            {
                if (property.OnlyGetProperty)
                {
                    cbc.t = System.Type.GetType("System."+property.AtributteType);//
                    if (cbc.t!= null)
                    {
                        cbc.propertyIsValueType = cbc.t.IsValueType;
                    }
#>
        /// <summary>
        /// Método encargado de establecer un nuevo valor para la propiedad <#= T4Help.SecureName(property.AtributteName) #>.
        /// </summary>
        /// <remarks>
        /// <#= property.ProgramerRemarks #>
        /// </remarks>
        /// <param name="<#= T4Help.ToCamelCase(property.AtributteName) #>"> 
        /// Parametro con el que establecemos el nuevo valor de <see cref="<#= T4Help.SecureName(property.AtributteName) #>"/>. de la clase <see cref="<#= cbc.entity.Name #>"/>
        /// </param>
        /// <returns>
        /// Devuelve <#= (cbc.IsEntity)?" una entidad":"un objeto valor." #> de tipo <see cref="<#= I #><#= cbc.secureEntityName #>"/>
        /// </returns>
        public <#=(cbc.diagram.ORM.Length >0)?"virtual":"" #> <#= I #><#= cbc.pascalSecureEntityName #> Set<#= T4Help.SecureName(property.AtributteName) #> ( <#= property.AtributteType #><#= (property.IsNullable & cbc.propertyIsValueType )?"?":"" #> <#= T4Help.ToCamelCase(property.AtributteName) #> )
        {
            this.<#= T4Help.SecureName(property.AtributteName) #> = <#= T4Help.ToCamelCase(property.AtributteName) #>;
            return this;
        }
<#+ 
        } // end del  if (property.OnlyGetProperty)
    }// ende del foreach (var property in propertyObjects)
#>
        #endregion
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
