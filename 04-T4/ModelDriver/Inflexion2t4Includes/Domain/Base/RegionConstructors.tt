<#@ include file="TemplateRemarks\MandatoryParameters.tt" #>
<#+
public class RegionConstructors : Template
{
    // variables de la plantilla (coinciden con los parametros)
    ClassBaseContext cbc; string projectNamespace; ITree<BoundedContextMetadata> Skt;
    // constructor de la plantilla con parametros
    public RegionConstructors(ClassBaseContext  cBc, string projectNamespace, ITree<BoundedContextMetadata> Skt)
        {this.cbc= cBc; this.projectNamespace = projectNamespace;  this.Skt = Skt; }

    public override string TransformText()
        {
            // conceptos propios del projecto en curso
            ProjectConcepts prjCon = new ProjectConcepts(  cbc, projectNamespace, Skt);
            // subplantillas particulares
            var mandatoryParameters = new MandatoryParameters( cbc, projectNamespace, Skt); string MandatoryParametersTxt = mandatoryParameters.TransformText();
            bool isSharedKernel = this.projectNamespace.Contains(cbc.diagram.SolutionFolderCommon);
            int spaceformatcounter = 8 + cbc.secureEntityName.Length;

            if (isSharedKernel)
            {
                spaceformatcounter = spaceformatcounter + " protected internal ".Length;
            }
            else
            {
                if (cbc.isAbstract ) 
                    {
                        spaceformatcounter = spaceformatcounter + " protected ".Length;
                    }                       
                else 
                    {
                    spaceformatcounter = spaceformatcounter + " internal ".Length;
                    }
            }

            //string MandatoryEntityBaseConstructorParamansDefinition = GetConstructorParametersStringTaxonomi(
                    //cbc.diagram.TreeApp,                           
                    //cbc.entity,                                     /* entidad */
                    //cbc.diagram.IdKind.Equals("Autonumerical"),     /* tipo id */
                    //SelectionCriteriaAttributes.Mandatory,          /* Selección de criterios */
                    //80,                                             /* Longitud máxima para activar el salto de parametros */
                    //true,                                           /* Incluir el tipo del parametro. Por ejemplo:incluye string, int etc*/
                    //spaceformatcounter,                             /* Indentación de los parametros cuando se salta */
                    //false,                                          /* incluirDefaultValues */
                    //false,                                          /* incluirId */
                    //true,                                           /* incluirTargetAssociations */
                    //true                                            /* incluirSourceAssociations */
                    //).Trim();                                       /* pascalCase */
                                                                    ///* prefijo */
                                                                    ///* sufijo */
#>
        #region Constructors
<#+
            if(cbc.IsEntity) // Los objetos valor no tienen constructor vacio pues no se persisten
            {
#>

        /// <summary>
        /// .en Empty Constructor for the class <see cref="<#= cbc.pascalSecureEntityName #>"/> it is required by nHibernate and EntityFramework.
        /// .es Constructor vacio de la clase <see cref="<#= cbc.pascalSecureEntityName #>"/> exigido por nHibernate o EntityFramework.
        /// </summary>
        /// <remarks>
        /// .en by convention the empty constructor initialize the default values and make the news for the collections.
        /// .es por convenicón el constructor vacio inizializa los valores por defecto y hace los news de las colecciones.
        /// </remarks>
        <#= (isSharedKernel)?"protected internal": (cbc.isAbstract )?"protected" : "internal" #> <#= cbc.pascalSecureEntityName #>()<#= (cbc.isDerivedFromOneEntity)?": base()":"" #>                
        {
        } // end empty constructor <#= cbc.pascalSecureEntityName #>
<#+
            }
#>
<#= MandatoryParametersTxt.TrimEnd() /*Renderización de la documentación de los parametros del constructor*/ #>
<#+
            if( cbc.TotalMandatoryProperties > 0 ) // el identificador es siempre mandatory por tanto como mínimo deberiamos incluir el mandatory del identificador.
            {                                  // son mandatory todos los atributos requeridos en la construcción del objeto y los
                // atributos que provienen de una relación cuya mutiplicidad mínima es uno.
#>
<#+
                if(cbc.IsEntity)
                {
#>
        <#= (isSharedKernel)?"protected internal": ( cbc.isAbstract )?"protected" : "internal" #> <#= cbc.pascalSecureEntityName #>( <#= (cbc.isDerivedFromOneEntity)? cbc.MandatoryEntityBaseConstructorParamansDefinition  : cbc.MandatoryConstructorParamnsWithAllnoId #> ) :  <#= (cbc.isDerivedFromOneEntity)? "base("+cbc.MandatoryEntityBaseConstructorParamans+")" : "this()" #>  //cbc.isDerivedFromOneEntity ='<#= cbc.isDerivedFromOneEntity.ToString() #>', IsDerived(cbc.entitySuperClass ) = '<#= (cbc.isDerivedFromOneEntity) ?IsDerived(cbc.entitySuperClass ).ToString():"" #>'
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
<#+ if ( cbc.LogicDelete){/*si la entidad es de borrado logico tenemos una propiedad de nombre IsActive a la que damos el valor true cuando se cosntruye.*/#>
            isActive = true;
<#+ } #>
<#+
                } // end if(cbc.IsEntity)
#>
<#+
                if(cbc.IsObjectValue)// si es un objeto valor no podemos incluir el id entre los parametros del constructor por que no tiene por tanto usamos MandatoryConstructorParamns y no MandatoryConstructorParamnsWithAll
                {
#>
        <#= (cbc.isAbstract)? "protected" : "internal" #> <#= cbc.pascalSecureEntityName #>( <#= (cbc.isDerivedFromOneEntity)? cbc.MandatoryEntityBaseConstructorParamansDefinition : cbc.MandatoryConstructorParamns #> ) : this() 
        {
            // .en the mandatory fields are inserted like parameters in the constructor.
            // If there are any property which are collections from realtionship here  
            // is where insert the news o their injection.
            // Also is included the default values for the properties which has one.

            // .es Aqui introducimos los campos mandatory que intervienen en el constructor
            // si tiene atributos que son collecciones derivadas de relacionaes aqui es 
            // donde tenemos que hacer los news de dichas colecciones o su inyección.
            // También debemos incluir aquellos campos que tienen un valor por defecto.
<#+
                }//end if(cbc.IsObjectValue)
#>
<#+
                /*asignación de los parametros mandatory a las propiedades de la clase*/
                foreach (var property in cbc.mandatoryPropertyObjects) 
                {
#>
<#+
                    if (property.OnlyGetProperty)
                    {
 #>
            Set<#=  T4Help.ToPascalCase(property.AtributteName) #>(<#=  T4Help.ToCamelCase(property.AtributteName) #>);
<#+
                    }
                    else
                    {
#>
            this.<#=     T4Help.ToPascalCase(property.AtributteName) #> = <#=     T4Help.ToCamelCase(property.AtributteName) #>;
<#+
                    } // end if (property.OnlyGetProperty)
#>
<#+
                }// finalizamos la lista de parametros del constructor que no tienen valores por defecto.
#>
<#+
                // comenzamos la asignación de los campos mandatory provenientes de relaciones
                // empezamos con las relaciones source, las cuales solo pueden generar propiedades simples de la interface de una entidad u objeto valor.
                foreach (var property in cbc.mandatoryPropertyFromSources)
                {
                    //if(string.IsNullOrEmpty(property.TargetRolName.Trim()))                {                    continue;                }
#>
            Set<#= T4Help.ToPascalCase(property.TargetRolName) #>( <#= T4Help.ToCamelCase(property.TargetRolName) #> ); /*mandatoryPropertyFromSources*/
<#+ 
                }// end foreach (var property in cbc.mandatoryPropertyFromSources)
#>
<#+ 
                //  asignación de los campos provenientes de relaciones target que implican collecciones
                // al igual que en los sources recorremos los mandatory asignamos las colecciones.
                // Esto nos evita tener que llamar a las factorias de las clases relacionadas.
                // cuando se invoca al constructor todas las colecciones se deben haber creado previamente.
                foreach(var property in cbc.mandatoryPropertyFromTargets)
                {
                    //if(string.IsNullOrEmpty(property.SourceRolName.Trim()))        {            continue;        } // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
#>
            Set<#= T4Help.ToPascalCase(property.SourceRolName) #>( <#= T4Help.ToCamelCase(property.SourceRolName) #> ); /*mandatoryPropertyFromTargets*/
<#+ 
                }// end foreach(var associationProperty in propertyAssociationTargets)
#>
<#+ if (cbc.propertyObjects.Where(p => !String.IsNullOrEmpty(p.DefaultValue.Trim()) & p.RequestUponCreation==RequestUponCreation.no ).Any()){#>
            // comienzan las asignaciones de los campos por defecto no mandatory. No confundir con campos derivados cya calculo es fijo.
<#+            } #>
<#+
                /*asignación de campos con valor por defecto que no se requieren en el constructor */
                foreach (var property in cbc.propertyObjects.Where(p => !String.IsNullOrEmpty(p.DefaultValue.Trim()) & p.RequestUponCreation==RequestUponCreation.no ))
                {
#>
<#+     if(property.LiveCycleAtributte.Equals(LiveCycleAtributte.Variable) ) { #>
<#+         if (property.OnlyGetProperty)                     {#>
            Set<#= T4Help.ToPascalCase(property.AtributteName) #>( <#= property.DefaultValue #> ); /*propertyObjects.Where(p => !String.IsNullOrEmpty(p.DefaultValue.Trim()) & p.RequestUponCreation==RequestUponCreation.no )*/
<#+
                    }
                    else
                    {
#>
            this.<#= T4Help.ToPascalCase(property.AtributteName) #> = <#= property.DefaultValue #>;/* Public Set Property no mandatory Property with default value*/
<#+              } // end if (property.OnlyGetProperty) #>
<#+          } // end if not livecicle constant #>
<#+       } // end foreach #>


        }// Constructor
<#+
            } // FIN DEL GENERADOR DEL CONSTRUCTOR PARAMETRIZADO CON CAMPOS MANDATORY
#>
        #endregion
<#+
     if (
            cbc.entity.DeleteBehavior.Equals(DeleteBehavior.OnCascade) && 
            cbc.propertyAssociationTargets.Where( 
                                                    p => string.IsNullOrEmpty( p.SourceRolName.Trim() ) && p is Entity 
                                                ).Any() 
        )
     {
#>

        #region Destructor
<#+ if (cbc.entity.LogicDelete){ #>
        /// <summary>
        /// .en Method for logical delete
        /// Método encargado de eliminar (borrado lógico) la clase <see cref="<#= cbc.pascalSecureEntityName #>".
        /// </summary>
        /// <remarks>
        /// Se eliminan también todas las colecciones que provienen de la roles "Target" y "Source" con de las asociaciones que tiene esta clase.
        /// </remarks>
        public <#= (cbc.diagram.ORM.Length >0)?"virtual":"" #> void Remove<#= cbc.pascalSecureEntityName #>()
        {
<#+ foreach( var property in cbc.propertyAssociationTargets )/*la lista ya filtra que tenga un rol*/
    {    if(string.IsNullOrEmpty(property.SourceRolName.Trim()))        {            continue;        } // Validación: Comprobamos que si no existe el nombre del rol source (significa que es una relación unidireccional y por tanto solo genera propiedad en la clase destino (target) y no en la clase  origen (source) la multiplicidad minima del target ha de ser cero. 
#>
<#+ 
        if( property is Entity)
        {
            if (IsMaxMultiplicityMany(property.TargetMultiplicity ) && IsMinMultiplicityOne(property.SourceMultiplicity ))
            { 
#>
            // Borramos todos los objetos de la collección correspondiente a la propiedad <#= T4Help.ToPascalCase(property.SourceRolName) #>
            foreach (var listItem in this.<#= T4Help.ToPascalCase(property.SourceRolName) #>)
            {
                listItem.Disable();
            }
<#+         }
            else if(!(IsMinMultiplicityCero(property.SourceMultiplicity ) && IsMinMultiplicityCero(property.TargetMultiplicity )))
            { 
#>
            this.<#= T4Help.ToPascalCase(property.SourceRolName) #>.Disable();
<#+         } // end else#>
<#+     } // end is entity#>
<#+ } // end foreach targets #>
<#+ foreach(var property in cbc.mandatoryPropertyFromSources)/*la lista ya filtra que tenga un rol*/
    {   //if(string.IsNullOrEmpty(property.TargetRolName.Trim()))          {            continue;        }

#>
<#+  if (IsMaxMultiplicityMany(property.SourceMultiplicity ))
     {
        if( property is Entity)
        {
#>
            // Borramos todos los objetos de la collección correspondiente a la propiedad <#= T4Help.ToPascalCase(property.TargetRolName) #>
            foreach (var listItem in this.<#= T4Help.ToPascalCase(property.TargetRolName) #>)
            {
                listItem.Disable();
            }
<#+                        }
        else 
        { #>
                this.<#= T4Help.ToPascalCase(property.TargetRolName) #>.Disable();
<#+         } // end else#>
<#+     } // end if is entity#>
<#+  } // end foreach sources #>
            // .en delete the instance
            // .es Borramos la instancia
            this.Disable();
        } // Remove<#= cbc.pascalSecureEntityName #>()
<#+ }// end logic delete #>
        #endregion
<#+  } // if delete on cascade #>
<#+
        return this.GenerationEnvironment.ToString();
    } // end de TransformText
}// end template
#>
