<#@ template inherits="Microsoft.VisualStudio.TextTemplating.VSHost.ModelingTextTransformation" language="C#" hostspecific="True" debug="true" #>
<#@ output extension ="txt" #>
<#@ MoneyGen processor="MoneyGenDirectiveProcessor"  requires="fileName='Main.kyk'"  #>
<#@ include file="T4Toolbox.tt" #>
<#@ include file="t4helpers\T4Application\Assemblys.ttinclude" #>

<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Text" #>
<#@ import namespace ="System.Text.RegularExpressions" #>
<#@ import namespace ="System.Xml" #>
<#@ import namespace ="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace ="EnvDTE" #>
<#@ import namespace ="EnvDTE80" #>

<#@ import namespace ="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace ="System" #>
<#@ import namespace ="System.IO" #>
<#@ import namespace ="System.Diagnostics" #>
<#@ import namespace ="System.Linq" #>
<#@ import namespace ="System.Xml.Linq" #>
<#@ import namespace ="System.Collections" #>
<#@ import namespace ="System.Collections.Generic" #>
<#@ import namespace ="System.Collections.ObjectModel" #>
<#@ import namespace ="System.ComponentModel" #>
<#@ import namespace ="Common" #>
<#@ include file="t4helpers\StringsFuntions\T4Helpers.ttinclude" #>
<#@ include file="t4helpers\Initialitation\DSLContextDefinition.ttinclude" #>
<#@ include file="t4helpers\Create\IOWindows.ttinclude" #>
<#@ include file="t4helpers\Create\Solution.ttinclude" #>
<#@ include file="t4helpers\Initialitation\Constants.ttinclude" #>
<#@ include file="t4helpers\Create\ArquitectureDefinition.ttinclude" #>

<#@ include file="t4Includes\Domain\IEntityDomainCoreTemplate.tt" #>

<#
     // primera parte recolectamos información acerca de la solucion los diagramas y las definiciones
    // almacenandolas en estructuras de datos facilmente accesibles.
    Debug.WriteLine("***************");
    // 1º acerca del diagrama
    DslContextDefinitionDiagram MainDiagram = new DslContextDefinitionDiagram(this.Application);
    
    // 2º acerca de la propia solución
    ActiveSolution SolutionInfo = new ActiveSolution(this.Host);

    // 3º obtenemos en la clase de maindiagram los path absolutos de las principales carpetas de la solución. 
    MainDiagram.SetAbsolutePath(SolutionInfo.DirectoryName);

    // 4º instanciamos la clases con la definición de la arquitectura
    Arquitecture Arq = new Arquitecture();

    WriteLine("El path de Proyects es '{0}'", MainDiagram.ProyectsPath);
    WriteLine("El path de la solución es '{0}'", SolutionInfo.DirectoryName);
    WriteLine("El path abs de projectos es '{0}'", MainDiagram.AbsProyectsPath);
   

    IList<Project> Projectos = SolutionProjects.ProjectsList(); // este es un método estático que nos permite accedeer de forma rapida a la lista de proyectos para buscar uno concreto.
    
    foreach (BoundedContext bd in this.Application.BoundedContexts )
    {
         WriteLine("El Bounde context es '{0}'", bd.Name);
    }

  foreach (Entity entity in this.Application.Elements )
    {

         WriteLine("La entidad es  '{0}'", entity.Name);

        Microsoft.VisualStudio.Modeling.LinkedElementCollection<ClassBase> ct   = Composition.GetCompositionTargets(entity);
        WriteLine("GetCompositionTargets  '{0}'", ct);
        var c1                                                                  = Composition.GetLinksToCompositionTargets(entity);
        var c2                                                                  = Composition.GetLinks(entity, entity);

 
    }

#>
