<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inflexion.Framework</name>
    </assembly>
    <members>
        <member name="T:Inflexion.Framework.Logging.AppenderType">
            <summary>
            Lista enumerada que contiene los diferentes tipos de log a generar.
            </summary>
            <remarks>
            Contiene los diferentes tipos de log a generar.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.AppenderType.File">
            <summary>
            Valor que indica un tipo de log de fichero.
            </summary>
            <remarks>
            Indica un tipo de log de fichero.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.AppenderType.EventViewer">
            <summary>
            Valor que indica un tipo de log de visor de eventos.
            </summary>
            <remarks>
            Indica un tipo de log de visor de eventos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.AppenderType.Database">
            <summary>
            Valor que indica un tipo de log de base de datos.
            </summary>
            <remarks>
            Indica un tipo de log de base de datos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.AppenderType.Mail">
            <summary>
            Valor que indica un tipo de log de mail.
            </summary>
            <remarks>
            Indica un tipo de log de mail.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectDataTable">
            <summary>
            Clase pública para la ejecución de sentencias Sql y devolver objetos
            <see cref="T:System.Data.DataTable"/>.
            </summary>
            <remarks>
            Permite ejecutar sentencias Sql y devolver objetos
            <see cref="T:System.Data.DataTable"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase ObjectDataTable.
            </summary>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ObjectDataTable.
            </summary>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.#ctor(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ObjectDataTable.
            </summary>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método público para añadir un parámetro al objeto Command del proveedor correspondiente.
            </summary>
            <remarks>
            Esta función es sólo para Sql Server.
            </remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.AddParameter(System.String,System.Object,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método público para añadir un parámetro al objeto Command del
            proveedor correspondiente.
            </summary>
            <remarks>
            Esta función es para todos los tipos de base de datos incluído
            Sql Server.
            </remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.Retrieve">
            <summary>
            Función privada encargada de recuperar la información de la
            base de datos y volcarla en un objeto
            <see cref="T:System.Data.DataTable">DataTable</see>.
            </summary>
            <remarks>
            Permite recuperar la información de la base de datos y volcarla
            en un objeto <see cref="T:System.Data.DataTable">DataTable</see>.
            </remarks>
            <returns>DataTable con la información.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.Retrieve(System.String,System.String,System.String)">
            <summary>
            Función privada encargada de recuperar la información de la
            base de datos y volcarla en un objeto
            <see cref="T:System.Data.DataTable">DataTable</see>.
            </summary>
            <remarks>
            Permite recuperar la información de la base de datos y volcarla
            en un objeto <see cref="T:System.Data.DataTable">DataTable</see>.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>DataTable con la información.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.Retrieve(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            Función privada encargada de recuperar la información de la
            base de datos y volcarla en un objeto
            <see cref="T:System.Data.DataTable">DataTable</see>.
            </summary>
            <remarks>
            Permite recuperar la información de la base de datos y volcarla
            en un objeto <see cref="T:System.Data.DataTable">DataTable</see>.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>DataTable con la información.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.RetrieveDataTable">
            <summary>
            Función privada encargada de recuperar la información de la
            base de datos y volcarla en un objeto
            <see cref="T:System.Data.DataTable">DataTable</see>.
            </summary>
            <remarks>
            Permite recuperar la información de la base de datos y volcarla
            en un objeto <see cref="T:System.Data.DataTable">DataTable</see>.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Data.DataTable">DataTable</see> con los datos de la sentencia SQL ejecutada.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.ConnectionString">
            <summary>
            Propiedad pública que obtiene o establece la cadena de conexión
            a la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la cadena de conexión con la
            base de datos.
            </remarks>
            <value>
            Obtiene o establece la cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.DatabaseType">
            <summary>
            Propiedad pública que obtiene o establece el tipo de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el tipo de base de datos.
            </remarks>
            <value>
            Obtiene o establece el tipo de datos de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.Provider">
            <summary>
            Propiedad pública que obtiene o establece el proveedor de
            acceso a datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el proveedor de acceso a datos.
            </remarks>
            <value>
            Obtiene o establece el proveedor de acceso a datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.SqlStatement">
            <summary>
            Propiedad pública que obtiene o establece la sentencia Sql a
            ejecutar en la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la sentencia Sql a ejecutar en
            la base de datos.
            </remarks>
            <value>
            Obtiene o establece la sentencia Sql a ejecutar en la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataTable.DataProvider">
            <summary>
            Propiedad pública que obtiene o establece el objeto DbDataProvider.
            </summary>
            <remarks>
            Nos permite obtener o establecer el objeto DbDataProvider.
            </remarks>
            <value>
            Obtiene o establece el objeto DbDataProvider.
            </value>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectDataReader">
            <summary>
            Clase pública que nos permite trabajar con objetos DataReader.
            </summary>
            <remarks>
            Nos permite trabajar con objetos DataReader.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.#ctor">
            <summary>
            <para>
            Constructor de la clase ObjectDataReader.
            </para>
            <data>
            Inicializa una nueva instancia de la clase ObjectDataReader.
            </data>
            </summary>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.#ctor(System.String,System.String,System.String)">
            <summary>
            <para>
            Constructor de la clase ObjectDataReader.
            </para>
            <para>
            Inicializa una nueva instancia de la clase ObjectDataReader.
            </para>
            </summary>
            <remarks>Constructor de la clase.</remarks>
            <param name="provider">Nombre del proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.#ctor(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            <para>
            Constructor de la clase ObjectDataReader.
            </para>
            <para>
            Inicializa una nueva instancia de la clase ObjectDataReader.
            </para>
            </summary>
            <remarks>Constructor de la clase.</remarks>
            <param name="provider">Nombre del proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método público para añadir un parámetro al objeto Command del
            proveedor correspondiente.
            </summary>
            <remarks>Función utilizada en Sql Server para añadir un parámetro
            al objeto Command del proveedor correspondiente.</remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro
            (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.AddParameter(System.String,System.Object,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método público para añadir un parámetro al objeto Command del
            proveedor correspondiente.
            </summary>
            <remarks>
            Método utilizado para todos los tipos de base de datos incluídos
            en Sql Server.
            </remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.Retrieve">
            <summary>
            Función pública encargada de devolver un objeto DbDataProvider.
            </summary>
            <remarks>
            Función que devuelve un objeto DbDataProvider.
            </remarks>
            <returns>
            Devuelve un objeto de tipo <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.Retrieve(System.String,System.String,System.String)">
            <summary>
            Función pública encargada de devolver un objeto DbDataProvider.
            </summary>
            <remarks>
            Función que devuelve un objeto DbDataProvider.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>
            Devuelve un objeto de tipo <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.Retrieve(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            Función pública encargada de devolver un objeto DbDataProvider.
            </summary>
            <remarks>
            Función que devuelve un objeto DbDataProvider.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>
            Devuelve un objeto de tipo <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.RetrieveDataReader">
            <summary>
            Función privada encargada de devolver un objeto DbDataProvider.
            </summary>
            <remarks>
            Función que devuelve un objeto DbDataProvider.
            <br></br>
            Recuerde que el objeto <see cref="T:System.Data.Common.DbDataReader">DataReader</see> es un objeto conectado.
            </remarks>
            <returns>
            Devuelve un objeto de tipo <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.ConnectionString">
            <summary>
            Propiedad que obtiene o establece la cadena de conexión con la
            base de datos.
            </summary>
            <remarks>
            Nos permite establecer la cadena de conexión con la base de datos.
            </remarks>
            <value>
            Establece la cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.DatabaseType">
            <summary>
            Propiedad que obtiene o establece el tipo de base de datos.
            </summary>
            <remarks>
            Nos permite establecer el tipo de base de datos.
            </remarks>
            <value>
            Establece el tipo de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.Provider">
            <summary>
            Propiedad que obtiene o establece el proveedor de acceso a datos.
            </summary>
            <remarks>
            Nos permite establecer el proveedor de acceso a datos.
            </remarks>
            <value>
            Establece el proveedor de acceso a datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.SqlStatement">
            <summary>
            Propiedad que obtiene o establece la sentencia Sql a ejecutar.
            </summary>
            <remarks>
            Nos permite establecer la sentencia Sql a ejecutar.
            </remarks>
            <value>
            Establece la sentencia Sql a ejecutar.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectDataReader.DataProvider">
            <summary>
            Propiedad que obtiene o establece el objeto
            <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </summary>
            <remarks>
            Nos permite establecer el objeto
            <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </remarks>
            <value>
            Establece el objeto
            <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IRepository`2">
            <summary>
            Interfaz que representa el repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            La interfaz <c>IRepositorio</c> representa el repositorio de entidades
            y objetos valor.
            </remarks>
            <typeparam name="TEntity">Representación de la entidad.</typeparam>
            <typeparam name="TIdentifier">Representación del identificador único
            de la entidad.</typeparam>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.IRepository`2.UnitOfWork">
            <summary>
            Devuelve el adaptador a la unidad de trabajo que
            será utilizada para acceder al almacén físico de datos.
            </summary>
            <value>
            El adaptador a la unidad de trabajo que será utilizada para
            acceder al repositorio.
            </value>
            <remarks>
            La unidad de trabajo debería inyectarser a través del constructor.
            Por ello es necesario el uso de IRepositoryFactory.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute">
            <summary>
            Clase de tipo atributo encargado de validar fechas.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute.basePropertyName">
            <summary>
            Variable privada que representa el nombre de la propiedad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute.errorMessage">
            <summary>
            Variable privada encargada de almacenar el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute"/>.
            </summary>
            <param name="basePropertyName">
            Parámetro que indica el nombre base de la propiedad fecha de la que comparar.
            </param>
            <param name="errorMessage">
            Parámetro que indica el mensaje en caso de error.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.DateGreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si una fecha es mayor a otra.
            </summary>
            <param name="value">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor de la fecha es válido y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Core.Guard">
            <summary>
            Clase estática encargada de lanzar excepciones según
            la afirmación recibida.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.Guard.Against(System.Boolean,System.String)">
            <summary>
            Método encargado de comprobar el valor de la afirmación y
            lanzar la excepción de tipo <see cref="T:System.InvalidOperationException"/>
            en caso afirmativo.
            </summary>
            <param name="assertion">
            Parámetro que indica si se lanzará la excepción.
            </param>
            <param name="message">
            Parámetro que indica el mensaje de texto de la excepción.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Lanzada cuando el valor de <c>assertion</c> es <c>true</c>.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Core.Guard.Against(System.Boolean,System.Exception)">
            <summary>
            Método encargado de comprobar el valor de la afirmación y
            lanzar la excepción de tipo <see cref="T:System.InvalidOperationException"/>
            en caso afirmativo.
            </summary>
            <param name="assertion">
            Parámetro que indica si se lanzará la excepción.
            </param>
            <param name="exception">
            Parámetro que indica el tipo de excepción que se lanzará.
            </param>
            <exception cref="T:System.InvalidOperationException">
            Lanzada cuando el valor de <c>assertion</c> es <c>true</c>.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Core.Guard.ArgumentIsNotNull(System.Object,System.String)">
            <summary>
            Método público encargado de comprobar si el argumento es null.
            </summary>
            <param name="argumentValue">
            Parámetro a comprobar si es <c>null</c>.
            </param>
            <param name="argumentName">
            Parámetro que indica el nombre del argumento que se está comprobando.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el parámetro <c>argumentValue</c> es nulo.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Core.Guard.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Método público encargado de comprobar si el valor
            del argumento es null o cadena vacía.
            </summary>
            <param name="argumentValue">
            Parámetro a comprobar si es <c>null</c>.
            </param>
            <param name="argumentName">
            Parámetro que indica el nombre del argumento que se está comprobando.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el parámetro <c>argumentValue</c> es nulo o cadena vacía.
            </exception>
        </member>
        <member name="T:Inflexion.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Inflexion.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Inflexion.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Inflexion.Framework.Properties.Resources.ConvertFileNotExistMessageException">
            <summary>
              Looks up a localized string similar to El fichero no existe..
            </summary>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.CounterAttribute">
            <summary>
            Attribute used for Performance counter.
            It contains information about the counter that would be used to configure how to manage this variable.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the counter</param>
            <param name="info">Information about the counter</param>
            <param name="counterType">Type of counter</param>
            <seealso cref="T:System.Diagnostics.PerformanceCounterType"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterAttribute.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name of the counter</param>
            <param name="info">Information about the counter</param>
            <param name="counterType">Type of counter</param>
            <param name="baseAutoIncreased">if true, each time the performance counter increased/decreased its base will be increased/decrease on 1 point. Otherwise all that base management will need to be handed on client code</param>
            <seealso cref="T:System.Diagnostics.PerformanceCounterType"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterAttribute.op_Implicit(Inflexion.Framework.PerformanceCounters.CounterAttribute)~System.Diagnostics.PerformanceCounterType">
            <summary>
            Specify the formula to be used to calculate the value when the method 'NextValue' is called
            </summary>
            <param name="performanceCounter">Counter</param>
            <returns>returns the CounterType</returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterAttribute.ToString">
            <summary>
            Override method to returns counter name
            </summary>
            <returns>returns the counter name</returns>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterAttribute.CounterType">
            <summary>
            Get or Set counterType
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterAttribute.Info">
             <summary>
             Get or Set information about the counter
             </summary>
            
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterAttribute.IsBaseAutoIncreased">
            <summary>
            Indicates that, if this performance counter needs a base, it should be increased/decreased by 1 when the relevant one is increased/decreased.
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterAttribute.Name">
            <summary>
            Get or Set the counter name
            </summary>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.CRC32">
            <summary>
            Clase pública que nos permite calcular el valor Crc32 de un fichero o
            de una cadena de texto.
            </summary>
            <remarks>
            Nos permite calcular el valor Crc32 de un fichero o de una cadena
            de texto.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.CRC32.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:CRC32"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.CRC32.GetHash(System.String,Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType,Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType)">
            <summary>
            Función pública que nos permite obtener el valor Crc32 de una
            cadena de texto.
            </summary>
            <remarks>
            Función que nos permite obtener el valor Crc32 de una cadena
            de texto.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Inflexion.Framework.Security.CRC32 crc32 = new Inflexion.Framework.Security.CRC32();
            string crc32Text = crc32.GetHash(
                                             "Ejemplo de text",
                                             Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType.String,
                                             Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType.AllFileContent);
            MessageBox.Show(crc32Text);
            </code>
            <code>
            Inflexion.Framework.Security.CRC32 crc32 = new Inflexion.Framework.Security.CRC32();
            string crc32Text = crc32.GetHash(
                                             @"D:\TEMP\SampleFile.txt",
                                             Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType.File,
                                             Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType.AllFileContent);
            MessageBox.Show(crc32Text);
            ]]>
            </code>
            </example>
            <param name="information">
            Cadena de texto para obtener el valor Crc32.
            </param>
            <param name="type">
            Tipo de criptografía indicada en la lista enumerada
            <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType"/>.
            </param>
            <param name="fileContent">
            Tipo de contenido con el cual calcular el valor Crc32 y que se
            indica en la lista enumerada
            <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType"/>.
            </param>
            <returns>
            Obtiene el valor Crc32.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.CRC32.CalculateCrc32(System.Byte[])">
            <summary>
            Función privada encarga de calcular el valor Crc32 de un
            conjunto de bytes pasados como argumento.
            </summary>
            <remarks>
            Función que nos permite calcular el valor Crc32 de un conjunto
            de bytes pasados como argumento.
            </remarks>
            <param name="bytesString">
            Conjunto de bytes con los cuales calcular el valor Crc32.
            </param>
            <returns>
            Devuelve el valor Crc32 calculado.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.CRC32.InitilizeCrc32Data">
            <summary>
            Función privada encargada internamente de inicializar una
            matriz con los datos Crc32 que serán utilizados para el cálculo
            del valor Crc32.
            </summary>
            <remarks>
            Función que inicializa una matriz con los datos Crc32 que serán
            utilizados para el cálculo del valor Crc32.
            </remarks>
            <returns>
            Matriz con los valores de la tabla que permitirá calcular el
            valor Crc32.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery">
            <summary>
            Clase pública para la ejecución de acciones mediante ExecuteNonQuery.
            </summary>
            <remarks>
            Permite ejecutar acciones mediante ExecuteNonQuery.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase ObjectExecuteNonQuery.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ObjectExecuteNonQuery.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de coenxión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.Retrieve">
            <summary>
            Función pública que ejecuta una sentencia Sql mediante
            ExecuteNonQuery.
            </summary>
            <remarks>
            Nos permite ehecutar una sentencia Sql mediante ExecuteNonQuery.
            </remarks>
            <returns>Valor del último identificador insertado en la tabla.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.Retrieve(System.String,System.String,System.String)">
            <summary>
            Función que ejecuta una sentencia Sql mediante ExecuteNonQuery.
            </summary>
            <remarks>
            Nos permite ejecutar una sentencia Sql mediante ExecuteNonQuery.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>Valor del último identificador insertado en la tabla.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.Send">
            <summary>
            Función pública que ejecuta una sentencia Sql mediante
            ExecuteNonQuery.
            </summary>
            <remarks>
            Nos permite ejecutar una sentencia Sql mediante ExecuteNonQuery.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.Send(System.String,System.String,System.String)">
            <summary>
            Función encargada de eejcutar una sentencia Sql mediante ExecuteNonQuery.
            </summary>
            <remarks>
            Nos permite ejecutar una sentencia Sql mediante ExecuteNonQuery.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.ExecuteNonQuery">
            <summary>
            Función privada que nos permite ejecutar una instrucción Sql
            que no espera ninguna fila de datos como resultado.
            </summary>
            <remarks>
            Nos permite ejecutar una instrucción Sql que no espera ninguna
            fila de datos como resultado.
            </remarks>
            <returns>Devuelve un valor entero que indica si se han
            insertado datos.</returns>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.ConnectionString">
            <summary>
            Propiedad pública que obtiene o establece la cadena de conexión
            con la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la cadena de conexión con la
            base de datos.
            </remarks>
            <value>
            Obtiene o establece la cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.Provider">
            <summary>
            Propiedad pública que obtiene o establece el proveedor de
            acceso a datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el proveedor de acceso a datos.
            </remarks>
            <value>
            Ontiene o establece el proveedor de acceso a datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery.SqlStatement">
            <summary>
            Propiedad pública que obtiene o establece la sentencia Sql a
            ejecutar contra la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la sentencia Sql a ejecutar
            contra la base de datos.
            </remarks>
            <value>
            Obtiene o establece la sentencia Sql a ejecutar contra la base
            de datos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IValueObject`1">
            <summary>
            Interfaz marcadora para los objetos valor del dominio.
            </summary>
            <typeparam name="TValueObject">
            Representación del Objeto Valor.
            </typeparam>
            <remarks>
            Sin comentartios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IValueObject`1.AssertValidation">
            <summary>
            Método encargado de afirmar la validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IValueObject`1.IsValid">
            <summary>
            Función encargada de determinar si la instancia del objeto valor es válida.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si el objeto es válido y <c>false</c> en caso contrario.
            </returns>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IValueObject`1.Validate">
            <summary>
            Método encargado de validar los datos.
            </summary>
            <typeparam name="TValueObject">
            Tipo de objeto que se validará.
            </typeparam>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
            <returns>
            Devuelve <see cref="T:System.Collections.Generic.List`1"/> con los resultados
            de la validación.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador And lógico.
            </summary>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.CompositeSpecification`1">
            <summary>
            Clase base para especificaciones compuestas.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.Specification`1">
            <summary>
            Clase que representa una especificación de expresión.
            </summary>
            <remarks>
            Esta clase sobrecarga los operadores
            para crear AND, OR, ó NOT especificaciones.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1">
            <summary>
            Interfaz para el patrón Especificación.
            </summary>
            <remarks>
            Variante del patrón especificación para que
            soporte árboles de expresión.
            <see href="http://en.wikipedia.org/wiki/Specification_pattern"/>
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Specification.ISpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.op_LogicalNot(Inflexion.Framework.Domain.Base.Specification.Specification{`0})">
            <summary>
            Función que representa el operador NOT.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación NOT.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.op_BitwiseAnd(Inflexion.Framework.Domain.Base.Specification.Specification{`0},Inflexion.Framework.Domain.Base.Specification.Specification{`0})">
            <summary>
            Función que representa el operador AND.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="leftSpecification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/> que representa el operando
            izquierdo de la operación AND.
            </param>
            <param name="rightSpecification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/> que representa el operando
            derecho de la operación AND.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación AND.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.op_False(Inflexion.Framework.Domain.Base.Specification.Specification{`0})">
            <summary>
            Función que representa el operador false.
            </summary>
            <remarks>
            Operador sobreescrito sólo para el soporte a
            los operadores AND y OR.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/>.
            </param>
            <returns>
            Devuelve False.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.op_True(Inflexion.Framework.Domain.Base.Specification.Specification{`0})">
            <summary>
            Función que representa el operador true.
            </summary>
            <remarks>
            Operador sobreescrito sólo para el soporte a
            los operadores AND y OR.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/>.
            </param>
            <returns>
            Devuelve true.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.op_BitwiseOr(Inflexion.Framework.Domain.Base.Specification.Specification{`0},Inflexion.Framework.Domain.Base.Specification.Specification{`0})">
            <summary>
            Función que representa el operador OR.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="leftSpecification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <param name="rightSpecification">
            Parámetro de tipo <see cref="N:Inflexion.Framework.Domain.Base.Specification"/> que representa el operando
            derecho de la operación OR.
            </param>
            <returns>
            Devuelve nueva especificación aplicando la operación OR.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.Specification`1.IsSatisfiedBy">
            <summary>
            Método abstracto encargado de comprobar si la
            especificación se satisface con la expresión
            lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.CompositeSpecification`1.LeftSpecification">
            <summary>
            Propiedad pública que establece la especificación
            de la parte izquierda dentro de la composición.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación
            de la parte izquierda dentro de la composición.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.CompositeSpecification`1.RightSpecification">
            <summary>
            Propiedad pública que establece la especificación
            de la parte derecha dentro de la composición.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación
            de la parte derecha dentro de la composición.
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.leftSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.rightSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.#ctor(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0},Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase AndSpecification.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="left">
            Parámetro que indica la especifición del operando de la
            izquierda.
            </param>
            <param name="right">
            Parámetro que indica la especificación del operando de la
            derecha.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.LeftSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            derecha del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte derecha del elemento compuesto.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.AndSpecification`1.RightSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            izquierda del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte izquierda del elemento compuesto.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Logging.ILoggerFactory">
            <summary>
            Interfaz que define el contrato de la factoría de Logger.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILoggerFactory.Create(System.Type)">
            <summary>
            Método encargado de la creación de objetos <see cref="T:Inflexion.Framework.Logging.ILogger"/>.
            </summary>
            <param name="type">
            Parámetro de tipo <see cref="T:System.Type"/> que identifica el tipo para
            el que se creará el Logger.
            </param>
            <returns></returns>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.MD5">
            <summary>
            Clase pública que nos permite obtener el código hash del algoritmo
            <c>MD5 (128 bits)</c>.
            </summary>
            <remarks>
            Nos permite obtener el código hash del argoritmo <c>MD5 (128 bits)</c>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.MD5.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:MD5"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.MD5.GetHash(System.String,Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType,Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType)">
            <summary>
            <para>
            Función pública que nos permite obtener el hash <c>MD5</c>.
            </para>
            <para>
            Esta función utiliza la lista enumerada
            <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType">CrytographicType</see>.
            </para>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <example>
            <code lang="C#" escaped="true">
            <![CDATA[
            // MD5 Test (passing a string to get the MD5 code)
            Hash security = new Hash();
            string message = security.GetHash("MD5 from a string", Hash.CryptographicType.String);
            ]]>
            </code>
            <code lang="C#" escaped="true">
            <![CDATA[
            // MD5 Test (passing a file to get the MD5 code)
            Hash security = new Hash();
            string message = security.GetHash(@"D:\file.txt", Hash.CryptographicType.File, true);
            ]]>
            </code>
            </example>
            <param name="information">Texto para ontener el código MD5.</param>
            <param name="cryptographyType">Tipo de acción criptográfica.</param>
            <param name="fileContent">Indica si en el caso de trabajar con ficheros, se quiere obtener el contenido de todo el fichero o solo los primeros bytes.<br/>
            Por defecto, valdrá false y obtendrá sólo los primeros 16 bytes del contenido del fichero.</param>
            <returns>Cadena con el código MD5.</returns>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.Manager">
            <summary>
            Clase estática encargada de gestionar los accesos y usos de la
            infraestructura.
            </summary>
            <remarks>
            Esta clase tiene como misión principal la de gestionar las diferentes
            unidades de trabajo (acceso a datos) con las que puede trabajar la
            aplicación.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.DataAccess.UoW.Manager.singleton">
            <summary>
            Variable privada estática que permite saber si existe alguna
            instancia ya creada de la interfaz <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </summary>
            <remarks>
            Permite saber si existe alguna instancia ya creada o si es la
            primera instancia a crear.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.DataAccess.UoW.Manager.syncLock">
            <summary>
            Variable privada estática que realiza un bloqueo exclusivo para un
            determinado bloque de instrucciones.
            </summary>
            <remarks>
            Realiza un bloqueo exclusivo para un determinado bloque de instrucciones.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.DataAccess.UoW.Manager.DefaultController">
            <summary>
            Devuelve o establece el controlador predeterminado
            gestionado de manera automática por este
            <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.Manager"/> (implementando el patrón
            "singleton").
            </summary>
            <remarks>
            Se resuelve el controlador predeterminado a través del
            contenedor de inversión
            (<see cref="P:Inflexion.Framework.Infrastructure.IoC.ManagerIoC.Container"/>).
            </remarks>
            <value>
            El <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController"/> predeterminado para
            gestionar los <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de las unidades
            de trabajo.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController">
            <summary>
            Interfaz que representa un adaptador para el acceso a datos.
            </summary>
            <remarks>
            La interfaz <c>IAdaptador</c> representa a una unidad de trabajo para
            el acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController.CreateNonTransactional">
            <summary>
            Devuelve un nuevo <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad
            de trabajo recién creada.
            </summary>
            <remarks>
            La unidad de trabajo creada no conllevará asociada ninguna
            transacción de manera explícita.
            </remarks>
            <returns>
            El <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad de trabajo recién
            creada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController.CreateNonTransactional(System.String,System.String)">
            <summary>
            Devuelve un nuevo <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad
            de trabajo recién creada.
            </summary>
            <remarks>
            La unidad de trabajo creada no conllevará asociada ninguna
            transacción de manera explícita.
            </remarks>
            <param name="providerName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <param name="connectionString">
            Parámetro que indica la cadena de conexión a utilizar.
            </param>
            <returns>
            El <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad de trabajo recién
            creada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController.CreateTransactional(System.Nullable{System.Data.IsolationLevel},System.Boolean)">
            <summary>
            Devuelve un nuevo <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad
            de trabajo recién creada.
            </summary>
            <remarks>
            La unidad de trabajo creada vendrá asociada a la creación
            explícita de una transacción.
            </remarks>
            <param name="isolationLevel">
            Nivel de aislamiento de la transacción asociada a la
            unidad de trabajo recién creada.
            </param>
            <param name="autoComplete">
            Indica si hay que confirmar o deshacer la transacción al realizar
            un Dispose del objeto.
            <para>
            Si es <c>false</c> se realizar el rollback, y si es <c>true</c>
            hace un commit.
            </para>
            </param>
            <returns>
            El <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad de trabajo recién
            creada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IController.CreateTransactional(System.String,System.String,System.Nullable{System.Data.IsolationLevel},System.Boolean)">
            <summary>
            Devuelve un nuevo <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad
            de trabajo recién creada.
            </summary>
            <remarks>
            La unidad de trabajo creada vendrá asociada a la creación
            explícita de una transacción.
            </remarks>
            <param name="providerName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <param name="connectionString">
            Parámetro que indica la cadena de conexión a utilizar.
            </param>
            <param name="isolationLevel">
            Nivel de aislamiento de la transacción asociada a la
            unidad de trabajo recién creada.
            </param>
            <param name="autoComplete">
            Indica si hay que confirmar o deshacer la transacción al realizar
            un Dispose del objeto.
            <para>
            Si es <c>false</c> se realizar el rollback, y si es <c>true</c>
            hace un commit.
            </para>
            </param>
            <returns>
            El <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> de la unidad de trabajo recién creada.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Extensions.EnumExtension">
            <summary>
              Clase estática que define métodos extensores para la clase
              <see cref="T:System.Enum"/>.
            </summary>
            <remarks>
              Para utilizar los métodos extensores es necesario incluir el
              espacio de nombres <see cref="N:Inflexion.Framework.Extensions"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Extensions.EnumExtension.GetDescription``1(``0,System.Enum)">
            <summary>
            Devuelve la descripción  asociada al valor enumerado
            <paramref name="value"/> especificado.
            </summary>
            <remarks>
            Esta función es un método extensor de la clase
             <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Valor del enumerado del que se desea obtener la descripción.
            </param>
            <returns>
            La descripción asociada al valor enumerado
            <paramref name="value"/> especificado.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.EnumExtension.GetEnumMemberValue``1(``0,System.Enum)">
            <summary>
            Función encargada de obtener el valor del atributo EnumMember.
            </summary>
            <remarks>
            Esta función es un método extensor de la clase
             <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <returns>
            Devuelve el valor del atributo EnumMember.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.EnumExtension.GetName``1(``0)">
            <summary>
              Devuelve el identificador asociado al valor enumerado
              <paramref name="value"/> especificado.
            </summary>
            <remarks>
              Esta función es un método extensor de la clase
              <see cref="T:System.Enum"/>.
            </remarks>
            <typeparam name="TEnum">
              Tipo genérico restringido a enumerado (descendiente de
              <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="value">
              Valor enumerado cuyo identificador se desea obtener.
            </param>
            <returns>
              El identificador asociado al valor enumerado
              <paramref name="value"/> especificado.
            </returns>
            <example>
              Ejemplo de uso del método extensor:
              <code>
                <![CDATA[
            using Inflexion.Framework.Extensions;
            using global::Inflexion.Framework.Infrastructure.Security.Base.LoginProvider;
            // ...
            string enumValueName = LoginProviderType.Database.GetName();
                ]]>
              </code>
            </example>
        </member>
        <member name="M:Inflexion.Framework.Extensions.EnumExtension.GetNameFromEnumMemberValue``1(``0,System.String)">
            <summary>
            Método extensor para obtener el valor del enumerado a partir del valor del atributo EnumMember.
            </summary>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="value">
            Parámetro que indica el valor del atributo EnumMember.
            </param>
            <returns>
            Devuelve el valor de enumerado.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.EnumExtension.GetValueFromDescription``1(``0,System.String)">
            <summary>
            Método extensor para obtener el valor del enumerado a partir de la descripción.
            </summary>
            <typeparam name="TEnum">
            Tipo genérico restringido a enumerado (descendiente de
            <see cref="T:System.Enum"/>).
            </typeparam>
            <param name="structure">
            Enumerado sobre el que se aplica la extensión.
            </param>
            <param name="description">
            Parámetro que indica la descripción del valor del enumerdo.
            </param>
            <returns>
            Devuelve el valor de enumerado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo">
            <summary>
            Interfaz que representa el objeto-valor
            de tipo auditoría de datos.
            </summary>
            <remarks>
            Representa los datos de tipo auditoría.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo.CreatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que crea el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el
            identificador único del usuario que crea el registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo.CreatedTimestamp">
            <summary>
            Propiedad que indica la fecha de creación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de creación del registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo.UpdatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que modifica el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el identificador
            único del usuario que modifica el registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo.UpdatedTimestamp">
            <summary>
            Propiedad que indica la fecha de modificación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de modificación del registro.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IEntity`1">
            <summary>
            Interfaz para representar las entidades del negocio.
            </summary>
            <remarks>
            La interfaz <c>IEntity</c> representa una entidad de negocio.
            </remarks>
            <typeparam name="TIdentifier">
            Representación del tipo del identificador de la entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IEntity`1.AssertValidation">
            <summary>
            Método encargado de validar la entidad.
            </summary>
            <remarks>
            Si la intancia no es válida, el método lanzará una excepción de tipo ValidationException.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IEntity`1.Disable">
            <summary>
            Método encargado del borrado lógico de la entidad.
            </summary>
            <remarks>
            Modifica el valor la propiedad IsActive a <c>False</c>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IEntity`1.Enable">
            <summary>
            Método encargada del activar ó habilitar una entidad.
            </summary>
            <remarks>
            Modifica el valor la propiedad IsActive a <c>True</c>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IEntity`1.IsValid">
            <summary>
            Función encargada de determinar si la instancia de la entidad es válida.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si la entidad es válida y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IEntity`1.Validate">
            <summary>
            Función encargada de validar la intancia de la entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.Validation.ValidationResult"/> que contiene el
            resultado de validar la intancia especificada.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.IEntity`1.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.IEntity`1.Id">
            <summary>
            Devuelve el identificador único de la entidad.
            </summary>
            <remarks>
            El valor del identificador único será utilizado como criterio
            principal durante la igualdad y comparación entre entidades.
            </remarks>
            <value>
            <para>
            Identificador único de la entidad.
            </para>
            <para>
            TIdentifier representa el tipo de datos del identificador único de
            la entidad.
            </para>
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.IEntity`1.IsActive">
            <summary>
            Propiedad que indica si la entidad está activa.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            está o no activa.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.EntityBase`1">
            <summary>
            Clase pública abstracta para representar las entidades del negocio.
            </summary>
            <remarks>
            La clase abstracta <see cref="T:Inflexion.Framework.Domain.Base.EntityBase`1"/> representa una clase base de tipo
            entidad de negocio.
            </remarks>
            <typeparam name="TIdentifier">
            Tipo genérico para representar el tipo de identificador de las
            entidades y que es necesario para los repositorios.
            </typeparam>
            <seealso cref="T:Inflexion.Framework.Domain.Core.IEntity{TIdentifier}"/>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValidatableEntity`1">
            <summary>
            Clase pública abstracta para representar entidades validables.
            </summary>
            <typeparam name="TEntity">El tipo de entidad.</typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ValidatableEntity`1.validator">
            <summary>
            Variable privada que representa el Validador.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValidatableEntity`1.AssertValidation">
            <summary>
            Método encargado de validar la entidad.
            </summary>
            <remarks>
            Si la intancia no es válida, el método lanzará una excepción de tipo ValidationException.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValidatableEntity`1.IsValid">
            <summary>
            Función encargada de determinar si la instancia de la entidad es válida.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si la entidad es válida y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValidatableEntity`1.Validate">
            <summary>
            Función encargada de validar la intancia de la entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.Validation.ValidationResult"/> que contiene el
            resultado de validar la intancia especificada.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValidatableEntity`1.Validator">
            <summary>
            Propiedad que obtiene el validador de la entidad.
            </summary>
            <value>
            Valor utilizado para obtener el validador de la entidad.
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.EntityBase`1.NullId">
            <summary>
            Constante privada utilizada para indicar que un identificador
            es nulo o no representativo.
            </summary>
            <remarks>
            Creamos esta constante por necesidad de Nhibernate, ya que
            necesita constructores vacíos en las clases a persistir.
            </remarks>
            <value>
            <c>0</c>
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.EntityBase`1.id">
            <summary>
            Identificador único de la entidad.
            </summary>
            <remarks>
            Este campo o variable se utiliza conjuntamente con la propiedad
            <see cref="P:Inflexion.Framework.Domain.Base.EntityBase`1.Id"/>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.EntityBase`1.isActive">
            <summary>
            Variable privada de propiedad para indicar
            si la entidad está activa ó habilitada.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.#ctor(`0)">
            <summary>
            Constructor de la clase.
            </summary>
            <remarks>
            El constructor nos permite crear una entidad de acuerdo al
            identificador único.
            </remarks>
            <param name="id">
            Identificador unívoco de la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.CompareTo(System.Object)">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="element">
            Parámetro que hace referencia al elemento a comparar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>element</c> es null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Lanzada cuando el valor de la variable <c>otherEntity</c> es null.
            </exception>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.CompareTo(Inflexion.Framework.Domain.Core.IEntity{`0})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">
            Parámetro que hace referencia al identificador a comparar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>entityIdentifier</c> es null.
            </exception>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.CompareTo(Inflexion.Framework.Domain.Base.EntityBase{`0})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador de dos entidades base para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">Indica el otro objeto con el cual comparar.</param>
            <returns>Devuelve un entero que indica si la comparación es correcta o no.</returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.Disable">
            <summary>
            Método encargado del borrado lógico de la entidad.
            </summary>
            <remarks>
            Borrado lógico de la entidad.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.Enable">
            <summary>
            Método encargada del activar ó habilitar una entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.Equals(System.Object)">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="otro">
            Objeto a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.Equals(Inflexion.Framework.Domain.Core.IEntity{`0})">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="entityIdentifier">
            Parámetro que hace referencia a la entidad a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.Equals(Inflexion.Framework.Domain.Base.EntityBase{`0})">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="entity">
            Parámetro que hace referencia a la entidad a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.EntityBase`1.GetHashCode">
            <summary>
            Función encargada de obtener un código hash.
            </summary>
            <remarks>
            Obtiene un código hash.
            </remarks>
            <returns>
            Devuelve un valor <see cref="T:System.Int32"/> con el código hash.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.EntityBase`1.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.EntityBase`1.Id">
            <summary>
            Devuelve el identificador único de la entidad.
            </summary>
            <value>
            Identificador único de la entidad.
            </value>
            <remarks>
            <para>
            El valor del identificador único será utilizado como
            criterio principal durante la igualdad y comparación entre
            entidades.
            </para>
            <para>
            TIdentifier Representa el tipo de datos del identificador único
            de la entidad.
            </para>
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.EntityBase`1.IsActive">
            <summary>
            Propiedad pública que indica
            si la entidad está activa.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            está o no activa.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.EntityBase`1.IsTransient">
            <summary>
            Propiedad pública que indica
            si la entidad es transient.
            </summary>
            <remarks>
            Esta propiedad responde a necesidades de nhibernate.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            es transient.
            </value>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.DbTypes.SqlServer">
            <summary>
            Clase pública sellada que nos permite trabajar con los tipos de datos
            de Sql Server.
            </summary>
            <remarks>
            Nos permite trabajar con los tipos de datos de Sql Server.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DbTypes.SqlServer.GetDbType(System.Data.DbType)">
            <summary>
            Función pública estática que nos permite trabajar con los tipos de
            datos de Sql Server.
            </summary>
            <remarks>
            Nos permite trabajar con los tipos de datos de Sql Server.
            </remarks>
            <param name="parameterDbType">Tipo de dato de Sql Server.</param>
            <returns>Valor de tipo SqlDbType. Se trata de un valor que representa
            un tipo de dato de Sql Server.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DbTypes.SqlServer.ConvertDbType(System.Data.DbType)">
            <summary>
            Función privada estática que permite convertir el tipo de dato de
            una base de datos general en un tipo de dato de Sql Server.
            </summary>
            <remarks>
            Nos permite convertir el tipo de datos de una base de datos general
            en un tipo de dato de Sql Server.
            </remarks>
            <param name="parameterDbType">Tipo de datos de Sql Server.</param>
            <returns>Valor de tipo SqlDbType. Se trata de un valor que representa
            un tipo de dato de Sql Server.</returns>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter">
            <summary>
            Clase pública sellada que ofrece la adaptación de los mecanismos
            de memoria caché implementados por <c>Microsoft .NET Framework</c> en
            el espacio de nombres <c>System.Runtime.Caching</c>.
            </summary>
            <remarks>
            Ofrece la adaptación de los mecanismos de memoria caché implementados
            por <c>Microsoft .NET Framework</c> en el espacio de nombres
            <c>System.Runtime.Caching</c>.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
              <![CDATA[
            public TResult GetCacheData<TResult,TKey>(TKey key, TResult defaultValue)
            {
                // Resultado.
                TResult result;
                // Obtenemos acceso a la memoria caché.
                var cache = Inflexion.Framework.Infrastructure.Caching.CacheManager.DefaultAdapter;
                // Verificamos que el elemento solicitado se encuentre en la caché.
                if (cache.Contains(key))
                {
                    // Devolvemos el elemento solicitado.
                    result = ((TResult) cache.Retrieve(key));
                }
                else
                {
                    // Devolvemos un valor por defecto para indicar que se
                    // ha producido un "fallo de caché" (el elemento
                    // solicitado no se encuentra o ha sido descartado).
                    result = defaultValue;
                }
                // Devolvemos el resultado.
                return result;
            }
              ]]>
            </code>
            </example>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Caching.IAdapter">
            <summary>
            Interfaz pública encargada de ofrecer el principio de abstracción a los
            clientes que requieran funcionalidad de memoria caché.
            </summary>
            <remarks>
            Presenta el principio de abstracción a los clientes que requieren
            funcionalidad de memoria caché.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.IAdapter.Contains(System.Object)">
            <summary>
            Función que indica si existen en la caché algún elemento
            identificado con la clave <paramref name="key"/>.
            </summary>
            <remarks>
            Indica si existen en la caché elementos identificados con su clave.
            </remarks>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <returns>
            Devuelve <c>true</c> cuando exista algún elemento en la
            memoria caché identificado mediante la clave
            <paramref name="key"/>; devolverá <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.IAdapter.Retrieve(System.Object)">
            <summary>
            Función que devuelve el elemento de la caché identificado con la
            clave <paramref name="key"/>.
            </summary>
            <remarks>
            Devuelve un elemento de la caché identificado por su clave.
            </remarks>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <returns>
            Elemento de la caché identificado mediante la clave
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.IAdapter.Store(System.Object,System.Object)">
            <summary>
            Método que almacena en la memoria caché el elemento
            <paramref name="value"/> especificado e identificado con la clave
            <paramref name="key"/>.
            </summary>
            <remarks>
            Almacena en la memoria caché el valor especificado e identificado
            con su clave.
            </remarks>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <param name="value">
            Elemento a almacenar en la memoria caché.
            </param>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.defaultEvictionPolicy">
            <summary>
            Variable privada para indicar la política de desalojo de la
            caché por defecto.
            </summary>
            <remarks>
            Indica la política de desalojo de la caché por defecto.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.disposed">
            <summary>
            <para>
            Variable privada que indica si ya se llamo al método Dispose.
            </para>
            <para>
            Por defecto, vale <c>false</c>.
            </para>
            </summary>
            <remarks>
            Indica si se ha llamada ya al método Dispose. Su valor por
            defecto es <c>false</c>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.innerAdapter">
            <summary>
            Variable privada que actúa como memoria caché de
            <see cref="N:System.Runtime.Caching"/>.
            </summary>
            <remarks>
            Memoria caché de <see cref="N:System.Runtime.Caching"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Adapter"/>.
            </summary>
            <remarks>
            Se invoca al constructor parametrizado <see cref="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.#ctor(System.String)"/>
            estableciendo el parámetro <c>name</c> a <see cref="F:System.String.Empty"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Adapter"/>.
            </summary>
            <param name="name">
            Nombre de la configuración asociada.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <seealso cref="T:System.Runtime.Caching.MemoryCache"/>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Finalize">
            <summary>
            Destructor de la clase encargada de liberar recursos no
            administrados.
            </summary>
            <remarks>
            Destruye los objetos al finalizar la instanciación de la clase
            con el objetivo de liberar recursos no administrados.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Contains(System.Object)">
            <summary>
            Función pública que indica si existen en la caché algún elemento
            identificado con la clave <paramref name="key"/>.
            </summary>
            <remarks>
            Indica si existen en la caché algún elemento identificado con
            la clave <paramref name="key"/>.
            </remarks>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <returns>
            Devuelve <c>true</c> cuando exista algún elemento en la
            memoria caché identificado mediante la clave
            <paramref name="key"/>; devolverá <c>false</c> en caso
            contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Dispose">
            <summary>
            Método público encargado de liberar los recursos utilizados en
            la clase.
            </summary>
            <remarks>
            Libera los recursos utilizados en la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Retrieve(System.Object)">
            <summary>
            Función pública que devuelve el elemento de la caché
            identificado con la clave.
            </summary>
            <remarks>
            Devuelve el elemento de la caché identificado con la clave
            </remarks>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <returns>
            Elemento de la caché identificado mediante la clave
            <paramref name="key"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Store(System.Object,System.Object)">
            <summary>
            Método públic que almacena en la memoria caché el elemento
            <paramref name="value"/> especificado e identificado con la
            clave <paramref name="key"/>.
            </summary>
            <param name="key">
            Clave que identifica a un elemento de la caché.
            </param>
            <param name="value">
            Elemento a almacenar en la memoria caché.
            </param>
            <remarks>
            Almacena en la memoria caché el elemento <paramref name="value"/>
            especificado e identificado con la clave <paramref name="key"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.Dispose(System.Boolean)">
            <summary>
            Método privado encargado de liberar los recursos de los objetos
            utilizados por la clase.
            </summary>
            <remarks>
            Libera los recursos de los objetos utilizados por la clase.
            </remarks>
            <param name="disposing">Variable que indica si el método
            <c>Dispose</c> ya fue llamado.</param>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.Caching.MicrosoftSystemRuntime.Adapter.DefaultEvictionPolicy">
            <summary>
            Propiedad pública que permite establecer y obtener la política
            de desalojo de la caché por defecto.
            </summary>
            <remarks>
            Nos permite establecer y obtener la política de desalojo de la
            caché por defecto.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener la política de
            desalojo de la caché por defecto.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.Validation.ValidationResult">
            <summary>
            Clase sellada que contendrá el resultado de las validaciones aplicadas a las entidades.
            </summary>
            <remarks>
            El resultado se obtiene de la llamada a método <see cref="M:Inflexion.Framework.Domain.Core.Validation.IValidator`1.Validate(`0)"/>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Core.Validation.ValidationResult.errors">
            <summary>
            Variable privada de solo lectura que almacenará la lista de errores producidos
            en la validación de una entidad.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidationResult"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.#ctor(System.Collections.Generic.IEnumerable{Inflexion.Framework.Domain.Core.Validation.IValidationError})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidationResult"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="errors">
            Parámetro de tipo <see cref="T:System.Collections.Generic.IEnumerable`1"/> que contiene los errores de validación.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.AddError(Inflexion.Framework.Domain.Core.Validation.IValidationError)">
            <summary>
            Método para agregar un error de validación a la colección.
            </summary>
            <param name="error">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Validation.IValidationError"/> que contiene la información
            del error y que se añadirá a la colección de errores.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Función que devuelve un enumerador que recorre en iteración una colección.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve el objeto <see cref="T:System.Collections.IEnumerator"/> que se puede utilizar para recorrer la colección.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.System#Collections#Generic#IEnumerable{Inflexion#Framework#Domain#Core#Validation#IValidationError}#GetEnumerator">
            <summary>
            Función que devuelve un enumerador que recorre en iteración una colección.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve el objeto <see cref="T:System.Collections.Generic.IEnumerator`1"/> ue se puede utilizar para recorrer la colección.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.ValidationResult.RemoveError(Inflexion.Framework.Domain.Core.Validation.IValidationError)">
            <summary>
            Removes a validation error from the result.
            </summary>
            <param name="error"></param>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.Validation.ValidationResult.Errors">
            <summary>
            Propiedad que obtiene la colección de errores de validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la colección de errores de validadión.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.Validation.ValidationResult.IsValid">
            <summary>
            Propiedad que indica si la operación de validación de la entidad fue válida o no.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la validación es correcta o no.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IRepositoryFactory`3">
            <summary>
            Interfaz para representar las factorías de las entidades del dominio..
            </summary>
            <remarks>
            La interfaz <c>IFactoria</c> representa las factoría de las entidades
            del dominio.
            </remarks>
            <typeparam name="TRepository">
            Representación del tipo de datos del repositorio que será creado.
            </typeparam>
            <typeparam name="TEntity">
            Representación del tipo de datos de las entidades a consultar a través
            del repositorio.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación tipo de datos del identificador de la entidad.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1">
            <summary>
            Clase abstracta base para los objetos valor
            dentro del marco de desarrollo.
            </summary>
            <typeparam name="TValueObject">
            Objeto utilizado como Objeto Valor.
            </typeparam>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1.AssertValidation">
            <summary>
            Método encargado de afirmar la validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
            <exception cref="T:Inflexion.Framework.Domain.Core.Validation.ValidationResult">
            Lanzada cuando se producen errores de validación.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1.Equals(`0)">
            <summary>
            Método de comparación para los objetos valor.
            </summary>
            <param name="other">
            Parámetro que representa otro Objeto Valor a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos con iguales y
            <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1.Equals(System.Object)">
            <summary>
            Método de comparación para los objetos valor.
            </summary>
            <param name="other">
            Parámetro que representa otro Objeto Valor a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos con iguales y
            <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1.IsValid">
            <summary>
            Función encargada de determinar si la instancia del objeto valor es válida.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si el objeto es válido y <c>false</c> en caso contrario.
            </returns>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValueObjectBase`1.Validate">
            <summary>
            Método encargado de validar los datos.
            </summary>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
            <param name="validationResults">
            Parámetro que indica la lista de resultados de la validación.
            </param>
            <returns>
            Devuelve <see cref="T:System.Collections.Generic.List`1"/> con los resultados
            de la validación.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriodFactory">
            <summary>
            Clase factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriodFactory.Create(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Método encargado de la creación de objetos valor de
            periodo de vigencia.
            </summary>
            <param name="fromDate">
            Parámetro que indica la fecha inicial del periodo de vigencia.
            </param>
            <param name="toDate">
            Parámetro que indica la fecha final del periodo de vigencia.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IValidPeriod"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2">
            <summary>
            Clase abstracta que representa las acciones de solo lectura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2">
            <summary>
            Interfaz que representa las acciones de solo lectura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            La interfaz <c>IReadOnlyRepository</c> representa las acciones
            de solo lectura sobre el repositorio de entidades y objetos valor.
            </remarks>
            <typeparam name="TEntity">Representación de la entidad.</typeparam>
            <typeparam name="TIdentifier">Representación del identificador único de la entidad.</typeparam>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetAll">
            <summary>
            Función que permite obtener todas las entidades de un repositorio.
            </summary>
            <remarks>
            Esta función se encarga de obtener todas las entidades de un repositorio.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetById(`1)">
            <summary>
            Función que indica la acción de obtención de una entidad por su
            identificador único.
            </summary>
            <remarks>
            Esta función se encarga de actualizar un objeto TIdentifier.
            </remarks>
            <param name="identifier">
            Parámetro que indica el identificador único de la entidad.
            </param>
            <returns>
            Devuelve un objeto de tipo entidad.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetBySpecification(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio
            a partir de un filtro especificado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1"/>
            que representa el filtro a aplicar mediante el patrón especificación.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable`1"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetEnabled">
            <summary>
            Función que permite obtener todas las entidades activas de un repositorio
            a partir de un filtro especificado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable`1"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetEnabledPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            activas del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:Inflexion.Framework.Domain.Core.PagedElements`1"/>
            sobre las entidades activas del tipo <typeparamref name="TEntity"/>
            con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio
            a partir de un filtro especificado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetFilteredPaged``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:Inflexion.Framework.Domain.Core.PagedElements`1"/>
            sobre las entidades activas del tipo <typeparamref name="TEntity"/>
            con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta paginada y ordenada según los parámetros proporcionados.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:Inflexion.Framework.Domain.Core.PagedElements`1"/>
            sobre las entidades activas del tipo <typeparamref name="TEntity"/>
            con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IReadOnlyRepository`2.GetRowCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener el número de filas afectadas
            según el filtro proporcionado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression`1"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve el número de filas afectadas.
            </returns>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.unitOfWork">
            <summary>
            Variable privada para representar un adaptador para el acceso a datos.
            </summary>
            <remarks>
            Representa un adaptador para el acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.#ctor(Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ReadOnlyRepositoryBase"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="unitOfWork">
            Parámetro de unidad de trabajo. <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetAll">
            <summary>
            Función pública encargada de obtener todas las entidades.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve una colección de entidades.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetById(`1)">
            <summary>
            Función pública que nos permite obtener una entidad por su
            identificador único.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="identifier">
            Parámetro para el identificador único de la entidad.
            </param>
            <returns>
            Devuelve una interfaz entidad de tipo genérico.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetBySpecification(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio
            a partir de un filtro proporcionado mediante el patrón especificación.
            </summary>
            <remarks>
            <see href="http://en.wikipedia.org/wiki/Specification_pattern"/>
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1"/>
            que identifica la especificación a representar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio de acuerdo a
            la especificación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetEnabled">
            <summary>
            Función que permite obtener todas las entidades activas de un repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades activas del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetEnabledPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            activas del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            activas del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetFilteredPaged``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta paginada y ordenada según los parámetros proporcionados.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Linq.IQueryable"/> que representa
            la consulta ordenada y paginada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.GetRowCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener el número de filas afectadas
            según el filtro proporcionado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve el número de filas afectadas.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ReadOnlyRepositoryBase`2.UnitOfWork">
            <summary>
            Unidad de trabajo que será utilizada para acceder al repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Core.ThreadStaticSingleton`1">
            <summary>
            Clase pública utilizada para crear de forma segura un objeto singleton.
            </summary>
            <remarks>
            Crea un objeto singleton de forma segura.
            </remarks>
            <typeparam name="T">Clase a instanciar.</typeparam>
        </member>
        <member name="T:Inflexion.Framework.Core.GenericContextSingleton`1">
            <summary>
            <para>
            Clase pública utilizada para crear un objeto singleton.
            </para>
            <para>
            En este caso, permite la creación de más de un objeto del tipo
            pasado como argumento, pero si, y sólo si, esos objetos tienen
            miembros (propiedades, etc) diferentes, identificados en los
            argumentos pasados a la clase.
            </para>
            <para>
            Permite la creación de dos ó más objetos del mismo tipo siempre y
            cuando alguno de sus miembros sean diferentes.
            </para>
            </summary>
            <remarks>
            Crea un objeto singleton.
            </remarks>
            <typeparam name="T">
            Clase a instanciar.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Core.GenericContextSingleton`1.initializationParameters">
            <summary>
            Variable privada que indica los parámetros utilizados como
            inicialización del objeto a crear.
            </summary>
            <remarks>
            Indica los parámetros utilizados como inicialización del objeto
            a crear.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Core.GenericContextSingleton`1.keyHolder">
            <summary>
            Variable privada que instancia un objeto de tipo KeyHolder.
            </summary>
            <remarks>
            Instancia un objeto de tipo KeyHolder.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GenericContextSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:GenericContextSingleton"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GenericContextSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:GenericContextSingleton"/>.
            </remarks>
            <param name="initialObject">
            Objeto a instanciar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.#ctor(System.Object[])">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GenericContextSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:GenericContextSingleton"/>.
            </remarks>
            <param name="initializationParameters">
            Parámetros de inicialización.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.op_Implicit(Inflexion.Framework.Core.GenericContextSingleton{`0})~`0">
            <summary>
            Función estática de tipo implícita que nos permite recuperar la
            instancia singleton creada.
            </summary>
            <remarks>
            Nos permite recuperar la instancia singleton creada.
            </remarks>
            <param name="value">Valor de la instancia singleton creada.</param>
            <returns>Devuelve un objeto singleton creado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.CreateNewInstance">
            <summary>
            Función privada encargada de crear una instancia del objeto
            pasado como parámetro en la clase genérica.
            </summary>
            <remarks>
            Nos permite crear una instancia del objeto pasado como
            parámetro en la clase genérica.
            </remarks>
            <returns>Devuelve un objeto instanciado del objeto pasado como
            parámetro en la clase genérica.</returns>
        </member>
        <member name="P:Inflexion.Framework.Core.GenericContextSingleton`1.Instance">
            <summary>
            Propiedad pública que permite establecer y obtener la instancia
            creada.
            </summary>
            <remarks>
            Nos permite establecer y obtener la instancia creada.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener la instancia
            creada.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Core.GenericContextSingleton`1.InitializationParameters">
            <summary>
            Propiedad pública que permite establecer y obtener los
            parámetros de inicialización.
            </summary>
            <remarks>
            Nos permite establecer y obtener los parámetros de
            inicialización.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener los parámetros
            de inicialización.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Core.GenericContextSingleton`1.StoredInstances">
            <summary>
            Propiedad pública que permite establecer y obtener las
            instancias almacenadas y creadas.
            </summary>
            <remarks>
            Nos permite establecer y obtener las instancias almacenadas y
            creadas.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener las instancias
            almacenadas y creadas.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Core.GenericContextSingleton`1.KeyHolder">
            <summary>
            Clase utilizada para trabajar con los parámetros o campos
            denominados clave.
            </summary>
            <remarks>
            Nos permite trabajar con los parámetros o campos denominados clave.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Core.GenericContextSingleton`1.KeyHolder.parameters">
            <summary>
            Variable privada que contiene los parámetros a utilizar
            por la clase.
            </summary>
            <remarks>
            Contiene los parámetros a utilizar por la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.KeyHolder.#ctor(System.Object[])">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:KeyHolder"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:KeyHolder"/>.
            </remarks>
            <param name="parameters">Parámtros que deben ser
            inicializados al crear la nueva instancia de la clase.</param>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.KeyHolder.Equals(System.Object)">
            <summary>
            <para>
            Función pública que compara dos instancias object para
            conocer su estado o existencia (si son iguales entre sí o no).
            </para>
            <para>
            Compara el objeto especificado con el objeto actual.
            </para>
            </summary>
            <remarks>
            <para>
            Compara dos objeto para conocer su estado o existencia (si
            son iguales entre sí o no).
            </para>
            <para>
            Compara el objeto especificado con el objeto actual.
            </para>
            </remarks>
            <param name="element">Objeto a comparar.</param>
            <returns>Devuelve <c>true</c> si existe, y <c>false</c> en
            caso contrario.</returns>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericContextSingleton`1.KeyHolder.GetHashCode">
            <summary>
            Función pública que se utiliza como función hash para un
            tipo concreto. Esta función se suele utilizar en algoritmos
            de hash y en estructuras de datos con tablas hash.
            </summary>
            <remarks>
            Se utiliza como función hash para un tipo concreto. Esta
            función se suele utilizar en algoritmos de hash y en
            estructuras de datos con tablas hash.
            </remarks>
            <returns>Valor hash generado. Devuelve 0 en caso de no
            haberse calculado nada.</returns>
        </member>
        <member name="F:Inflexion.Framework.Core.ThreadStaticSingleton`1.storedInstance">
            <summary>
            Variable privada y estática, encargada de almacenar las
            instancias creadas.
            </summary>
            <remarks>
            Nos permite almacenar las instancias creadas.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.ThreadStaticSingleton`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ThreadStaticSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ThreadStaticSingleton"/>.
            </remarks>
            <param name="initialObject">Objeto inicial a instanciar.</param>
        </member>
        <member name="M:Inflexion.Framework.Core.ThreadStaticSingleton`1.#ctor(System.Object[])">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ThreadStaticSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ThreadStaticSingleton"/>.
            </remarks>
            <param name="initializationParameters">Parámetros de inicialización
            para el objeto a instanciar.</param>
        </member>
        <member name="P:Inflexion.Framework.Core.ThreadStaticSingleton`1.StoredInstances">
            <summary>
            Propiedad pública que permite establecer y obtener las
            instancias almacenadas y creadas.
            </summary>
            <remarks>
            Nos permite establecer y obtener las instancias almacenadas y
            creadas.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener las instancias
            almacenadas y creadas.
            </value>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.Create``1">
            <summary>
            Create an instance of CounterHelper to manage performance counters defined on T
            </summary>
            <typeparam name="T">enumerator that holds performance counter information</typeparam>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute"/>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterAttribute"/>
            <returns>returns an instance of CounterHelper</returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.Create``1(System.String)">
            <summary>
            Create an instance of CounterHelper to manage performance counters defined on T defininig an instance name for multi-instance counters.
            </summary>
            <typeparam name="T">enumerator that holds performance counter information</typeparam>
            <param name="instanceName">instance name to be used on multi-instance counters</param>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute"/>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterAttribute"/>
            <returns>returns an instance of CounterHelper</returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.Install``1">
            <summary>
            Install a category of performance counters using the information on the enumerator
            </summary>
            <param name="enumType">enumerator that contains information on the performance counters</param>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute"/>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterAttribute"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.Uninstall``1">
            <summary>
            Uninstall a category of performance counters defined in this Enumerator
            </summary>
            <param name="typeT">enumerator that holds counters and defines PerformanceCounterCategoryAttribute and PerformanceCounterAttribute</param>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute"/>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterAttribute"/>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.GetCounterNameForBaseType(System.String)">
            <summary>
            Returns the counter name for the counter base given the counter name that needs a base
            </summary>
            <param name="counterName">counter name of the counter that needs a base</param>
            <returns>counter name to be used on the base counter</returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.GetCategoryAttribute(System.Type)">
            <summary>
            Get PerformanceCounterCategoryAttribute attached to an Enumeration
            </summary>
            <param name="enumType">enumerator</param>
            <returns>returns an instance of PerformanceCounterCategoryAttribute in case the attribute is found, otherwise null</returns>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute"/>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterFactory.GetCounterAttribute(System.Type,System.Object)">
            <summary>
            Get PerformanceCounterAttribute attached to an item within an Enumeration
            </summary>
            <param name="enumType">enumerator</param>
            <param name="enumValue">value withing the enum</param>
            <returns>returns an instance of PerformanceCounterAttribute in case the attribute is found, otherwise null</returns>
            <seealso cref="T:Inflexion.Framework.PerformanceCounters.CounterAttribute"/>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.IoC.ManagerIoC">
            <summary>
            Clase pública estática encargada de gestionar las interfaces de
            inversión de código para la aplicación.
            </summary>
            <remarks>
            Esta clase tiene como misión principal la de gestionar las diferentes
            interfaces de trabajo con las que podemos trabajar a la hora de llevar
            a cabo la inversión de código.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.IoC.ManagerIoC.singleton">
            <summary>
            Variable estática privada utilizada como instancia única
            (singleton) para albergar la instancia de nuestro inversor.
            </summary>
            <remarks>
            Declaramos el atributo singleton para albergar la instancia
            de nuestro inversor.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.IoC.ManagerIoC.syncLock">
            <summary>
            Variable estática privada utilizada como centinela
            para poder hacer un singleton en multithread.
            </summary>
            <remarks>
            Usamos synlock como un centinela para poder hacer
            un singleton en multithread.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.IoC.ManagerIoC.Container">
            <summary>
            Propiedad estática correspondiente al atributo singleton de
            solo lectura y que inicializamos con una instancia del
            inversor.
            </summary>
            <remarks>
            Esta propiedad estática y de sólo lectura es utilizada para
            trabajar con una interfaz <see cref="T:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC"/>.
            </remarks>
            <value>
            Indica una instancia del inversor.
            </value>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectParameter">
            <summary>
            Clase pública de parámetros Sql para poder ser utilizados por los objetos
            de base de datos.
            </summary>
            <remarks>
            Nos permite preparar parámetros que serán utilizados en las sentencias
            Sql a ejecutar en las bases de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectParameter.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase ObjectParameter.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectParameter.#ctor(Inflexion.Framework.DataAccess.Providers.DbDataProvider@,System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Inicializa una nueva instancia de la clase ObjectParameter.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="dataProvider">Objeto DbDataProvider.</param>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectParameter.AddParameter">
            <summary>
            Método público encargado de añadir un parámetro al comando Sql.
            </summary>
            <remarks>
            Método que nos permite añadir un parámetro al comando Sql.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectParameter.AddParameter(Inflexion.Framework.DataAccess.Providers.DbDataProvider@,System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método encargado de añadir un parámetro al comando Sql del
            proveedor correspondiente.
            </summary>
            <remarks>
            Método que nos permite añadir un parámetro al comando Sql del
            proveedor correspondiente.
            </remarks>
            <param name="dataProvider">Objeto
            <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">DbDataProvider</see>.</param>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Indica la dirección del parámetro
            (salida, entrada, etc.)</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectParameter.RetrieveAddParameter">
            <summary>
            Método privado encargado de añadir un parámetro al comando Sql
            del proveedor correspondiente.
            </summary>
            <remarks>
            Método que nos permite añadir un parámetro al comando Sql del
            proveedor correspondiente.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.DataProvider">
            <summary>
            Propiedad pública que obtiene o establece el objeto DbDataProvider.
            </summary>
            <remarks>
            Nos permite obtener o establecer el objeto DbDataProvider.
            </remarks>
            <value>
            Obtiene o establece el objeto DbDataProvider.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.ParameterDbType">
            <summary>
            Propiedad pública que obtiene o establece el tipo del parámetro
            de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el tipo del parámetro de base
            de datos.
            </remarks>
            <value>
            Obtiene o establece el tipo del parámetro de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.ParameterDirection">
            <summary>
            Propiedad pública que obtiene o establece la dirección del
            parámetro de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la dirección del parámetro de base
            de datos.
            </remarks>
            <value>
            Obtiene o establece la dirección del parámetro de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.ParameterLength">
            <summary>
            Propiedad pública que obtiene o establece la longitudr del
            parámetro de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer la longitud del parámetro de base
            de datos.
            </remarks>
            <value>
            Obtiene o establece la longitud del parámetro de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.ParameterName">
            <summary>
            Propiedad pública que obtiene o establece el nombre del parámetro
            de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el nombre del parámetro de base
            de datos.
            </remarks>
            <value>
            Obtiene o establece el nombre del parámetro de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectParameter.ParameterValue">
            <summary>
            Propiedad pública que obtiene o establece el valor del parámetro
            de base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer el valor del parámetro de base
            de datos.
            </remarks>
            <value>
            Obtiene o establece el valor del parámetro de base de datos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2">
            <summary>
            Clase abstracta que representa las acciones de solo escritura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IWriteOnlyRepository`2">
            <summary>
            Interfaz que representa las acciones de solo escritura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            La interfaz <c>IReadOnlyRepository</c> representa las acciones
            de solo escritura sobre el repositorio de entidades y objetos valor.
            </remarks>
            <typeparam name="TEntity">Representación de la entidad.</typeparam>
            <typeparam name="TIdentifier">Representación del identificador único de la entidad.</typeparam>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyRepository`2.Delete(`0)">
            <summary>
            Elimina una entidad existente del almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="entity">
            Entidad del dominio a eliminar del almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyRepository`2.Insert(`0)">
            <summary>
            Inserta una nueva entidad en el almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="entity">
            Entidad del dominio a insertar en el almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyRepository`2.Modify(`0)">
            <summary>
            Modifica una entidad existente en el almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="entity">
            Entidad del dominio a actualizar en el almacén físico de datos.
            </param>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.unitOfWork">
            <summary>
            Variable privada para representar un adaptador para el acceso a datos.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.#ctor(Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:WriteOnlyRepositoryBase"/>.
            </summary>
            <param name="unitOfWork">
            Parámetro de unidad de trabajo. <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>unitOfWork</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.Delete(`0)">
            <summary>
            Función pública encargada de eliminar una entidad de tipo
            del repositorio físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.Insert(`0)">
            <summary>
            Función pública encargada de insertar una entidad en el repositorio
            físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.Modify(`0)">
            <summary>
            Función pública encargada de actualizar una entidad pasada como
            parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.WriteOnlyRepositoryBase`2.UnitOfWork">
            <summary>
            Unidad de trabajo que será utilizada para acceder al repositorio.
            </summary>
            <remarks>
            La unidad de trabajo debería inyectarse a través del constructor.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.AuditableEntityBase`1">
             <summary>
             Clase pública abstracta para representar las entidades del negocio
             auditables.
             </summary>
             <remarks>
             La clase abstracta <see cref="T:Inflexion.Framework.Domain.Base.AuditableEntityBase`1"/>
             representa una clase base de tipo entidad de negocio auditable.
             </remarks>
             <typeparam name="TIdentifier">
             Tipo genérico para representar el tipo de identificador de las
             entidades y que es necesario para los repositorios.
             </typeparam>
             <seealso cref="T:Inflexion.Framework.Domain.Core.IAuditableEntity{TIdentifier}"/>
             <example>
             Ejemplo de implementación de esta clase abstracta suponiendo una
             entidad <c>Ambito</c> que implementa a su vez la interfaz <c>IAmbito</c>:
             <code>
               <![CDATA[
            
             using System;
             using System.Collections.Generic;
            
             using Inflexion.Suite.Foo.BoundedContext.Domain.Core;
             using Inflexion.Framework.Domain.Base;
            
             /// <summary>
             /// Clase pública que representa a la entidad <see cref="T:Ambito"/>.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public class Ambito : AuditableEntitybase<int>, IAmbito
             {
            
                 #region FIELDS
            
                     /// <summary>
                     /// Variable privada que representa la descripción del ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     private string descripcion;
            
                     /// <summary>
                     /// Variable privada que indica si el ámbito está activo.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     private bool activo;
            
                 #endregion
            
                 #region CONSTRUCTORS
            
                     /// <summary>
                     /// Inicializa una nueva instancia de la clase <see cref="T:Ambito"/>.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     internal Ambito() : base(NullId)
                     {
                     } // Ambito Constructor
            
                     /// <summary>
                     /// Inicializa una nueva instancia de la clase <see cref="T:Ambito"/>.
                     /// </summary>
                     /// <remarks>
                     /// Constructor de la clase <see cref="T:Ambito"/>.
                     /// </remarks>
                     /// <param name="ambitoId">
                     /// Parámetro que indica el identificador del ámbito.
                     /// </param>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     internal Ambito(
                                     int ambitoId,
                                     string description)
                         : base(ambitoId)
                     {
                         // Inicializamos las propiedades.
                         this.Descripcion = description;
                         this.Activo= true;
                     } // Ambito Constructor
            
                 #endregion
            
                 #region PROPERTIES
            
                     /// <summary>
                     /// Propiedad pública que permite obtener o establecer
                     /// la descripción del ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <value>
                     /// Valor que es utilizado para obtener o
                     /// establecer la descripción del ámbito.
                     /// </value>
                     public virtual string Descripcion
                     {
                         get
                         {
                             return this.descripcion;
                         }
                         private set
                         {
                             // Validamos.
                             if (string.IsNullOrWhiteSpace(value))
                             {
                                 // Lanzamos la excepción.
                                 throw new System.ArgumentNullException("Descripcion");
                             }
                             else
                             {
                                 // Asignamos
                                 this.descripcion = value;
                             }
                         }
                     } // Description Property
            
                     /// <summary>
                     /// Propiedad pública que indica si la entidad está activa.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <value>
                     /// Valor que es utilizado para indicar si la entidad está activa.
                     /// </value>
                     public virtual bool Activo
                     {
                         get
                         {
                             return this.activo;
                         }
                         private set
                         {
                             this.activo = value;
                         }
                     } // IsActive Property
            
                 #endregion
            
                 #region METHODS
            
                     /// <summary>
                     /// Método encargada del borrado lógico de la entidad.
                     /// </summary>
                     /// <remarks>
                     /// Modifica el valor la propiedad Activo a <c>False</c>.
                     /// </remarks>
                     public virtual void Disable()
                     {
                         // Borrado lógico.
                         if (this.Activo) this.Activo = false;
                     } // Disable
            
                     /// <summary>
                     /// Método encargada de establecer la descripción
                     /// de la entidad ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     /// <exception cref="System.ArgumentNullException">
                     /// Lanzada cuando el valor del parámetro <c>description</c> es cadena vacía.
                     /// </exception>
                     public virtual void SetDescripcion(
                                                        string description)
                     {
                         // Asignamos.
                         this.Descripcion = description;
                     } // SetDescripcion
            
                 #endregion
            
             } // Ambito
            
               ]]>
             </code>
             </example>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IAuditableEntity`1">
             <summary>
             Interfaz para representar las entidades del negocio auditables.
             </summary>
             <remarks>
             Sin comentarios especiales.
             </remarks>
             <typeparam name="TIdentifier">
             Representación del tipo del identificador de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta interfaz suponiendo la interfaz
             <c>IAmbito</c> que la implementa:
             <code>
               <![CDATA[
            
             using System;
            
             /// <summary>
             /// Interfaz que identifica una entidad de tipo Ámbito
             /// dentro de la aplicación.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public interface IAmbito : Inflexion.Framework.Domain.Core.IAuditableEntity<int>
             {
            
                 #region PROPERTIES
            
                     /// <summary>
                     /// Propiedad pública que permite obtener la descripción del ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <value>
                     /// Valor que es utilizado para obtener la descripción del ámbito.
                     /// </value>
                     string Descripcion { get; }
            
                 #endregion
            
                 #region MEMBERS
            
                     /// <summary>
                     /// Método encargada del borrado lógico de la entidad.
                     /// </summary>
                     /// <remarks>
                     /// Modifica el valor la propiedad Activo a <c>false</c>.
                     /// </remarks>
                     void Disable();
            
                     /// <summary>
                     /// Método encargada de establecer la descripción
                     /// de la entidad ámbito.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     /// <exception cref="System.ArgumentNullException">
                     /// Lanzada cuando el valor del parámetro <c>description</c> es cadena vacía.
                     /// </exception>
                     void SetDescripcion(string description);
            
                 #endregion
            
             } // IAmbito
            
               ]]>
             </code>
             </example>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IAuditableEntity`1.AuditDelete(System.String)">
            <summary>
            Método para auditar la eliminación de una entidad existente.
            </summary>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que elimina la entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IAuditableEntity`1.AuditInsert(System.String)">
            <summary>
            Método para auditar la creación de una nueva entidad.
            </summary>
            <param name="createdBy">
            Parámetro que indica el identificador único del usuario
            que crea la nueva entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IAuditableEntity`1.AuditUpdate(System.String)">
            <summary>
            Método para auditar la modificación de una entidad existente.
            </summary>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.IAuditableEntity`1.AuditInfo">
            <summary>
            Propiedad que obtiene la información de auditoría.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor utilizado para obtener la información de auditoría.
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.NullId">
            <summary>
            Constante privada utilizada para indicar que un identificador
            es nulo o no representativo.
            </summary>
            <remarks>
            Creamos esta constante por necesidad de Nhibernate, ya que
            necesita constructores vacíos en las clases a persistir.
            </remarks>
            <value>
            <c>0</c>
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.auditInfo">
            <summary>
            Variable encargada de almacenar la información
            de auditoría.
            </summary>
            <remarks>
            Para ello se utilizará el objeto valor <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo"/>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.id">
            <summary>
            Identificador único de la entidad.
            </summary>
            <remarks>
            Este campo o variable se utiliza conjuntamente con la propiedad
            <see cref="P:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Id"/>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.isActive">
            <summary>
            Variable privada de propiedad para indicar
            si la entidad está activa ó habilitada.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AuditableEntityBase"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="id">
            Parámetro que indica el identificador único de la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.AuditDelete(System.String)">
            <summary>
            Método para auditar la eliminación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.AuditInsert(System.String)">
            <summary>
            Método para auditar la creación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="createdBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.AuditUpdate(System.String)">
            <summary>
            Método para auditar la modificación de la entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador único del usuario
            que modifica la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.CompareTo(System.Object)">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="element">
            Indica el otro objeto con el cual comparar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>element</c> es null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Lanzada cuando el valor de la variable <c>otherEntity</c> es null.
            </exception>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>element</c> es null, o
            cuando a la hora de hacer el cast al tipo <seealso cref="T:IAuditableEntity"/>
            es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.CompareTo(Inflexion.Framework.Domain.Core.IEntity{`0})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador único de dos entidades para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">
            Indica el otro objeto con el cual comparar.
            </param>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>entityIdentifier</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.CompareTo(Inflexion.Framework.Domain.Base.AuditableEntityBase{`0})">
            <summary>
            Define la función encargada de comparar u ordenar objetos.
            </summary>
            <remarks>
            Compara el identificador de dos entidades base para saber si
            son iguales o no.
            </remarks>
            <param name="entityIdentifier">Indica el otro objeto con el cual comparar.</param>
            <returns>
            Devuelve un entero que indica si la comparación es correcta o no.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Disable">
            <summary>
            Método encargado del borrado lógico de la entidad.
            </summary>
            <remarks>
            Borrado lógico de la entidad.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Enable">
            <summary>
            Método encargada del activar ó habilitar una entidad.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Equals(System.Object)">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="otro">
            Objeto a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Equals(Inflexion.Framework.Domain.Core.IEntity{`0})">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="entityIdentifier">
            Entidad a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Equals(Inflexion.Framework.Domain.Base.AuditableEntityBase{`0})">
            <summary>
            Función encargada de comprobar si un objeto es igual a otro.
            </summary>
            <remarks>
            Comprueba si un objeto es igual a otro.
            </remarks>
            <param name="entity">
            Entidad a comparar.
            </param>
            <returns>
            Devuelve <c>true</c> si los objetos comparados son iguales y
            <c>false</c> en el caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.GetHashCode">
            <summary>
            Función encargada de obtener un código hash.
            </summary>
            <remarks>
            Obtiene un código hash.
            </remarks>
            <returns>
            Devuelve un valor <see cref="T:System.Int32"/> con el código hash.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.ActualType">
            <summary>
            Devuelve el tipo actual de la entidad, con independencia
            del nivel en el que nos encontremos en la jerarquía de clases.
            </summary>
            <remarks>
            El tipo real será utilizado como criterio principal
            durante la igualdad y comparación entre entidades.
            </remarks>
            <value>
            El tipo real (tipo <see cref="T:System.Type"/> hoja) de la
            entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.AuditInfo">
            <summary>
            Propiedad que obtiene la información de auditoría.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor utilizado para obtener la información de auditoría.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.Id">
            <summary>
            Devuelve el identificador único de la entidad.
            </summary>
            <remarks>
            <para>
            El valor del identificador único será utilizado como
            criterio principal durante la igualdad y comparación entre
            entidades.
            </para>
            <para>
            TIdentifier Representa el tipo de datos del identificador único
            de la entidad.
            </para>
            </remarks>
            <value>
            Identificador único de la entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.AuditableEntityBase`1.IsActive">
            <summary>
            Propiedad pública que indica
            si la entidad está activa.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para indicar si la entidad
            está o no activa.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Utilities.Dates">
            <summary>
            Clase estática que nos permite trabajar con fechas dentro
            de los dominios.
            </summary>
            <remarks>
            La clase estática <c>Fecha</c> se utiliza para trabajar con fechas de
            forma general dentro de los dominios que forman parte de la solución.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <param name="dateTimeFormatInfo">
            Indicamos el formato de fecha y hora de la cultura pasada como argumento.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Utilities.Dates.CurrentWeek">
            <summary>
            Propiedad pública estática que devuelve el número de la semana en curso, en función de
            los parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            <para>Esta propiedad de sólo lectura se encarga de devolver el número de semana actual.</para>
            <para>Para ello, se apoya en la función <see cref="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime)"/> o
            bien <see cref="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)"/>.</para>
            </remarks>
            <returns>
            Número de la semana en curso.
            </returns>
            <value>
            Semana actual de acuerdo a una fecha y hora actual.
            </value>
            <seealso cref="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime)"/> o bien
            <seealso cref="M:Inflexion.Framework.Domain.Utilities.Dates.WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)"/>.
        </member>
        <member name="P:Inflexion.Framework.Domain.Utilities.Dates.CurrentYear">
            <summary>
            Propiedad pública estática que devuelve el año en curso.
            </summary>
            <remarks>
            Esta propiedad de sólo lectura se encarga de devolver el año actual.
            </remarks>
            <value>
            Año en curso.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC">
            <summary>
            <para>
            Interfaz del Inyector de dependencias.
            </para>
            <para>
            Esta interfaz nos permite adaptar o elegir la tecnología de
            inversión de control.
            </para>
            </summary>
            <remarks>
            Con esta interfaz, podemos seleccionar la tecnología de inversión de
            control que deseemos, independizando esta parte de la tecnología.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.RegisterInstance``1(``0,System.String)">
            <summary>
            Método que nos permite registrar una instancia mapeada, con el contenedor.
            </summary>
            <remarks>
            Este método se utiliza para decirle al contenedor que cuando se le preguntó por
            TFrom, en realidad devuelva la instancia de TTO registrada.
            </remarks>
            <param name="instance">
            Parámetro que indica la instancia registrada.
            </param>
            <param name="name">
            Parámetro que indica el nombre que se utilizará para solicitar el tipo.
            </param>
            <typeparam name="TFrom">
            <see cref="T:System.Type"/> que se solicita.
            </typeparam>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.RegisterType``2(System.String)">
            <summary>
            Método que nos permite registrar un tipo mapeado, con el contenedor.
            </summary>
            <remarks>
            Este método se utiliza para decirle al contenedor que cuando se le preguntó por
            TFrom, en realidad devuelva una instancia de tipo TTO.
            </remarks>
            <param name="name">
            Parámetro que indica el nombre que se utilizará para solicitar el tipo.
            </param>
            <typeparam name="TFrom">
            <see cref="T:System.Type"/> que se solicita.
            </typeparam>
            <typeparam name="TTo">
            <see cref="T:System.Type"/> que realmente se devuelve.
            </typeparam>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.Resolve``1">
            <summary>
            La principal solicitud del inversor consiste en obtener la
            instancia de un tipo.
            </summary>
            <remarks>
            Obtenemos la instancia de un tipo de inversión de control.
            </remarks>
            <typeparam name="T">Genérico que corresponde con el adaptador de
            inversión de código a utilizar.</typeparam>
            <returns>Devuelve el adaptador de inversión de control a utilizar.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.Resolve(System.Type)">
            <summary>
            Nos permite obtener la instancia de un tipo.
            </summary>
            <remarks>
            Obtenemos la instancia de un tipo de inversión de control.
            </remarks>
            <param name="type">Tipo de dato a través del cuál resolver.</param>
            <returns>Devuelve un objeto obtenido de acuerdo a su tipo de dato.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.Resolve``1(System.String)">
            <summary>
            La principal solicitud del inversor consiste en obtener la
            instancia de un tipo.
            </summary>
            <remarks>
            Obtenemos la instancia de un tipo de inversión de control.
            </remarks>
            <typeparam name="T">Genérico que corresponde con el adaptador de
            inversión de código a utilizar.</typeparam>
            <returns>Devuelve el adaptador de inversión de control a utilizar.</returns>
            <param name="identifier">Identificador que corresponde con el valor
            <c>name</c> del archivo de configuración de IoC.</param>
            <returns>Devuelve el adaptador de inversión de control a utilizar.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.IoC.IAdapterIoC.Resolve(System.Type,System.String)">
            <summary>
            Nos permite obtener la instancia de un tipo.
            </summary>
            <remarks>
            Obtenemos la instancia de un tipo de inversión de control.
            </remarks>
            <param name="type">Tipo de dato a través del cuál resolver.</param>
            <param name="identifier">Identificador que corresponde con el valor
            <c>name</c> del archivo de configuración de IoC.</param>
            <returns>Devuelve un objeto obtenido de acuerdo a su tipo de dato.</returns>
        </member>
        <member name="T:Inflexion.Framework.Extensions.DateTimeExtension">
            <summary>
            Clase estática que define métodos extensores para la clase
            <see cref="T:System.DateTime"/>.
            </summary>
            <remarks>
            Para utilizar los métodos extensores es necesario incluir el
            espacio de nombres <see cref="N:Inflexion.Framework.Extensions"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.CompareTo24(System.DateTime,System.DateTime)">
            <summary>
            Método que compara dos fechas teniendo en cuenta que el día empieza a las 6:00 y termina a las 5:59.
            </summary>
            <param name="date">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="value">
            Parámetro que indica el valor de la fecha a comparar.
            </param>
            <returns>
            - Un valor menor que cero indica que esta fecha es anterior al valor comparado.
            - Un valor mayor que cero indica que esta fecha es posterior al valor comparado.
            - Un valor igual a cero indica que ambas fechas comparadas son iguales.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.Compose(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Compone un campo DateTime con la fecha y hora combinadas a partir de dos campos datetime separados.
            </summary>
            <param name="dia">
            Parámetro que indica el valor para el dia.
            </param>
            <param name="hora">
            Parámetro que indica el valor para la hora.
            </param>
            <returns>
            Devuelve el dia / hora combinados.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.ComposeAndCompareTo24(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Método que compara una fecha, su hora de inicio y su hora de fin.
            </summary>
            <param name="date">
            Parámetro que indica la fecha.
            </param>
            <param name="time1">
            Parámetro que indica la hora de inicio.</param>
            <param name="time2">
            Parámetro que indica laa hora de fin.
            </param>
            <returns>
            - Un valor menor que cero indica que hora1 es anterior a hora2.
            - Un valor mayor que cero indica que hora1 es posterior a hora2.
            - Un valor igual a cero indica que ambas horas comparadas son iguales.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.ComposeForSchedule(System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Compone un campo DateTime con la fecha y hora combinadas a partir de dos campos datetime separados.
            </summary>
            <remarks>
            Utilizar este método únicamente en la parrilla.
            </remarks>
            <param name="dia">
            Parámetro que indica valor para el dia.
            </param>
            <param name="hora">
            Parámetro que indica el valor para la hora.</param>
            <returns>
            Devuelve el dia / hora combinados.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.GetDateOnly(System.DateTime)">
            <summary>
            Obtiene un DateTime con exclusivamente la parte fecha de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con día y hora.
            </param>
            <returns>
            Devuelve el valor sólo de fecha.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.GetDateOnlyForSchedule(System.DateTime)">
            <summary>
            Utilizar este método únicamente en la parrilla.
            Obtiene un DateTime con exclusivamente la parte fecha de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con dia y hora.
            </param>
            <returns>
            Devuelve el valor sólo con fecha.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.GetTimeOnly(System.DateTime)">
            <summary>
            Obtiene un DateTime con exclusivamente la parte horaria de otro DateTime.
            </summary>
            <param name="dateTime">
            Parámetro que indica el valor con día y hora.
            </param>
            <returns>
            Devuelve el valor sólo con las horas.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.WeekNumber(System.DateTime)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.WeekNumber(System.DateTime,System.Globalization.DateTimeFormatInfo)">
            <summary>
            Función pública estática que devuelve el número de la semana correspondiente a la
            <paramref name="date"/> especificada, en función de los
            parámetros culturales del sistema donde se ejecute.
            </summary>
            <remarks>
            Esta función estática devuelve el número de semana de acuerdo a
            una fecha dada.
            </remarks>
            <param name="date">
            Pasamos la fecha para la cual queremos obtener el numero de la semana.
            </param>
            <param name="dateTimeFormatInfo">
            Indicamos el formato de fecha y hora de la cultura pasada como argumento.
            </param>
            <returns>
            Número de la semana para <paramref name="date"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.DateTimeExtension.Normalize(System.DateTime,System.Boolean,System.Int32)">
             <summary>
             Método empleado para añadir o eliminar un día a la fecha especificada, si la hora es menor que hourShift.
             </summary>
             <remarks>
             Sin comentarios adicionales.
             </remarks>
             <param name="dateTime">
             Parámetro que indica la fecha a arreglar.
             </param>
             <param name="addDay">
             Parámetro indica: <c>True</c> añade un día, <c>false</c> retrasa un día.</param>
             <param name="hourShift">
            
             </param>
             <returns>
             Devuelve el valor de la fecha normalizado.
             </returns>
        </member>
        <member name="T:Inflexion.Framework.BaseException">
            <summary>
            Clase base Exception que será utilizada en todas las clases y objetos
            del Framework de Inflexion.
            </summary>
            <remarks>
            <para>
            Esta clase es la clase base a partir de la cual heredan el resto
            de clases de tipo Exception dentro del Framework de Inflexion.
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.BaseException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase BaseException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase BaseException.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.BaseException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase BaseException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase BaseException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase BaseException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase BaseException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
            <param name="innerException">Evento <see cref="T:System.Exception"/>
            que es lanzado por la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.BaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase BaseException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase BaseException.
            </remarks>
            <param name="info">Objeto de tipo <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">Objeto de tipo <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1">
            <summary>
            Clase encargada de la implementación de la lógica de validación
            en las entidades de dominio.
            </summary>
            <typeparam name="TEntity">
            Tipo de la entidad
            </typeparam>
            <remarks>
            Sin comentarios adicionales
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.Validation.IValidator`1">
            <summary>
            Interfaz que expone diferentes validadores que proporcionan
            la lógica de validación en las entidades de dominio.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.IValidator`1.AssertValidation(`0)">
            <summary>
            Método encargado de validar la instancia de la entidad pasada como parámetro.
            </summary>
            <remarks>
            Si la intancia no es válida, el método lanzará una excepción de tipo ValidationException.
            </remarks>
            <param name="instance">
            Parámetro que hace referencia a la instancia de la entidad a validar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.IValidator`1.IsValid(`0)">
            <summary>
            Función encargada de determinar si la instancia de la entidad es válida.
            </summary>
            <param name="instance">
            Parámetro que hace referencia a la instancia de la entidad a validar.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si la entidad es válida y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.Validation.IValidator`1.Validate(`0)">
            <summary>
            Función encargada de validar la intancia especificada.
            </summary>
            <param name="instance">
            Parámetro que hace referencia a la instancia de la entidad a validar.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.Validation.ValidationResult"/> que contiene el
            resultado de validar la intancia especificada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:DataAnnotationsValidator"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1.AssertValidation(`0)">
            <summary>
            Método encargado de afirmar la validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="instance">
            Parámetro que indica la instancia a validar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1.IsValid(`0)">
            <summary>
            Función encargada de determinar si la instancia de la entidad es válida.
            </summary>
            <param name="instance">
            Parámetro que hace referencia a la instancia de la entidad a validar.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve <c>true</c> si la entidad es válida y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1.Validate(`0)">
            <summary>
            Función encargada de validar la intancia especificada.
            </summary>
            <param name="instance">
            Parámetro que hace referencia a la instancia de la entidad a validar.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Devuelve objeto de tipo <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult"/> que contiene el
            resultado de validar la intancia especificada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.DataAnnotationsValidator`1.ParseDisplayName(System.Type,System.String)">
            <summary>
            Función estática encargada de analizar el nombre a mostrar.
            </summary>
            <param name="entityType">
            Parámetro de tipo <see cref="T:System.Type"/> que identifica el tipo de la entidad.
            </param>
            <param name="propertyName">
            Parámetro que indica el nombre de la propiedad.
            </param>
            <returns>
            Devuelve el nombre después de realizadr el análisis (Parse).
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.MinimumCollectionSizeAttribute">
            <summary>
            Clase atributo para la validación de tamaño mínimo de una colección.
            </summary>
            <remarks>
            Validamos el número de elementos mínimos que tiene que tener la colección.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.MinimumCollectionSizeAttribute.minSize">
            <summary>
             Variable privada que indica el tamañon mínimo de la colección.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.MinimumCollectionSizeAttribute.#ctor(System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase MinimumCollectionSizeAttribute.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="minSize">
            Parámetro que indica el tamaño mínimo.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.MinimumCollectionSizeAttribute.IsValid(System.Object)">
            <summary>
            Función para validar el tamaño mínimo de una colección.
            </summary>
            <param name="value">
            Parámetro que corresponde a la colección que se quiere validar.
            </param>
            <returns>
            Devuelve <c>true</c> sin la colección cumple con el tamaño mínimo y <c>false</c>
            en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2">
            <summary>
            Clase abstracta que representa las acciones de lectura y escritura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IReadWriteRepository`2">
            <summary>
            Interfaz que representa las acciones de lectura y escritura sobre el
            repositorio de entidades y objetos valor.
            </summary>
            <remarks>
            La interfaz representa las acciones de lectura y escritura sobre el
            repositorio de entidades y objetos valor.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.unitOfWork">
            <summary>
            Variable privada para representar un adaptador para el acceso a datos.
            </summary>
            <remarks>
            Representa un adaptador para el acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.#ctor(Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ReadWriteRepositoryBase"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="unitOfWork">
            Parámetro que indica la unidad de trabajo. <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.Delete(`0)">
            <summary>
            Función pública encargada de eliminar una entidad de tipo
            del repositorio físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetAll">
            <summary>
            Función pública encargada de obtener todas las entidades.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve una colección de entidades de tipo
            <see cref="T:System.Linq.IQueryable{Inflexion.Framework.Infrastructure.Security.Core.IRole}"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetById(`1)">
            <summary>
            Función pública que nos permite obtener una entidad por su
            identificador único.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="identifier">
            Identificador único de la entidad.
            </param>
            <returns>
            Devuelve una interfaz entidad.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetBySpecification(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio
            a partir de un filtro proporcionado mediante el patrón especificación.
            </summary>
            <remarks>
            <see href="http://en.wikipedia.org/wiki/Specification_pattern"/>
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1"/>
            que representa la especificación a representar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio de acuerdo a
            la especificación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetEnabled">
            <summary>
            Función que permite obtener todas las entidades activas de un repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades activas del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetEnabledPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            activas del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            activas del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio.
            </summary>
            <remarks>
            Esta función se encarga de obtener todas las entidades de un repositorio.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetFilteredPaged``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta paginada y ordenada según los parámetros proporcionados.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Linq.IQueryable"/> que representa
            la consulta ordenada y paginada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.GetRowCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener el número de filas afectadas
            según el filtro proporcionado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve el número de filas afectadas.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.Insert(`0)">
            <summary>
            Función pública encargada de insertar una entidad en el repositorio
            físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.Modify(`0)">
            <summary>
            Función pública encargada de actualizar una entidad pasada como
            parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ReadWriteRepositoryBase`2.UnitOfWork">
            <summary>
            Unidad de trabajo que será utilizada para acceder al repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2">
             <summary>
             Clase abstracta que representa las acciones de lectura y escritura sobre el
             repositorio de entidades y objetos valor auditables.
             </summary>
             <remarks>
             Sin comentarios especiales.
             </remarks>
             <typeparam name="TEntity">
             Representación de la entidad.
             </typeparam>
             <typeparam name="TIdentifier">
             Representación del identificador único de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta clase abstracta suponiendo la clase
             sellada <c>AmbitoRepository</c> que implementa a su vez la interfaz <c>IAmbitoRepository</c>:
             <code>
               <![CDATA[
            
             using System;
             using System.Collections.Generic;
             using System.Linq;
             using System.Linq.Expressions;
            
             using Inflexion.Framework.Domain.Base;
             using Inflexion.Framework.Infrastructure.DataAccess.UoW;
            
             using Inflexion.Suite.Foo.BoundedContext.Domain.Core;
            
             /// <summary>
             /// Clase pública sellada repositorio para persistir y obtener
             /// información a partir de entidades <see cref="T:IAmbito"/>.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public sealed class AmbitoRepository : ReadWriteAuditableRepositoryBase<IAmbito, int>, IAmbitoRepository
             {
            
                 #region CONSTRUCTORS
            
                     /// <summary>
                     /// Inicializa una nueva instancia de la clase <see cref="T:IAmbitoRepository"/>.
                     /// </summary>
                     /// <remarks>
                     /// Sin comentarios especiales.
                     /// </remarks>
                     /// <param name="unitOfWork">
                     /// Parámetro de tipo <see cref="IAdapter"/> que hace referencia
                     /// a la unidad de trabajo para el acceso a datos.
                     /// </param>
                     /// <exception cref="System.ArgumentNullException">
                     /// Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
                     /// </exception>
                     internal AmbitoRepository(IAdapter unitOfWork) : base(unitOfWork)
                     {
                     } // AmbitoRepository
            
                 #endregion
            
             } // AmbitoRepository
            
               ]]>
             </code>
             </example>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IReadWriteAuditableRepository`2">
             <summary>
             Interfaz que representa las acciones de lectura y escritura sobre el
             repositorio de entidades auditables y objetos valor.
             </summary>
             <remarks>
             La interfaz representa las acciones de lectura y escritura sobre el
             repositorio de entidades auditables y objetos valor.
             </remarks>
             <typeparam name="TEntity">
             Representación de la entidad auditable.
             </typeparam>
             <typeparam name="TIdentifier">
             Representación del identificador único de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta interfaz suponiendo la interfaz
             <c>IAmbitoRepository</c> que la implementa:
             <code>
               <![CDATA[
            
             using System;
            
             using Inflexion.Framework.Domain.Core;
            
             /// <summary>
             /// Interfaz repositorio para persistir y obtener información a partir
             /// de entidades <see cref="T:IAmbito"/>.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public interface IAmbitoRepository : IReadWriteAuditableRepository<IAmbito, int>
             {
            
             } // IAmbitoRepository
            
               ]]>
             </code>
             </example>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IWriteOnlyAuditableRepository`2">
            <summary>
            Interfaz que representa las acciones de solo escritura sobre el
            repositorio de entidades y objetos valor auditables.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad auditable.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyAuditableRepository`2.Delete(`0,System.String)">
            <summary>
            Elimina una entidad existente del almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <param name="entity">
            Entidad del dominio a eliminar del almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyAuditableRepository`2.Insert(`0,System.String)">
            <summary>
            Inserta una nueva entidad en el almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <param name="entity">
            Entidad del dominio a insertar en el almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.IWriteOnlyAuditableRepository`2.Modify(`0,System.String)">
            <summary>
            Modifica una entidad existente en el almacén físico de datos.
            </summary>
            <remarks>
            Utiliza la <see cref="N:Inflexion.Framework.Infrastructure.DataAccess.UoW"/>
            inyectada en el constructor.
            </remarks>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <param name="entity">
            Entidad del dominio a actualizar en el almacén físico de datos.
            </param>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.unitOfWork">
            <summary>
            Variable privada para representar un adaptador para el acceso a datos.
            </summary>
            <remarks>
            Representa un adaptador para el acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.#ctor(Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ReadWriteAuditableRepositoryBase"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="unitOfWork">
            Parámetro que indica la unidad de trabajo. <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>unitOfWork</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.Delete(`0,System.String)">
            <summary>
            Función pública encargada de eliminar una entidad de tipo
            del repositorio físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetAll">
            <summary>
            Función pública encargada de obtener todas las entidades.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve una colección de entidades de tipo
            <see cref="T:System.Linq.IQueryable{Inflexion.Framework.Infrastructure.Security.Core.IRole}"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetById(`1)">
            <summary>
            Función pública que nos permite obtener una entidad por su
            identificador único.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="identifier">
            Identificador único de la entidad.
            </param>
            <returns>
            Devuelve una interfaz entidad.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetBySpecification(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio
            a partir de un filtro proporcionado mediante el patrón especificación.
            </summary>
            <remarks>
            <see href="http://en.wikipedia.org/wiki/Specification_pattern"/>
            </remarks>
            <param name="specification">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1"/>
            que representa la especificación a representar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio de acuerdo a
            la especificación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetEnabled">
            <summary>
            Función que permite obtener todas las entidades activas de un repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades activas del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetEnabledPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            activas del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            activas del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetFiltered(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener todas las entidades de un repositorio.
            </summary>
            <remarks>
            Esta función se encarga de obtener todas las entidades de un repositorio.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve un objeto <see cref="T:System.Linq.IQueryable"/> con
            todas y cada una de las entidades del repositorio.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetFilteredPaged``1(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetPaged``1(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Devuelve una consulta paginada y ordenada según los parámetros proporcionados.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Linq.IQueryable"/> que representa
            la consulta ordenada y paginada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.GetRowCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Función que permite obtener el número de filas afectadas
            según el filtro proporcionado.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Devuelve el número de filas afectadas.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.Insert(`0,System.String)">
            <summary>
            Función pública encargada de insertar una entidad en el repositorio
            físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.Modify(`0,System.String)">
            <summary>
            Función pública encargada de actualizar una entidad pasada como
            parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ReadWriteAuditableRepositoryBase`2.UnitOfWork">
            <summary>
            Unidad de trabajo que será utilizada para acceder al repositorio.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra" -->
        <!-- Badly formed XML comment ignored for member "F:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.Hint" -->
        <!-- Badly formed XML comment ignored for member "F:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.TotalNodeCount" -->
        <member name="F:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.TraversalCost">
            <summary>
            Variable que indica el coste del nodo interno transversal.
            </summary>
            <remarks>
            No aplica.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.#ctor(System.Int32,Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.InternodeTraversalCost,Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.NearbyNodesHint)">
            <summary>
            Creación de una instancia de la clase <see cref="T:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="totalNodeCount">
            Número total de nodos en el grafo.
            </param>
            <param name="traversalCost">
            Delegado que proporciona el coste de una transacción entre
            dos nodos cualquiera.
            </param>
            <param name="hint">
            Delegado opcional que puede proporcionar un mequeño subconjunto
            de nodos con los que un determinado nodo se puede conectar.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.GetMinimumPath(System.Int32,System.Int32)">
            <summary>
            Utilizamos el algoritmo Dijkstra para encontrar la ruta mínima
            desde un nodo a otro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="start">
            Nodo a utilizar como nodo de partida.
            </param>
            <param name="finish">
            Nodo a utilizar como nodo de finalización.
            </param>
            <returns>
            Estructura que contiene tanto la distancia mínima como la ruta
            de la distancia máxima para cada nodo dado a partir de su nodo
            de comienzo <paramref name="start"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.Perform(System.Int32)">
            <summary>
            Función que se encarga de llevar a cabo el algoritmo Dijkstra
            dentro de los datos proporcionados cuando el objeto
            <see cref="T:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra"/> había sido instanciado.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="start">
            Nodo a utilizar como localización o posición de partida.
            </param>
            <returns>
            Estructura que contiene tanto la ruta de la distancia mínima
            como la ruta de la distancia máxima a cada nodo desde un nodo
            <paramref name="start"/> dado.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.ArrayToString``1(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Función que se encarga de unir los elementos de una matriz a una
            cadena utilizando un separador pasado como argumento.
            </summary>
            <remarks>
            Esto es muy parecido a <see cref="M:System.String.Join(System.String,System.String[])"/>,
            a excepción de que esta función trabaja con matrices que no tienen
            porqué ser de tipo <seealso cref="T:System.String"/>.
            </remarks>
            <typeparam name="T">
            Tipo de elemento en la matriz.
            </typeparam>
            <param name="separator">
            Separador a insertar entre cada elemento.
            </param>
            <param name="array">
            Matriz de elementos.
            </param>
            <returns>
            Cadena resultante.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.FindMinimizingDinC(System.Int32[],System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Encuentra los nodos no considerados y que tienen el menor coste.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="cost">
            Coste para llegar a cualquier nodo.
            </param>
            <param name="collection">
            Nodos que aún están disponibles dentro de la colección de nodos
            para poder ser elegidos.
            </param>
            <returns>
            Nodo que está más cercano (el que tiene la ruta más corta).
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.GetChoices">
            <summary>
            Inicializa una colección de todos los nodos no considerados aún.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <returns>
            Colección inicializada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.GetMinimumPath(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Se encarga de encontrar una matriz de nodos que proporcionan la
            ruta más corta desde un nodo dado a otro.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="start">
            Nodo de partida.
            </param>
            <param name="finish">
            Nodo de finalización.
            </param>
            <param name="shortestPath">
            Matriz con el algoritmo más corto completado.
            </param>
            <returns>
            Devuelve una lista de nodos que proporcionan el camino más corto
            para ir desde el nodo <paramref name="start"/> al nodo
            <paramref name="finish"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.GetStartingBestPath(System.Int32)">
            <summary>
            Inicializamos la matriz para ser utilizado con el algoritmo.
            </summary>
            <remarks>
            Matriz que establecerá la fuente de cada nodo simple desde el
            primero de ellos, incluyéndolo igualmente.
            </remarks>
            <param name="startingNode">
            Nodo que ha sido designado como nodo de partida para utilizar
            por el algoritmo completo.
            </param>
            <returns>
            Devuelve una matriz resultante.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.GetStartingTraversalCost(System.Int32)">
            <summary>
            Inicializa la matriz para el arranque del algoritmo.
            </summary>
            <remarks>
            El coste transversal de cada nodo será establecido a imposible a
            través de un valor (int.MaxValue) a menos que el borde conectado
            sea encontrado entre el nodo de partida <paramref name="start"/>
            y el nodo en cuestión.
            </remarks>
            <param name="start">
            Nodo de partida.
            </param>
            <returns>
            Contenido resultante con la matriz de valores.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.InternodeTraversalCost">
            <summary>
            Determina el coste de mover desde un nodo dado a otro nodo dado.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="start">
            Nodo desde el que se está moviendo.
            </param>
            <param name="finish">
            Nodo al que se va a mover.
            </param>
            <returns>
            Coste de la transacción desde <paramref name="start"/> hasta
            <paramref name="finish"/>, o <see cref="F:System.Int32.MaxValue"/>
            si la transacción es imposible (por ejemplo, si no existe ningún
            borde entre los dos nodos).
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Core.DijkstraAlgorithm.Dijkstra.NearbyNodesHint">
            <summary>
            Delegado opcional que puede ayudar a optimizar el algoritmo
            mostrando un conjunto de nodos a ser considerados. Muy útil para
            grafos con conectividad limitada (como por ejemplo, los píxeles
            a mostrar por pantalla).
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="startingNode">
            Nodo desde el que se va a recorrer la distancia.
            </param>
            <returns>
            Matriz de nodos que podrían ser alcanzados desde el
            <paramref name="startingNode"/>.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.ICounter`1">
            <summary>
            Interface for implementations that will hold all information and actions available regarding a performance counter.
            </summary>
            <typeparam name="T">enum type holding performance counter details</typeparam>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.BaseRawValue(`0,System.Int64)">
            <summary>
            Get the value of a base counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
            <param name="value">value to be set</param>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.Decrement(`0)">
            <summary>
            Decrement value of the counter
            </summary>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.DecrementBase(`0)">
            <summary>
            Decrement value of the base counter
            </summary>
            <param name="counterName">name of the counter to has his base counter decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.DecrementBy(`0,System.Int64)">
            <summary>
            Decrement value of the counter by "value"
            </summary>
            <param name="value">value to decrement</param>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.Increment(`0)">
            <summary>
            Increment value of the counter
            </summary>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter </returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.IncrementBase(`0)">
            <summary>
            Increment value of the base counter
            </summary>
            <param name="counterName">name of the counter to has its base counter decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter </returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.IncrementBaseBy(`0,System.Int64)">
            <summary>
            Increment value of the base counter by "value"
            </summary>
            <param name="value">value to increment</param>
            <param name="counterName">name of the counter to has its base counter decremented</param>
            <returns>returns -1 in case there was an error, otherwise it returns the final value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.IncrementBy(`0,System.Int64)">
            <summary>
            Increment value of the counter by "value"
            </summary>
            <param name="value">value to increment</param>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>retorna -1 si hubo un error, o devuelve el valor final</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.NextBaseValue(`0)">
            <summary>
            Get the value of a base counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.NextValue(`0)">
            <summary>
            Get the value of a counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.RawValue(`0,System.Int64)">
            <summary>
            Get the value of a counter
            </summary>
            <param name="counterName">name of the counter</param>
            <param name="value">value to put on performance counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.ICounter`1.Reset(`0)">
            <summary>
            Reset to default value the instance counter
            </summary>
            <param name="counterName">the counter name</param>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.Counter`1">
            <summary>
            Class to wrap managing logic for performance counters
            </summary>
            <typeparam name="T">Enum Type that defines the performance counter</typeparam>
        </member>
        <member name="F:Inflexion.Framework.PerformanceCounters.Counter`1.FAILURE">
            <summary>
            Failure constant value
            </summary>
        </member>
        <member name="F:Inflexion.Framework.PerformanceCounters.Counter`1._counters">
            <summary>
            Counters dictionary
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.#ctor(System.String,Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute,System.Collections.Generic.Dictionary{`0,Inflexion.Framework.PerformanceCounters.CounterAttribute})">
            <summary>
            Internal Constructor for named instances (multi-instance counters)
            </summary>
            <param name="instanceName">name for this instance</param>
            <param name="categoryInfo">information about this category</param>
            <param name="enumCounterAttributes">enumerator attributes</param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.#ctor(Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute,System.Collections.Generic.Dictionary{`0,Inflexion.Framework.PerformanceCounters.CounterAttribute})">
            <summary>
            Internal Constructor for not named instances
            </summary>
            <param name="categoryInfo">information about this category</param>
            <param name="enumCounterAttributes">enumerator attributes</param>
            <exception cref="T:System.NotSupportedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.BaseRawValue(`0,System.Int64)">
            <summary>
            Get the value of a base counter
            </summary>
            <param name="counterName">name of the counter</param>
            <param name="value">value to be put on performance counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.Decrement(`0)">
            <summary>
            Decrement value of the counter
            </summary>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.DecrementBase(`0)">
            <summary>
            Decrement value of the base counter
            </summary>
            <param name="counterName">name of the counter to has his base counter decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.DecrementBy(`0,System.Int64)">
            <summary>
            Decrement value of the counter by "value"
            </summary>
            <param name="value">value to decrement</param>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.Dispose">
            <summary>
            Excplicit Call to dispose the object
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.Increment(`0)">
            <summary>
            Increment value of the counter
            </summary>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter </returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.IncrementBase(`0)">
            <summary>
            Increment value of the base counter
            </summary>
            <param name="counterName">name of the counter to has its base counter decremented</param>
            <returns>returns FAILURE  in case there was an error otherwise the final value of the counter </returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.IncrementBaseBy(`0,System.Int64)">
            <summary>
            Increment value of the base counter by "value"
            </summary>
            <param name="value">value to increment</param>
            <param name="counterName">name of the counter to has its base counter decremented</param>
            <returns>returns -1 in case there was an error, otherwise it returns the final value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.IncrementBy(`0,System.Int64)">
            <summary>
            Increment value of the counter by "value"
            </summary>
            <param name="value">value to increment</param>
            <param name="counterName">name of the counter to be decremented</param>
            <returns>retorna -1 si hubo un error, o devuelve el valor final</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.NextBaseValue(`0)">
            <summary>
            Get the value of a base counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.NextValue(`0)">
            <summary>
            Get the value of a counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.RawValue(`0,System.Int64)">
            <summary>
            Get the value of a counter
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>returns FAILURE si hubo un error,in case there was an error, otherwise it returns the not calculated value</returns>
            <exception cref="T:System.ObjectDisposedException"/>
            <param name="value">value to be put on performance counter</param>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.Reset(`0)">
            <summary>
            Reset to default value the instance counter
            </summary>
            <param name="counterName">the counter name</param>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.Counter`1.GetContainer(`0)">
            <summary>
            get the PerformanceCounterContainer associated with the given counterName.
            </summary>
            <param name="counterName">name of the counter</param>
            <returns>PerformanceCounterContainer instance in case there is such. Otherwise null.</returns>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.Counter`1.InstanceName">
            <summary>
            Get the instance name associated with this counterHelper
            </summary>
        </member>
        <member name="T:Inflexion.Framework.Core.Factories.ConversionFactory.Convert">
            <summary>
            Clase pública utilizada para convertir objetos tipados a otro tipo de
            objetos.
            </summary>
            <remarks>
            Convierte objetos tipados a otro tipo de objetos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.BytesToString(System.Byte[])">
            <summary>
            Función pública estática para convertir un conjunto de bytes[]
            a cadena de texto.
            </summary>
            <remarks>
            Función que convierte un conjunto de bytes[] a cadena de texto.
            </remarks>
            <param name="content">
            Conjunto de bytes o información a convertir.
            </param>
            <returns>
            Cadena de texto pasada como parámetro.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.BytesToStringFromFile(System.String)">
            <summary>
            Función pública estática que lee el contenido de un fichero
            y convierte sus bytes[] a cadena de texto.
            </summary>
            <remarks>
            Función que lee el contenido de un fichero y convierte sus
            bytes[] a cadena de texto.
            </remarks>
            <param name="pathFile">
            Ruta y nombre del fichero para obtener a partir de él sus
            bytes.</param>
            <returns>
            Matriz de bytes del fichero.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.ExcelDateToDate(System.Int32)">
            <summary>
            <para>
            Función pública estática que devuelve una fecha y hora a partir
            de un valor entero leído a partir de una hoja Excel.
            </para>
            <para>
            A veces cuando leemos un valor datetime de Excel, este es leído
            como valor entero.
            </para>
            </summary>
            <remarks>
            Función que devuelve una fecha y hora a partir de un valor
            entero leído a partir de una hoja Excel.
            </remarks>
            <param name="value">
            Valor entero del campo Excel.
            </param>
            <returns>
            Devuelve el valor DateTime de la celda de Excel.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.StreamToString(System.IO.Stream)">
            <summary>
            Función pública estática para convertir un Stream a cadena de
            texto.
            </summary>
            <remarks>
            Función que convierte un Stream a cadena de texto.
            </remarks>
            <param name="content">
            <see cref="T:System.IO.Stream"/> a convertir.
            </param>
            <returns>
            Cadena de texto pasada como parámetro.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.StringToBytes(System.String)">
            <summary>
            Función pública estática para convertir una cadena de texto a
            bytes[].
            </summary>
            <remarks>
            Función que convierte una cadena de texto a bytes[].
            </remarks>
            <param name="content">
            Cadena de texto a convertir.
            </param>
            <returns>
            Conjunto de bytes de la cadena de texto pasada como parámetro.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Core.Factories.ConversionFactory.Convert.StringToStream(System.String)">
            <summary>
            Función pública estática para convertir una cadena de texto
            a Stream.
            </summary>
            <remarks>
            Función que convierte una cadena de texto a Stream.
            </remarks>
            <param name="content">
            Cadena de texto a convertir.
            </param>
            <returns>
            <see cref="T:System.IO.Stream"/> con la información pasada como parámetro.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Logging.LogLevelType">
            <summary>
            Lista enumerada que contiene los diferentes niveles de log posible.
            </summary>
            <remarks>
            Contiene los diferentes niveles de log posible.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Off">
            <summary>
            Valor que indica que el log no va a ser registrado.
            </summary>
            <remarks>
            Indica que el log no va a ser registrado.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Debug">
            <summary>
            Valor que indica un nivel de log de depuración.
            </summary>
            <remarks>
            Indica un nivel de log de depuración.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Information">
            <summary>
            Valor que indica un nivel de log de información.
            </summary>
            <remarks>
            Indica un nivel de log de información.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Warning">
            <summary>
            Valor que indica un nivel de log de aviso o warning.
            </summary>
            <remarks>
            Indica un nivel de log de aviso o warning.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Error">
            <summary>
            Valor que indica un nivel de log de error.
            </summary>
            <remarks>
            Indica un nivel de log de error.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Logging.LogLevelType.Fatal">
            <summary>
            Valor que indica un nivel de log de tipo fatal.
            </summary>
            <remarks>
            Indica un nivel de log de tipo fatal.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.DataConnectionException">
            <summary>
            Clase de excepción utilizada por la clase DbDataProvider.
            <br></br>
            <see cref="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider"/>
            </summary>
            <remarks>Clase de excepción utilizada en el namespace.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnectionException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:DataConnectionException"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:DataConnectionException"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnectionException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <remarks>Constructor de la clase con el mensaje descriptivo de la excepción.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnectionException.#ctor(System.String,Inflexion.Framework.BaseException)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <param name="innerException">Evento SystemException que lanza la actual excepción.</param>
            <remarks>Constructor de la clase con el mensaje y el tipo de excepción interna</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="info">Información sobre la seriación del objeto de excepción.</param>
            <param name="context">Describe el origen o destino de la seriación del objeto de excepción.</param>
            <remarks>Constructor de la clase que utiliza objetos de seriación.</remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Provider.DatabaseType">
            <summary>
            <para>
            Lista enumerada que define el tipo de base de datos que debe ser usada.
            </para>
            <para>
            El primer elemento de la lista enumerada es Sql Server porque es el tipo
            de base de datos que se configura por defecto.
            </para>
            <para>
            No cambiar este elemento de lugar a no ser que se decida usar otra base
            de datos por defecto.
            </para>
            </summary>
            <remarks>
            Nos permite definir el tipo de base de datos que debe ser utilizada.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Provider.DatabaseType.SqlServer">
            <summary>
            Define como base de datos, Sql Server.
            </summary>
            <remarks>
            Indica Sql Server como base de datos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Provider.DatabaseType.Access">
            <summary>
            Define como base de datos, Microsoft Access (antes de Microsoft
            Access 2007 ó superior).
            </summary>
            <remarks>
            Indica Microsoft Access (antes de Microsoft Access 2007 ó superior)
            como base de datos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Provider.DatabaseType.Access2007">
            <summary>
            Define como base de datos, Microsoft Access 2007.
            </summary>
            <remarks>
            Indica Microsoft Access 2007 como base de datos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Provider.DatabaseType.MySql">
            <summary>
            Define como base de datos, MySql.
            </summary>
            <remarks>
            Indica MySql como base de datos.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Provider.DatabaseType.Oracle">
            <summary>
            Define como base de datos, Oracle.
            </summary>
            <remarks>
            Indica Oracle como base de datos.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Constants">
            <summary>
            Clase pública estática que contiene las constantes a utilizar en este
            namespace.
            </summary>
            <remarks>
            Contiene las constantes a utilizar en este namespace.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringAccess">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Microsoft Access.
            </para>
            <para>
            "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};User Id={1};Password={2};{3}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Microsoft Access.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringAccess2007">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Access 2007.
            </para>
            <para>
            "Provider=Microsoft.Jet.OLEDB.4.0;Data Source={0};User Id={1};Password={2};{3}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Microsoft Access 2007 ó superior.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringMySql">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de MySql.
            </para>
            <para>
            "Data Source={0};Database={1};User ID={2};Password={3};{4}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de MySql.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringOracle">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Oracle.
            </para>
            <para>
            "Data Source={0};User Id={1};Password={2};{3}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Oracle.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringOracleWithIntegratedSecurity">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Oracle con
            seguridad integrada.
            </para>
            <para>
            "Data Source={0};Integrated Security=SSPI;{1}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Oracle con seguridad integrada.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringSqlServer">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Sql Server.
            </para>
            <para>
            "Data Source={0};User Id={1};Password={2};{3}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Microsoft Sql Server.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ConnectionStringSqlServerWithIntegratedSecurity">
            <summary>
            <para>
            Constante utilizada para preparar la cadena de conexión de Sql Server
            con seguridad integrada.
            </para>
            <para>
            "Data Source={0};Integrated Security=SSPI;{1}"
            </para>
            </summary>
            <remarks>
            Constante con la cadena de conexión de Microsoft Sql Server con
            seguridad integrada.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterAccess">
            <summary>
            <para>
            Constante que indica el parámetro <c>?</c> a sustituir en
            ParameterGeneral por <c>##</c> para parámetros de Microsoft Access.
            </para>
            <para>
            <c>?</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>?</c> utilizado como parámetro para
            las sentencias Sql de Microsoft Access.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterAccess2007">
            <summary>
            <para>
            Constante que indica el parámetro <c>?</c> a sustituir en
            ParameterGeneral por <c>##</c> para parámetros de Microsoft Access
            2007 ó superior.
            </para>
            <para>
            <c>?</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>?</c> utilizado como parámetro para
            las sentencias Sql de Microsoft Access 2007 ó superior.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterGeneral">
            <summary>
            <para>
            Constante general utilizada dentro de los parámetros de Sql.
            </para>
            <para>
            <c>##</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter general <c>##</c> utilizado como parámetro
            en todas las sentencias Sql de la aplicación.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterMySql">
            <summary>
            <para>
            Constante que indica el parámetro <c>?</c> a sustituir en
            ParameterGeneral por <c>##</c> para parámetros de MySql.
            </para>
            <para>
            <c>?</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>?</c> utilizado como parámetro para
            las sentencias Sql de MySql.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterOracle">
            <summary>
            <para>
            Constante que indica el parámetro <c>:</c> a sustituir en
            ParameterGeneral por <c>##</c> para parámetros de Oracle.
            </para>
            <para>
            <c>:</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>:</c> utilizado como parámetro para
            las sentencias Sql de Oracle.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ParameterSqlServer">
            <summary>
            <para>
            Constante que indica el parámetro <c>@</c> a sustituir en
            ParameterGeneral por <c>##</c> para parámetros de Microsoft Sql Server.
            </para>
            <para>
            <c>@</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>@</c> utilizado como parámetro para
            las sentencias Sql de Microsoft Sql Server.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ScopeMySql">
            <summary>
            Constante que indica la sentencia de Scope Identity a usar en MySql.
            </summary>
            <remarks>
            Indica la sentencia de Scope Identity a usar en MySql.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ScopeOracle">
            <summary>
            Constante que indica la sentencia de Scope Identity a usar en Oracle.
            </summary>
            <remarks>
            Indica la sentencia de Scope Identity a usar en Oracle.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.ScopeSqlServer">
            <summary>
            <para>
            Constante que indica la sentencia de Scope Identity a usar en
            Sql Server.
            </para>
            <para>
            SELECT SCOPE_IDENTITY();
            </para>
                </summary>
            <remarks>
            Indica la sentencia de Scope Identity a usar en Sql Server.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.DataAccess.Constants.SqlSentenceEndsWith">
            <summary>
            <para>
            Constante que indica el carácter de finalización de una
            sentencia Sql <c>;</c>.
            </para>
            <para>
            <c>;</c>
            </para>
            </summary>
            <remarks>
            Constante con el carácter <c>;</c> que indica la finalización de
            una sentencia Sql.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter">
            <summary>
            Interfaz que representa un adaptador para el acceso a datos.
            </summary>
            <remarks>
            La interfaz <c>IAdapter</c> representa a una unidad de trabajo para
            el acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.CommitTransaction">
            <summary>
            Confirma la transacción en curso, en caso de haberla.
            </summary>
            <remarks>
            Sólo será posible confirmar unidades de trabajo transaccionales.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Elevada cuando <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> no haya sido creado
            de manera transaccional.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.Delete``1(``0)">
            <summary>
            Método encargado de eliminar una determinada entidad.
            </summary>
            <remarks>
            Con este método eliminaremos una determinada entidad.
            </remarks>
            <typeparam name="TEntity">Representación de la entidad.</typeparam>
            <param name="entity">Entidad pasada como parámetro.</param>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.ExecuteDatabaseQuery``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Función genérica encargada de la ejecución de sentencias en SQL nativo.
            </summary>
            <typeparam name="T">
            Representación del tipo de dato que devuelve la sentencia
            </typeparam>
            <param name="queryName">
            Parámetro que indica el nombre de la sentencia SQL a ejecutar.
            </param>
            <param name="parameters">
            Parámetro que identifica los parámetros asociados a la sentencia.
            </param>
            <returns>
            Devuelve lista de datos genérica.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.Get``2(``1)">
            <summary>
            Función que define la obtención de una entidad a partir de un
            identificador de entidad.
            </summary>
            <remarks>
            A través de un identificador de entidad, obtiene la entidad concreta.
            </remarks>
            <typeparam name="TEntity">Representación de las entidades.</typeparam>
            <typeparam name="TIdentifier">Representación del identificador de las entidades.</typeparam>
            <param name="identifier">Identificador único de la entidad a obtener.</param>
            <returns>Devuelve un objeto de tipo entidad.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.GetAll``1">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">
            Representación del tipo de la entidad sobre la que se
            realiza la consulta.
            </typeparam>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/>.
            </returns>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.GetFiltered``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/>.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TEntity">
            Representación del tipo de la entidad sobre la que se
            realiza la consulta.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.GetFilteredPaged``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Devuelve una consulta sobre todas las entidades
            disponibles del tipo <typeparamref name="TEntity"/> paginada
            y ordenada.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TEntity">
            Representación del tipo de la entidad sobre la que se
            realiza la consulta.
            </typeparam>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="filter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            que representa el filtro a aplicar.
            </param>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Consulta <see cref="T:System.Linq.IQueryable"/> sobre las entidades
            existentes del tipo <typeparamref name="TEntity"/> con ordenación y paginación.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.GetPaged``2(System.Int32,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean)">
            <summary>
            Devuelve una consulta paginada y ordenada, según los parámetros proporcionados.
            </summary>
            <remarks>
            Se exige que <typeparamref name="TEntity"/> sea una clase
            debido a restricciones impuestas por NHibernate.
            </remarks>
            <typeparam name="TEntity">
            Representación del tipo de la entidad sobre la que se
            realiza la consulta.
            </typeparam>
            <typeparam name="TProperty">
            Representación del tipo de dato sobre el que
            se construye la expresión lambda.
            </typeparam>
            <param name="pageIndex">
            Parámetro que representa al índice de la página.
            </param>
            <param name="pageCount">
            Parámetro que representa el número de elementos que se obtendrán.
            </param>
            <param name="orderBy">
            Parámetro que representa la expresión lambda para la ordenación.
            </param>
            <param name="ascending">
            Parámetro que indica si la ordenación es ascendente ó descendente.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Linq.IQueryable"/> que representa
            la consulta ordenada y paginada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.Insert``1(``0)">
            <summary>
            Inserta una nueva entidad en el almacén físico de datos.
            </summary>
            <remarks>
            Este método exige que no exista otra entidad del mismo tipo
            con el mismo identificador.
            </remarks>
            <typeparam name="TEntity">
            Representación del tipo de datos de la entidad sobre la que
            se realizará la operación.
            </typeparam>
            <param name="entity">
            Entidad recién creada que se desea persistir (insertar)
            en el almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.Modify``1(``0)">
            <summary>
            Actualiza una entidad existente en el almacén físico de datos.
            </summary>
            <remarks>
            Esta operación exige que exista información asociada a la entidad
            con el identificador correspondiente.
            </remarks>
            <typeparam name="TEntity">
            Representación del tipo de datos de la entidad sobre la que
            se realizará la operación.
            </typeparam>
            <param name="entity">
            Entidad recién creada que se desea persistir (insertar)
            en el almacén físico de datos.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter.RollBackTransaction">
            <summary>
            Deshace la transacción en curso, en caso de haberla.
            </summary>
            <remarks>
            Sólo será posible deshacer unidades de trabajo transaccionales.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Elevada cuando <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/> no haya sido creado
            de manera transaccional.
            </exception>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.CounterWrapper">
            <summary>
            Container of a relevant Performance Counter. It includes context information about that counter such as base performance counter and if it needs to increase/decrease automatically the base when the relevant one is increased / decreased.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterWrapper.#ctor(System.Diagnostics.PerformanceCounter)">
            <summary>
            Creates a container with only the relevant performance counter. This constructor sets the base instance in null and the autoincrease value to false
            If the performance counter you are passing as argument needs a base, you should consider using the other constructor.
            </summary>
            <param name="performanceCounterInstance">instance of performance counter</param>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterWrapper.#ctor(System.Diagnostics.PerformanceCounter,System.Diagnostics.PerformanceCounter,System.Boolean)">
            <summary>
            Creates a container with the relevant performance counter and the base one associated, setting also if the base counter should be increased / decreased when the relevant one is modified.
            If the autoincreased value is set to true, then when increasing or decreasing the relevant counter, the base is increased / decreased by 1. In case the autoincrease is set to false, the  user
            will need to manually update the base accordingly.
            </summary>
            <param name="performanceCounterInstance">instance of performance counter</param>
            <param name="performanceCounterBaseInstance">instance of performance counter being the base of the performanceCounterInstance</param>
            <param name="autoIncrease">true, to autoincrease the base, false if you prefer doing it manually.</param>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterWrapper.Dispose">
            <summary>
            Excplicit Call to dispose the object
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterWrapper.BaseInstance">
            <summary>
            Get the instance of the base performanceCounter associated with the relevant counter in case there is need of one.
            <remarks>This value can be null.</remarks>
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterWrapper.Instance">
            <summary>
            Get the instance of the relevant performanceCounter.
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterWrapper.IsBaseAutoIncreased">
            <summary>
            Get if the  Base should be autoincreased. This value is used internally and checked only when the relevant counter is modified.
            </summary>
        </member>
        <member name="T:Inflexion.Framework.Logging.ILogger">
            <summary>
            Interfaz que representa un adaptador para el logging.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Debug(System.Object)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Debug.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Debug.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica el tipo
            de excepción que originó la escritura en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos dados,
            en el log con el nivel Debug.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="params object[] args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos y formato dados,
            en el log con el nivel Debug.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="provider">
            Parámetro de tipo <see cref="T:System.IFormatProvider"/> que proporciona la
            información del formato.
            </param>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Error(System.Object)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Error.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Error(System.Object,System.Exception)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Error.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica el tipo
            de excepción que originó la escritura en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos dados,
            en el log con el nivel Error.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos y formato dados,
            en el log con el nivel Error.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="provider">
            Parámetro de tipo <see cref="T:System.IFormatProvider"/> que proporciona la
            información del formato.
            </param>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Fatal(System.Object)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Fatal.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Fatal.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica el tipo
            de excepción que originó la escritura en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos dados,
            en el log con el nivel Fatal.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos y formato dados,
            en el log con el nivel Fatal.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="provider">
            Parámetro de tipo <see cref="T:System.IFormatProvider"/> que proporciona la
            información del formato.
            </param>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Info(System.Object)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Info.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Info(System.Object,System.Exception)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Info.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica el tipo
            de excepción que originó la escritura en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos dados,
            en el log con el nivel Info.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos y formato dados,
            en el log con el nivel Info.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="provider">
            Parámetro de tipo <see cref="T:System.IFormatProvider"/> que proporciona la
            información del formato.
            </param>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Warn(System.Object)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Warm.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.Warn(System.Object,System.Exception)">
            <summary>
            Define un método para escribir un mensaje en el log con el nivel Warn.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje a escribir en el log.
            </param>
            <param name="exception">
            Parámetro de tipo <see cref="T:System.Exception"/> que identifica el tipo
            de excepción que originó la escritura en el log.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos dados,
            en el log con el nivel Warn.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Logging.ILogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Define un método para escribir un mensaje, con argumentos y formato dados,
            en el log con el nivel Warn.
            </summary>
            <remarks>
            Por defecto utilizará como tipo de salida un fichero. <see cref="T:Inflexion.Framework.Logging.AppenderType"/>.
            </remarks>
            <param name="provider">
            Parámetro de tipo <see cref="T:System.IFormatProvider"/> que proporciona la
            información del formato.
            </param>
            <param name="format">
            Parámetro que indica el mensaje a escribir en el log de tipo <c>Error {0}</c>
            </param>
            <param name="args">
            Parámetro de tipo array de argumentos que contiene los valores
            que se sustituirán en la cadena del mensajes.
            </param>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword">
            <summary>
            Clase pública sellada para manejar y gestionar contraseñas o passwords
            fuertes.
            </summary>
            <remarks>
            Nos permite manejar y gestionar contraseñas o passwords fuertes.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.evaluateValue">
            <summary>
            Variable privada utilizada en la propiedad
            <see cref="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.EvaluateValue"/>.
            </summary>
            <remarks>
            Variable utilizada en la propiedad <see cref="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.EvaluateValue"/>.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.percent">
            <summary>
            Variable privada utilizada en la propiedad <see cref="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.Percent"/>.
            </summary>
            <remarks>
            Variable utilizada en la propiedad <see cref="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.Percent"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.#ctor">
            <summary>
            Constructor de la clase StrongPassword.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.CheckPasswordIntegrity(System.String,System.Int32)">
            <summary>
            Función pública encargada de chequear o evaluar la integridad de
            la contraseña.
            </summary>
            <remarks>
            Función que nos permite chequear o evaluar la integridad de la
            contraseña.
            </remarks>
            <example>
            <code lang="C#" escaped="true">
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword strongPassword = new Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword();
            bool response = strongPassword.CheckPasswordIntegrity("Dinosaurio", 10);
            ]]>
            </code>
            </example>
            <param name="password">Contraseña a evaluar.</param>
            <param name="lenght">Parámetro opcional que indica la longitud
            mínima de la contraseña.</param>
            <returns>Devuelve true si el chequeo ha sido satisfactorio y false
            en el caso de no haber pasado el chequeo.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.GetPasswordStrength(System.String)">
            <summary>
            Función pública que devuelve el tipo de valoración de una password
            siguiendo los valores de la lista enumerada <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType"/>.
            </summary>
            <remarks>
            Función que devuelve el tipo de valoración de una password
            siguiendo los valores de la lista enumerada
            <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType"/>.
            </remarks>
            <example>
            <code lang="C#" escaped="true">
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword strongPassword = new Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword();
            Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType passwordStrength = strongPassword.GetPasswordStrength("Dinosaurio.2011#");
            ]]>
            </code>
            </example>
            <param name="password">Password a evaluar.</param>
            <returns>Lista enumerada <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType"/> que
            indica el tipo de contraseña evaluada.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.CheckAdvancedParameters(System.String)">
            <summary>
            Función privada que nos permite evaluar los elementos o parámetros
            básicos para establecer el valor incremental de acuerdo a su
            información.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="password">Password a evaluar.</param>
            <returns>Valor de evaluación.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.CheckBasicParameters(System.String)">
            <summary>
            Función privada que nos permite evaluar los elementos o parámetros
            básicos para establecer el valor incremental de acuerdo a su
            información.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="password">Password a evaluar.</param>
            <returns>Valor de evaluación.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.CheckLength(System.Int32)">
            <summary>
            Función privada que nos permite evaluar el valor de la contraseña
            a partir de su longitud.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="length">Longitud de la contraseña.</param>
            <returns>Valor de evaluación.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.CheckSpecialCharacters(System.String)">
             <summary>
             <para>
             Método privado que nos permite evaluar los caracteres especiales
             de la password.
             </para>
             <para>
             Cualquier caracter especial, se indica como password de fuerza muy baja.
             </para>
             <para>
             Sólo están permitidos los caracteres normales, evitando el uso de tildes,
             acentos y letras especiales tipo ñ.
             </para>
             </summary>
             <remarks>
             Sin comentarios especiales.
             </remarks>
             <param name="password">
             Parámetro que representa la password a evaluar.
            .</param>
             <returns>
             Devuelve <c>False</c> si la evaluación es correcta, y
             <c>True</c> en el caso de encontrar caracteres especiales.
             </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.GetPasswordStrength(System.Int32)">
            <summary>
            Función privada que nos permite obtener el valor de fuerza de la
            password.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="value">
            Valor de fuerza correspondiente al resultado de evaluación.
            </param>
            <returns>
            Devuelve el tipo de fuerza de acuerdo al valor pasado como parámetro.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.EvaluateValue">
            <summary>
            Propiedad pública que indica el valor de evaluación resultante
            de analizar la password.
            </summary>
            <remarks>
            Propiedad que indica el valor de evaluación resultante de
            analizar la password.
            </remarks>
            <value>
            Indica el valor de evaluación resultante de analizar la password.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.Security.Utilities.StrongPassword.Percent">
            <summary>
            Propiedad pública que indica el valor porcentual de la fuerza
            de la password.
            </summary>
            <remarks>
            Propiedad que indica el valor porcentual de la fuerza de la
            password.
            </remarks>
            <value>
            Indica el valor porcentual de la fuerza de la password.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType">
            <summary>
            <para>
            Lista enumerada que indica el tipo de contenido de fichero a tratar.
            </para>
            <para>
            Se trata de una lista enumerada utilizada generalmente dentro de la
            clase MD5 y Common.
            </para>
            </summary>
            <remarks>
            Indica el tipo de contenido de fichero a tratar.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType.AllFileContent">
            <summary>
            Valor que indica que se recogerá toda la información del fichero.
            </summary>
            <remarks>
            Indica que se recogerá toda la información del fichero.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType.PartialFileContent">
            <summary>
            Valor que indica que se recogerá sólo una parte del fichero,
            normalmente 16 bytes.
            </summary>
            <remarks>
            Indica que se recogerá sólo una parte del fichero, normalmente 16 bytes.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectCommon">
            <summary>
            Clase pública sellada común al namespace Inflexion.Framework.DataAccess.
            </summary>
            <remarks>
            Clase con acciones comunes para los objectos de acceso a datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectCommon.ParameterLabelSubstitution(Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            Función estática encargada de sustituir los parámetros de la sentencia sql por los parémtros correctos.
            </summary>
            <remarks>
            El objetivo principal es preparar una función multi-base de datos.
            </remarks>
            <param name="databaseType">Tipo de base de datos.</param>
            <param name="queryString">Sentencia Sql.</param>
            <returns>Devuelve la sentencia Sql transformada.</returns>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.ITransactionWrapper">
            <summary>
            Interfaz que define el contenedor simple para las transacciones relacionadas
            con nHibernate.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.ITransactionWrapper.Commit">
            <summary>
            Método encargado de confirmar la transacción.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.UoW.ITransactionWrapper.Rollback">
            <summary>
            Método encargado de deshacer la transacción.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.Range">
            <summary>
            Clase pública que representa un rango de enteros.
            </summary>
            <remarks>
            Objeto-valor para rangos de números enteros.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.ValueObjects.IRange">
            <summary>
            Interfaz que expone el contrato para el objeto-valor de rango.
            </summary>
            <remarks>
            Este objeto valor consta de un valor inicial y valor final,
            de tipo Int32, que determinan dicho rango.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IRange.FinalValue">
            <summary>
            Propiedad que obtiene el valor final del rango
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor final del rango
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IRange.InitialValue">
            <summary>
            Propiedad que obtiene el valor inicial del rango.
            </summary>
            /// <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor inicial del rango
            </value>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.Range.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Range"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.Range.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Range"/>.
            </summary>
            <param name="initialValue">
            Parámetro que indica el valor inicial del rango.
            </param>
            <param name="finalValue">
            Parámetro que indica el valor final del rango.
            </param>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.Range.FinalValue">
            <summary>
            Propiedad que obtiene el valor final del rango
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor final del rango
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.Range.InitialValue">
            <summary>
            Propiedad que obtiene el valor inicial del rango.
            </summary>
            /// <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el valor inicial del rango
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo">
            <summary>
            Clase pública que representa la información de auditoría.
            </summary>
            <remarks>
            Objeto-valor para los datos de auditoría.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AuditInfo"/>.
            </summary>
            <remarks>
            Constructor vacio requerido por nHibernate.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.#ctor(System.String,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:AuditInfo"/>.
            </summary>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario
            que crea el registro.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario
            que modifica el registro.
            </param>
            <param name="createdTimestamp">
            Parámetro que indica la fecha de creación del registro.
            </param>
            <param name="updatedTimestamp">
            Parámetro que indica la fecha de modificación del registro.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.CreatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que crea el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener  el identificador
            único del usuario que crea el registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.CreatedTimestamp">
            <summary>
            Propiedad que obtiene la fecha de
            creación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener la
            fecha de creación del registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.UpdatedBy">
            <summary>
            Propiedad que obtiene el identificador único
            del usuario que modifica el registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener el identificador
            único del usuario que modifica el registro.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfo.UpdatedTimestamp">
            <summary>
            Propiedad que obtiene o establece la fecha de
            modificación del registro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para obtener o establecer la
            fecha de modificación del registro.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterOrEqualThanCurrentDateAttribute">
            <summary>
            Clase atributo encargada comprobar si una fecha es menor
            que la fecha actual.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterOrEqualThanCurrentDateAttribute.errorMessage">
            <summary>
            Variable privada encargad de almacenar el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterOrEqualThanCurrentDateAttribute.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GreaterOrEqualThanCurrentDateAttribute"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterOrEqualThanCurrentDateAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si una fecha es mayor a otra.
            </summary>
            <param name="value">
            Parámetro que indica la fecha a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor de la fecha es válido y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.NotSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador NOT lógico.
            </summary>
            <remarks>
            Convierte una especificación original con el operador NOT.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.NotSpecification`1.originalCriteria">
            <summary>
            Variable privada que indica el criterio original.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.NotSpecification`1.#ctor(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase NotSpecification.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="originalSpecification">
            Parámetro de tipo <see cref="T:Inflexion.Framework.Domain.Core.Specification.ISpecification`1"/>
            que representa la especificación original.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Inicializa una nueva instancia de la clase NotSpecification.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="originalSpecification">
            Parámetro de tipo <see cref="N:System.Linq.Expressions"/>
            que representa la especificación original.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.NotSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Core.StaticSingleton`1">
             <summary>
             Clase pública utilizada para crear un objeto singleton.
             </summary>
             <remarks>
             Crea un objeto singleton.
             </remarks>
             <example>
             Código de ejemplo que muestra como utilizar esta clase:
             <code>
            
             </code>
             </example>
             <typeparam name="T">Clase a instanciar.</typeparam>
        </member>
        <member name="F:Inflexion.Framework.Core.StaticSingleton`1.storedInstance">
            <summary>
            Variable privada y estática, encargada de almacenar las
            instancias creadas.
            </summary>
            <remarks>
            Nos permite almacenar las instancias creadas.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.StaticSingleton`1.#ctor(`0)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:StaticSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:StaticSingleton"/>.
            </remarks>
            <param name="initialObject">Objeto inicial a instanciar.</param>
        </member>
        <member name="M:Inflexion.Framework.Core.StaticSingleton`1.#ctor(System.Object[])">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:StaticSingleton"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:StaticSingleton"/>.
            </remarks>
            <param name="initializationParameters">Parámetros de inicialización
            para el objeto a instanciar.</param>
        </member>
        <member name="P:Inflexion.Framework.Core.StaticSingleton`1.StoredInstances">
            <summary>
            Propiedad pública que permite establecer y obtener las
            instancias almacenadas y creadas.
            </summary>
            <remarks>
            Nos permite establecer y obtener las instancias almacenadas y
            creadas.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener las instancias
            almacenadas y creadas.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Core.ConversionException">
            <summary>
            Clase Exception que será utilizada en Inflexion.Framework.Core.
            </summary>
            <remarks>
            <para>
            Esta clase es una clase para ser utilizada dentro de Inflexion.Framework.Core.
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.ConversionException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase ConversionException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase ConversionException.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.ConversionException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ConversionException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase ConversionException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.Core.ConversionException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase ConversionException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase ConversionException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
            <param name="innerException">Evento <see cref="T:System.Exception"/>
            que es lanzado por la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.Core.ConversionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase ConversionException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase ConversionException.
            </remarks>
            <param name="info">Objeto de tipo <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">Objeto de tipo <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriod">
            <summary>
            Clase pública que representa un periodo de vigencia.
            </summary>
            <remarks>
            Objeto-valor para las fechas de un periodo de vigencia.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.ValueObjects.IValidPeriod">
            <summary>
            Interfaz que expone el contrato para el objeto valor
            de periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IValidPeriod.FromDate">
            <summary>
            Propiedad que indica la fecha de inicio
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de inicio del periodo de vigencia.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IValidPeriod.ToDate">
            <summary>
            Propiedad que indica la fecha de fin
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            fecha de fin del periodo de vigencia.
            </value>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriod.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriod.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:ValidPeriod"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromDate">
            Parámetro que indica la fecha inicial del período.
            </param>
            <param name="toDate">
            Parámetro que indica la fecha final del período.
            </param>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriod.FromDate">
            <summary>
            Propiedad pública que obtiene la fecha inicial
            del periodo de vigencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la fecha inicial
            del periodo de vigencia.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.ValidPeriod.ToDate">
            <summary>
            Propiedad pública que obtiene la fecha final del período de
            vigencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la fecha final
            del periodo de vigencia.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.Interval">
            <summary>
            Clase pública que representa un intervalo.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval">
            <summary>
            Interfaz que expone el contrato para el objeto valor intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IInterval.FromTime">
            <summary>
            Propiedad que indica la hora de inicio
            del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            hora de inicio del intervalo.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.ValueObjects.IInterval.ToTime">
            <summary>
            Propiedad que indica la hora de fin del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que se utilizada para representar la
            hora de fin del intervalo.
            </value>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ValueObjects.Interval.fromTime">
            <summary>
            Variable privada de propiedad para almacenar la hora de inicio.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.ValueObjects.Interval.toTime">
            <summary>
            Variable privada de propiedad para almacenar la hora de fin.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.Interval.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.Interval.#ctor(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="toTime">
            Parámetro que indica la hora final del intervalo.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.Interval.#ctor(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Interval"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="duration">
            Parámetro que indica la duración del intervalo.
            </param>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.Interval.FromTime">
            <summary>
            Propiedad pública que obtiene la hora inicial
            del intervalo
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la hota inicial
            del intervalo.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.ValueObjects.Interval.ToTime">
            <summary>
            Propiedad pública que obtiene la hora final del intervalo.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para obtener la hora final del intervalo.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterThanAttribute">
            <summary>
            Clase de tipo atributo encargado de validar datos dentro de un rango.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterThanAttribute.basePropertyName">
            <summary>
            Variable privada que representa el nombre de la propiedad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterThanAttribute.errorMessage">
            <summary>
            Variable privada encargada de almacenar el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterThanAttribute.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:GreaterThanAttribute"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="basePropertyName">
            Parámetro que indica el nombre base de la propiedad de la que comparar.
            </param>
            <param name="errorMessage">
            Parámetro que indica el mensaje en caso de error.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.CustomAttributes.GreaterThanAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Función encargada de validar si un número es mayor que otro.
            </summary>
            <param name="value">
            Parámetro que indica el número a comparar.
            </param>
            <param name="validationContext">
            Parámetro que indica el contexto de validación.
            </param>
            <returns>
            Devuelve <c>true</c> si el valor a comparar es mayor y <c>false</c> en caso contrario.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.SpecificationExtensions">
            <summary>
            TODO: Update summary.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.SpecificationExtensions.AndAlso``1(Inflexion.Framework.Domain.Core.Specification.ISpecification{``0},Inflexion.Framework.Domain.Core.Specification.ISpecification{``0})">
            <summary>
             AndAlso operator
            </summary>
            <param name="leftSideSpecification">left operand in this AND operation</param>
            <param name="rightSideSpecification">right operand in this AND operation</param>
            <returns>New specification</returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.SpecificationExtensions.OrElse``1(Inflexion.Framework.Domain.Core.Specification.ISpecification{``0},Inflexion.Framework.Domain.Core.Specification.ISpecification{``0})">
            <summary>
            OrElse operator
            </summary>
            <param name="leftSideSpecification">left operand in this OR operation</param>
            <param name="rightSideSpecification">left operand in this OR operation</param>
            <returns>New specification</returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.ExpressionBuilder">
            <summary>
            Clase extensora para añadir AND y OR con parámetros
            en expresiones lambda.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ExpressionBuilder.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Método extensor del operador AND.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            izquierdo de la operación AND.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            derecho de la operación AND.
            </param>
            <returns>
            Devuelve nueva AND <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ExpressionBuilder.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Método extensor que compone y une dos expresiones en una nueva expresión.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa la
            instancia de la primera expresión.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa la
            instancia de la segunda expresión a unir o juntar.
            </param>
            <param name="merge">
            Parámetro que representa la función de unión.
            </param>
            <returns>
            Devuelve nueva <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ExpressionBuilder.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Método extensor del operador OR.
            </summary>
            <typeparam name="T">
            Representa el tipo de los parámetros en la expresión.
            </typeparam>
            <param name="first">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            izquierdo de la operación OR.
            </param>
            <param name="second">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa el operando
            derecho de la operación OR.
            </param>
            <returns>
            Devuelve nueva OR <see cref="T:System.Linq.Expressions.Expression"/>.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Tracing.ListenerThreadSafe">
            <summary>
            Clase encargada de establecer una cola de mensajes segura para evitar
            conflictos cuando dos procesos tratan de persistir en disco mensajes
            al mismo tiempo.
            </summary>
            <remarks>
            Clase que se encarga de establecer una cola segura de mensajes para
            evitar conflictos cuando dos procesos tratan de persistir en disco
            mensajes al mismo tiempo.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Tracing.ListenerThreadSafe.open">
            <summary>
            Variable privada utilizada internamente y que nos permite saber
            si el proceso está abierto o no.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:ListenerThreadSafe"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ListenerThreadSafe"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.#ctor(System.Collections.ICollection)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:ListenerThreadSafe"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ListenerThreadSafe"/>.
            </remarks>
            <param name="collection"><see cref="T:System.Collections.ICollection"/>
            en la que copiaremos los elementos.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.#ctor(System.Int32,System.Single)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:ListenerThreadSafe"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ListenerThreadSafe"/>.
            </remarks>
            <param name="capacity">Número inicial de elementos que puede
            contener la cola.</param>
            <param name="growFactor">Factor por el cuál la capacidad de la
            cola es expandida.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.#ctor(System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:ListenerThreadSafe"/>.
            </summary>
            <remarks>
            Constructor de la clase <see cref="T:ListenerThreadSafe"/>.
            </remarks>
            <param name="capacity">Número inicial de elementos que puede
            contener la cola.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Finalize">
            <summary>
            Destructor de la clase <see cref="T:ListenerThreadSafe"/>
            (cierra la cola, espera la terminación de la ejecución de la
            hebra actual, etc).
            </summary>
            <remarks>
            Destructor de la clase <see cref="T:ListenerThreadSafe"/>.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Clear">
            <summary>
            Método público que nos permite eliminar de forma segura todos
            los objetos de la cola.
            </summary>
            <remarks>
            Nos permite eliminar de forma segura todos los objetos de la cola.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Close">
            <summary>
            Método público que nos permite cerrar y eliminar de forma
            segura todos los objetos de la cola, permitiendo que terminen
            todas las hebras de desencolamiento en proceso.
            </summary>
            <remarks>
            Nos permite cerrar y eliminar de forma segura todos los objetos
            de la cola, permitiendo que terminen todas las hebras de
            desencolamiento en proceso.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Dequeue">
            <summary>
            Función pública que eliminar y devolver un objeto del principio
            de la cola.
            </summary>
            <remarks>
            Nos permite eliminar y devolver un objeto del principio de la
            cola.
            </remarks>
            <returns>Objeto que estaba encolado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Dequeue(System.TimeSpan)">
            <summary>
            Función pública que nos permite eliminar y devolver un objeto
            del principio de la cola.
            </summary>
            <remarks>
            Nos permite eliminar y devolver un objeto del principio de la
            cola.
            </remarks>
            <param name="timeout">Tiempo de espera antes de retornar
            (en milisegundos).</param>
            <returns>Objeto que estaba encolado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Dequeue(System.Int32)">
            <summary>
            Función pública que nos permite eliminar y devolver un objeto
            del principio de la cola.
            </summary>
            <remarks>
            Nos permite eliminar y devolver un objeto del principio de la
            cola.
            </remarks>
            <param name="timeout">Tiempo de espera antes de retornar
            (en milisegundos).</param>
            <returns>Objeto que estaba encolado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Enqueue(System.Object)">
            <summary>
            Función pública encargada de encolar o añadir un objeto al
            final de la cola.
            </summary>
            <remarks>
            Nos permite encolar o añadir un objeto al final de la cola.
            </remarks>
            <param name="objectData">Objeto a encolar.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Open">
            <summary>
            Método público que nos permite abrir una cola para ser utilizada.
            </summary>
            <remarks>
            Nos permite abrir una cola para ser utilizada.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.Write(System.String)">
            <summary>
            Método público que nos permite escribir el mensaje en la cola.
            </summary>
            <remarks>
            Nos permite escribir el mensaje en la cola.
            </remarks>
            <param name="message">
            Texto del mensaje.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.WriteLine(System.String)">
            <summary>
            Método público encargado de escribir el mensaje en la cola
            agregando un salto de línea al final del mensaje.
            </summary>
            <remarks>
            Nos permite escribir el mensaje en la cola agregando un salto
            de línea al final del mensaje.
            </remarks>
            <param name="message">Texto del mensaje.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.ListenerThreadSafe.GetText">
            <summary>
            Función privada que nos permite iterar los mensajes de la cola
            y obtener la información de cada elemento de la cola.
            </summary>
            <remarks>
            Nos permite iterar los mensajes de la cola y obtener la
            información de cada elemento de la cola.
            </remarks>
            <returns>
            Devuelve el resultado de la iteración.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Tracing.ListenerThreadSafe.Closed">
            <summary>
            Propiedad que nos permite obtener un flag indicativo de si la
            cola ha sido cerrada o no.
            </summary>
            <remarks>
            Flag que nos indica si la cola ha sido cerrada o no.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Tracing.ListenerThreadSafe.Text">
            <summary>
            Propiedad pública que nos permite obtener el texto de un mensaje.
            </summary>
            <remarks>
            Nos permite obtener el texto de un mensaje.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar">
            <summary>
            Clase pública para la ejecución de acciones mediante ExecuteScalar.
            </summary>
            <remarks>
            Permite ejecutar acciones mediante ExecuteScalar.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase ObjectExecuteScalar.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ObjectExecuteScalar.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.Retrieve">
            <summary>
            Función pública encargada de ejecutar una sentencia Sql
            mediante ExecuteScalar.
            </summary>
            <remarks>
            Función que nos permite ejecutar una sentencia Sql mediante
            ExcecuteScalar.
            </remarks>
            <returns>
            Devuelve la primera columna de la primera fila del conjunto de
            resultados devuelto por la consulta.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.Retrieve(Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Función pública encargada de ejecutar una sentencia Sql mediante
            ExecuteScalar.
            </summary>
            <remarks>
            Función que nos permite ejecutar una sentencia Sql mediante
            ExcecuteScalar.
            </remarks>
            <param name="databaseType">Tipo de base de datos.</param>
            <returns>
            Devuelve la primera columna de la primera fila del conjunto de
            resultados devuelto por la consulta.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.Retrieve(System.String,System.String,System.String)">
            <summary>
            Función pública encargada de ejecutar una sentencia Sql mediante
            ExecuteScalar..
            </summary>
            <remarks>
            Función que nos permite ejecutar una sentencia Sql mediante
            ExcecuteScalar.
            </remarks>
            <param name="provider">Proveedor de acceso a datos.</param>
            <param name="connectionString">Cadena de conexión.</param>
            <param name="sqlStatement">Sentencia Sql a ejecutar.</param>
            <returns>
            Devuelve la primera columna de la primera fila del conjunto de
            resultados devuelto por la consulta.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.ExecuteScalar">
            <summary>
            Función pública encargada de ejecutar una sentencia Sql mediante
            ExecuteScalar.
            </summary>
            <remarks>
            Función que nos permite ejecutar una sentencia Sql mediante
            ExcecuteScalar.
            </remarks>
            <returns>
            Devuelve la primera columna de la primera fila del conjunto de
            resultados devuelto por la consulta.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.ExecuteScalar(Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Función pública encargada de ejecutar una sentencia Sql mediante
            ExecuteScalar.
            </summary>
            <remarks>
            Función que nos permite ejecutar una sentencia Sql mediante
            ExcecuteScalar.
            </remarks>
            <param name="databaseType">Tipo de base de datos.</param>
            <returns>
            Devuelve la primera columna de la primera fila del conjunto de resultados devuelto por la consulta.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.ConnectionString">
            <summary>
            Propiedad que obtiene o establece la cadena de conexión con la
            base de datos.
            </summary>
            <remarks>
            Nos permite obtener y establecer la cadena de conexión con la
            base de datos.
            </remarks>
            <value>
            Obtiene y establece la cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.Provider">
            <summary>
            Propiedad que obtiene o establece el proveedor de acceso a datos.
            </summary>
            <remarks>
            Nos permite obtener y establecer el proveedor de acceso a datos.
            </remarks>
            <value>
            Obtiene y establece el proveedor de acceso a datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar.SqlStatement">
            <summary>
            Propiedad que obtiene o establece la sentencia Sql a ejecutar
            contra la base de datos.
            </summary>
            <remarks>
            Nos permite obtener y establecer la sentencia Sql a ejecutar
            contra la base de datos.
            </remarks>
            <value>
            Obtiene y establece la sentencia Sql a ejecutar contra la base
            de datos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.DataConnection">
            <summary>
            Clase pública utilizada para la conexión a datos.
            </summary>
            <remarks>
            Nos permite trabajar con una conexión a la fuente de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.#ctor">
            <summary>
            Constructor de la clase DataConnection.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.#ctor(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            <para>
            Constructor de la clase DataConnection.
            </para>
            <para>
            Este constructor crea un objeto con seguridad integrada.
            </para>
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="server">Nombre o Ip del servidor.</param>
            <param name="database">Nombre de la base de datos.</param>
            <param name="type">Tipo de base de datos.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.#ctor(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            <para>
            Constructor de la clase DataConnection.
            </para>
            <para>
            Este constructor crea un objeto con seguridad integrada y otros
            parámetros pasados con texto libre.
            </para>
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="server">Nombre o Ip del servidor.</param>
            <param name="database">Nombre de la base de datos.</param>
            <param name="type">Tipo de base de datos.</param>
            <param name="textFree">Texto libre para indicar otros parámetros.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.#ctor(System.String,System.String,System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Constructor de la clase DataConnection.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="server">Nombre o Ip del servidor.</param>
            <param name="database">Nombre de la base de datos.</param>
            <param name="user">Usuario utilizado en la cadena de conexión.</param>
            <param name="password">Password utilizada en la cadena de conexión.</param>
            <param name="type">Tipo de base de datos.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.#ctor(System.String,System.String,System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType,System.String)">
            <summary>
            Constructor de la clase DataConnection.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="server">Nombre o Ip del servidor.</param>
            <param name="database">Nombre de la base de datos.</param>
            <param name="user">Usuario utilizado en la cadena de conexión.</param>
            <param name="password">Password utilizada en la cadena de conexión.</param>
            <param name="type">Tipo de base de datos.</param>
            <param name="textFree">Texto libre para indicar otros parámetros.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.ToString">
            <summary>
            Función pública que devuelve el valor de la cadena de conexión.
            </summary>
            <remarks>
            Devuelve el valor de la cadena de conexión.
            </remarks>
            <returns>Cadena de conexión.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.DataConnection.CreateConnectionString(Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Función privada que permite obtener la cadena de conexión.
            </summary>
            <remarks>
            Obtiene la cadena de conexión.
            </remarks>
            <param name="databaseType">Tipo de base de datos utilizada para
            crear la cadena de conexión con la base de datos.</param>
            <returns>Cadena de conexión con la base de datos.</returns>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.Database">
            <summary>
            Propiedad que indica el nombre de la base de datos.
            </summary>
            <remarks>
            Nombre de la base de datos.
            </remarks>
            <value>
            Indica el nombre de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.IntegratedSecurity">
            <summary>
            Propiedad que indica si se trata de seguridad integrada o no en la
            conexión con la base de datos.
            </summary>
            <remarks>
            Indica si se trata de seguridad integrada o no en la conexión con
            la base de datos..
            </remarks>
            <value>
            Indica si se va a utilizar seguridad integrada o no.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.Password">
            <summary>
            Propiedad que indica la password o contraseña con la que nos
            conectaremos a la base de datos.
            </summary>
            <remarks>
            Password o contraseña con la que nos conectaremos a la base de datos.
            </remarks>
            <value>
            Indica la password o contraseña de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.Server">
            <summary>
            Propiedad que contiene el nombre o Ip del servidor de base de datos.
            </summary>
            <remarks>
            Nombre o Ip del servidor de base de datos.
            </remarks>
            <value>
            Indica el nomber o ip del servidor de base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.TextFree">
            <summary>
            <para>
            Propiedad que indica un texto libre utilizado como parámetros extra
            (como timeout, port connection, etc).
            </para>
            <para>
            Cada parámetros tiene que estar separado por el carácter <c>;</c>.
            </para>
            <para>
            Por ejemplo: "default command timeout=20;Port=3306;"
            </para>
            </summary>
            <remarks>
            Indica un texto libre utilizado como parámetros extra (como timeout,
            port connection, etc).
            </remarks>
            <value>
            Indica un texto libre utilizado como parámetros extra.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.Type">
            <summary>
            Property que indica el tipo de base de datos (MySql,
            Microsoft Sql Server, Oracle, Microsoft Access, etc).
            </summary>
            <remarks>
            Indica el tipo de base de datos (MySql, Microsoft Sql Server,
            Oracle, Microsoft Access, etc).
            </remarks>
            <value>
            Indica el tipo de base de datos a utilizar.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.DataConnection.User">
            <summary>
            Propiedad que indica el usuario con el que nos conectaremos a la
            base de datos.
            </summary>
            <remarks>
            Usuario con el que nos conectaremos a la base de datos.
            </remarks>
            <value>
            Indica el usuario de base de datos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager">
            <summary>
            Clase estática
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <seealso href="http://msdn.microsoft.com/en-us/library/wda6c36e.aspx">DbProviderFactories (ADO.NET) .NET Framework 4</seealso>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.providerFactories">
            <summary>
            Variable privada de tipo colección de objetos de tipo
            <see cref="T:System.Data.Common.DbProviderFactory"/>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.providerFactoriesMonitorLock">
            <summary>
            Variable privada utilizada para la sección crítica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.providerFactoriesSingletonMutex">
            <summary>
            Variable privada utilizada para aplicar el patrón solitario.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.Clear">
            <summary>
            Método estático para limpiar la colección.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.GetFactory(System.String)">
            <summary>
            Método estático encargado de devolver una instancia de la clase
            <see cref="T:System.Data.Common.DbProviderFactory"/> de acuerdo al nombre del proveedor proporcionado.
            </summary>
            <param name="providerFactoryName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <returns>
            Devuelve objeto <see cref="T:System.Data.Common.DbProviderFactory"/> que representa la
            factoría de proveedores.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.GetOpenConnection(System.String,System.String)">
            <summary>
            Función estática encargada de crear una conexión abierta.
            </summary>
            <param name="providerName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <param name="connectionString">
            Parámetro que indica la cadena de conexión.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:System.Data.IDbConnection"/> con la conexión creada.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.Remove(System.String)">
            <summary>
            Método estático encargado de eliminar una factoría de la colección.
            </summary>
            <param name="providerFactoryName">
            Parámetro que indica el nombre del proveedor de acceso a datos.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.RetrieveAllConfiguredFactories(System.Boolean)">
            <summary>
            Método encargado de devolver todas las factorías de tipo
            <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <param name="clearCurrentFactories">
            Parámetro que indica si se limpiará previamente la colección.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <seealso href="http://msdn.microsoft.com/en-us/library/system.data.common.dbproviderfactories.getfactoryclasses.aspx"/>
        </member>
        <member name="P:Inflexion.Framework.Infrastructure.DataAccess.AdoNet.ProviderFactories.Manager.Factories">
            <summary>
            Propiedad que obtiene una colección de objetos <see cref="T:System.Data.Common.DbProviderFactory"/>
            </summary>
            <remarks>
            Se utiliza un patrón solitario para la creación
            perezosa de la colección (diccionario) de factorías.
            </remarks>
            <value>
            Valor que es utilizado para obtener una colección de objetos
            de tipo <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfoFactory">
            <summary>
            Clase estática factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo"/>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.AuditInfoFactory.Create(System.String,System.String,System.DateTime,System.Nullable{System.DateTime})">
            <summary>
            Método encargado de crear objetos valor de tipo
            <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo"/>
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario
            que crea el registro.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario
            que modifica el registro.
            </param>
            <param name="createTimestamp">
            Parámetro que indica la fecha de creación del registro.
            </param>
            <param name="updateTimestamp">
            Parámetro que indica la fecha de modificación del registro.
            </param>
            <returns>
            Devuelve el objeto valor <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IAuditInfo"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.TrueSpecification`1">
            <summary>
            Clase para la especificación TRUE.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.TrueSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.DirectSpecification`1">
            <summary>
            Clase que representa la especificación directa.
            </summary>
            <remarks>
            La especificación directa es una implementación simple de una
            especificación que viene dada por la expresión lambda en el constructor.
            </remarks>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.DirectSpecification`1.matchingCriteria">
            <summary>
            Variable privada que representa el criterio de coincidencia.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.DirectSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:DirectSpecification"/>.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="matchingCriteria">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/> que representa
            los criterios coincidentes.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.DirectSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.CounterTypeExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterTypeExtensions.GetBaseType(System.Diagnostics.PerformanceCounterType)">
            <summary>
            Gets the type of the base.
            </summary>
            <param name="counterType">Type of the counter.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterTypeExtensions.GetInitialValue(System.Diagnostics.PerformanceCounterType)">
            <summary>
            Gets the initial value.
            </summary>
            <param name="counterType">Type of the counter.</param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterTypeExtensions.IsBaseCounter(System.Diagnostics.PerformanceCounterType)">
            <summary>
            Determines whether [is base counter] [the specified counter type].
            </summary>
            <param name="counterType">Type of the counter.</param>
            <returns>
              <c>true</c> if [is base counter] [the specified counter type]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.Validation.IValidationError">
            <summary>
            Interfaz que expone los detalles de los errores de validaciones.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.Validation.IValidationError.EntityType">
            <summary>
            Propiedad que obtiene el tipo de la entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el tipo de la entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.Validation.IValidationError.Message">
            <summary>
            Propiedad que obtiene el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el mensaje de error.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.Validation.IValidationError.PropertyName">
            <summary>
            Propiedad que obtiene el nombre de la propiedad que ocasiona el error de validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el nombre de la propiedad
            que ocasiona el error de validación.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.PagedElements`1">
            <summary>
            Clase que representa los elementos paginados de una entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.PagedElements`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase PagedElements.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.PagedElements`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Inicializa una nueva instancia de la clase PagedElements.
            </summary>
            <param name="items">
            Parámetro que identifica la lista de items.
            </param>
            <param name="totalElements">
            Parámetro que indica el número total de elemntos de la lista.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Core.PagedElements`1.TotalPages(System.Int32)">
            <summary>
            Método que devuelve el total de páginas a partir
            del tamaño de cada página
             </summary>
            <param name="pageSize">
            Parámetro que indica el tamaño de cada página.
            </param>
            <returns>
            Devuelve el total de páginas.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Core.PagedElements`1.TotalElements">
            <summary>
            Propiedad que obtiene el total de elementos.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el total de elementos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.ValidationException">
            <summary>
            Clase que representa la excepción correspondiente a las validaciones.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationException.#ctor(System.Type,System.String,System.Collections.Generic.IEnumerable{Inflexion.Framework.Domain.Core.Validation.IValidationError})">
            <summary>
            Inicializa una nueva instancia de la clase ValidationException.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje de error.
            </param>
            <param name="errors">
            Colección que contiene los distintos errores ocurridos en la validación de la entidad.
            </param>
            <param name="entityType">
            Parámetro de tipo <see cref="T:System.Type"/> que indica el tipo de la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationException.#ctor(System.Type,System.Collections.Generic.IEnumerable{Inflexion.Framework.Domain.Core.Validation.IValidationError})">
            <summary>
            Inicializa una nueva instancia de la clase ValidationException.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="entityType">
            Parámetro de tipo <see cref="T:System.Type"/> que indica el tipo de la entidad.
            </param>
            <param name="errors">
            Colección que contiene los distintos errores ocurridos en la validación de la entidad.
            </param>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Validation.ValidationException.EntityType">
            <summary>
            Propiedad que obtiene el tipo <see cref="T:System.Type"/> de la entidad que provocó la excepción.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilziado para obtener el tipo de la entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Validation.ValidationException.ValidationErrors">
            <summary>
            Propiedad que obtiene la colección de errores de validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>T
            Valor que es utilizado para obtener la colección de errores de validación.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Core.GenericSingleton`1">
            <summary>
            <para>
            Clase pública utilizada para crear un objeto singleton.
            </para>
            <para>
            En este caso, sólo permite la creación de un único objeto del tipo
            pasado como argumento.
            </para>
            <para>
            No permite la creación de dos ó más objetos del mismo tipo.
            </para>
            </summary>
            <remarks>
            <para>
            Crea un objeto singleton.
            </para>
            <para>
            En este caso, sólo permite la creación de un único objeto del tipo
            pasado como argumento.
            </para>
            <para>
            No permite la creación de dos ó más objetos del mismo tipo.
            </para>
            </remarks>
            <typeparam name="T">Clase a instanciar.</typeparam>
        </member>
        <member name="F:Inflexion.Framework.Core.GenericSingleton`1.instance">
            <summary>
            <para>
            Variable privada estática que indica la instancia creada.
            </para>
            <para>
            Esta línea elimina la necesidad de bloquear, ya que un
            constructor estático es de por sí <c>thread safe</c>.
            </para>
            </summary>
            <remarks>
            Indica la instancia creada.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Core.GenericSingleton`1.op_Implicit(Inflexion.Framework.Core.GenericSingleton{`0})~`0">
            <summary>
            Función estática de tipo implícita que nos permite recuperar la
            instancia singleton creada.
            </summary>
            <remarks>
            Nos permite recuperar la instancia singleton creada.
            </remarks>
            <param name="value">Valor de la instancia singleton creada.</param>
            <returns>Devuelve un objeto singleton creado.</returns>
        </member>
        <member name="P:Inflexion.Framework.Core.GenericSingleton`1.Instance">
            <summary>
            Propiedad pública que permite establecer y obtener la instancia
            creada.
            </summary>
            <remarks>
            Nos permite establecer y obtener la instancia creada.
            </remarks>
            <value>
            Valor que es utilizado para establecer y obtener la instancia
            creada.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType">
            <summary>
            <para>
            Lista enumerada que indica un tipo de contraseña fuerte.
            </para>
            <para>
            Todos los tipos aquí indicados, especifican el tipo de contraseña
            fuerte a utilizar.
            </para>
            </summary>
            <remarks>
            Especifica el tipo de contraseña fuerte a utilizar.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType.VeryWeak">
            <summary>
            Indica que la contraseña o password es muy débil.
            </summary>
            <remarks>
            Contraseña o password muy débil.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType.Weak">
            <summary>
            Indica que la contraseña o password es débil.
            </summary>
            <remarks>
            Contraseña o password débil.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType.Good">
            <summary>
            Indica que la contraseña o password es suficiente.
            <remarks>
            Contraseña o password suficiente.
            </remarks>
            </summary>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType.Strong">
            <summary>
            Indica que la contraseña o password es fuerte.
            </summary>
            <remarks>
            Contraseña o password fuerte.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.PasswordStrengthType.VeryStrong">
            <summary>
            Indica que la contraseña o password es muy fuerte.
            </summary>
            <remarks>
            Contraseña o password muy fuerte.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Providers.DbDataProvider">
            <summary>
            Clase que nos permite definir el proveedor de datos general o universal
            para trabajar de esta manera con diferentes motores de bases de datos.
            </summary>
            <remarks>
            Nos permite definir el proveedor de datos general o universal para
            trabajar de esta manera con diferentes motores de bases de datos.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Providers.IDbProvider">
            <summary>
            Interfaz que nos permite trabajar con los proveedores de bases de datos
            del Framework.
            </summary>
            <remarks>
            Nos permite trabajar con los proveedores de bases de datos del Framework.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.IDbProvider.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método que nos permite añadir un parámetro en la sentencia Sql.
            </summary>
            <remarks>
            Nos permite añadir un parámetro en la sentencia Sql.
            </remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo de datos del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Dirección del parámetro.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.IDbProvider.BeginTransaction">
            <summary>
            Método que nos permite indicar el comienzo de una transacción.
            </summary>
            <remarks>
            Nos permite indicar el comienzo de una transacción.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.IDbProvider.CloseConnection">
            <summary>
            Método que nos permite indicar el cierre de la conexión con la base
            de datos.
            </summary>
            <remarks>
            Nos permite indicar el cierre de la conexión con la base de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.IDbProvider.GetType">
            <summary>
            Función que nos permite indicar un tipo de datos de base de datos.
            </summary>
            <remarks>
            Indica un tipo de datos de base de datos.
            </remarks>
            <returns>Devuelve un tipo de datos.</returns>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.IDbProvider.OpenConnection">
            <summary>
            Método que nos permite inicializar los tipos expuestos por la interfaz.
            </summary>
            <remarks>
            Nos permite inicializar los tipos expuestos por la interfaz.
            </remarks>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.Adapter">
            <summary>
            Propiedad que nos permite establecer un adaptador con la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer un adaptador con la base de datos.
            </remarks>
            <value>
            Indica un adaptador con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.Command">
            <summary>
            Propiedad que nos permite establecer un comando con la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer un comando con la base de datos.
            </remarks>
            <value>
            Indica un comando con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.Connection">
            <summary>
            Propiedad que nos permite establecer la conexión con el proveedor.
            </summary>
            <remarks>
            Nos permite obtener o establecer la conexión con el proveedor.
            </remarks>
            <value>
            Indica la conexión con el proveedor.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.ConnectionString">
            <summary>
            Propiedad que nos permite indicar una cadena de conexión con la
            base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer una cadena de conexión con la
            base de datos.
            </remarks>
            <value>
            Indica una cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.DatabaseFactory">
            <summary>
            Propiedad que nos permite indicar la factoría de bases de datos
            con la cual trabajar.
            </summary>
            <remarks>
            Nos permite obtener o establecer la factoría de bases de datos
            con la cual trabajar.
            </remarks>
            <value>
            Indica la factoría de bases de datos con la cual trabajar.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.DataReader">
            <summary>
            Propiedad que nos permite establecer un objeto DataReader con
            la base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer un objeto DataReader con la
            base de datos.
            </remarks>
            <value>
            Indica un objeto DataReader con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.Parameter">
            <summary>
            Propiedad que nos permite establecer un parámetro con la
            base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer un parámetro con la base de datos.
            </remarks>
            <value>
            Indica un parámetro con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.IDbProvider.Transaction">
            <summary>
            Propiedad que nos permite establecer una transacción con la
            base de datos.
            </summary>
            <remarks>
            Nos permite obtener o establecer un objeto Transaction con la
            base de datos.
            </remarks>
            <value>
            Indica un objeto Transaction con la base de datos.
            </value>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.#ctor">
            <summary>
            Constructor de la clase DbDataProvider.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase DbDataProvider.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="providerType">Tipo de proveedor de base de datos.</param>
            <param name="connectionString">Cadena de conexión con la base de datos.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.#ctor(System.String,System.String,Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Constructor de la clase DbDataProvider.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
            <param name="providerType">Tipo de proveedor de base de datos.</param>
            <param name="connectionString">Cadena de conexión con la base de datos.</param>
            <param name="databaseType">Tipo de datos de la base de datos.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Finalize">
            <summary>
            Finalizes an instance of the DbDataProvider class.
            </summary>
            <remarks>
            Se encarga de actuar como destructor de la clase con el objetivo
            de liberar recursos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.AddParameter(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Método público que nos permite añadir un parámetro para ser
            utilizado en la sentencia Sql.
            </summary>
            <remarks>
            Nos permite añadir un parámetro para ser utilizado en la
            sentencia Sql.
            </remarks>
            <param name="parameterName">Nombre del parámetro.</param>
            <param name="parameterValue">Valor del parámetro.</param>
            <param name="parameterDbType">Tipo de datos del parámetro.</param>
            <param name="parameterLength">Longitud del parámetro.</param>
            <param name="parameterDirection">Dirección del parámetro.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.BeginTransaction">
            <summary>
            Método público que nos permite iniciar una transacción con la base
            de datos.
            </summary>
            <remarks>
            Nos permite iniciar una transacción con la base de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.CloseConnection">
            <summary>
            Método público que nos permite cerrar una conexión con la base de
            datos.
            </summary>
            <remarks>
            Nos permite cerrar una conexión con la base de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Dispose">
            <summary>
            Método público encargado de liberar los objetos no utilizados
            y de liberar por lo tanto, recursos.
            </summary>
            <remarks>
            Nos permite liberar objetos y recursos no utilizados.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.OpenConnection">
            <summary>
            Método público que nos permite abrir una conexión con la base
            de datos.
            </summary>
            <remarks>
            Nos permite abrir una conexión con la base de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.ResetProvider(System.String)">
            <summary>
            Método públic que nos permite resetear el proveedor de base
            de datos.
            </summary>
            <remarks>
            Nos permite resetear el proveedor de base de datos.
            </remarks>
            <param name="providerType">Tipo de proveedor de base de datos.</param>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Initialize(System.String)">
            <summary>
            Método privado utilizado para inicializar las acciones generales de
            la clase.
            </summary>
            <remarks>
            Nos permite inicializar las acciones generales de la clase.
            </remarks>
            <param name="providerType">Tipo de proveedor de base de datos.</param>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Adapter">
            <summary>
            Propiedad que nos permite indicar el objeto DataAdapter con la base
            de datos.
            </summary>
            <remarks>
            Nos permite indicar el objeto DataAdapter con la base de datos.
            </remarks>
            <value>
            Indica el objeto DataAdapter con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Command">
            <summary>
            Propiedad pública que nos permite inidicar el el objeto Command con la base de datos.
            </summary>
            <remarks>
            Nos permite indicar el objeto Command con la base de datos.
            </remarks>
            <value>
            Indica el objeto Command con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Connection">
            <summary>
            Propiedad pública que nos permite indicar la conexión con la base de datos.
            </summary>
            <remarks>
            Nos permite indicar la conexión con la base de datos.
            </remarks>
            <value>
            Indica la conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.ConnectionString">
            <summary>
            Propiedad que nos permite indicar la cadena de conexión con la
            base de datos.
            </summary>
            <remarks>
            Nos permite indicar la cadena de conexión con la base de datos.
            </remarks>
            <value>
            Indica la cadena de conexión con la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.DatabaseFactory">
            <summary>
            Propiedad pública que nos permite indicar la factoría de la base de datos.
            </summary>
            <remarks>
            Nos permite indicar la factoría de la base de datos.
            </remarks>
            <value>
            Indica la factoría de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.DatabaseName">
            <summary>
            Propiedad que nos permite indicar el nombre de la base de datos.
            </summary>
            <remarks>
            Nos permite indicar el nombre de la base de datos.
            </remarks>
            <value>
            Indica el nombre de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.DataReader">
            <summary>
            Propiedad que nos permite indicar el objeto DataReader de la base
            de datos.
            </summary>
            <remarks>
            Nos permite indicar el objeto DataReader de la base de datos.
            </remarks>
            <value>
            Indica el objeto DataReader de la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Parameter">
            <summary>
            Propiedad que nos permite indicar parámetros a la base de datos.
            </summary>
            <remarks>
            Nos permite indicar parámetros a la base de datos.
            </remarks>
            <value>
            Indica parámetros a la base de datos.
            </value>
        </member>
        <member name="P:Inflexion.Framework.DataAccess.Providers.DbDataProvider.Transaction">
            <summary>
            Propiedad que nos permite indicar el objeto Transaction de la base
            de datos.
            </summary>
            <remarks>
            Nos permite indicar el objeto Transaction de la base de datos.
            </remarks>
            <value>
            Indica el objeto Transaction de la base de datos.
            </value>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.ObjectExecuteScalarException">
            <summary>
            Clase de excepción utilizada por la clase ObjectExecuteScalar.
            <br></br>
            <see cref="T:Inflexion.Framework.DataAccess.Objects.ObjectExecuteScalar"/>
            </summary>
            <remarks>Clase de excepción utilizada en el namespace.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteScalarException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteScalarException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <remarks>Constructor de la clase con el mensaje descriptivo de la excepción.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteScalarException.#ctor(System.String,Inflexion.Framework.BaseException)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <param name="innerException">Evento SystemException que lanza la actual excepción.</param>
            <remarks>Constructor de la clase con el mensaje y el tipo de excepción interna</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteScalarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="info">Información sobre la seriación del objeto de excepción.</param>
            <param name="context">Describe el origen o destino de la seriación del objeto de excepción.</param>
            <remarks>Constructor de la clase que utiliza objetos de seriación.</remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.RangeFactory">
            <summary>
            Clase estática factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IRange"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.RangeFactory.Create(System.Int32,System.Int32)">
            <summary>
            Método estático encargado de crear objetos valor de tipo
            <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IRange"/> según los parámetros proporcionados.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="initialValue">
            Parámetro que indica el valor inicial del rango.
            </param>
            <param name="finalValue">
            Parámetro que indica el valor final del rango.
            </param>
            <returns>
            Devuelve objeto <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IRange"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Validation.ValidationError">
            <summary>
            Clase que implementa los detalles de un error de validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.#ctor(System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/>.
            </summary>
            <remarks>
            Constructor por defecto.
            </remarks>
            <param name="message">
            Parámetro que indica el mensaje de error de validación.
            </param>
            <param name="property">
            Parámetro que indica el nombre de la propiedad que fue validada.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.#ctor(System.Type,System.String,System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="entityType">
            Parámetro de tipo <see cref="T:System.Type"/> que indica el tipo de la entidad.
            </param>
            <param name="message">
            Parámetro que indica el mensaje de error de validación.
            </param>
            <param name="property">
            Parámetro que indica el nombre de la propiedad que fue validada.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="property">
            Parámetro que indica el nombre de la propiedad que fue validada.
            </param>
            <param name="ex">
            Parámetro de tipo <see cref="T:System.Exception"/> que hace referencia a la
            excepción lanzada en la validación de la entidad.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.op_Inequality(Inflexion.Framework.Domain.Base.Validation.ValidationError,Inflexion.Framework.Domain.Base.Validation.ValidationError)">
            <summary>
            Inequality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.op_Equality(Inflexion.Framework.Domain.Base.Validation.ValidationError,Inflexion.Framework.Domain.Base.Validation.ValidationError)">
            <summary>
            Equality operator.
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.Equals(System.Object)">
            <summary>
            Overridden. Compares if an object is equal to the <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.Equals(Inflexion.Framework.Domain.Base.Validation.ValidationError)">
            <summary>
            Overriden. Compares if a <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/> instance is equal to this
            <see cref="T:Inflexion.Framework.Domain.Base.Validation.ValidationError"/> instance.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Validation.ValidationError.ToString">
            <summary>
            Overriden. Gets a string that represents the validation error.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Validation.ValidationError.EntityType">
            <summary>
            Propiedad que obtiene el tipo de la entidad.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el tipo de la entidad.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Validation.ValidationError.Message">
            <summary>
            Propiedad que obtiene el mensaje de error.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el mensaje de error.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Validation.ValidationError.PropertyName">
            <summary>
            Propiedad que obtiene el nombre de la propiedad que ocasiona el error de validación.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <value>
            Valor que es utilizado para obtener el nombre de la propiedad
            que ocasiona el error de validación.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.ParameterRebinder">
            <summary>
            Clase de ayuda para los carga de parámetros en
            expresiones sin utilizar el método Invoke.
            </summary>
            <remarks>
            Este método no está soportado por todos lo proveedores de Linq,
            por ejemplo en LinqToEntities.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.ParameterRebinder.map">
            <summary>
            Variable privada de tipo colección
            de parámetros para árboles de expresión.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            Inicializa una nueva instancia de la clase ParameterRebinder.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="map">
            Parámetro de tipo colección de parámetros de expresión.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            Función encargada de reemplazar los parámetros
            en la expresión dada según la información contenidad
            en la colección de parámetros <paramref name="map"/>.
            </summary>
            <param name="map">
            Parámetro de tipo colección de parámetros que se utilizarán para reemplazar
            en la expresión.
            </param>
            <param name="expression">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.Expression"/>
            donde se reempalzarán los  parámetros.
            </param>
            <returns>
            Devuelve <see cref="T:System.Linq.Expressions.Expression"/>
            con los parámetros reemplazados.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Función del patrón Visitor.
            </summary>
            <param name="parameter">
            Parámetro de tipo <see cref="T:System.Linq.Expressions.ParameterExpression"/> que representa el
            parámetro a reemplazar.
            </param>
            <returns>
            Devuelve <see cref="T:System.Linq.Expressions.Expression"/> visitada
            con el parámetro reeplazado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Core.DijkstraAlgorithm.Results">
            <summary>
            The composite product of a Dijkstra algorithm.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Core.DijkstraAlgorithm.Results.MinimumDistance">
            <summary>
            The minimum distance from the starting node to the given node.
            </summary>
        </member>
        <member name="F:Inflexion.Framework.Core.DijkstraAlgorithm.Results.MinimumPath">
            <summary>
            The minimum path array, where each array element index corresponds
            to a node designation, and the array element value is a pointer to
            the node that should be used to travel to this one.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.Core.DijkstraAlgorithm.Results.#ctor(System.Int32[],System.Int32[])">
            <summary>
            Prepares a Dijkstra results package.
            </summary>
            <param name="minimumPath">
            The minimum path array, where each array element index corresponds
            to a node designation, and the array element value is a pointer to
            the node that should be used to travel to this one.
            </param>
            <param name="minimumDistance">
            The minimum distance from the starting node to the given node.
            </param>
        </member>
        <member name="T:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute">
            <summary>
            Attribute to be set to the category containing a set of performance counters
            It contains information about the category that would be used to configure how to managed this category.
            </summary>
        </member>
        <member name="M:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute.#ctor(System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">category name to be shown</param>
            <param name="instanceType">category Type (single or multiIntance)</param>
            <param name="info">Information to be shown for this category</param>
            <seealso cref="T:System.Diagnostics.PerformanceCounterCategoryType"/>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute.Info">
            <summary>
            Get or Set information about this category
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute.InstanceType">
            <summary>
            Get category instance type
            </summary>
        </member>
        <member name="P:Inflexion.Framework.PerformanceCounters.CounterCategoryAttribute.Name">
            <summary>
            Get or Set the name of the counter
            </summary>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.HashFileNotFoundException">
            <summary>
            Clase Exception que será utilizada en Inflexion.Framework.Security.
            </summary>
            <remarks>
            <para>
            Esta clase es una clase para ser utilizada dentro de Inflexion.Framework.Security.
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.HashFileNotFoundException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase HashFileNotFoundException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase HashFileNotFoundException.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.HashFileNotFoundException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase HashFileNotFoundException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase HashFileNotFoundException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.HashFileNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase HashFileNotFoundException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase HashFileNotFoundException.
            </remarks>
            <param name="message">Mensaje que describe el manejador de la excepción.</param>
            <param name="innerException">Evento <see cref="T:System.Exception"/>
            que es lanzado por la excepción.</param>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.HashFileNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase HashFileNotFoundException.
            </summary>
            <remarks>
            Inicialización de una nueva instancia de la clase HashFileNotFoundException.
            </remarks>
            <param name="info">Objeto de tipo <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">Objeto de tipo <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.Common">
            <summary>
            <para>
            Clase pública sellada con acciones generales utilizadas en las clases de
            seguridad (CRC32, MD5 y SHA).
            </para>
            <list type="table" description="Collision algorithms table">
            <listheader>
            <term>Algoritmo</term>
            <description>Tamaño de salida (bits)</description>
            <other>Colisión</other>
            </listheader>
            <item><term>HAVAL</term><description>256/224/192/160/128</description><other>Yes</other></item>
            <item><term>MD2</term><description>128</description><other>Almost</other></item>
            <item><term>MD4</term><description>128</description><other>Yes</other></item>
            <item><term>MD5</term><description>128</description><other>Yes</other></item>
            <item><term>PANAMA</term><description>256</description><other>Yes</other></item>
            <item><term>RadioGatún</term><description>Arbitrarily long</description><other>No</other></item>
            <item><term>RIPEMD</term><description>128</description><other>Yes</other></item>
            <item><term>RIPEMD-128/256</term><description>128/256</description><other>No</other></item>
            <item><term>RIPEMD-160/320</term><description>160/320</description><other>No</other></item>
            <item><term>SHA-0</term><description>160</description><other>Yes</other></item>
            <item><term>SHA-1</term><description>160</description><other>With flaws</other></item>
            <item><term>SHA-256/224</term><description>256/224</description><other>No</other></item>
            <item><term>SHA-512/384</term><description>512/384</description><other>No</other></item>
            <item><term>Tiger(2)-192/160/128</term><description>192/160/128</description><other>No</other></item>
            <item><term>WHIRLPOOL</term><description>512</description><other>No</other></item>
            </list>
            </summary>
            <remarks>
            Clase con acciones generales utilizadas en las clases de seguridad
            (CRC32, MD5 y SHA).
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.#ctor">
            <summary>
            Constructor de la clase Common.
            </summary>
            <remarks>
            Constructor de la clase.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.GetBytesFromString(System.String,Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType,Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType)">
            <summary>
            <para>
            Función pública estática que nos permite obtener una matriz de
            datos de acuerdo al contenido de un fichero o de acuerdo a una
            cadena de texto dada.
            </para>
            <para>
            Esta función utiliza la lista enumerada
            <see cref="T:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType">CrytographicType</see>.
            </para>
            </summary>
            <remarks>
            Función que nos permite obtener una matriz de datos de acuerdo al
            contenido de un fichero o de acuerdo a una cadena de texto dada.
            </remarks>
            <example>
            <code>
            <![CDATA[
            byte[] data = Inflexion.Framework.Infrastructure.Security.Utilities.Common.GetBytesFromString(
                                                                                                     "texto de ejemplo",
                                                                                                     Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType.String,
                                                                                                     Inflexion.Framework.Infrastructure.Security.Utilities.FileContentType.AllFileContent);
            ]]>
            </code>
            </example>
            <param name="information">Texto para ontener la matriz de datos.</param>
            <param name="cryptographyType">Tipo de acción criptográfica.</param>
            <param name="fileContent">
            <para>Indica si en el caso de trabajar con ficheros, se quiere
            obtener el contenido de todo el fichero o solo los primeros bytes.
            </para>
            <para>
            Por defecto, valdrá false y obtendrá sólo los primeros 16 bytes del
            contenido del fichero.
            </para>
            </param>
            <returns>Matriz de datos obtenidos del fichero o de la cadena dada
            como parámetro de entrada a la función.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.PrepareHash(System.Int64)">
            <summary>
            Función pública que prepara el valor devuelto en su formato formal.
            </summary>
            <remarks>
            Función que prepara el valor devuelto en su formato formal.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.Common common = new Inflexion.Framework.Infrastructure.Security.Utilities.Common();
            string result = common.PrepareHash(10908158098650842);
            ]]>
            </code>
            </example>
            <param name="hashedValue">Valor hash CRC32 calculado.</param>
            <returns>Devuelve el valor hash ya preparado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.PrepareHash(System.String)">
            <summary>
            Función pública que prepara el valor devuelto en su formato formal.
            </summary>
            <remarks>
            Función que prepara el valor devuelto en su formato formal.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.Common common = new Inflexion.Framework.Infrastructure.Security.Utilities.Common();
            string result = common.PrepareHash("8f9cbe6f5204d005c91125e6f1aea18d");
            ]]>
            </code>
            </example>
            <param name="hashedValue">Valor hash a convertir de forma adecuada.</param>
            <returns>Devuelve el valor hash ya preparado.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.PrepareHash(System.Byte[])">
            <summary>
            <para>
            Función pública encargada de convertir un conjunto de bytes[] a su
            correspondiente código hash.
            </para>
            <para>
            Esta función se utiliza principalmente en las clases de seguridad de
            la arquitectura.
            </para>
            </summary>
            <remarks>
            Función encargada de convertir un conjunto de bytes[] a su
            correspondiente código hash.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.Common common = new Inflexion.Framework.Infrastructure.Security.Utilities.Common();
            ASCIIEncoding encoding = new ASCIIEncoding();
            byte[] data = encoding.GetBytes("8f9cbe6f5204d005c91125e6f1aea18d");
            string result = common.PrepareHash(data);
            ]]>
            </code>
            </example>
            <param name="hashedValue">Bytes[] a convertir.</param>
            <returns>Cadena pasada en formato hash de acuerdo a la información
            de entrada.</returns>
        </member>
        <member name="M:Inflexion.Framework.Infrastructure.Security.Utilities.Common.PreparePlainHash(System.String)">
            <summary>
            Función pública que nos permite obtener un dato en formato formal.
            </summary>
            <remarks>
            Función que nos permite obtener un dato en formato formal.
            </remarks>
            <example>
            <code>
            <![CDATA[
            Inflexion.Framework.Infrastructure.Security.Utilities.Common common = new Inflexion.Framework.Infrastructure.Security.Utilities.Common();
            string result = common.PreparePlainHash("9e107d-9d37-2bb682");
            ]]>
            </code>
            </example>
            <param name="hashedValue">Valor hash que será reemplazado correctamente.</param>
            <returns>Devuelve el valor hash ya preparado.</returns>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.ObjectExecuteNonQueryException">
            <summary>
            Clase de excepción utilizada por la clase ObjectExecuteNonQuery.
            <br></br>
            <see cref="T:Inflexion.Framework.DataAccess.Objects.ObjectExecuteNonQuery"/>
            </summary>
            <remarks>Clase de excepción utilizada en el namespace.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteNonQueryException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteNonQueryException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <remarks>Constructor de la clase con el mensaje descriptivo de la excepción.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteNonQueryException.#ctor(System.String,Inflexion.Framework.BaseException)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <param name="innerException">Evento SystemException que lanza la actual excepción.</param>
            <remarks>Constructor de la clase con el mensaje y el tipo de excepción interna</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectExecuteNonQueryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="info">Información sobre la seriación del objeto de excepción.</param>
            <param name="context">Describe el origen o destino de la seriación del objeto de excepción.</param>
            <remarks>Constructor de la clase que utiliza objetos de seriación.</remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Core.IEntityFactory`2">
             <summary>
             Interfaz para representar las factorías de las entidades del dominio.
             </summary>
             <remarks>
             La interfaz representa las factoría de las entidades del dominio.
             </remarks>
             <typeparam name="TEntity">
             Representación de la entidad.
             </typeparam>
             <typeparam name="TIdentifier">
             Representación del identificador de la entidad.
             </typeparam>
             <example>
             Ejemplo de implementación de esta interfaz suponiendo la interfaz
             <c>IAmbitoFactory</c> que la implementa:
             <code>
               <![CDATA[
            
             using System;
            
             /// <summary>
             /// Interfaz factoría para la creación de
             /// entidades de tipo <see cref="Inflexion.Suite.Foo.BoundedContext.Domain.Core.IAmbito"/>.
             /// </summary>
             /// <remarks>
             /// Sin comentarios especiales.
             /// </remarks>
             public interface IAmbitoFactory : Inflexion.Framework.Domain.Core.IEntityFactory<IAmbito, int>
             {
            
                 #region FUNCTIONS
            
                     /// <summary>
                     /// Función para crear una entidad dentro de la factoría a partir
                     /// de los argumentos especificados.
                     /// </summary>
                     /// <remarks>
                     /// Crea una entidad de tipo <see cref="IAmbito"/>
                     /// </remarks>
                     /// <param name="description">
                     /// Parámetro que indica la descripción del ámbito.
                     /// </param>
                     /// <returns>
                     /// Devuelve una entidad de tipo <see cref="IAmbito"/>.
                     /// </returns>
                     IAmbito Create(
                                    string description);
            
                 #endregion
            
             } // IAmbitoFactory
            
               ]]>
             </code>
             </example>
        </member>
        <member name="T:Inflexion.Framework.Tracing.Listener">
            <summary>
            <para>
            Clase pública que se encarga de recibir o escuchar mensajes que se
            encolan para procesarlos más adelante.
            </para>
            <para>
            Lo habitual es encontrarse con el siguiente escenario en el que sólo se
            persisten en disco los mensajes entrantes.
            </para>
            <para>
            Para ello se dispondrían de varias colas (una para mensajes entrantes,
            otra para mensajes en proceso, y una última para mensajes procesados):
            </para>
            <list type="bullet">
            <item>1. Se encolan los mensajes entrantes.</item>
            <item>2. Se persiste en disco la cola de mensajes entrantes.</item>
            <item>3. Se extrae un elemento de la cola de mensajes entrantes.</item>
            </list>
            Esta gestión debe ser programada aparte.
            </summary>
            <remarks>
            Clase encargada de recibir o escuchar mensajes que serán encolados para
            procesarlos más adelante.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Tracing.Listener.disposed">
            <summary>
            <para>
            Variable privada utilizada internamente para saber si el
            método <c>Dispose</c> ha sido llamado o no.
            </para>
            <para>
            Por defecto, su valor es <c>false</c>.
            </para>
            </summary>
            <remarks>
            Variable que nos permite saber si el métido <c>Dispose</c> ha
            sido llamado o no.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Tracing.Listener.queueInformation">
            <summary>
            Variable privada que establece una colección de tipo
            <see cref="T:System.Collections.Queue"/> utilizada para persistir
            en memoria los mensajes entrantes.
            </summary>
            <remarks>
            Variable que establece una colección de tipo
            <see cref="T:System.Collections.Queue"/> y utilizada para
            persistir en memoria los mensajes entrantes.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase
            <see cref="T:Listener"/>.
            </summary>
            <remarks>
            <para>
            Constructor de la clase <see cref="T:Listener"/>.
            </para>
            <para>
            Este constructor se encarga de crear el objeto
            <see cref="T:System.Collections.Queue"/> que utilizaremos para
            poner mensajes en él.
            </para>
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.Finalize">
            <summary>
            Método de finalización de procesos para la clase actual.
            </summary>
            <remarks>
            Usamos el destructor como finalizador de código.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.Write(System.String)">
            <summary>
            Método público que nos permite escribir un determinado mensaje
            en la cola de mensajes.
            </summary>
            <remarks>
            Nos permite escribir un determinado mensaje en la cola de
            mensajes.
            </remarks>
            <param name="message">Texto del mensaje.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.WriteLine(System.String)">
            <summary>
            Método público que nos permite escribir un mensaje en la cola
            con una salto de línea al final del mensaje.
            </summary>
            <remarks>
            Nos permite escribir un mensaje en la cola con un salto de línea
            al final del mensaje.
            </remarks>
            <param name="message">Texto del mensaje.</param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.Dispose(System.Boolean)">
            <summary>
            Método público encargado de liberar recursos manejados y
            recursos no manejados.
            </summary>
            <remarks>
            Se encarga de liberar recursos manejados y recursos no
            manejados.
            </remarks>
            <param name="disposing">
            <para>
            Si vale <c>true</c>, el método es llamado directamente o
            indirectamente desde el código de usuario.
            </para>
            <para>
            Si vale <c>false</c>, el método es llamado por el finalizador,
            y los recursos no manejados son finalizados rápidamente.
            </para>
            </param>
        </member>
        <member name="M:Inflexion.Framework.Tracing.Listener.GetText">
            <summary>
            Función privada que nos permite iterar con los mensajes de una
            cola y obtener la información de cada elemento de la cola.
            </summary>
            <remarks>
            Nos permite iterar con los mensajes de una cola y obtener la
            información de cada elemento de la cola.
            </remarks>
            <returns>
            Devuelve el texto obtenido en la iteración.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Tracing.Listener.Text">
            <summary>
            Propiedad pública que nos permite obtener el texto de un
            determinado mensaje.
            </summary>
            <remarks>
            Nos permite obtener el texto de un determinado mensaje.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1">
            <summary>
            Clase que representa la especificación
            del operador Or lógico.
            </summary>
            <typeparam name="TEntity">
            Representa la entidad que verifica la especificación.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.leftSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.rightSpecification">
            <summary>
            Variable privada que representa la especificación izquierda;
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.#ctor(Inflexion.Framework.Domain.Core.Specification.ISpecification{`0},Inflexion.Framework.Domain.Core.Specification.ISpecification{`0})">
            <summary>
            Inicializa una nueva instancia de la clase OrSpecification.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="left">
            Parámetro que indica la especifición del operando de la
            izquierda.
            </param>
            <param name="right">
            Parámetro que indica la especificación del operando de la
            derecha.
            </param>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.IsSatisfiedBy">
            <summary>
            Función encargada de comprobar si la especificación se satisface
            con la expresión lambda especifica.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <returns>
            Devuelve expresión lambda que satisface la especificación.
            </returns>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.LeftSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            derecha del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte derecha del elemento compuesto.
            </value>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.Specification.OrSpecification`1.RightSpecification">
            <summary>
            Propiedad que establece la especificación de la parte
            izquierda del elemento compuesto.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <value>
            Valor que es utilizado para establecer la especificación de la
            parte izquierda del elemento compuesto.
            </value>
        </member>
        <member name="T:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType">
            <summary>
            <para>
            Lista enumerada que indica el tipo de criptografía.
            </para>
            <para>
            El programador puede seleccionar como parámetro una encriptación
            de cadena de texto o una encriptación del contenido de un fichero.
            </para>
            </summary>
            <remarks>
            Lista enumerada que nos permite seleccionar como parámetro una
            encriptación de cadena de texto o una encriptación del contenido de un
            fichero.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType.File">
            <summary>
            El parámetro <c>String</c> es utilizado para indicar que se
            encriptará el contenido de un fichero.
            </summary>
            <remarks>
            Parámetro utilizado para indicar que se encriptará el contenido de
            un fichero.
            </remarks>
        </member>
        <member name="F:Inflexion.Framework.Infrastructure.Security.Utilities.CryptographicType.String">
            <summary>
            El parámetro <c>String</c> es utilizado para indicar que se
            encriptará una cadena de texto.
            </summary>
            <remarks>
            Parámetro utilizado para indicar que se encriptará una cadena de texto.
            </remarks>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.ObjectDataTableException">
            <summary>
            Clase de excepción utilizada por la clase ObjectDataTable.
            <br></br>
            <see cref="T:Inflexion.Framework.DataAccess.Objects.ObjectDataTable"/>
            </summary>
            <remarks>Clase de excepción utilizada en el namespace.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectDataTableException.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <remarks>Constructor de la clase.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectDataTableException.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <remarks>Constructor de la clase con el mensaje descriptivo de la excepción.</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectDataTableException.#ctor(System.String,Inflexion.Framework.BaseException)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="message">Mensaje que describe la excepción.</param>
            <param name="innerException">Evento SystemException que lanza la actual excepción.</param>
            <remarks>Constructor de la clase con el mensaje y el tipo de excepción interna</remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.ObjectDataTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializa una nueva instancia de la clase DataConnectionException.
            </summary>
            <param name="info">Información sobre la seriación del objeto de excepción.</param>
            <param name="context">Describe el origen o destino de la seriación del objeto de excepción.</param>
            <remarks>Constructor de la clase que utiliza objetos de seriación.</remarks>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.ValueObjects.IntervalFactory">
            <summary>
            Clase factoría para la creación de objetos
            valor de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.IntervalFactory.Create(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Método encargado de la creación de objetos valor <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval"/>.
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="atTime">
            Parámetro que indica la hora final del intervalo.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval"/> creado.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.ValueObjects.IntervalFactory.Create(System.Nullable{System.DateTime},System.TimeSpan)">
            <summary>
            Método estático encargado de la creación de objetos valor <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval"/>
            </summary>
            <remarks>
            Sin comentarios adicionales.
            </remarks>
            <param name="fromTime">
            Parámetro que indica la hora inicial del intervalo.
            </param>
            <param name="duration">
            Parámetro que indica la duración del intervalo.
            </param>
            <returns>
            Devuelve objeto de tipo <see cref="T:Inflexion.Framework.Domain.Core.ValueObjects.IInterval"/> creado.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.DataAccess.Common">
            <summary>
            Clase pública estática que contiene funciones de uso común dentro del
            ensamblado encargado de realizar conexiones con bases de datos.
            </summary>
            <remarks>
            Contiene funciones de uso común dentro del ensamblado encargado de
            realizar conexiones con bases de datos.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.DataAccess.Common.GetScopeIdentityInstruction(Inflexion.Framework.DataAccess.Provider.DatabaseType)">
            <summary>
            Función pública estática que indica la sentencia de Sql a
            utilizar para obtener el Scope Identity de un campo autonumérico.
            </summary>
            <remarks>
            Función que indica la sentencia Sql a utilizar para obtener el
            Scope Identity de un campo autonumérico.
            </remarks>
            <param name="databaseType">Tipo de base de datos</param>
            <returns>Devuelve la instrucción de tipo Scope Identity según la base de datos.</returns>
        </member>
        <member name="T:Inflexion.Framework.Extensions.PropertyExtension">
            <summary>
            <para>
            Clase estática que permite obtener la descripción y el nombre de la
            propiedad.
            </para>
            <para>
            Para obtener la descripción de la propiedad, ésta debería tener la
            etiqueta o decorado DescriptionAttribute.
            </para>
            </summary>
            <remarks>
            Permite obtener la descripción y el nombre de la propiedad.
            </remarks>
            <example>
            Ejemplo de uso:
            <code>
              <![CDATA[
            string nameField = "";
            nameField = msisdnInformation.GetPropertyName(o => msisdnInformation.Version);
            string nameDescriptionField = msisdnInformation.GetPropertyDescription(nameField);
              ]]>
            </code>
            </example>
        </member>
        <member name="M:Inflexion.Framework.Extensions.PropertyExtension.GetPropertyDescription(System.Object,System.String)">
            <summary>
            Función para obtener la descripción de la propiedad.
            </summary>
            <remarks>
            Obtiene la descripción de la propiedad.
            </remarks>
            <param name="structure">
            Nombre de la estructura.
            </param>
            <param name="nameField">
            Nombre del campo de la propiedad.
            </param>
            <returns>
            Descripción de la propiedad de la etiqueta o decorado
            <seealso cref="T:System.ComponentModel.DescriptionAttribute"/>.
            </returns>
        </member>
        <member name="M:Inflexion.Framework.Extensions.PropertyExtension.GetPropertyName``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Función Lambda para obtener el nombre de la propiedad.
            </summary>
            <remarks>
            Obtiene el nombre de la propiedad.
            </remarks>
            <typeparam name="T">
            Primer parámetro Lambda.
            </typeparam>
            <typeparam name="R">
            Segundo parámetro Lambda.
            </typeparam>
            <param name="objectParameter">
            Parámetro que corresponde con el objeto en sí encargado de
            realizar la llamada.</param>
            <param name="expression">
            Expresión Lambda a utilizar.
            </param>
            <returns>
            Nombre de la propiedad que será utilizada para obtener
            la descripción de la propiedad.
            </returns>
        </member>
        <member name="T:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2">
            <summary>
            Clase abstracta que representa las acciones de solo escritura sobre el
            repositorio de entidades y objetos valor auditables.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <typeparam name="TEntity">
            Representación de la entidad.
            </typeparam>
            <typeparam name="TIdentifier">
            Representación del identificador único de la entidad.
            </typeparam>
        </member>
        <member name="F:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.unitOfWork">
            <summary>
            Variable privada para representar un adaptador para el acceso a datos.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.#ctor(Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:WriteOnlyAuditableRepositoryBase"/>.
            </summary>
            <param name="unitOfWork">
            Parámetro de unidad de trabajo. <see cref="T:Inflexion.Framework.Infrastructure.DataAccess.UoW.IAdapter"/>.
            </param>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del argumento <c>unitOfWork</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.Delete(`0,System.String)">
            <summary>
            Función pública encargada de eliminar una entidad de tipo
            del repositorio físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.Insert(`0,System.String)">
            <summary>
            Función pública encargada de insertar una entidad en el repositorio
            físico pasada como parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="createdBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="M:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.Modify(`0,System.String)">
            <summary>
            Función pública encargada de actualizar una entidad pasada como
            parámetro.
            </summary>
            <remarks>
            Sin comentarios especiales.
            </remarks>
            <param name="entity">
            Entidad de tipo genérica a insertar.
            </param>
            <param name="updatedBy">
            Parámetro que indica el identificador del usuario para la
            auditoría.
            </param>
            <exception cref="T:System.ArgumentNullException">
            Lanzada cuando el valor del parámetro <c>entity</c> es null.
            </exception>
        </member>
        <member name="P:Inflexion.Framework.Domain.Base.WriteOnlyAuditableRepositoryBase`2.UnitOfWork">
            <summary>
            Unidad de trabajo que será utilizada para acceder al repositorio.
            </summary>
            <remarks>
            La unidad de trabajo debería inyectarse a través del constructor.
            </remarks>
            <value>
            Valor utilizado para obtener la unidad de trabajo.
            </value>
        </member>
    </members>
</doc>
