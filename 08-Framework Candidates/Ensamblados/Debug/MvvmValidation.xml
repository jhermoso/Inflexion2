<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MvvmValidation</name>
    </assembly>
    <members>
        <member name="T:MvvmValidation.AsyncRuleValidateAction">
            <summary>
            Represents a method that takes a callback method for setting rule validation result as a parameter. 
            </summary>
            <param name="resultCallback">A continuation callback that should be called when the rule validation result is available.</param>
        </member>
        <member name="T:MvvmValidation.DataErrorInfoAdapter">
            <summary>
            An adapter of the <see cref="T:MvvmValidation.ValidationHelper"/> class to the <see cref="T:System.ComponentModel.IDataErrorInfo"/> interface.
            </summary>
            <remarks>
            This adapter is intended to be used whenever you need to implement the <see cref="T:System.ComponentModel.IDataErrorInfo"/> interface using <see cref="T:MvvmValidation.ValidationHelper"/>.
            </remarks>
        </member>
        <member name="M:MvvmValidation.DataErrorInfoAdapter.#ctor(MvvmValidation.ValidationHelper)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.DataErrorInfoAdapter"/> class.
            </summary>
            <param name="validator">The adaptee.</param>
        </member>
        <member name="P:MvvmValidation.DataErrorInfoAdapter.Item(System.String)">
            <summary>
            Gets the error message for the property with the given name.
            </summary>
            <returns>The error message for the property. The default is an empty string ("").</returns>
        </member>
        <member name="P:MvvmValidation.DataErrorInfoAdapter.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="T:MvvmValidation.IValidatable">
            <summary>
            Represents an object that can be validated.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidatable.Validate(System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Validates the object and calls <paramref name="onCompleted"/> callback with the validation result.
            </summary>
            <param name="onCompleted">A callback that is called when validation is completed.</param>
        </member>
        <member name="T:MvvmValidation.ValidationException">
            <summary>
            Represents an exception that occurs during validation
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:MvvmValidation.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:MvvmValidation.ValidationHelperExtensions">
            <summary>
            Contains extensions methods for <see cref="T:MvvmValidation.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddRequiredRule(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Object}},System.String)">
            <summary>
            Adds a rule that checks that the property represented by <paramref name="propertyExpression"/> is not
            null or empty string. 
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="propertyExpression">Expression that specifies the property to validate. Example: Validate(() =&gt; MyProperty).</param>
            <param name="errorMessage">Error message in case if the property is null or empty.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatable(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{MvvmValidation.IValidatable}})">
            <summary>
            Creates a validation rule that validates the specified child <see cref="T:MvvmValidation.IValidatable"/> object and adds errors
            to this object if invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="childValidatableGetter">Expression for getting the <see cref="T:MvvmValidation.IValidatable"/> object to add as child.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelperExtensions.AddChildValidatableCollection(MvvmValidation.ValidationHelper,System.Linq.Expressions.Expression{System.Func{System.Collections.Generic.IEnumerable{MvvmValidation.IValidatable}}})">
            <summary>
            Creates a validation rule that validates all the <see cref="T:MvvmValidation.IValidatable"/> items in the collection specified in <paramref name="validatableCollectionGetter"/>
            and adds error to this object from all the validatable items in invalid.
            </summary>
            <param name="validator">An instance of <see cref="T:MvvmValidation.ValidationHelper"/> that is used for validation.</param>
            <param name="validatableCollectionGetter">Expression for getting the collection of <see cref="T:MvvmValidation.IValidatable"/> objects to add as child items.</param>
        </member>
        <member name="T:MvvmValidation.ValidationResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.ValidationResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResultExtensions.Combine(MvvmValidation.ValidationResult,MvvmValidation.ValidationResult)">
            <summary>
            Merges <paramref name="firstResult"/> with given <paramref name="secondResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstResult">The first validation result to merge.</param>
            <param name="secondResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.ValidationResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
        <member name="T:MvvmValidation.IValidationResultFormatter">
            <summary>
            Represents a formatter that can be used to format an instance of <see cref="T:MvvmValidation.ValidationResult"/> to a string.
            </summary>
        </member>
        <member name="M:MvvmValidation.IValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>A string representation of <paramref name="validationResult"/></returns>
        </member>
        <member name="T:MvvmValidation.NumberedListValidationResultFormatter">
            <summary>
            An implementation of <see cref="T:MvvmValidation.IValidationResultFormatter"/> that formats the validation result as 
            a numbered list of errors or an empty string if valid.
            </summary>
        </member>
        <member name="M:MvvmValidation.NumberedListValidationResultFormatter.Format(MvvmValidation.ValidationResult)">
            <summary>
            Converts the specified validation result object to a string.
            </summary>
            <param name="validationResult">The validation result to format.</param>
            <returns>
            A string representation of <paramref name="validationResult"/>
            </returns>
        </member>
        <member name="T:MvvmValidation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MvvmValidation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MvvmValidation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:MvvmValidation.Internal.PropertyName">
            <summary>
            Gets property name using lambda expressions.
            </summary>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <typeparam name="T">Type of property's return value</typeparam>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.For(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Boolean)">
            <summary>
            Returns the property name by given expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call PropertyName.For(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="M:MvvmValidation.Internal.PropertyName.GetMemberName(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Gets the member name by give expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="compound"><c>True</c> if the full expression path should be used to build the string. For example, 
            call GetMemberName(() => MyObj.Property.NestedProperty) will result in string "MyObj.Property.NestedProperty".
            If <c>False</c> it will return only the last part, which is "NestedProperty" in the example above.</param>
        </member>
        <member name="T:MvvmValidation.RuleResult">
            <summary>
            Represents the outcome of a validation rule when executed.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.Invalid(System.String)">
            <summary>
            Creates an "Invalid" result with the given error <paramref name="error"/>.
            </summary>
            <param name="error">The error text that describes why this rule is invalid.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents an invalid result.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Valid">
            <summary>
            Creates a "Valid" result.
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents a valid outcome of the rule.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Assert(System.Boolean,System.String)">
            <summary>
            Asserts the specified condition and if <c>false</c> then creates and invalid result with the given <paramref name="errorMessage"/>. 
            If <c>true</c>, returns a valid result.
            </summary>
            <param name="condition">The assertion.</param>
            <param name="errorMessage">The error message in case if the <paramref name="condition"/> is not <c>true</c>.</param>
            <returns>An instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the result of the assertion.</returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.#ctor">
            <summary>
            Creates an empty (valid) instance of <see cref="T:MvvmValidation.RuleResult"/>. 
            The <see cref="M:MvvmValidation.RuleResult.AddError(System.String)"/> method can be used to add errors to the result later.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResult.AddError(System.String)">
            <summary>
            Adds an error to the result.
            </summary>
            <param name="error">The error message to add.</param>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(MvvmValidation.RuleResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.RuleResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:MvvmValidation.RuleResult.IsValid">
            <summary>
            Gets a value indicating whether the validation rule passed (valid).
            </summary>
        </member>
        <member name="P:MvvmValidation.RuleResult.Errors">
            <summary>
            Gets the error messages in case if the target is invalid according to this validation rule.
            </summary>
        </member>
        <member name="T:MvvmValidation.RuleResultExtensions">
            <summary>
            Contains helper extension methods for working with <see cref="T:MvvmValidation.RuleResult"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.RuleResultExtensions.Combine(MvvmValidation.RuleResult,MvvmValidation.RuleResult)">
            <summary>
            Merges <paramref name="firstRuleResult"/> with given <paramref name="secondRuleResult"/> and returns a new instance of <see cref="T:MvvmValidation.ValidationResult"/>
            that represents the merged result (the result that contains errors from both results whithout duplicates).
            </summary>
            <param name="firstRuleResult">The first validation result to merge.</param>
            <param name="secondRuleResult">The second validation result to merge.</param>
            <returns>A new instance of <see cref="T:MvvmValidation.RuleResult"/> that represents the merged result (the result that contains errors from both results whithout duplicates).</returns>
        </member>
        <member name="T:MvvmValidation.ValidationError">
            <summary>
            Represents a validation error.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(MvvmValidation.ValidationError)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationError.op_Implicit(MvvmValidation.ValidationError)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:MvvmValidation.ValidationError"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="error">The error.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:MvvmValidation.ValidationError.ErrorText">
            <summary>
            Gets the error message.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationError.Target">
            <summary>
            Gets the target of the error (a property name or any other arbitrary object).
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationErrorCollection">
            <summary>
            Represents a collection of <see cref="T:MvvmValidation.ValidationError"/> instances.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationHelper">
            <summary>
            Main helper class that contains the functionality of managing validation rules, 
            executing validation using those rules and keeping validation results.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MvvmValidation.ValidationHelper"/> class.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Object,System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateDelegate"/>).</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a simple validation rule.
            </summary>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyExpression"/> parameter.
            </summary>
            <param name="propertyExpression">The target property expression.</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, , () =&gt; RuleResult.Assert(Foo &gt; 10, "Foo must be greater than 10"))
            </code>
            </example>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates two dependent properties.
            </summary>
            <param name="property1Expression">The first target property expression.</param>
            <param name="property2Expression">The second target property expression.</param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, () =&gt; Bar, () =&gt; RuleResult.Assert(Foo &gt; Bar, "Foo must be greater than bar"))
            </code>
            </example>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},System.Func{MvvmValidation.RuleResult})">
            <summary>
            Adds a validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. </param>
            <param name="validateDelegate">
            The validation delegate - a function that returns an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Object,MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates the <paramref name="target"/> object.
            </summary>
            <param name="target">The validation target (object that is being validated by <paramref name="validateAction"/>).</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule.
            </summary>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates a property of an object. The target property is specified in the <paramref name="propertyExpression"/> parameter.
            </summary>
            <param name="propertyExpression">The target property expression.</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, 
            		(onCompleted) =&gt; 
                    {
            			ValidationServiceFacade.ValidateFoo(Foo, result =&gt; onCompleted(RuleResult.Assert(result.IsValid, "Foo must be greater than 10")));
            		})
            </code>
            </example>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Linq.Expressions.Expression{System.Func{System.Object}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates two dependent properties.
            </summary>
            <param name="property1Expression">The first target property expression.</param>
            <param name="property2Expression">The second target property expression.</param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
            <example>
            <code>
            AddRule(() =&gt; Foo, () =&gt; Bar
            		(onCompleted) =&gt; 
                    {
            			ValidationServiceFacade.ValidateFooAndBar(Foo, Bar, result =&gt; onCompleted(RuleResult.Assert(result.IsValid, "Foo must be greater than 10")));
            		})
            </code>
            </example>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.AddAsyncRule(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{System.Object}}},MvvmValidation.AsyncRuleValidateAction)">
            <summary>
            Adds an asynchronious validation rule that validates a collection of dependent properties.
            </summary>
            <param name="properties">The collection of target property expressions. </param>
            <param name="validateAction">
            The validation delegate - a function that performs asyncrhonious validation and calls a continuation callback with an instance 
            of <see cref="T:MvvmValidation.RuleResult"/> that indicated whether the rule has passed and 
            a collection of errors (in not passed).
            </param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult">
            <summary>
            Returns the current validation state (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Object)">
            <summary>
            Returns the current validation state for the given <paramref name="target"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="target">The validation target for which to retrieve the validation state.</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.GetResult(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Returns the current validation state for a property represented by <paramref name="propertyExpression"/> (all errors tracked by this instance of <see cref="T:MvvmValidation.ValidationHelper"/>).
            </summary>
            <param name="propertyExpression">The property for which to retrieve the validation state. Example: GetResult(() =&gt; MyProperty)</param>
            <returns>An instance of <see cref="T:MvvmValidation.ValidationResult"/> that contains an indication whether the object is valid and a collection of errors if not.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Validates (executes validation rules) the property specified in the <paramref name="propertyPathExpression"/> parameter.
            </summary>
            <param name="propertyPathExpression">Expression that specifies the property to validate. Example: Validate(() => MyProperty).</param>
            <returns>Result that indicates whether the given property is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.Validate(System.Object)">
            <summary>
            Validates (executes validation rules) the specified target object.
            </summary>
            <param name="target">The target object to validate.</param>
            <returns>Result that indicates whether the given target object is valid and a collection of errors, if not valid.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAll">
            <summary>
            Executes validation using all validation rules. 
            </summary>
            <returns>Result that indicates whether the validation was succesfull and a collection of errors, if it wasn't.</returns>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Executes validation for the given property asynchronously. 
            Executes all (normal and async) validation rules for the property specified in the <paramref name="propertyPathExpression"/>.
            </summary>
            <param name="propertyPathExpression">Expression for the property to validate. Example: ValidateAsync(() => MyProperty).</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Linq.Expressions.Expression{System.Func{System.Object}},System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation for the given property asynchronously. 
            Executes all (normal and async) validation rules for the property specified in the <paramref name="propertyPathExpression"/>.
            </summary>
            <param name="propertyPathExpression">Expression for the property to validate. Example: ValidateAsync(() => MyProperty, ...).</param>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Object)">
            <summary>
            Executes validation for the given target asynchronously. 
            Executes all (normal and async) validation rules for the target object specified in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to validate.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAsync(System.Object,System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation for the given target asynchronously. 
            Executes all (normal and async) validation rules for the target object specified in the <paramref name="target"/>.
            </summary>
            <param name="target">The target object to validate.</param>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAllAsync">
            <summary>
            Executes validation using all validation rules asynchronously.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.ValidateAllAsync(System.Action{MvvmValidation.ValidationResult})">
            <summary>
            Executes validation using all validation rules asynchronously.
            </summary>
            <param name="onCompleted">Callback to execute when the asynchronous validation is completed. The callback will be executed on the UI thread.</param>
        </member>
        <member name="M:MvvmValidation.ValidationHelper.SuppressValidation">
            <summary>
            Suppresses all the calls to the Validate* methods until the returned <see cref="T:System.IDisposable"/> is disposed
            by calling <see cref="M:System.IDisposable.Dispose"/>. 
            </summary>
            <remarks>
            This method is convenient to use when you want to suppress validation when setting initial value to a property. In this case you would
            wrap the code that sets the property into a <c>using</c> block. Like this:
            <code>
            using (Validation.SuppressValidation()) 
            {
                MyProperty = "Initial Value";
            }
            </code>
            </remarks>
            <returns>An instance of <see cref="T:System.IDisposable"/> that serves as a handle that you can call <see cref="M:System.IDisposable.Dispose"/> on to resume validation. The value can also be used in a <c>using</c> block.</returns>
        </member>
        <member name="P:MvvmValidation.ValidationHelper.AsyncRuleExecutionTimeout">
            <summary>
            Gets or sets a timeout that indicates how much time is allocated for an async rule to complete.
            If a rule did not complete in this timeout, then an exception will be thrown.
            </summary>
        </member>
        <member name="E:MvvmValidation.ValidationHelper.ResultChanged">
            <summary>
            Occurs when the validation result have changed for a property or for the entire entity (the result that is returned by the <see cref="M:MvvmValidation.ValidationHelper.GetResult"/> method).
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationResult">
            <summary>
            Encapsulates result of a validation. Contains a boolean <see cref="P:MvvmValidation.ValidationResult.IsValid"/> and a collection of errors <see cref="P:MvvmValidation.ValidationResult.ErrorList"/>.
            </summary>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString(MvvmValidation.IValidationResultFormatter)">
            <summary>
            Formats this instance to a string using given <see cref="T:MvvmValidation.IValidationResultFormatter"/>.
            </summary>
            <param name="formatter">The formatter that can format the validation result.</param>
            <returns>
            A string that represents this validation result.
            </returns>
        </member>
        <member name="M:MvvmValidation.ValidationResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:MvvmValidation.ValidationResult.ErrorList">
            <summary>
            Gets the list of errors if any. If valid, returns an empty collection.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the validation was sucessful. If not, see <see cref="P:MvvmValidation.ValidationResult.ErrorList"/> for the list of errors.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResult.Item(System.Object)">
            <summary>
            Gets an error by <paramref name="target"/>, or <c>null</c> if valid.
            </summary>
        </member>
        <member name="T:MvvmValidation.ValidationResultChangedEventArgs">
            <summary>
            Contains arguments for the <see cref="E:MvvmValidation.ValidationHelper.ResultChanged"/> event.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.Target">
            <summary>
            Gets the target, for which the validation result has changed.
            </summary>
        </member>
        <member name="P:MvvmValidation.ValidationResultChangedEventArgs.NewResult">
            <summary>
            Gets the new validation result.
            </summary>
        </member>
    </members>
</doc>
